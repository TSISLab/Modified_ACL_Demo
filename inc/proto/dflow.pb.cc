// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dflow.proto

#include "dflow.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_dflow_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlowEdge_dflow_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dflow_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessFunc_dflow_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dflow_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProcessPoint_dflow_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dflow_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProcessPoint_AttrsEntry_DoNotUse_dflow_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ge_5fir_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AttrDef_ge_5fir_2eproto;
namespace dataflow {
class FlowEdgeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlowEdge> _instance;
} _FlowEdge_default_instance_;
class ProcessFuncDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessFunc> _instance;
} _ProcessFunc_default_instance_;
class ProcessPoint_InvokePpsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessPoint_InvokePpsEntry_DoNotUse> _instance;
} _ProcessPoint_InvokePpsEntry_DoNotUse_default_instance_;
class ProcessPoint_AttrsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessPoint_AttrsEntry_DoNotUse> _instance;
} _ProcessPoint_AttrsEntry_DoNotUse_default_instance_;
class ProcessPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessPoint> _instance;
} _ProcessPoint_default_instance_;
}  // namespace dataflow
static void InitDefaultsscc_info_FlowEdge_dflow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dataflow::_FlowEdge_default_instance_;
    new (ptr) ::dataflow::FlowEdge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dataflow::FlowEdge::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlowEdge_dflow_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FlowEdge_dflow_2eproto}, {}};

static void InitDefaultsscc_info_ProcessFunc_dflow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dataflow::_ProcessFunc_default_instance_;
    new (ptr) ::dataflow::ProcessFunc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dataflow::ProcessFunc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessFunc_dflow_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcessFunc_dflow_2eproto}, {}};

static void InitDefaultsscc_info_ProcessPoint_dflow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dataflow::_ProcessPoint_InvokePpsEntry_DoNotUse_default_instance_;
    new (ptr) ::dataflow::ProcessPoint_InvokePpsEntry_DoNotUse();
  }
  {
    void* ptr = &::dataflow::_ProcessPoint_default_instance_;
    new (ptr) ::dataflow::ProcessPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dataflow::ProcessPoint_InvokePpsEntry_DoNotUse::InitAsDefaultInstance();
  ::dataflow::ProcessPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProcessPoint_dflow_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ProcessPoint_dflow_2eproto}, {
      &scc_info_ProcessFunc_dflow_2eproto.base,
      &scc_info_FlowEdge_dflow_2eproto.base,
      &scc_info_ProcessPoint_AttrsEntry_DoNotUse_dflow_2eproto.base,}};

static void InitDefaultsscc_info_ProcessPoint_AttrsEntry_DoNotUse_dflow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dataflow::_ProcessPoint_AttrsEntry_DoNotUse_default_instance_;
    new (ptr) ::dataflow::ProcessPoint_AttrsEntry_DoNotUse();
  }
  ::dataflow::ProcessPoint_AttrsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProcessPoint_AttrsEntry_DoNotUse_dflow_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProcessPoint_AttrsEntry_DoNotUse_dflow_2eproto}, {
      &scc_info_AttrDef_ge_5fir_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dflow_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dflow_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dflow_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dflow_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dataflow::FlowEdge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dataflow::FlowEdge, node_name_),
  PROTOBUF_FIELD_OFFSET(::dataflow::FlowEdge, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dataflow::ProcessFunc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dataflow::ProcessFunc, name_),
  PROTOBUF_FIELD_OFFSET(::dataflow::ProcessFunc, in_index_),
  PROTOBUF_FIELD_OFFSET(::dataflow::ProcessFunc, out_index_),
  PROTOBUF_FIELD_OFFSET(::dataflow::ProcessPoint_InvokePpsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dataflow::ProcessPoint_InvokePpsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dataflow::ProcessPoint_InvokePpsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dataflow::ProcessPoint_InvokePpsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::dataflow::ProcessPoint_AttrsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dataflow::ProcessPoint_AttrsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dataflow::ProcessPoint_AttrsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dataflow::ProcessPoint_AttrsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dataflow::ProcessPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dataflow::ProcessPoint, name_),
  PROTOBUF_FIELD_OFFSET(::dataflow::ProcessPoint, type_),
  PROTOBUF_FIELD_OFFSET(::dataflow::ProcessPoint, compile_cfg_file_),
  PROTOBUF_FIELD_OFFSET(::dataflow::ProcessPoint, funcs_),
  PROTOBUF_FIELD_OFFSET(::dataflow::ProcessPoint, graphs_),
  PROTOBUF_FIELD_OFFSET(::dataflow::ProcessPoint, invoke_pps_),
  PROTOBUF_FIELD_OFFSET(::dataflow::ProcessPoint, in_edges_),
  PROTOBUF_FIELD_OFFSET(::dataflow::ProcessPoint, out_edges_),
  PROTOBUF_FIELD_OFFSET(::dataflow::ProcessPoint, attrs_),
  PROTOBUF_FIELD_OFFSET(::dataflow::ProcessPoint, is_built_in_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::dataflow::FlowEdge)},
  { 7, -1, sizeof(::dataflow::ProcessFunc)},
  { 15, 22, sizeof(::dataflow::ProcessPoint_InvokePpsEntry_DoNotUse)},
  { 24, 31, sizeof(::dataflow::ProcessPoint_AttrsEntry_DoNotUse)},
  { 33, -1, sizeof(::dataflow::ProcessPoint)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dataflow::_FlowEdge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dataflow::_ProcessFunc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dataflow::_ProcessPoint_InvokePpsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dataflow::_ProcessPoint_AttrsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dataflow::_ProcessPoint_default_instance_),
};

const char descriptor_table_protodef_dflow_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013dflow.proto\022\010dataflow\032\013ge_ir.proto\",\n\010"
  "FlowEdge\022\021\n\tnode_name\030\001 \001(\t\022\r\n\005index\030\002 \001"
  "(\r\"@\n\013ProcessFunc\022\014\n\004name\030\001 \001(\t\022\020\n\010in_in"
  "dex\030\002 \003(\r\022\021\n\tout_index\030\003 \003(\r\"\267\004\n\014Process"
  "Point\022\014\n\004name\030\001 \001(\t\0225\n\004type\030\002 \001(\0162\'.data"
  "flow.ProcessPoint.ProcessPointType\022\030\n\020co"
  "mpile_cfg_file\030\003 \001(\t\022$\n\005funcs\030\004 \003(\0132\025.da"
  "taflow.ProcessFunc\022\016\n\006graphs\030\005 \003(\t\0229\n\nin"
  "voke_pps\030\006 \003(\0132%.dataflow.ProcessPoint.I"
  "nvokePpsEntry\022$\n\010in_edges\030\007 \003(\0132\022.datafl"
  "ow.FlowEdge\022%\n\tout_edges\030\010 \003(\0132\022.dataflo"
  "w.FlowEdge\0220\n\005attrs\030\t \003(\0132!.dataflow.Pro"
  "cessPoint.AttrsEntry\022\023\n\013is_built_in\030\n \001("
  "\010\032H\n\016InvokePpsEntry\022\013\n\003key\030\001 \001(\t\022%\n\005valu"
  "e\030\002 \001(\0132\026.dataflow.ProcessPoint:\0028\001\032\?\n\nA"
  "ttrsEntry\022\013\n\003key\030\001 \001(\t\022 \n\005value\030\002 \001(\0132\021."
  "ge.proto.AttrDef:\0028\001\"8\n\020ProcessPointType"
  "\022\014\n\010FUNCTION\020\000\022\t\n\005GRAPH\020\001\022\013\n\007INVALID\020\002b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dflow_2eproto_deps[1] = {
  &::descriptor_table_ge_5fir_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_dflow_2eproto_sccs[4] = {
  &scc_info_FlowEdge_dflow_2eproto.base,
  &scc_info_ProcessFunc_dflow_2eproto.base,
  &scc_info_ProcessPoint_dflow_2eproto.base,
  &scc_info_ProcessPoint_AttrsEntry_DoNotUse_dflow_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dflow_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dflow_2eproto = {
  false, false, descriptor_table_protodef_dflow_2eproto, "dflow.proto", 726,
  &descriptor_table_dflow_2eproto_once, descriptor_table_dflow_2eproto_sccs, descriptor_table_dflow_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_dflow_2eproto::offsets,
  file_level_metadata_dflow_2eproto, 5, file_level_enum_descriptors_dflow_2eproto, file_level_service_descriptors_dflow_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dflow_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_dflow_2eproto)), true);
namespace dataflow {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProcessPoint_ProcessPointType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dflow_2eproto);
  return file_level_enum_descriptors_dflow_2eproto[0];
}
bool ProcessPoint_ProcessPointType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ProcessPoint_ProcessPointType ProcessPoint::FUNCTION;
constexpr ProcessPoint_ProcessPointType ProcessPoint::GRAPH;
constexpr ProcessPoint_ProcessPointType ProcessPoint::INVALID;
constexpr ProcessPoint_ProcessPointType ProcessPoint::ProcessPointType_MIN;
constexpr ProcessPoint_ProcessPointType ProcessPoint::ProcessPointType_MAX;
constexpr int ProcessPoint::ProcessPointType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void FlowEdge::InitAsDefaultInstance() {
}
class FlowEdge::_Internal {
 public:
};

FlowEdge::FlowEdge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dataflow.FlowEdge)
}
FlowEdge::FlowEdge(const FlowEdge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_name().empty()) {
    node_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_node_name(),
      GetArena());
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:dataflow.FlowEdge)
}

void FlowEdge::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FlowEdge_dflow_2eproto.base);
  node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_ = 0u;
}

FlowEdge::~FlowEdge() {
  // @@protoc_insertion_point(destructor:dataflow.FlowEdge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlowEdge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  node_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FlowEdge::ArenaDtor(void* object) {
  FlowEdge* _this = reinterpret_cast< FlowEdge* >(object);
  (void)_this;
}
void FlowEdge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlowEdge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlowEdge& FlowEdge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlowEdge_dflow_2eproto.base);
  return *internal_default_instance();
}


void FlowEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:dataflow.FlowEdge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowEdge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string node_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_node_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dataflow.FlowEdge.node_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlowEdge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dataflow.FlowEdge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_name = 1;
  if (this->node_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_name().data(), static_cast<int>(this->_internal_node_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dataflow.FlowEdge.node_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_node_name(), target);
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dataflow.FlowEdge)
  return target;
}

size_t FlowEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dataflow.FlowEdge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_name = 1;
  if (this->node_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_name());
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowEdge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dataflow.FlowEdge)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowEdge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlowEdge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dataflow.FlowEdge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dataflow.FlowEdge)
    MergeFrom(*source);
  }
}

void FlowEdge::MergeFrom(const FlowEdge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dataflow.FlowEdge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_name().size() > 0) {
    _internal_set_node_name(from._internal_node_name());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void FlowEdge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dataflow.FlowEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowEdge::CopyFrom(const FlowEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dataflow.FlowEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowEdge::IsInitialized() const {
  return true;
}

void FlowEdge::InternalSwap(FlowEdge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  node_name_.Swap(&other->node_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowEdge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessFunc::InitAsDefaultInstance() {
}
class ProcessFunc::_Internal {
 public:
};

ProcessFunc::ProcessFunc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  in_index_(arena),
  out_index_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dataflow.ProcessFunc)
}
ProcessFunc::ProcessFunc(const ProcessFunc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      in_index_(from.in_index_),
      out_index_(from.out_index_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:dataflow.ProcessFunc)
}

void ProcessFunc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessFunc_dflow_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ProcessFunc::~ProcessFunc() {
  // @@protoc_insertion_point(destructor:dataflow.ProcessFunc)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProcessFunc::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProcessFunc::ArenaDtor(void* object) {
  ProcessFunc* _this = reinterpret_cast< ProcessFunc* >(object);
  (void)_this;
}
void ProcessFunc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessFunc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessFunc& ProcessFunc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessFunc_dflow_2eproto.base);
  return *internal_default_instance();
}


void ProcessFunc::Clear() {
// @@protoc_insertion_point(message_clear_start:dataflow.ProcessFunc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_index_.Clear();
  out_index_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessFunc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dataflow.ProcessFunc.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 in_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_in_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_in_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 out_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_out_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_out_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessFunc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dataflow.ProcessFunc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dataflow.ProcessFunc.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated uint32 in_index = 2;
  {
    int byte_size = _in_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_in_index(), byte_size, target);
    }
  }

  // repeated uint32 out_index = 3;
  {
    int byte_size = _out_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_out_index(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dataflow.ProcessFunc)
  return target;
}

size_t ProcessFunc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dataflow.ProcessFunc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 in_index = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->in_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _in_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 out_index = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->out_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _out_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessFunc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dataflow.ProcessFunc)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessFunc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessFunc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dataflow.ProcessFunc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dataflow.ProcessFunc)
    MergeFrom(*source);
  }
}

void ProcessFunc::MergeFrom(const ProcessFunc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dataflow.ProcessFunc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  in_index_.MergeFrom(from.in_index_);
  out_index_.MergeFrom(from.out_index_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void ProcessFunc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dataflow.ProcessFunc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessFunc::CopyFrom(const ProcessFunc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dataflow.ProcessFunc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessFunc::IsInitialized() const {
  return true;
}

void ProcessFunc::InternalSwap(ProcessFunc* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  in_index_.InternalSwap(&other->in_index_);
  out_index_.InternalSwap(&other->out_index_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessFunc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ProcessPoint_InvokePpsEntry_DoNotUse::ProcessPoint_InvokePpsEntry_DoNotUse() {}
ProcessPoint_InvokePpsEntry_DoNotUse::ProcessPoint_InvokePpsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProcessPoint_InvokePpsEntry_DoNotUse::MergeFrom(const ProcessPoint_InvokePpsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProcessPoint_InvokePpsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ProcessPoint_InvokePpsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ProcessPoint_AttrsEntry_DoNotUse::ProcessPoint_AttrsEntry_DoNotUse() {}
ProcessPoint_AttrsEntry_DoNotUse::ProcessPoint_AttrsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProcessPoint_AttrsEntry_DoNotUse::MergeFrom(const ProcessPoint_AttrsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProcessPoint_AttrsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ProcessPoint_AttrsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ProcessPoint::InitAsDefaultInstance() {
}
class ProcessPoint::_Internal {
 public:
};

void ProcessPoint::clear_attrs() {
  attrs_.Clear();
}
ProcessPoint::ProcessPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  funcs_(arena),
  graphs_(arena),
  invoke_pps_(arena),
  in_edges_(arena),
  out_edges_(arena),
  attrs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dataflow.ProcessPoint)
}
ProcessPoint::ProcessPoint(const ProcessPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      funcs_(from.funcs_),
      graphs_(from.graphs_),
      in_edges_(from.in_edges_),
      out_edges_(from.out_edges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invoke_pps_.MergeFrom(from.invoke_pps_);
  attrs_.MergeFrom(from.attrs_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  compile_cfg_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_compile_cfg_file().empty()) {
    compile_cfg_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_compile_cfg_file(),
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_built_in_) -
    reinterpret_cast<char*>(&type_)) + sizeof(is_built_in_));
  // @@protoc_insertion_point(copy_constructor:dataflow.ProcessPoint)
}

void ProcessPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessPoint_dflow_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  compile_cfg_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_built_in_) -
      reinterpret_cast<char*>(&type_)) + sizeof(is_built_in_));
}

ProcessPoint::~ProcessPoint() {
  // @@protoc_insertion_point(destructor:dataflow.ProcessPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProcessPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  compile_cfg_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProcessPoint::ArenaDtor(void* object) {
  ProcessPoint* _this = reinterpret_cast< ProcessPoint* >(object);
  (void)_this;
}
void ProcessPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessPoint& ProcessPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessPoint_dflow_2eproto.base);
  return *internal_default_instance();
}


void ProcessPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:dataflow.ProcessPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  funcs_.Clear();
  graphs_.Clear();
  invoke_pps_.Clear();
  in_edges_.Clear();
  out_edges_.Clear();
  attrs_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  compile_cfg_file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_built_in_) -
      reinterpret_cast<char*>(&type_)) + sizeof(is_built_in_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dataflow.ProcessPoint.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dataflow.ProcessPoint.ProcessPointType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::dataflow::ProcessPoint_ProcessPointType>(val));
        } else goto handle_unusual;
        continue;
      // string compile_cfg_file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_compile_cfg_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dataflow.ProcessPoint.compile_cfg_file"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .dataflow.ProcessFunc funcs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_funcs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string graphs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_graphs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dataflow.ProcessPoint.graphs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .dataflow.ProcessPoint> invoke_pps = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&invoke_pps_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .dataflow.FlowEdge in_edges = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_in_edges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .dataflow.FlowEdge out_edges = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_out_edges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .ge.proto.AttrDef> attrs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&attrs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // bool is_built_in = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          is_built_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dataflow.ProcessPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dataflow.ProcessPoint.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .dataflow.ProcessPoint.ProcessPointType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // string compile_cfg_file = 3;
  if (this->compile_cfg_file().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_compile_cfg_file().data(), static_cast<int>(this->_internal_compile_cfg_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dataflow.ProcessPoint.compile_cfg_file");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_compile_cfg_file(), target);
  }

  // repeated .dataflow.ProcessFunc funcs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_funcs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_funcs(i), target, stream);
  }

  // repeated string graphs = 5;
  for (int i = 0, n = this->_internal_graphs_size(); i < n; i++) {
    const auto& s = this->_internal_graphs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dataflow.ProcessPoint.graphs");
    target = stream->WriteString(5, s, target);
  }

  // map<string, .dataflow.ProcessPoint> invoke_pps = 6;
  if (!this->_internal_invoke_pps().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dataflow::ProcessPoint >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dataflow.ProcessPoint.InvokePpsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_invoke_pps().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_invoke_pps().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dataflow::ProcessPoint >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dataflow::ProcessPoint >::const_iterator
          it = this->_internal_invoke_pps().begin();
          it != this->_internal_invoke_pps().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ProcessPoint_InvokePpsEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dataflow::ProcessPoint >::const_iterator
          it = this->_internal_invoke_pps().begin();
          it != this->_internal_invoke_pps().end(); ++it) {
        target = ProcessPoint_InvokePpsEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .dataflow.FlowEdge in_edges = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_in_edges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_in_edges(i), target, stream);
  }

  // repeated .dataflow.FlowEdge out_edges = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_out_edges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_out_edges(i), target, stream);
  }

  // map<string, .ge.proto.AttrDef> attrs = 9;
  if (!this->_internal_attrs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dataflow.ProcessPoint.AttrsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_attrs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_attrs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >::const_iterator
          it = this->_internal_attrs().begin();
          it != this->_internal_attrs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ProcessPoint_AttrsEntry_DoNotUse::Funcs::InternalSerialize(9, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >::const_iterator
          it = this->_internal_attrs().begin();
          it != this->_internal_attrs().end(); ++it) {
        target = ProcessPoint_AttrsEntry_DoNotUse::Funcs::InternalSerialize(9, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bool is_built_in = 10;
  if (this->is_built_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_built_in(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dataflow.ProcessPoint)
  return target;
}

size_t ProcessPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dataflow.ProcessPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dataflow.ProcessFunc funcs = 4;
  total_size += 1UL * this->_internal_funcs_size();
  for (const auto& msg : this->funcs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string graphs = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(graphs_.size());
  for (int i = 0, n = graphs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      graphs_.Get(i));
  }

  // map<string, .dataflow.ProcessPoint> invoke_pps = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_invoke_pps_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dataflow::ProcessPoint >::const_iterator
      it = this->_internal_invoke_pps().begin();
      it != this->_internal_invoke_pps().end(); ++it) {
    total_size += ProcessPoint_InvokePpsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .dataflow.FlowEdge in_edges = 7;
  total_size += 1UL * this->_internal_in_edges_size();
  for (const auto& msg : this->in_edges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .dataflow.FlowEdge out_edges = 8;
  total_size += 1UL * this->_internal_out_edges_size();
  for (const auto& msg : this->out_edges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .ge.proto.AttrDef> attrs = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attrs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >::const_iterator
      it = this->_internal_attrs().begin();
      it != this->_internal_attrs().end(); ++it) {
    total_size += ProcessPoint_AttrsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string compile_cfg_file = 3;
  if (this->compile_cfg_file().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_compile_cfg_file());
  }

  // .dataflow.ProcessPoint.ProcessPointType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool is_built_in = 10;
  if (this->is_built_in() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dataflow.ProcessPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dataflow.ProcessPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dataflow.ProcessPoint)
    MergeFrom(*source);
  }
}

void ProcessPoint::MergeFrom(const ProcessPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dataflow.ProcessPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  funcs_.MergeFrom(from.funcs_);
  graphs_.MergeFrom(from.graphs_);
  invoke_pps_.MergeFrom(from.invoke_pps_);
  in_edges_.MergeFrom(from.in_edges_);
  out_edges_.MergeFrom(from.out_edges_);
  attrs_.MergeFrom(from.attrs_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.compile_cfg_file().size() > 0) {
    _internal_set_compile_cfg_file(from._internal_compile_cfg_file());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.is_built_in() != 0) {
    _internal_set_is_built_in(from._internal_is_built_in());
  }
}

void ProcessPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dataflow.ProcessPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessPoint::CopyFrom(const ProcessPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dataflow.ProcessPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessPoint::IsInitialized() const {
  return true;
}

void ProcessPoint::InternalSwap(ProcessPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  funcs_.InternalSwap(&other->funcs_);
  graphs_.InternalSwap(&other->graphs_);
  invoke_pps_.Swap(&other->invoke_pps_);
  in_edges_.InternalSwap(&other->in_edges_);
  out_edges_.InternalSwap(&other->out_edges_);
  attrs_.Swap(&other->attrs_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  compile_cfg_file_.Swap(&other->compile_cfg_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessPoint, is_built_in_)
      + sizeof(ProcessPoint::is_built_in_)
      - PROTOBUF_FIELD_OFFSET(ProcessPoint, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dataflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dataflow::FlowEdge* Arena::CreateMaybeMessage< ::dataflow::FlowEdge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dataflow::FlowEdge >(arena);
}
template<> PROTOBUF_NOINLINE ::dataflow::ProcessFunc* Arena::CreateMaybeMessage< ::dataflow::ProcessFunc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dataflow::ProcessFunc >(arena);
}
template<> PROTOBUF_NOINLINE ::dataflow::ProcessPoint_InvokePpsEntry_DoNotUse* Arena::CreateMaybeMessage< ::dataflow::ProcessPoint_InvokePpsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dataflow::ProcessPoint_InvokePpsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dataflow::ProcessPoint_AttrsEntry_DoNotUse* Arena::CreateMaybeMessage< ::dataflow::ProcessPoint_AttrsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dataflow::ProcessPoint_AttrsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dataflow::ProcessPoint* Arena::CreateMaybeMessage< ::dataflow::ProcessPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dataflow::ProcessPoint >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
