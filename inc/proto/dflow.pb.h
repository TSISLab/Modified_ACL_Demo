// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dflow.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dflow_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dflow_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ge_ir.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dflow_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dflow_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dflow_2eproto;
namespace dataflow {
class FlowEdge;
class FlowEdgeDefaultTypeInternal;
extern FlowEdgeDefaultTypeInternal _FlowEdge_default_instance_;
class ProcessFunc;
class ProcessFuncDefaultTypeInternal;
extern ProcessFuncDefaultTypeInternal _ProcessFunc_default_instance_;
class ProcessPoint;
class ProcessPointDefaultTypeInternal;
extern ProcessPointDefaultTypeInternal _ProcessPoint_default_instance_;
class ProcessPoint_AttrsEntry_DoNotUse;
class ProcessPoint_AttrsEntry_DoNotUseDefaultTypeInternal;
extern ProcessPoint_AttrsEntry_DoNotUseDefaultTypeInternal _ProcessPoint_AttrsEntry_DoNotUse_default_instance_;
class ProcessPoint_InvokePpsEntry_DoNotUse;
class ProcessPoint_InvokePpsEntry_DoNotUseDefaultTypeInternal;
extern ProcessPoint_InvokePpsEntry_DoNotUseDefaultTypeInternal _ProcessPoint_InvokePpsEntry_DoNotUse_default_instance_;
}  // namespace dataflow
PROTOBUF_NAMESPACE_OPEN
template<> ::dataflow::FlowEdge* Arena::CreateMaybeMessage<::dataflow::FlowEdge>(Arena*);
template<> ::dataflow::ProcessFunc* Arena::CreateMaybeMessage<::dataflow::ProcessFunc>(Arena*);
template<> ::dataflow::ProcessPoint* Arena::CreateMaybeMessage<::dataflow::ProcessPoint>(Arena*);
template<> ::dataflow::ProcessPoint_AttrsEntry_DoNotUse* Arena::CreateMaybeMessage<::dataflow::ProcessPoint_AttrsEntry_DoNotUse>(Arena*);
template<> ::dataflow::ProcessPoint_InvokePpsEntry_DoNotUse* Arena::CreateMaybeMessage<::dataflow::ProcessPoint_InvokePpsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dataflow {

enum ProcessPoint_ProcessPointType : int {
  ProcessPoint_ProcessPointType_FUNCTION = 0,
  ProcessPoint_ProcessPointType_GRAPH = 1,
  ProcessPoint_ProcessPointType_INVALID = 2,
  ProcessPoint_ProcessPointType_ProcessPoint_ProcessPointType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ProcessPoint_ProcessPointType_ProcessPoint_ProcessPointType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ProcessPoint_ProcessPointType_IsValid(int value);
constexpr ProcessPoint_ProcessPointType ProcessPoint_ProcessPointType_ProcessPointType_MIN = ProcessPoint_ProcessPointType_FUNCTION;
constexpr ProcessPoint_ProcessPointType ProcessPoint_ProcessPointType_ProcessPointType_MAX = ProcessPoint_ProcessPointType_INVALID;
constexpr int ProcessPoint_ProcessPointType_ProcessPointType_ARRAYSIZE = ProcessPoint_ProcessPointType_ProcessPointType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProcessPoint_ProcessPointType_descriptor();
template<typename T>
inline const std::string& ProcessPoint_ProcessPointType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProcessPoint_ProcessPointType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProcessPoint_ProcessPointType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProcessPoint_ProcessPointType_descriptor(), enum_t_value);
}
inline bool ProcessPoint_ProcessPointType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProcessPoint_ProcessPointType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProcessPoint_ProcessPointType>(
    ProcessPoint_ProcessPointType_descriptor(), name, value);
}
// ===================================================================

class FlowEdge PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dataflow.FlowEdge) */ {
 public:
  inline FlowEdge() : FlowEdge(nullptr) {}
  virtual ~FlowEdge();

  FlowEdge(const FlowEdge& from);
  FlowEdge(FlowEdge&& from) noexcept
    : FlowEdge() {
    *this = ::std::move(from);
  }

  inline FlowEdge& operator=(const FlowEdge& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlowEdge& operator=(FlowEdge&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlowEdge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlowEdge* internal_default_instance() {
    return reinterpret_cast<const FlowEdge*>(
               &_FlowEdge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FlowEdge& a, FlowEdge& b) {
    a.Swap(&b);
  }
  inline void Swap(FlowEdge* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlowEdge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlowEdge* New() const final {
    return CreateMaybeMessage<FlowEdge>(nullptr);
  }

  FlowEdge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlowEdge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlowEdge& from);
  void MergeFrom(const FlowEdge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlowEdge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dataflow.FlowEdge";
  }
  protected:
  explicit FlowEdge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dflow_2eproto);
    return ::descriptor_table_dflow_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeNameFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // string node_name = 1;
  void clear_node_name();
  const std::string& node_name() const;
  void set_node_name(const std::string& value);
  void set_node_name(std::string&& value);
  void set_node_name(const char* value);
  void set_node_name(const char* value, size_t size);
  std::string* mutable_node_name();
  std::string* release_node_name();
  void set_allocated_node_name(std::string* node_name);
  private:
  const std::string& _internal_node_name() const;
  void _internal_set_node_name(const std::string& value);
  std::string* _internal_mutable_node_name();
  public:

  // uint32 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:dataflow.FlowEdge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dflow_2eproto;
};
// -------------------------------------------------------------------

class ProcessFunc PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dataflow.ProcessFunc) */ {
 public:
  inline ProcessFunc() : ProcessFunc(nullptr) {}
  virtual ~ProcessFunc();

  ProcessFunc(const ProcessFunc& from);
  ProcessFunc(ProcessFunc&& from) noexcept
    : ProcessFunc() {
    *this = ::std::move(from);
  }

  inline ProcessFunc& operator=(const ProcessFunc& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessFunc& operator=(ProcessFunc&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessFunc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessFunc* internal_default_instance() {
    return reinterpret_cast<const ProcessFunc*>(
               &_ProcessFunc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProcessFunc& a, ProcessFunc& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessFunc* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessFunc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessFunc* New() const final {
    return CreateMaybeMessage<ProcessFunc>(nullptr);
  }

  ProcessFunc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessFunc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessFunc& from);
  void MergeFrom(const ProcessFunc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessFunc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dataflow.ProcessFunc";
  }
  protected:
  explicit ProcessFunc(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dflow_2eproto);
    return ::descriptor_table_dflow_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInIndexFieldNumber = 2,
    kOutIndexFieldNumber = 3,
    kNameFieldNumber = 1,
  };
  // repeated uint32 in_index = 2;
  int in_index_size() const;
  private:
  int _internal_in_index_size() const;
  public:
  void clear_in_index();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_in_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_in_index() const;
  void _internal_add_in_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_in_index();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 in_index(int index) const;
  void set_in_index(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_in_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      in_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_in_index();

  // repeated uint32 out_index = 3;
  int out_index_size() const;
  private:
  int _internal_out_index_size() const;
  public:
  void clear_out_index();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_out_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_out_index() const;
  void _internal_add_out_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_out_index();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 out_index(int index) const;
  void set_out_index(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_out_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      out_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_out_index();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:dataflow.ProcessFunc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > in_index_;
  mutable std::atomic<int> _in_index_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > out_index_;
  mutable std::atomic<int> _out_index_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dflow_2eproto;
};
// -------------------------------------------------------------------

class ProcessPoint_InvokePpsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ProcessPoint_InvokePpsEntry_DoNotUse, 
    std::string, ::dataflow::ProcessPoint,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ProcessPoint_InvokePpsEntry_DoNotUse, 
    std::string, ::dataflow::ProcessPoint,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ProcessPoint_InvokePpsEntry_DoNotUse();
  explicit ProcessPoint_InvokePpsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ProcessPoint_InvokePpsEntry_DoNotUse& other);
  static const ProcessPoint_InvokePpsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ProcessPoint_InvokePpsEntry_DoNotUse*>(&_ProcessPoint_InvokePpsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dataflow.ProcessPoint.InvokePpsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dflow_2eproto);
    return ::descriptor_table_dflow_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class ProcessPoint_AttrsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ProcessPoint_AttrsEntry_DoNotUse, 
    std::string, ::ge::proto::AttrDef,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ProcessPoint_AttrsEntry_DoNotUse, 
    std::string, ::ge::proto::AttrDef,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ProcessPoint_AttrsEntry_DoNotUse();
  explicit ProcessPoint_AttrsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ProcessPoint_AttrsEntry_DoNotUse& other);
  static const ProcessPoint_AttrsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ProcessPoint_AttrsEntry_DoNotUse*>(&_ProcessPoint_AttrsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dataflow.ProcessPoint.AttrsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dflow_2eproto);
    return ::descriptor_table_dflow_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class ProcessPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dataflow.ProcessPoint) */ {
 public:
  inline ProcessPoint() : ProcessPoint(nullptr) {}
  virtual ~ProcessPoint();

  ProcessPoint(const ProcessPoint& from);
  ProcessPoint(ProcessPoint&& from) noexcept
    : ProcessPoint() {
    *this = ::std::move(from);
  }

  inline ProcessPoint& operator=(const ProcessPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessPoint& operator=(ProcessPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessPoint* internal_default_instance() {
    return reinterpret_cast<const ProcessPoint*>(
               &_ProcessPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ProcessPoint& a, ProcessPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessPoint* New() const final {
    return CreateMaybeMessage<ProcessPoint>(nullptr);
  }

  ProcessPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessPoint& from);
  void MergeFrom(const ProcessPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dataflow.ProcessPoint";
  }
  protected:
  explicit ProcessPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dflow_2eproto);
    return ::descriptor_table_dflow_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  typedef ProcessPoint_ProcessPointType ProcessPointType;
  static constexpr ProcessPointType FUNCTION =
    ProcessPoint_ProcessPointType_FUNCTION;
  static constexpr ProcessPointType GRAPH =
    ProcessPoint_ProcessPointType_GRAPH;
  static constexpr ProcessPointType INVALID =
    ProcessPoint_ProcessPointType_INVALID;
  static inline bool ProcessPointType_IsValid(int value) {
    return ProcessPoint_ProcessPointType_IsValid(value);
  }
  static constexpr ProcessPointType ProcessPointType_MIN =
    ProcessPoint_ProcessPointType_ProcessPointType_MIN;
  static constexpr ProcessPointType ProcessPointType_MAX =
    ProcessPoint_ProcessPointType_ProcessPointType_MAX;
  static constexpr int ProcessPointType_ARRAYSIZE =
    ProcessPoint_ProcessPointType_ProcessPointType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ProcessPointType_descriptor() {
    return ProcessPoint_ProcessPointType_descriptor();
  }
  template<typename T>
  static inline const std::string& ProcessPointType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ProcessPointType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ProcessPointType_Name.");
    return ProcessPoint_ProcessPointType_Name(enum_t_value);
  }
  static inline bool ProcessPointType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ProcessPointType* value) {
    return ProcessPoint_ProcessPointType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFuncsFieldNumber = 4,
    kGraphsFieldNumber = 5,
    kInvokePpsFieldNumber = 6,
    kInEdgesFieldNumber = 7,
    kOutEdgesFieldNumber = 8,
    kAttrsFieldNumber = 9,
    kNameFieldNumber = 1,
    kCompileCfgFileFieldNumber = 3,
    kTypeFieldNumber = 2,
    kIsBuiltInFieldNumber = 10,
  };
  // repeated .dataflow.ProcessFunc funcs = 4;
  int funcs_size() const;
  private:
  int _internal_funcs_size() const;
  public:
  void clear_funcs();
  ::dataflow::ProcessFunc* mutable_funcs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dataflow::ProcessFunc >*
      mutable_funcs();
  private:
  const ::dataflow::ProcessFunc& _internal_funcs(int index) const;
  ::dataflow::ProcessFunc* _internal_add_funcs();
  public:
  const ::dataflow::ProcessFunc& funcs(int index) const;
  ::dataflow::ProcessFunc* add_funcs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dataflow::ProcessFunc >&
      funcs() const;

  // repeated string graphs = 5;
  int graphs_size() const;
  private:
  int _internal_graphs_size() const;
  public:
  void clear_graphs();
  const std::string& graphs(int index) const;
  std::string* mutable_graphs(int index);
  void set_graphs(int index, const std::string& value);
  void set_graphs(int index, std::string&& value);
  void set_graphs(int index, const char* value);
  void set_graphs(int index, const char* value, size_t size);
  std::string* add_graphs();
  void add_graphs(const std::string& value);
  void add_graphs(std::string&& value);
  void add_graphs(const char* value);
  void add_graphs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& graphs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_graphs();
  private:
  const std::string& _internal_graphs(int index) const;
  std::string* _internal_add_graphs();
  public:

  // map<string, .dataflow.ProcessPoint> invoke_pps = 6;
  int invoke_pps_size() const;
  private:
  int _internal_invoke_pps_size() const;
  public:
  void clear_invoke_pps();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dataflow::ProcessPoint >&
      _internal_invoke_pps() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dataflow::ProcessPoint >*
      _internal_mutable_invoke_pps();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dataflow::ProcessPoint >&
      invoke_pps() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dataflow::ProcessPoint >*
      mutable_invoke_pps();

  // repeated .dataflow.FlowEdge in_edges = 7;
  int in_edges_size() const;
  private:
  int _internal_in_edges_size() const;
  public:
  void clear_in_edges();
  ::dataflow::FlowEdge* mutable_in_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dataflow::FlowEdge >*
      mutable_in_edges();
  private:
  const ::dataflow::FlowEdge& _internal_in_edges(int index) const;
  ::dataflow::FlowEdge* _internal_add_in_edges();
  public:
  const ::dataflow::FlowEdge& in_edges(int index) const;
  ::dataflow::FlowEdge* add_in_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dataflow::FlowEdge >&
      in_edges() const;

  // repeated .dataflow.FlowEdge out_edges = 8;
  int out_edges_size() const;
  private:
  int _internal_out_edges_size() const;
  public:
  void clear_out_edges();
  ::dataflow::FlowEdge* mutable_out_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dataflow::FlowEdge >*
      mutable_out_edges();
  private:
  const ::dataflow::FlowEdge& _internal_out_edges(int index) const;
  ::dataflow::FlowEdge* _internal_add_out_edges();
  public:
  const ::dataflow::FlowEdge& out_edges(int index) const;
  ::dataflow::FlowEdge* add_out_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dataflow::FlowEdge >&
      out_edges() const;

  // map<string, .ge.proto.AttrDef> attrs = 9;
  int attrs_size() const;
  private:
  int _internal_attrs_size() const;
  public:
  void clear_attrs();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >&
      _internal_attrs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >*
      _internal_mutable_attrs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >&
      attrs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >*
      mutable_attrs();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string compile_cfg_file = 3;
  void clear_compile_cfg_file();
  const std::string& compile_cfg_file() const;
  void set_compile_cfg_file(const std::string& value);
  void set_compile_cfg_file(std::string&& value);
  void set_compile_cfg_file(const char* value);
  void set_compile_cfg_file(const char* value, size_t size);
  std::string* mutable_compile_cfg_file();
  std::string* release_compile_cfg_file();
  void set_allocated_compile_cfg_file(std::string* compile_cfg_file);
  private:
  const std::string& _internal_compile_cfg_file() const;
  void _internal_set_compile_cfg_file(const std::string& value);
  std::string* _internal_mutable_compile_cfg_file();
  public:

  // .dataflow.ProcessPoint.ProcessPointType type = 2;
  void clear_type();
  ::dataflow::ProcessPoint_ProcessPointType type() const;
  void set_type(::dataflow::ProcessPoint_ProcessPointType value);
  private:
  ::dataflow::ProcessPoint_ProcessPointType _internal_type() const;
  void _internal_set_type(::dataflow::ProcessPoint_ProcessPointType value);
  public:

  // bool is_built_in = 10;
  void clear_is_built_in();
  bool is_built_in() const;
  void set_is_built_in(bool value);
  private:
  bool _internal_is_built_in() const;
  void _internal_set_is_built_in(bool value);
  public:

  // @@protoc_insertion_point(class_scope:dataflow.ProcessPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dataflow::ProcessFunc > funcs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> graphs_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ProcessPoint_InvokePpsEntry_DoNotUse,
      std::string, ::dataflow::ProcessPoint,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > invoke_pps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dataflow::FlowEdge > in_edges_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dataflow::FlowEdge > out_edges_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ProcessPoint_AttrsEntry_DoNotUse,
      std::string, ::ge::proto::AttrDef,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > attrs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compile_cfg_file_;
  int type_;
  bool is_built_in_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dflow_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FlowEdge

// string node_name = 1;
inline void FlowEdge::clear_node_name() {
  node_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FlowEdge::node_name() const {
  // @@protoc_insertion_point(field_get:dataflow.FlowEdge.node_name)
  return _internal_node_name();
}
inline void FlowEdge::set_node_name(const std::string& value) {
  _internal_set_node_name(value);
  // @@protoc_insertion_point(field_set:dataflow.FlowEdge.node_name)
}
inline std::string* FlowEdge::mutable_node_name() {
  // @@protoc_insertion_point(field_mutable:dataflow.FlowEdge.node_name)
  return _internal_mutable_node_name();
}
inline const std::string& FlowEdge::_internal_node_name() const {
  return node_name_.Get();
}
inline void FlowEdge::_internal_set_node_name(const std::string& value) {
  
  node_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FlowEdge::set_node_name(std::string&& value) {
  
  node_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dataflow.FlowEdge.node_name)
}
inline void FlowEdge::set_node_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dataflow.FlowEdge.node_name)
}
inline void FlowEdge::set_node_name(const char* value,
    size_t size) {
  
  node_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dataflow.FlowEdge.node_name)
}
inline std::string* FlowEdge::_internal_mutable_node_name() {
  
  return node_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FlowEdge::release_node_name() {
  // @@protoc_insertion_point(field_release:dataflow.FlowEdge.node_name)
  return node_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FlowEdge::set_allocated_node_name(std::string* node_name) {
  if (node_name != nullptr) {
    
  } else {
    
  }
  node_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dataflow.FlowEdge.node_name)
}

// uint32 index = 2;
inline void FlowEdge::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowEdge::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowEdge::index() const {
  // @@protoc_insertion_point(field_get:dataflow.FlowEdge.index)
  return _internal_index();
}
inline void FlowEdge::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void FlowEdge::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:dataflow.FlowEdge.index)
}

// -------------------------------------------------------------------

// ProcessFunc

// string name = 1;
inline void ProcessFunc::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProcessFunc::name() const {
  // @@protoc_insertion_point(field_get:dataflow.ProcessFunc.name)
  return _internal_name();
}
inline void ProcessFunc::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:dataflow.ProcessFunc.name)
}
inline std::string* ProcessFunc::mutable_name() {
  // @@protoc_insertion_point(field_mutable:dataflow.ProcessFunc.name)
  return _internal_mutable_name();
}
inline const std::string& ProcessFunc::_internal_name() const {
  return name_.Get();
}
inline void ProcessFunc::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProcessFunc::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dataflow.ProcessFunc.name)
}
inline void ProcessFunc::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dataflow.ProcessFunc.name)
}
inline void ProcessFunc::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dataflow.ProcessFunc.name)
}
inline std::string* ProcessFunc::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProcessFunc::release_name() {
  // @@protoc_insertion_point(field_release:dataflow.ProcessFunc.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProcessFunc::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dataflow.ProcessFunc.name)
}

// repeated uint32 in_index = 2;
inline int ProcessFunc::_internal_in_index_size() const {
  return in_index_.size();
}
inline int ProcessFunc::in_index_size() const {
  return _internal_in_index_size();
}
inline void ProcessFunc::clear_in_index() {
  in_index_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProcessFunc::_internal_in_index(int index) const {
  return in_index_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProcessFunc::in_index(int index) const {
  // @@protoc_insertion_point(field_get:dataflow.ProcessFunc.in_index)
  return _internal_in_index(index);
}
inline void ProcessFunc::set_in_index(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  in_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:dataflow.ProcessFunc.in_index)
}
inline void ProcessFunc::_internal_add_in_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  in_index_.Add(value);
}
inline void ProcessFunc::add_in_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_in_index(value);
  // @@protoc_insertion_point(field_add:dataflow.ProcessFunc.in_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ProcessFunc::_internal_in_index() const {
  return in_index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ProcessFunc::in_index() const {
  // @@protoc_insertion_point(field_list:dataflow.ProcessFunc.in_index)
  return _internal_in_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ProcessFunc::_internal_mutable_in_index() {
  return &in_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ProcessFunc::mutable_in_index() {
  // @@protoc_insertion_point(field_mutable_list:dataflow.ProcessFunc.in_index)
  return _internal_mutable_in_index();
}

// repeated uint32 out_index = 3;
inline int ProcessFunc::_internal_out_index_size() const {
  return out_index_.size();
}
inline int ProcessFunc::out_index_size() const {
  return _internal_out_index_size();
}
inline void ProcessFunc::clear_out_index() {
  out_index_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProcessFunc::_internal_out_index(int index) const {
  return out_index_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProcessFunc::out_index(int index) const {
  // @@protoc_insertion_point(field_get:dataflow.ProcessFunc.out_index)
  return _internal_out_index(index);
}
inline void ProcessFunc::set_out_index(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  out_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:dataflow.ProcessFunc.out_index)
}
inline void ProcessFunc::_internal_add_out_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  out_index_.Add(value);
}
inline void ProcessFunc::add_out_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_out_index(value);
  // @@protoc_insertion_point(field_add:dataflow.ProcessFunc.out_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ProcessFunc::_internal_out_index() const {
  return out_index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ProcessFunc::out_index() const {
  // @@protoc_insertion_point(field_list:dataflow.ProcessFunc.out_index)
  return _internal_out_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ProcessFunc::_internal_mutable_out_index() {
  return &out_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ProcessFunc::mutable_out_index() {
  // @@protoc_insertion_point(field_mutable_list:dataflow.ProcessFunc.out_index)
  return _internal_mutable_out_index();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ProcessPoint

// string name = 1;
inline void ProcessPoint::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProcessPoint::name() const {
  // @@protoc_insertion_point(field_get:dataflow.ProcessPoint.name)
  return _internal_name();
}
inline void ProcessPoint::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:dataflow.ProcessPoint.name)
}
inline std::string* ProcessPoint::mutable_name() {
  // @@protoc_insertion_point(field_mutable:dataflow.ProcessPoint.name)
  return _internal_mutable_name();
}
inline const std::string& ProcessPoint::_internal_name() const {
  return name_.Get();
}
inline void ProcessPoint::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProcessPoint::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dataflow.ProcessPoint.name)
}
inline void ProcessPoint::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dataflow.ProcessPoint.name)
}
inline void ProcessPoint::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dataflow.ProcessPoint.name)
}
inline std::string* ProcessPoint::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProcessPoint::release_name() {
  // @@protoc_insertion_point(field_release:dataflow.ProcessPoint.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProcessPoint::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dataflow.ProcessPoint.name)
}

// .dataflow.ProcessPoint.ProcessPointType type = 2;
inline void ProcessPoint::clear_type() {
  type_ = 0;
}
inline ::dataflow::ProcessPoint_ProcessPointType ProcessPoint::_internal_type() const {
  return static_cast< ::dataflow::ProcessPoint_ProcessPointType >(type_);
}
inline ::dataflow::ProcessPoint_ProcessPointType ProcessPoint::type() const {
  // @@protoc_insertion_point(field_get:dataflow.ProcessPoint.type)
  return _internal_type();
}
inline void ProcessPoint::_internal_set_type(::dataflow::ProcessPoint_ProcessPointType value) {
  
  type_ = value;
}
inline void ProcessPoint::set_type(::dataflow::ProcessPoint_ProcessPointType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:dataflow.ProcessPoint.type)
}

// string compile_cfg_file = 3;
inline void ProcessPoint::clear_compile_cfg_file() {
  compile_cfg_file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProcessPoint::compile_cfg_file() const {
  // @@protoc_insertion_point(field_get:dataflow.ProcessPoint.compile_cfg_file)
  return _internal_compile_cfg_file();
}
inline void ProcessPoint::set_compile_cfg_file(const std::string& value) {
  _internal_set_compile_cfg_file(value);
  // @@protoc_insertion_point(field_set:dataflow.ProcessPoint.compile_cfg_file)
}
inline std::string* ProcessPoint::mutable_compile_cfg_file() {
  // @@protoc_insertion_point(field_mutable:dataflow.ProcessPoint.compile_cfg_file)
  return _internal_mutable_compile_cfg_file();
}
inline const std::string& ProcessPoint::_internal_compile_cfg_file() const {
  return compile_cfg_file_.Get();
}
inline void ProcessPoint::_internal_set_compile_cfg_file(const std::string& value) {
  
  compile_cfg_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProcessPoint::set_compile_cfg_file(std::string&& value) {
  
  compile_cfg_file_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dataflow.ProcessPoint.compile_cfg_file)
}
inline void ProcessPoint::set_compile_cfg_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  compile_cfg_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dataflow.ProcessPoint.compile_cfg_file)
}
inline void ProcessPoint::set_compile_cfg_file(const char* value,
    size_t size) {
  
  compile_cfg_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dataflow.ProcessPoint.compile_cfg_file)
}
inline std::string* ProcessPoint::_internal_mutable_compile_cfg_file() {
  
  return compile_cfg_file_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProcessPoint::release_compile_cfg_file() {
  // @@protoc_insertion_point(field_release:dataflow.ProcessPoint.compile_cfg_file)
  return compile_cfg_file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProcessPoint::set_allocated_compile_cfg_file(std::string* compile_cfg_file) {
  if (compile_cfg_file != nullptr) {
    
  } else {
    
  }
  compile_cfg_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), compile_cfg_file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dataflow.ProcessPoint.compile_cfg_file)
}

// repeated .dataflow.ProcessFunc funcs = 4;
inline int ProcessPoint::_internal_funcs_size() const {
  return funcs_.size();
}
inline int ProcessPoint::funcs_size() const {
  return _internal_funcs_size();
}
inline void ProcessPoint::clear_funcs() {
  funcs_.Clear();
}
inline ::dataflow::ProcessFunc* ProcessPoint::mutable_funcs(int index) {
  // @@protoc_insertion_point(field_mutable:dataflow.ProcessPoint.funcs)
  return funcs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dataflow::ProcessFunc >*
ProcessPoint::mutable_funcs() {
  // @@protoc_insertion_point(field_mutable_list:dataflow.ProcessPoint.funcs)
  return &funcs_;
}
inline const ::dataflow::ProcessFunc& ProcessPoint::_internal_funcs(int index) const {
  return funcs_.Get(index);
}
inline const ::dataflow::ProcessFunc& ProcessPoint::funcs(int index) const {
  // @@protoc_insertion_point(field_get:dataflow.ProcessPoint.funcs)
  return _internal_funcs(index);
}
inline ::dataflow::ProcessFunc* ProcessPoint::_internal_add_funcs() {
  return funcs_.Add();
}
inline ::dataflow::ProcessFunc* ProcessPoint::add_funcs() {
  // @@protoc_insertion_point(field_add:dataflow.ProcessPoint.funcs)
  return _internal_add_funcs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dataflow::ProcessFunc >&
ProcessPoint::funcs() const {
  // @@protoc_insertion_point(field_list:dataflow.ProcessPoint.funcs)
  return funcs_;
}

// repeated string graphs = 5;
inline int ProcessPoint::_internal_graphs_size() const {
  return graphs_.size();
}
inline int ProcessPoint::graphs_size() const {
  return _internal_graphs_size();
}
inline void ProcessPoint::clear_graphs() {
  graphs_.Clear();
}
inline std::string* ProcessPoint::add_graphs() {
  // @@protoc_insertion_point(field_add_mutable:dataflow.ProcessPoint.graphs)
  return _internal_add_graphs();
}
inline const std::string& ProcessPoint::_internal_graphs(int index) const {
  return graphs_.Get(index);
}
inline const std::string& ProcessPoint::graphs(int index) const {
  // @@protoc_insertion_point(field_get:dataflow.ProcessPoint.graphs)
  return _internal_graphs(index);
}
inline std::string* ProcessPoint::mutable_graphs(int index) {
  // @@protoc_insertion_point(field_mutable:dataflow.ProcessPoint.graphs)
  return graphs_.Mutable(index);
}
inline void ProcessPoint::set_graphs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:dataflow.ProcessPoint.graphs)
  graphs_.Mutable(index)->assign(value);
}
inline void ProcessPoint::set_graphs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:dataflow.ProcessPoint.graphs)
  graphs_.Mutable(index)->assign(std::move(value));
}
inline void ProcessPoint::set_graphs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  graphs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dataflow.ProcessPoint.graphs)
}
inline void ProcessPoint::set_graphs(int index, const char* value, size_t size) {
  graphs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dataflow.ProcessPoint.graphs)
}
inline std::string* ProcessPoint::_internal_add_graphs() {
  return graphs_.Add();
}
inline void ProcessPoint::add_graphs(const std::string& value) {
  graphs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dataflow.ProcessPoint.graphs)
}
inline void ProcessPoint::add_graphs(std::string&& value) {
  graphs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dataflow.ProcessPoint.graphs)
}
inline void ProcessPoint::add_graphs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  graphs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dataflow.ProcessPoint.graphs)
}
inline void ProcessPoint::add_graphs(const char* value, size_t size) {
  graphs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dataflow.ProcessPoint.graphs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProcessPoint::graphs() const {
  // @@protoc_insertion_point(field_list:dataflow.ProcessPoint.graphs)
  return graphs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProcessPoint::mutable_graphs() {
  // @@protoc_insertion_point(field_mutable_list:dataflow.ProcessPoint.graphs)
  return &graphs_;
}

// map<string, .dataflow.ProcessPoint> invoke_pps = 6;
inline int ProcessPoint::_internal_invoke_pps_size() const {
  return invoke_pps_.size();
}
inline int ProcessPoint::invoke_pps_size() const {
  return _internal_invoke_pps_size();
}
inline void ProcessPoint::clear_invoke_pps() {
  invoke_pps_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dataflow::ProcessPoint >&
ProcessPoint::_internal_invoke_pps() const {
  return invoke_pps_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dataflow::ProcessPoint >&
ProcessPoint::invoke_pps() const {
  // @@protoc_insertion_point(field_map:dataflow.ProcessPoint.invoke_pps)
  return _internal_invoke_pps();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dataflow::ProcessPoint >*
ProcessPoint::_internal_mutable_invoke_pps() {
  return invoke_pps_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dataflow::ProcessPoint >*
ProcessPoint::mutable_invoke_pps() {
  // @@protoc_insertion_point(field_mutable_map:dataflow.ProcessPoint.invoke_pps)
  return _internal_mutable_invoke_pps();
}

// repeated .dataflow.FlowEdge in_edges = 7;
inline int ProcessPoint::_internal_in_edges_size() const {
  return in_edges_.size();
}
inline int ProcessPoint::in_edges_size() const {
  return _internal_in_edges_size();
}
inline void ProcessPoint::clear_in_edges() {
  in_edges_.Clear();
}
inline ::dataflow::FlowEdge* ProcessPoint::mutable_in_edges(int index) {
  // @@protoc_insertion_point(field_mutable:dataflow.ProcessPoint.in_edges)
  return in_edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dataflow::FlowEdge >*
ProcessPoint::mutable_in_edges() {
  // @@protoc_insertion_point(field_mutable_list:dataflow.ProcessPoint.in_edges)
  return &in_edges_;
}
inline const ::dataflow::FlowEdge& ProcessPoint::_internal_in_edges(int index) const {
  return in_edges_.Get(index);
}
inline const ::dataflow::FlowEdge& ProcessPoint::in_edges(int index) const {
  // @@protoc_insertion_point(field_get:dataflow.ProcessPoint.in_edges)
  return _internal_in_edges(index);
}
inline ::dataflow::FlowEdge* ProcessPoint::_internal_add_in_edges() {
  return in_edges_.Add();
}
inline ::dataflow::FlowEdge* ProcessPoint::add_in_edges() {
  // @@protoc_insertion_point(field_add:dataflow.ProcessPoint.in_edges)
  return _internal_add_in_edges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dataflow::FlowEdge >&
ProcessPoint::in_edges() const {
  // @@protoc_insertion_point(field_list:dataflow.ProcessPoint.in_edges)
  return in_edges_;
}

// repeated .dataflow.FlowEdge out_edges = 8;
inline int ProcessPoint::_internal_out_edges_size() const {
  return out_edges_.size();
}
inline int ProcessPoint::out_edges_size() const {
  return _internal_out_edges_size();
}
inline void ProcessPoint::clear_out_edges() {
  out_edges_.Clear();
}
inline ::dataflow::FlowEdge* ProcessPoint::mutable_out_edges(int index) {
  // @@protoc_insertion_point(field_mutable:dataflow.ProcessPoint.out_edges)
  return out_edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dataflow::FlowEdge >*
ProcessPoint::mutable_out_edges() {
  // @@protoc_insertion_point(field_mutable_list:dataflow.ProcessPoint.out_edges)
  return &out_edges_;
}
inline const ::dataflow::FlowEdge& ProcessPoint::_internal_out_edges(int index) const {
  return out_edges_.Get(index);
}
inline const ::dataflow::FlowEdge& ProcessPoint::out_edges(int index) const {
  // @@protoc_insertion_point(field_get:dataflow.ProcessPoint.out_edges)
  return _internal_out_edges(index);
}
inline ::dataflow::FlowEdge* ProcessPoint::_internal_add_out_edges() {
  return out_edges_.Add();
}
inline ::dataflow::FlowEdge* ProcessPoint::add_out_edges() {
  // @@protoc_insertion_point(field_add:dataflow.ProcessPoint.out_edges)
  return _internal_add_out_edges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dataflow::FlowEdge >&
ProcessPoint::out_edges() const {
  // @@protoc_insertion_point(field_list:dataflow.ProcessPoint.out_edges)
  return out_edges_;
}

// map<string, .ge.proto.AttrDef> attrs = 9;
inline int ProcessPoint::_internal_attrs_size() const {
  return attrs_.size();
}
inline int ProcessPoint::attrs_size() const {
  return _internal_attrs_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >&
ProcessPoint::_internal_attrs() const {
  return attrs_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >&
ProcessPoint::attrs() const {
  // @@protoc_insertion_point(field_map:dataflow.ProcessPoint.attrs)
  return _internal_attrs();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >*
ProcessPoint::_internal_mutable_attrs() {
  return attrs_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >*
ProcessPoint::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_map:dataflow.ProcessPoint.attrs)
  return _internal_mutable_attrs();
}

// bool is_built_in = 10;
inline void ProcessPoint::clear_is_built_in() {
  is_built_in_ = false;
}
inline bool ProcessPoint::_internal_is_built_in() const {
  return is_built_in_;
}
inline bool ProcessPoint::is_built_in() const {
  // @@protoc_insertion_point(field_get:dataflow.ProcessPoint.is_built_in)
  return _internal_is_built_in();
}
inline void ProcessPoint::_internal_set_is_built_in(bool value) {
  
  is_built_in_ = value;
}
inline void ProcessPoint::set_is_built_in(bool value) {
  _internal_set_is_built_in(value);
  // @@protoc_insertion_point(field_set:dataflow.ProcessPoint.is_built_in)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dataflow

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::dataflow::ProcessPoint_ProcessPointType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dataflow::ProcessPoint_ProcessPointType>() {
  return ::dataflow::ProcessPoint_ProcessPointType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dflow_2eproto
