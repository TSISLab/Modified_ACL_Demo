// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dump_task.proto

#include "dump_task.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_dump_5ftask_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DimRange_dump_5ftask_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dump_5ftask_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpAttr_dump_5ftask_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dump_5ftask_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpBuffer_dump_5ftask_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dump_5ftask_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpInput_dump_5ftask_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dump_5ftask_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_OpOutput_dump_5ftask_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dump_5ftask_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OriginalOp_dump_5ftask_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dump_5ftask_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Shape_dump_5ftask_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dump_5ftask_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Workspace_dump_5ftask_2eproto;
namespace toolkit {
namespace dump {
class OriginalOpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OriginalOp> _instance;
} _OriginalOp_default_instance_;
class ShapeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Shape> _instance;
} _Shape_default_instance_;
class DimRangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DimRange> _instance;
} _DimRange_default_instance_;
class OpOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpOutput> _instance;
} _OpOutput_default_instance_;
class OpInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpInput> _instance;
} _OpInput_default_instance_;
class OpBufferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpBuffer> _instance;
} _OpBuffer_default_instance_;
class OpAttrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpAttr> _instance;
} _OpAttr_default_instance_;
class WorkspaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Workspace> _instance;
} _Workspace_default_instance_;
class DumpDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DumpData> _instance;
} _DumpData_default_instance_;
}  // namespace dump
}  // namespace toolkit
static void InitDefaultsscc_info_DimRange_dump_5ftask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::toolkit::dump::_DimRange_default_instance_;
    new (ptr) ::toolkit::dump::DimRange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::toolkit::dump::DimRange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DimRange_dump_5ftask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DimRange_dump_5ftask_2eproto}, {}};

static void InitDefaultsscc_info_DumpData_dump_5ftask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::toolkit::dump::_DumpData_default_instance_;
    new (ptr) ::toolkit::dump::DumpData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::toolkit::dump::DumpData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_DumpData_dump_5ftask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_DumpData_dump_5ftask_2eproto}, {
      &scc_info_OpOutput_dump_5ftask_2eproto.base,
      &scc_info_OpInput_dump_5ftask_2eproto.base,
      &scc_info_OpBuffer_dump_5ftask_2eproto.base,
      &scc_info_OpAttr_dump_5ftask_2eproto.base,
      &scc_info_Workspace_dump_5ftask_2eproto.base,}};

static void InitDefaultsscc_info_OpAttr_dump_5ftask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::toolkit::dump::_OpAttr_default_instance_;
    new (ptr) ::toolkit::dump::OpAttr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::toolkit::dump::OpAttr::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpAttr_dump_5ftask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OpAttr_dump_5ftask_2eproto}, {}};

static void InitDefaultsscc_info_OpBuffer_dump_5ftask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::toolkit::dump::_OpBuffer_default_instance_;
    new (ptr) ::toolkit::dump::OpBuffer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::toolkit::dump::OpBuffer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpBuffer_dump_5ftask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OpBuffer_dump_5ftask_2eproto}, {}};

static void InitDefaultsscc_info_OpInput_dump_5ftask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::toolkit::dump::_OpInput_default_instance_;
    new (ptr) ::toolkit::dump::OpInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::toolkit::dump::OpInput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpInput_dump_5ftask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OpInput_dump_5ftask_2eproto}, {
      &scc_info_Shape_dump_5ftask_2eproto.base,}};

static void InitDefaultsscc_info_OpOutput_dump_5ftask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::toolkit::dump::_OpOutput_default_instance_;
    new (ptr) ::toolkit::dump::OpOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::toolkit::dump::OpOutput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_OpOutput_dump_5ftask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_OpOutput_dump_5ftask_2eproto}, {
      &scc_info_Shape_dump_5ftask_2eproto.base,
      &scc_info_OriginalOp_dump_5ftask_2eproto.base,
      &scc_info_DimRange_dump_5ftask_2eproto.base,}};

static void InitDefaultsscc_info_OriginalOp_dump_5ftask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::toolkit::dump::_OriginalOp_default_instance_;
    new (ptr) ::toolkit::dump::OriginalOp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::toolkit::dump::OriginalOp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OriginalOp_dump_5ftask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OriginalOp_dump_5ftask_2eproto}, {}};

static void InitDefaultsscc_info_Shape_dump_5ftask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::toolkit::dump::_Shape_default_instance_;
    new (ptr) ::toolkit::dump::Shape();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::toolkit::dump::Shape::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Shape_dump_5ftask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Shape_dump_5ftask_2eproto}, {}};

static void InitDefaultsscc_info_Workspace_dump_5ftask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::toolkit::dump::_Workspace_default_instance_;
    new (ptr) ::toolkit::dump::Workspace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::toolkit::dump::Workspace::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Workspace_dump_5ftask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Workspace_dump_5ftask_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dump_5ftask_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dump_5ftask_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dump_5ftask_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dump_5ftask_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::OriginalOp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::OriginalOp, name_),
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::OriginalOp, output_index_),
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::OriginalOp, data_type_),
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::OriginalOp, format_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::Shape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::Shape, dim_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::DimRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::DimRange, dim_start_),
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::DimRange, dim_end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::OpOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::OpOutput, data_type_),
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::OpOutput, format_),
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::OpOutput, shape_),
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::OpOutput, original_op_),
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::OpOutput, data_),
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::OpOutput, size_),
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::OpOutput, original_shape_),
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::OpOutput, sub_format_),
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::OpOutput, address_),
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::OpOutput, dim_range_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::OpInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::OpInput, data_type_),
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::OpInput, format_),
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::OpInput, shape_),
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::OpInput, data_),
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::OpInput, size_),
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::OpInput, original_shape_),
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::OpInput, sub_format_),
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::OpInput, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::OpBuffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::OpBuffer, buffer_type_),
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::OpBuffer, data_),
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::OpBuffer, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::OpAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::OpAttr, name_),
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::OpAttr, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::Workspace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::Workspace, type_),
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::Workspace, data_),
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::Workspace, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::DumpData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::DumpData, version_),
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::DumpData, dump_time_),
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::DumpData, output_),
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::DumpData, input_),
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::DumpData, buffer_),
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::DumpData, op_name_),
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::DumpData, attr_),
  PROTOBUF_FIELD_OFFSET(::toolkit::dump::DumpData, space_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::toolkit::dump::OriginalOp)},
  { 9, -1, sizeof(::toolkit::dump::Shape)},
  { 15, -1, sizeof(::toolkit::dump::DimRange)},
  { 22, -1, sizeof(::toolkit::dump::OpOutput)},
  { 37, -1, sizeof(::toolkit::dump::OpInput)},
  { 50, -1, sizeof(::toolkit::dump::OpBuffer)},
  { 58, -1, sizeof(::toolkit::dump::OpAttr)},
  { 65, -1, sizeof(::toolkit::dump::Workspace)},
  { 73, -1, sizeof(::toolkit::dump::DumpData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toolkit::dump::_OriginalOp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toolkit::dump::_Shape_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toolkit::dump::_DimRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toolkit::dump::_OpOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toolkit::dump::_OpInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toolkit::dump::_OpBuffer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toolkit::dump::_OpAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toolkit::dump::_Workspace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toolkit::dump::_DumpData_default_instance_),
};

const char descriptor_table_protodef_dump_5ftask_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017dump_task.proto\022\014toolkit.dump\"\215\001\n\nOrig"
  "inalOp\022\014\n\004name\030\001 \001(\t\022\024\n\014output_index\030\002 \001"
  "(\r\022/\n\tdata_type\030\003 \001(\0162\034.toolkit.dump.Out"
  "putDataType\022*\n\006format\030\004 \001(\0162\032.toolkit.du"
  "mp.OutputFormat\"\024\n\005Shape\022\013\n\003dim\030\001 \003(\004\".\n"
  "\010DimRange\022\021\n\tdim_start\030\001 \001(\004\022\017\n\007dim_end\030"
  "\002 \001(\004\"\323\002\n\010OpOutput\022/\n\tdata_type\030\001 \001(\0162\034."
  "toolkit.dump.OutputDataType\022*\n\006format\030\002 "
  "\001(\0162\032.toolkit.dump.OutputFormat\022\"\n\005shape"
  "\030\003 \001(\0132\023.toolkit.dump.Shape\022-\n\013original_"
  "op\030\004 \001(\0132\030.toolkit.dump.OriginalOp\022\014\n\004da"
  "ta\030\005 \001(\014\022\014\n\004size\030\006 \001(\004\022+\n\016original_shape"
  "\030\007 \001(\0132\023.toolkit.dump.Shape\022\022\n\nsub_forma"
  "t\030\010 \001(\005\022\017\n\007address\030\t \001(\004\022)\n\tdim_range\030\n "
  "\003(\0132\026.toolkit.dump.DimRange\"\370\001\n\007OpInput\022"
  "/\n\tdata_type\030\001 \001(\0162\034.toolkit.dump.Output"
  "DataType\022*\n\006format\030\002 \001(\0162\032.toolkit.dump."
  "OutputFormat\022\"\n\005shape\030\003 \001(\0132\023.toolkit.du"
  "mp.Shape\022\014\n\004data\030\004 \001(\014\022\014\n\004size\030\005 \001(\004\022+\n\016"
  "original_shape\030\006 \001(\0132\023.toolkit.dump.Shap"
  "e\022\022\n\nsub_format\030\007 \001(\005\022\017\n\007address\030\010 \001(\004\"U"
  "\n\010OpBuffer\022-\n\013buffer_type\030\001 \001(\0162\030.toolki"
  "t.dump.BufferType\022\014\n\004data\030\002 \001(\014\022\014\n\004size\030"
  "\003 \001(\004\"%\n\006OpAttr\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002"
  " \001(\t\"n\n\tWorkspace\022/\n\004type\030\001 \001(\0162!.toolki"
  "t.dump.Workspace.SpaceType\022\014\n\004data\030\002 \001(\014"
  "\022\014\n\004size\030\003 \001(\004\"\024\n\tSpaceType\022\007\n\003LOG\020\000\"\201\002\n"
  "\010DumpData\022\017\n\007version\030\001 \001(\t\022\021\n\tdump_time\030"
  "\002 \001(\004\022&\n\006output\030\003 \003(\0132\026.toolkit.dump.OpO"
  "utput\022$\n\005input\030\004 \003(\0132\025.toolkit.dump.OpIn"
  "put\022&\n\006buffer\030\005 \003(\0132\026.toolkit.dump.OpBuf"
  "fer\022\017\n\007op_name\030\006 \001(\t\022\"\n\004attr\030\007 \003(\0132\024.too"
  "lkit.dump.OpAttr\022&\n\005space\030\010 \003(\0132\027.toolki"
  "t.dump.Workspace*\273\003\n\016OutputDataType\022\020\n\014D"
  "T_UNDEFINED\020\000\022\014\n\010DT_FLOAT\020\001\022\016\n\nDT_FLOAT1"
  "6\020\002\022\013\n\007DT_INT8\020\003\022\014\n\010DT_UINT8\020\004\022\014\n\010DT_INT"
  "16\020\005\022\r\n\tDT_UINT16\020\006\022\014\n\010DT_INT32\020\007\022\014\n\010DT_"
  "INT64\020\010\022\r\n\tDT_UINT32\020\t\022\r\n\tDT_UINT64\020\n\022\013\n"
  "\007DT_BOOL\020\013\022\r\n\tDT_DOUBLE\020\014\022\r\n\tDT_STRING\020\r"
  "\022\024\n\020DT_DUAL_SUB_INT8\020\016\022\025\n\021DT_DUAL_SUB_UI"
  "NT8\020\017\022\020\n\014DT_COMPLEX64\020\020\022\021\n\rDT_COMPLEX128"
  "\020\021\022\014\n\010DT_QINT8\020\022\022\r\n\tDT_QINT16\020\023\022\r\n\tDT_QI"
  "NT32\020\024\022\r\n\tDT_QUINT8\020\025\022\016\n\nDT_QUINT16\020\026\022\017\n"
  "\013DT_RESOURCE\020\027\022\021\n\rDT_STRING_REF\020\030\022\013\n\007DT_"
  "DUAL\020\031\022\016\n\nDT_VARIANT\020\032*\202\010\n\014OutputFormat\022"
  "\017\n\013FORMAT_NCHW\020\000\022\017\n\013FORMAT_NHWC\020\001\022\r\n\tFOR"
  "MAT_ND\020\002\022\022\n\016FORMAT_NC1HWC0\020\003\022\024\n\020FORMAT_F"
  "RACTAL_Z\020\004\022\025\n\021FORMAT_NC1C0HWPAD\020\005\022\022\n\016FOR"
  "MAT_NHWC1C0\020\006\022\023\n\017FORMAT_FSR_NCHW\020\007\022\031\n\025FO"
  "RMAT_FRACTAL_DECONV\020\010\022\022\n\016FORMAT_C1HWNC0\020"
  "\t\022#\n\037FORMAT_FRACTAL_DECONV_TRANSPOSE\020\n\022)"
  "\n%FORMAT_FRACTAL_DECONV_SP_STRIDE_TRANS\020"
  "\013\022\026\n\022FORMAT_NC1HWC0_C04\020\014\022\030\n\024FORMAT_FRAC"
  "TAL_Z_C04\020\r\022\017\n\013FORMAT_CHWN\020\016\022*\n&FORMAT_F"
  "RACTAL_DECONV_SP_STRIDE8_TRANS\020\017\022\017\n\013FORM"
  "AT_HWCN\020\020\022\026\n\022FORMAT_NC1KHKWHWC0\020\021\022\024\n\020FOR"
  "MAT_BN_WEIGHT\020\022\022\026\n\022FORMAT_FILTER_HWCK\020\023\022"
  "#\n\037FORMAT_HASHTABLE_LOOKUP_LOOKUPS\020\024\022 \n\034"
  "FORMAT_HASHTABLE_LOOKUP_KEYS\020\025\022!\n\035FORMAT"
  "_HASHTABLE_LOOKUP_VALUE\020\026\022\"\n\036FORMAT_HASH"
  "TABLE_LOOKUP_OUTPUT\020\027\022 \n\034FORMAT_HASHTABL"
  "E_LOOKUP_HITS\020\030\022\024\n\020FORMAT_C1HWNCoC0\020\031\022\r\n"
  "\tFORMAT_MD\020\032\022\020\n\014FORMAT_NDHWC\020\033\022\025\n\021FORMAT"
  "_FRACTAL_ZZ\020\034\022\025\n\021FORMAT_FRACTAL_NZ\020\035\022\020\n\014"
  "FORMAT_NCDHW\020\036\022\020\n\014FORMAT_DHWCH\020\037\022\023\n\017FORM"
  "AT_NDC1HWC0\020 \022\027\n\023FORMAT_FRACTAL_Z_3D\020!\022\r"
  "\n\tFORMAT_CN\020\"\022\r\n\tFORMAT_NC\020#\022\020\n\014FORMAT_D"
  "HWNC\020$\022!\n\035FORMAT_FRACTAL_Z_3D_TRANSPOSE\020"
  "%\022\032\n\026FORMAT_FRACTAL_ZN_LSTM\020&\022\026\n\022FORMAT_"
  "FRACTAL_Z_G\020\'\022\023\n\017FORMAT_RESERVED\020(\022\017\n\nFO"
  "RMAT_MAX\020\377\001*\024\n\nBufferType\022\006\n\002L1\020\000b\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dump_5ftask_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_dump_5ftask_2eproto_sccs[9] = {
  &scc_info_DimRange_dump_5ftask_2eproto.base,
  &scc_info_DumpData_dump_5ftask_2eproto.base,
  &scc_info_OpAttr_dump_5ftask_2eproto.base,
  &scc_info_OpBuffer_dump_5ftask_2eproto.base,
  &scc_info_OpInput_dump_5ftask_2eproto.base,
  &scc_info_OpOutput_dump_5ftask_2eproto.base,
  &scc_info_OriginalOp_dump_5ftask_2eproto.base,
  &scc_info_Shape_dump_5ftask_2eproto.base,
  &scc_info_Workspace_dump_5ftask_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dump_5ftask_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dump_5ftask_2eproto = {
  false, false, descriptor_table_protodef_dump_5ftask_2eproto, "dump_task.proto", 2841,
  &descriptor_table_dump_5ftask_2eproto_once, descriptor_table_dump_5ftask_2eproto_sccs, descriptor_table_dump_5ftask_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_dump_5ftask_2eproto::offsets,
  file_level_metadata_dump_5ftask_2eproto, 9, file_level_enum_descriptors_dump_5ftask_2eproto, file_level_service_descriptors_dump_5ftask_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dump_5ftask_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_dump_5ftask_2eproto)), true);
namespace toolkit {
namespace dump {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Workspace_SpaceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dump_5ftask_2eproto);
  return file_level_enum_descriptors_dump_5ftask_2eproto[0];
}
bool Workspace_SpaceType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Workspace_SpaceType Workspace::LOG;
constexpr Workspace_SpaceType Workspace::SpaceType_MIN;
constexpr Workspace_SpaceType Workspace::SpaceType_MAX;
constexpr int Workspace::SpaceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OutputDataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dump_5ftask_2eproto);
  return file_level_enum_descriptors_dump_5ftask_2eproto[1];
}
bool OutputDataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OutputFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dump_5ftask_2eproto);
  return file_level_enum_descriptors_dump_5ftask_2eproto[2];
}
bool OutputFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 255:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BufferType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dump_5ftask_2eproto);
  return file_level_enum_descriptors_dump_5ftask_2eproto[3];
}
bool BufferType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void OriginalOp::InitAsDefaultInstance() {
}
class OriginalOp::_Internal {
 public:
};

OriginalOp::OriginalOp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:toolkit.dump.OriginalOp)
}
OriginalOp::OriginalOp(const OriginalOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&output_index_, &from.output_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&format_) -
    reinterpret_cast<char*>(&output_index_)) + sizeof(format_));
  // @@protoc_insertion_point(copy_constructor:toolkit.dump.OriginalOp)
}

void OriginalOp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OriginalOp_dump_5ftask_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&output_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&format_) -
      reinterpret_cast<char*>(&output_index_)) + sizeof(format_));
}

OriginalOp::~OriginalOp() {
  // @@protoc_insertion_point(destructor:toolkit.dump.OriginalOp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OriginalOp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OriginalOp::ArenaDtor(void* object) {
  OriginalOp* _this = reinterpret_cast< OriginalOp* >(object);
  (void)_this;
}
void OriginalOp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OriginalOp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OriginalOp& OriginalOp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OriginalOp_dump_5ftask_2eproto.base);
  return *internal_default_instance();
}


void OriginalOp::Clear() {
// @@protoc_insertion_point(message_clear_start:toolkit.dump.OriginalOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&output_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&format_) -
      reinterpret_cast<char*>(&output_index_)) + sizeof(format_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OriginalOp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "toolkit.dump.OriginalOp.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 output_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          output_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .toolkit.dump.OutputDataType data_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_type(static_cast<::toolkit::dump::OutputDataType>(val));
        } else goto handle_unusual;
        continue;
      // .toolkit.dump.OutputFormat format = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_format(static_cast<::toolkit::dump::OutputFormat>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OriginalOp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:toolkit.dump.OriginalOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "toolkit.dump.OriginalOp.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 output_index = 2;
  if (this->output_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_output_index(), target);
  }

  // .toolkit.dump.OutputDataType data_type = 3;
  if (this->data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_data_type(), target);
  }

  // .toolkit.dump.OutputFormat format = 4;
  if (this->format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toolkit.dump.OriginalOp)
  return target;
}

size_t OriginalOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:toolkit.dump.OriginalOp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 output_index = 2;
  if (this->output_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_output_index());
  }

  // .toolkit.dump.OutputDataType data_type = 3;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_type());
  }

  // .toolkit.dump.OutputFormat format = 4;
  if (this->format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_format());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OriginalOp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:toolkit.dump.OriginalOp)
  GOOGLE_DCHECK_NE(&from, this);
  const OriginalOp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OriginalOp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:toolkit.dump.OriginalOp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:toolkit.dump.OriginalOp)
    MergeFrom(*source);
  }
}

void OriginalOp::MergeFrom(const OriginalOp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:toolkit.dump.OriginalOp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.output_index() != 0) {
    _internal_set_output_index(from._internal_output_index());
  }
  if (from.data_type() != 0) {
    _internal_set_data_type(from._internal_data_type());
  }
  if (from.format() != 0) {
    _internal_set_format(from._internal_format());
  }
}

void OriginalOp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:toolkit.dump.OriginalOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OriginalOp::CopyFrom(const OriginalOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:toolkit.dump.OriginalOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OriginalOp::IsInitialized() const {
  return true;
}

void OriginalOp::InternalSwap(OriginalOp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OriginalOp, format_)
      + sizeof(OriginalOp::format_)
      - PROTOBUF_FIELD_OFFSET(OriginalOp, output_index_)>(
          reinterpret_cast<char*>(&output_index_),
          reinterpret_cast<char*>(&other->output_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OriginalOp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Shape::InitAsDefaultInstance() {
}
class Shape::_Internal {
 public:
};

Shape::Shape(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dim_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:toolkit.dump.Shape)
}
Shape::Shape(const Shape& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dim_(from.dim_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:toolkit.dump.Shape)
}

void Shape::SharedCtor() {
}

Shape::~Shape() {
  // @@protoc_insertion_point(destructor:toolkit.dump.Shape)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Shape::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Shape::ArenaDtor(void* object) {
  Shape* _this = reinterpret_cast< Shape* >(object);
  (void)_this;
}
void Shape::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Shape::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Shape& Shape::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Shape_dump_5ftask_2eproto.base);
  return *internal_default_instance();
}


void Shape::Clear() {
// @@protoc_insertion_point(message_clear_start:toolkit.dump.Shape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dim_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Shape::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 dim = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_dim(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_dim(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Shape::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:toolkit.dump.Shape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 dim = 1;
  {
    int byte_size = _dim_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_dim(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toolkit.dump.Shape)
  return target;
}

size_t Shape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:toolkit.dump.Shape)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 dim = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->dim_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dim_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Shape::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:toolkit.dump.Shape)
  GOOGLE_DCHECK_NE(&from, this);
  const Shape* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Shape>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:toolkit.dump.Shape)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:toolkit.dump.Shape)
    MergeFrom(*source);
  }
}

void Shape::MergeFrom(const Shape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:toolkit.dump.Shape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dim_.MergeFrom(from.dim_);
}

void Shape::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:toolkit.dump.Shape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shape::CopyFrom(const Shape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:toolkit.dump.Shape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shape::IsInitialized() const {
  return true;
}

void Shape::InternalSwap(Shape* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dim_.InternalSwap(&other->dim_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Shape::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DimRange::InitAsDefaultInstance() {
}
class DimRange::_Internal {
 public:
};

DimRange::DimRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:toolkit.dump.DimRange)
}
DimRange::DimRange(const DimRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dim_start_, &from.dim_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&dim_end_) -
    reinterpret_cast<char*>(&dim_start_)) + sizeof(dim_end_));
  // @@protoc_insertion_point(copy_constructor:toolkit.dump.DimRange)
}

void DimRange::SharedCtor() {
  ::memset(&dim_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dim_end_) -
      reinterpret_cast<char*>(&dim_start_)) + sizeof(dim_end_));
}

DimRange::~DimRange() {
  // @@protoc_insertion_point(destructor:toolkit.dump.DimRange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DimRange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DimRange::ArenaDtor(void* object) {
  DimRange* _this = reinterpret_cast< DimRange* >(object);
  (void)_this;
}
void DimRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DimRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DimRange& DimRange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DimRange_dump_5ftask_2eproto.base);
  return *internal_default_instance();
}


void DimRange::Clear() {
// @@protoc_insertion_point(message_clear_start:toolkit.dump.DimRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dim_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dim_end_) -
      reinterpret_cast<char*>(&dim_start_)) + sizeof(dim_end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DimRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 dim_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dim_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 dim_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          dim_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DimRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:toolkit.dump.DimRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 dim_start = 1;
  if (this->dim_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_dim_start(), target);
  }

  // uint64 dim_end = 2;
  if (this->dim_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_dim_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toolkit.dump.DimRange)
  return target;
}

size_t DimRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:toolkit.dump.DimRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 dim_start = 1;
  if (this->dim_start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_dim_start());
  }

  // uint64 dim_end = 2;
  if (this->dim_end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_dim_end());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DimRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:toolkit.dump.DimRange)
  GOOGLE_DCHECK_NE(&from, this);
  const DimRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DimRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:toolkit.dump.DimRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:toolkit.dump.DimRange)
    MergeFrom(*source);
  }
}

void DimRange::MergeFrom(const DimRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:toolkit.dump.DimRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dim_start() != 0) {
    _internal_set_dim_start(from._internal_dim_start());
  }
  if (from.dim_end() != 0) {
    _internal_set_dim_end(from._internal_dim_end());
  }
}

void DimRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:toolkit.dump.DimRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DimRange::CopyFrom(const DimRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:toolkit.dump.DimRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DimRange::IsInitialized() const {
  return true;
}

void DimRange::InternalSwap(DimRange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DimRange, dim_end_)
      + sizeof(DimRange::dim_end_)
      - PROTOBUF_FIELD_OFFSET(DimRange, dim_start_)>(
          reinterpret_cast<char*>(&dim_start_),
          reinterpret_cast<char*>(&other->dim_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DimRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OpOutput::InitAsDefaultInstance() {
  ::toolkit::dump::_OpOutput_default_instance_._instance.get_mutable()->shape_ = const_cast< ::toolkit::dump::Shape*>(
      ::toolkit::dump::Shape::internal_default_instance());
  ::toolkit::dump::_OpOutput_default_instance_._instance.get_mutable()->original_op_ = const_cast< ::toolkit::dump::OriginalOp*>(
      ::toolkit::dump::OriginalOp::internal_default_instance());
  ::toolkit::dump::_OpOutput_default_instance_._instance.get_mutable()->original_shape_ = const_cast< ::toolkit::dump::Shape*>(
      ::toolkit::dump::Shape::internal_default_instance());
}
class OpOutput::_Internal {
 public:
  static const ::toolkit::dump::Shape& shape(const OpOutput* msg);
  static const ::toolkit::dump::OriginalOp& original_op(const OpOutput* msg);
  static const ::toolkit::dump::Shape& original_shape(const OpOutput* msg);
};

const ::toolkit::dump::Shape&
OpOutput::_Internal::shape(const OpOutput* msg) {
  return *msg->shape_;
}
const ::toolkit::dump::OriginalOp&
OpOutput::_Internal::original_op(const OpOutput* msg) {
  return *msg->original_op_;
}
const ::toolkit::dump::Shape&
OpOutput::_Internal::original_shape(const OpOutput* msg) {
  return *msg->original_shape_;
}
OpOutput::OpOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dim_range_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:toolkit.dump.OpOutput)
}
OpOutput::OpOutput(const OpOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dim_range_(from.dim_range_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  if (from._internal_has_shape()) {
    shape_ = new ::toolkit::dump::Shape(*from.shape_);
  } else {
    shape_ = nullptr;
  }
  if (from._internal_has_original_op()) {
    original_op_ = new ::toolkit::dump::OriginalOp(*from.original_op_);
  } else {
    original_op_ = nullptr;
  }
  if (from._internal_has_original_shape()) {
    original_shape_ = new ::toolkit::dump::Shape(*from.original_shape_);
  } else {
    original_shape_ = nullptr;
  }
  ::memcpy(&data_type_, &from.data_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&sub_format_) -
    reinterpret_cast<char*>(&data_type_)) + sizeof(sub_format_));
  // @@protoc_insertion_point(copy_constructor:toolkit.dump.OpOutput)
}

void OpOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpOutput_dump_5ftask_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sub_format_) -
      reinterpret_cast<char*>(&shape_)) + sizeof(sub_format_));
}

OpOutput::~OpOutput() {
  // @@protoc_insertion_point(destructor:toolkit.dump.OpOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete shape_;
  if (this != internal_default_instance()) delete original_op_;
  if (this != internal_default_instance()) delete original_shape_;
}

void OpOutput::ArenaDtor(void* object) {
  OpOutput* _this = reinterpret_cast< OpOutput* >(object);
  (void)_this;
}
void OpOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpOutput& OpOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpOutput_dump_5ftask_2eproto.base);
  return *internal_default_instance();
}


void OpOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:toolkit.dump.OpOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dim_range_.Clear();
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
  if (GetArena() == nullptr && original_op_ != nullptr) {
    delete original_op_;
  }
  original_op_ = nullptr;
  if (GetArena() == nullptr && original_shape_ != nullptr) {
    delete original_shape_;
  }
  original_shape_ = nullptr;
  ::memset(&data_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sub_format_) -
      reinterpret_cast<char*>(&data_type_)) + sizeof(sub_format_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .toolkit.dump.OutputDataType data_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_type(static_cast<::toolkit::dump::OutputDataType>(val));
        } else goto handle_unusual;
        continue;
      // .toolkit.dump.OutputFormat format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_format(static_cast<::toolkit::dump::OutputFormat>(val));
        } else goto handle_unusual;
        continue;
      // .toolkit.dump.Shape shape = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .toolkit.dump.OriginalOp original_op = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_original_op(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .toolkit.dump.Shape original_shape = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_original_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sub_format = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          sub_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 address = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .toolkit.dump.DimRange dim_range = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dim_range(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:toolkit.dump.OpOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .toolkit.dump.OutputDataType data_type = 1;
  if (this->data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_data_type(), target);
  }

  // .toolkit.dump.OutputFormat format = 2;
  if (this->format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_format(), target);
  }

  // .toolkit.dump.Shape shape = 3;
  if (this->has_shape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::shape(this), target, stream);
  }

  // .toolkit.dump.OriginalOp original_op = 4;
  if (this->has_original_op()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::original_op(this), target, stream);
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_data(), target);
  }

  // uint64 size = 6;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_size(), target);
  }

  // .toolkit.dump.Shape original_shape = 7;
  if (this->has_original_shape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::original_shape(this), target, stream);
  }

  // int32 sub_format = 8;
  if (this->sub_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_sub_format(), target);
  }

  // uint64 address = 9;
  if (this->address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_address(), target);
  }

  // repeated .toolkit.dump.DimRange dim_range = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dim_range_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_dim_range(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toolkit.dump.OpOutput)
  return target;
}

size_t OpOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:toolkit.dump.OpOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .toolkit.dump.DimRange dim_range = 10;
  total_size += 1UL * this->_internal_dim_range_size();
  for (const auto& msg : this->dim_range_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .toolkit.dump.Shape shape = 3;
  if (this->has_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  // .toolkit.dump.OriginalOp original_op = 4;
  if (this->has_original_op()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *original_op_);
  }

  // .toolkit.dump.Shape original_shape = 7;
  if (this->has_original_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *original_shape_);
  }

  // .toolkit.dump.OutputDataType data_type = 1;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_type());
  }

  // .toolkit.dump.OutputFormat format = 2;
  if (this->format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_format());
  }

  // uint64 size = 6;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  // uint64 address = 9;
  if (this->address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_address());
  }

  // int32 sub_format = 8;
  if (this->sub_format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sub_format());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:toolkit.dump.OpOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const OpOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:toolkit.dump.OpOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:toolkit.dump.OpOutput)
    MergeFrom(*source);
  }
}

void OpOutput::MergeFrom(const OpOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:toolkit.dump.OpOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dim_range_.MergeFrom(from.dim_range_);
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.has_shape()) {
    _internal_mutable_shape()->::toolkit::dump::Shape::MergeFrom(from._internal_shape());
  }
  if (from.has_original_op()) {
    _internal_mutable_original_op()->::toolkit::dump::OriginalOp::MergeFrom(from._internal_original_op());
  }
  if (from.has_original_shape()) {
    _internal_mutable_original_shape()->::toolkit::dump::Shape::MergeFrom(from._internal_original_shape());
  }
  if (from.data_type() != 0) {
    _internal_set_data_type(from._internal_data_type());
  }
  if (from.format() != 0) {
    _internal_set_format(from._internal_format());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.address() != 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.sub_format() != 0) {
    _internal_set_sub_format(from._internal_sub_format());
  }
}

void OpOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:toolkit.dump.OpOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpOutput::CopyFrom(const OpOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:toolkit.dump.OpOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpOutput::IsInitialized() const {
  return true;
}

void OpOutput::InternalSwap(OpOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dim_range_.InternalSwap(&other->dim_range_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpOutput, sub_format_)
      + sizeof(OpOutput::sub_format_)
      - PROTOBUF_FIELD_OFFSET(OpOutput, shape_)>(
          reinterpret_cast<char*>(&shape_),
          reinterpret_cast<char*>(&other->shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OpInput::InitAsDefaultInstance() {
  ::toolkit::dump::_OpInput_default_instance_._instance.get_mutable()->shape_ = const_cast< ::toolkit::dump::Shape*>(
      ::toolkit::dump::Shape::internal_default_instance());
  ::toolkit::dump::_OpInput_default_instance_._instance.get_mutable()->original_shape_ = const_cast< ::toolkit::dump::Shape*>(
      ::toolkit::dump::Shape::internal_default_instance());
}
class OpInput::_Internal {
 public:
  static const ::toolkit::dump::Shape& shape(const OpInput* msg);
  static const ::toolkit::dump::Shape& original_shape(const OpInput* msg);
};

const ::toolkit::dump::Shape&
OpInput::_Internal::shape(const OpInput* msg) {
  return *msg->shape_;
}
const ::toolkit::dump::Shape&
OpInput::_Internal::original_shape(const OpInput* msg) {
  return *msg->original_shape_;
}
OpInput::OpInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:toolkit.dump.OpInput)
}
OpInput::OpInput(const OpInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  if (from._internal_has_shape()) {
    shape_ = new ::toolkit::dump::Shape(*from.shape_);
  } else {
    shape_ = nullptr;
  }
  if (from._internal_has_original_shape()) {
    original_shape_ = new ::toolkit::dump::Shape(*from.original_shape_);
  } else {
    original_shape_ = nullptr;
  }
  ::memcpy(&data_type_, &from.data_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&sub_format_) -
    reinterpret_cast<char*>(&data_type_)) + sizeof(sub_format_));
  // @@protoc_insertion_point(copy_constructor:toolkit.dump.OpInput)
}

void OpInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpInput_dump_5ftask_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sub_format_) -
      reinterpret_cast<char*>(&shape_)) + sizeof(sub_format_));
}

OpInput::~OpInput() {
  // @@protoc_insertion_point(destructor:toolkit.dump.OpInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete shape_;
  if (this != internal_default_instance()) delete original_shape_;
}

void OpInput::ArenaDtor(void* object) {
  OpInput* _this = reinterpret_cast< OpInput* >(object);
  (void)_this;
}
void OpInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpInput& OpInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpInput_dump_5ftask_2eproto.base);
  return *internal_default_instance();
}


void OpInput::Clear() {
// @@protoc_insertion_point(message_clear_start:toolkit.dump.OpInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
  if (GetArena() == nullptr && original_shape_ != nullptr) {
    delete original_shape_;
  }
  original_shape_ = nullptr;
  ::memset(&data_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sub_format_) -
      reinterpret_cast<char*>(&data_type_)) + sizeof(sub_format_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .toolkit.dump.OutputDataType data_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_type(static_cast<::toolkit::dump::OutputDataType>(val));
        } else goto handle_unusual;
        continue;
      // .toolkit.dump.OutputFormat format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_format(static_cast<::toolkit::dump::OutputFormat>(val));
        } else goto handle_unusual;
        continue;
      // .toolkit.dump.Shape shape = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .toolkit.dump.Shape original_shape = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_original_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sub_format = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          sub_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 address = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:toolkit.dump.OpInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .toolkit.dump.OutputDataType data_type = 1;
  if (this->data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_data_type(), target);
  }

  // .toolkit.dump.OutputFormat format = 2;
  if (this->format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_format(), target);
  }

  // .toolkit.dump.Shape shape = 3;
  if (this->has_shape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::shape(this), target, stream);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // uint64 size = 5;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_size(), target);
  }

  // .toolkit.dump.Shape original_shape = 6;
  if (this->has_original_shape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::original_shape(this), target, stream);
  }

  // int32 sub_format = 7;
  if (this->sub_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_sub_format(), target);
  }

  // uint64 address = 8;
  if (this->address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toolkit.dump.OpInput)
  return target;
}

size_t OpInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:toolkit.dump.OpInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .toolkit.dump.Shape shape = 3;
  if (this->has_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  // .toolkit.dump.Shape original_shape = 6;
  if (this->has_original_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *original_shape_);
  }

  // .toolkit.dump.OutputDataType data_type = 1;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_type());
  }

  // .toolkit.dump.OutputFormat format = 2;
  if (this->format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_format());
  }

  // uint64 size = 5;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  // uint64 address = 8;
  if (this->address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_address());
  }

  // int32 sub_format = 7;
  if (this->sub_format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sub_format());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:toolkit.dump.OpInput)
  GOOGLE_DCHECK_NE(&from, this);
  const OpInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:toolkit.dump.OpInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:toolkit.dump.OpInput)
    MergeFrom(*source);
  }
}

void OpInput::MergeFrom(const OpInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:toolkit.dump.OpInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.has_shape()) {
    _internal_mutable_shape()->::toolkit::dump::Shape::MergeFrom(from._internal_shape());
  }
  if (from.has_original_shape()) {
    _internal_mutable_original_shape()->::toolkit::dump::Shape::MergeFrom(from._internal_original_shape());
  }
  if (from.data_type() != 0) {
    _internal_set_data_type(from._internal_data_type());
  }
  if (from.format() != 0) {
    _internal_set_format(from._internal_format());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.address() != 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.sub_format() != 0) {
    _internal_set_sub_format(from._internal_sub_format());
  }
}

void OpInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:toolkit.dump.OpInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpInput::CopyFrom(const OpInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:toolkit.dump.OpInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpInput::IsInitialized() const {
  return true;
}

void OpInput::InternalSwap(OpInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpInput, sub_format_)
      + sizeof(OpInput::sub_format_)
      - PROTOBUF_FIELD_OFFSET(OpInput, shape_)>(
          reinterpret_cast<char*>(&shape_),
          reinterpret_cast<char*>(&other->shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OpBuffer::InitAsDefaultInstance() {
}
class OpBuffer::_Internal {
 public:
};

OpBuffer::OpBuffer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:toolkit.dump.OpBuffer)
}
OpBuffer::OpBuffer(const OpBuffer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&buffer_type_) -
    reinterpret_cast<char*>(&size_)) + sizeof(buffer_type_));
  // @@protoc_insertion_point(copy_constructor:toolkit.dump.OpBuffer)
}

void OpBuffer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpBuffer_dump_5ftask_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buffer_type_) -
      reinterpret_cast<char*>(&size_)) + sizeof(buffer_type_));
}

OpBuffer::~OpBuffer() {
  // @@protoc_insertion_point(destructor:toolkit.dump.OpBuffer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpBuffer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OpBuffer::ArenaDtor(void* object) {
  OpBuffer* _this = reinterpret_cast< OpBuffer* >(object);
  (void)_this;
}
void OpBuffer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpBuffer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpBuffer& OpBuffer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpBuffer_dump_5ftask_2eproto.base);
  return *internal_default_instance();
}


void OpBuffer::Clear() {
// @@protoc_insertion_point(message_clear_start:toolkit.dump.OpBuffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buffer_type_) -
      reinterpret_cast<char*>(&size_)) + sizeof(buffer_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpBuffer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .toolkit.dump.BufferType buffer_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_buffer_type(static_cast<::toolkit::dump::BufferType>(val));
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpBuffer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:toolkit.dump.OpBuffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .toolkit.dump.BufferType buffer_type = 1;
  if (this->buffer_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_buffer_type(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // uint64 size = 3;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toolkit.dump.OpBuffer)
  return target;
}

size_t OpBuffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:toolkit.dump.OpBuffer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint64 size = 3;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  // .toolkit.dump.BufferType buffer_type = 1;
  if (this->buffer_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_buffer_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpBuffer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:toolkit.dump.OpBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  const OpBuffer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpBuffer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:toolkit.dump.OpBuffer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:toolkit.dump.OpBuffer)
    MergeFrom(*source);
  }
}

void OpBuffer::MergeFrom(const OpBuffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:toolkit.dump.OpBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.buffer_type() != 0) {
    _internal_set_buffer_type(from._internal_buffer_type());
  }
}

void OpBuffer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:toolkit.dump.OpBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpBuffer::CopyFrom(const OpBuffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:toolkit.dump.OpBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpBuffer::IsInitialized() const {
  return true;
}

void OpBuffer::InternalSwap(OpBuffer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpBuffer, buffer_type_)
      + sizeof(OpBuffer::buffer_type_)
      - PROTOBUF_FIELD_OFFSET(OpBuffer, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpBuffer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OpAttr::InitAsDefaultInstance() {
}
class OpAttr::_Internal {
 public:
};

OpAttr::OpAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:toolkit.dump.OpAttr)
}
OpAttr::OpAttr(const OpAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:toolkit.dump.OpAttr)
}

void OpAttr::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpAttr_dump_5ftask_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OpAttr::~OpAttr() {
  // @@protoc_insertion_point(destructor:toolkit.dump.OpAttr)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OpAttr::ArenaDtor(void* object) {
  OpAttr* _this = reinterpret_cast< OpAttr* >(object);
  (void)_this;
}
void OpAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpAttr& OpAttr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpAttr_dump_5ftask_2eproto.base);
  return *internal_default_instance();
}


void OpAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:toolkit.dump.OpAttr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "toolkit.dump.OpAttr.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "toolkit.dump.OpAttr.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpAttr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:toolkit.dump.OpAttr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "toolkit.dump.OpAttr.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "toolkit.dump.OpAttr.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toolkit.dump.OpAttr)
  return target;
}

size_t OpAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:toolkit.dump.OpAttr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpAttr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:toolkit.dump.OpAttr)
  GOOGLE_DCHECK_NE(&from, this);
  const OpAttr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpAttr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:toolkit.dump.OpAttr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:toolkit.dump.OpAttr)
    MergeFrom(*source);
  }
}

void OpAttr::MergeFrom(const OpAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:toolkit.dump.OpAttr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void OpAttr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:toolkit.dump.OpAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpAttr::CopyFrom(const OpAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:toolkit.dump.OpAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpAttr::IsInitialized() const {
  return true;
}

void OpAttr::InternalSwap(OpAttr* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata OpAttr::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Workspace::InitAsDefaultInstance() {
}
class Workspace::_Internal {
 public:
};

Workspace::Workspace(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:toolkit.dump.Workspace)
}
Workspace::Workspace(const Workspace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&size_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:toolkit.dump.Workspace)
}

void Workspace::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Workspace_dump_5ftask_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&size_)) + sizeof(type_));
}

Workspace::~Workspace() {
  // @@protoc_insertion_point(destructor:toolkit.dump.Workspace)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Workspace::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Workspace::ArenaDtor(void* object) {
  Workspace* _this = reinterpret_cast< Workspace* >(object);
  (void)_this;
}
void Workspace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Workspace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Workspace& Workspace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Workspace_dump_5ftask_2eproto.base);
  return *internal_default_instance();
}


void Workspace::Clear() {
// @@protoc_insertion_point(message_clear_start:toolkit.dump.Workspace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&size_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Workspace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .toolkit.dump.Workspace.SpaceType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::toolkit::dump::Workspace_SpaceType>(val));
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Workspace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:toolkit.dump.Workspace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .toolkit.dump.Workspace.SpaceType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // uint64 size = 3;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toolkit.dump.Workspace)
  return target;
}

size_t Workspace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:toolkit.dump.Workspace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint64 size = 3;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  // .toolkit.dump.Workspace.SpaceType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Workspace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:toolkit.dump.Workspace)
  GOOGLE_DCHECK_NE(&from, this);
  const Workspace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Workspace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:toolkit.dump.Workspace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:toolkit.dump.Workspace)
    MergeFrom(*source);
  }
}

void Workspace::MergeFrom(const Workspace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:toolkit.dump.Workspace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Workspace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:toolkit.dump.Workspace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Workspace::CopyFrom(const Workspace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:toolkit.dump.Workspace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Workspace::IsInitialized() const {
  return true;
}

void Workspace::InternalSwap(Workspace* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Workspace, type_)
      + sizeof(Workspace::type_)
      - PROTOBUF_FIELD_OFFSET(Workspace, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Workspace::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DumpData::InitAsDefaultInstance() {
}
class DumpData::_Internal {
 public:
};

DumpData::DumpData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  output_(arena),
  input_(arena),
  buffer_(arena),
  attr_(arena),
  space_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:toolkit.dump.DumpData)
}
DumpData::DumpData(const DumpData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      output_(from.output_),
      input_(from.input_),
      buffer_(from.buffer_),
      attr_(from.attr_),
      space_(from.space_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  op_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_op_name().empty()) {
    op_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_op_name(),
      GetArena());
  }
  dump_time_ = from.dump_time_;
  // @@protoc_insertion_point(copy_constructor:toolkit.dump.DumpData)
}

void DumpData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DumpData_dump_5ftask_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dump_time_ = PROTOBUF_ULONGLONG(0);
}

DumpData::~DumpData() {
  // @@protoc_insertion_point(destructor:toolkit.dump.DumpData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DumpData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DumpData::ArenaDtor(void* object) {
  DumpData* _this = reinterpret_cast< DumpData* >(object);
  (void)_this;
}
void DumpData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DumpData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DumpData& DumpData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DumpData_dump_5ftask_2eproto.base);
  return *internal_default_instance();
}


void DumpData::Clear() {
// @@protoc_insertion_point(message_clear_start:toolkit.dump.DumpData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  output_.Clear();
  input_.Clear();
  buffer_.Clear();
  attr_.Clear();
  space_.Clear();
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  op_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dump_time_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DumpData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "toolkit.dump.DumpData.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 dump_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          dump_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .toolkit.dump.OpOutput output = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_output(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .toolkit.dump.OpInput input = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_input(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .toolkit.dump.OpBuffer buffer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buffer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // string op_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_op_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "toolkit.dump.DumpData.op_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .toolkit.dump.OpAttr attr = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .toolkit.dump.Workspace space = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_space(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DumpData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:toolkit.dump.DumpData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "toolkit.dump.DumpData.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // uint64 dump_time = 2;
  if (this->dump_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_dump_time(), target);
  }

  // repeated .toolkit.dump.OpOutput output = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_output_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_output(i), target, stream);
  }

  // repeated .toolkit.dump.OpInput input = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_input_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_input(i), target, stream);
  }

  // repeated .toolkit.dump.OpBuffer buffer = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buffer_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_buffer(i), target, stream);
  }

  // string op_name = 6;
  if (this->op_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_op_name().data(), static_cast<int>(this->_internal_op_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "toolkit.dump.DumpData.op_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_op_name(), target);
  }

  // repeated .toolkit.dump.OpAttr attr = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attr_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_attr(i), target, stream);
  }

  // repeated .toolkit.dump.Workspace space = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_space_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_space(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toolkit.dump.DumpData)
  return target;
}

size_t DumpData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:toolkit.dump.DumpData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .toolkit.dump.OpOutput output = 3;
  total_size += 1UL * this->_internal_output_size();
  for (const auto& msg : this->output_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .toolkit.dump.OpInput input = 4;
  total_size += 1UL * this->_internal_input_size();
  for (const auto& msg : this->input_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .toolkit.dump.OpBuffer buffer = 5;
  total_size += 1UL * this->_internal_buffer_size();
  for (const auto& msg : this->buffer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .toolkit.dump.OpAttr attr = 7;
  total_size += 1UL * this->_internal_attr_size();
  for (const auto& msg : this->attr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .toolkit.dump.Workspace space = 8;
  total_size += 1UL * this->_internal_space_size();
  for (const auto& msg : this->space_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string op_name = 6;
  if (this->op_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_op_name());
  }

  // uint64 dump_time = 2;
  if (this->dump_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_dump_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DumpData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:toolkit.dump.DumpData)
  GOOGLE_DCHECK_NE(&from, this);
  const DumpData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DumpData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:toolkit.dump.DumpData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:toolkit.dump.DumpData)
    MergeFrom(*source);
  }
}

void DumpData::MergeFrom(const DumpData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:toolkit.dump.DumpData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output_.MergeFrom(from.output_);
  input_.MergeFrom(from.input_);
  buffer_.MergeFrom(from.buffer_);
  attr_.MergeFrom(from.attr_);
  space_.MergeFrom(from.space_);
  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.op_name().size() > 0) {
    _internal_set_op_name(from._internal_op_name());
  }
  if (from.dump_time() != 0) {
    _internal_set_dump_time(from._internal_dump_time());
  }
}

void DumpData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:toolkit.dump.DumpData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DumpData::CopyFrom(const DumpData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:toolkit.dump.DumpData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DumpData::IsInitialized() const {
  return true;
}

void DumpData::InternalSwap(DumpData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  output_.InternalSwap(&other->output_);
  input_.InternalSwap(&other->input_);
  buffer_.InternalSwap(&other->buffer_);
  attr_.InternalSwap(&other->attr_);
  space_.InternalSwap(&other->space_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  op_name_.Swap(&other->op_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(dump_time_, other->dump_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DumpData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dump
}  // namespace toolkit
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::toolkit::dump::OriginalOp* Arena::CreateMaybeMessage< ::toolkit::dump::OriginalOp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::toolkit::dump::OriginalOp >(arena);
}
template<> PROTOBUF_NOINLINE ::toolkit::dump::Shape* Arena::CreateMaybeMessage< ::toolkit::dump::Shape >(Arena* arena) {
  return Arena::CreateMessageInternal< ::toolkit::dump::Shape >(arena);
}
template<> PROTOBUF_NOINLINE ::toolkit::dump::DimRange* Arena::CreateMaybeMessage< ::toolkit::dump::DimRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::toolkit::dump::DimRange >(arena);
}
template<> PROTOBUF_NOINLINE ::toolkit::dump::OpOutput* Arena::CreateMaybeMessage< ::toolkit::dump::OpOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::toolkit::dump::OpOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::toolkit::dump::OpInput* Arena::CreateMaybeMessage< ::toolkit::dump::OpInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::toolkit::dump::OpInput >(arena);
}
template<> PROTOBUF_NOINLINE ::toolkit::dump::OpBuffer* Arena::CreateMaybeMessage< ::toolkit::dump::OpBuffer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::toolkit::dump::OpBuffer >(arena);
}
template<> PROTOBUF_NOINLINE ::toolkit::dump::OpAttr* Arena::CreateMaybeMessage< ::toolkit::dump::OpAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::toolkit::dump::OpAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::toolkit::dump::Workspace* Arena::CreateMaybeMessage< ::toolkit::dump::Workspace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::toolkit::dump::Workspace >(arena);
}
template<> PROTOBUF_NOINLINE ::toolkit::dump::DumpData* Arena::CreateMaybeMessage< ::toolkit::dump::DumpData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::toolkit::dump::DumpData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
