// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dump_task.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dump_5ftask_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dump_5ftask_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dump_5ftask_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dump_5ftask_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dump_5ftask_2eproto;
namespace toolkit {
namespace dump {
class DimRange;
class DimRangeDefaultTypeInternal;
extern DimRangeDefaultTypeInternal _DimRange_default_instance_;
class DumpData;
class DumpDataDefaultTypeInternal;
extern DumpDataDefaultTypeInternal _DumpData_default_instance_;
class OpAttr;
class OpAttrDefaultTypeInternal;
extern OpAttrDefaultTypeInternal _OpAttr_default_instance_;
class OpBuffer;
class OpBufferDefaultTypeInternal;
extern OpBufferDefaultTypeInternal _OpBuffer_default_instance_;
class OpInput;
class OpInputDefaultTypeInternal;
extern OpInputDefaultTypeInternal _OpInput_default_instance_;
class OpOutput;
class OpOutputDefaultTypeInternal;
extern OpOutputDefaultTypeInternal _OpOutput_default_instance_;
class OriginalOp;
class OriginalOpDefaultTypeInternal;
extern OriginalOpDefaultTypeInternal _OriginalOp_default_instance_;
class Shape;
class ShapeDefaultTypeInternal;
extern ShapeDefaultTypeInternal _Shape_default_instance_;
class Workspace;
class WorkspaceDefaultTypeInternal;
extern WorkspaceDefaultTypeInternal _Workspace_default_instance_;
}  // namespace dump
}  // namespace toolkit
PROTOBUF_NAMESPACE_OPEN
template<> ::toolkit::dump::DimRange* Arena::CreateMaybeMessage<::toolkit::dump::DimRange>(Arena*);
template<> ::toolkit::dump::DumpData* Arena::CreateMaybeMessage<::toolkit::dump::DumpData>(Arena*);
template<> ::toolkit::dump::OpAttr* Arena::CreateMaybeMessage<::toolkit::dump::OpAttr>(Arena*);
template<> ::toolkit::dump::OpBuffer* Arena::CreateMaybeMessage<::toolkit::dump::OpBuffer>(Arena*);
template<> ::toolkit::dump::OpInput* Arena::CreateMaybeMessage<::toolkit::dump::OpInput>(Arena*);
template<> ::toolkit::dump::OpOutput* Arena::CreateMaybeMessage<::toolkit::dump::OpOutput>(Arena*);
template<> ::toolkit::dump::OriginalOp* Arena::CreateMaybeMessage<::toolkit::dump::OriginalOp>(Arena*);
template<> ::toolkit::dump::Shape* Arena::CreateMaybeMessage<::toolkit::dump::Shape>(Arena*);
template<> ::toolkit::dump::Workspace* Arena::CreateMaybeMessage<::toolkit::dump::Workspace>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace toolkit {
namespace dump {

enum Workspace_SpaceType : int {
  Workspace_SpaceType_LOG = 0,
  Workspace_SpaceType_Workspace_SpaceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Workspace_SpaceType_Workspace_SpaceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Workspace_SpaceType_IsValid(int value);
constexpr Workspace_SpaceType Workspace_SpaceType_SpaceType_MIN = Workspace_SpaceType_LOG;
constexpr Workspace_SpaceType Workspace_SpaceType_SpaceType_MAX = Workspace_SpaceType_LOG;
constexpr int Workspace_SpaceType_SpaceType_ARRAYSIZE = Workspace_SpaceType_SpaceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Workspace_SpaceType_descriptor();
template<typename T>
inline const std::string& Workspace_SpaceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Workspace_SpaceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Workspace_SpaceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Workspace_SpaceType_descriptor(), enum_t_value);
}
inline bool Workspace_SpaceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Workspace_SpaceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Workspace_SpaceType>(
    Workspace_SpaceType_descriptor(), name, value);
}
enum OutputDataType : int {
  DT_UNDEFINED = 0,
  DT_FLOAT = 1,
  DT_FLOAT16 = 2,
  DT_INT8 = 3,
  DT_UINT8 = 4,
  DT_INT16 = 5,
  DT_UINT16 = 6,
  DT_INT32 = 7,
  DT_INT64 = 8,
  DT_UINT32 = 9,
  DT_UINT64 = 10,
  DT_BOOL = 11,
  DT_DOUBLE = 12,
  DT_STRING = 13,
  DT_DUAL_SUB_INT8 = 14,
  DT_DUAL_SUB_UINT8 = 15,
  DT_COMPLEX64 = 16,
  DT_COMPLEX128 = 17,
  DT_QINT8 = 18,
  DT_QINT16 = 19,
  DT_QINT32 = 20,
  DT_QUINT8 = 21,
  DT_QUINT16 = 22,
  DT_RESOURCE = 23,
  DT_STRING_REF = 24,
  DT_DUAL = 25,
  DT_VARIANT = 26,
  OutputDataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OutputDataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OutputDataType_IsValid(int value);
constexpr OutputDataType OutputDataType_MIN = DT_UNDEFINED;
constexpr OutputDataType OutputDataType_MAX = DT_VARIANT;
constexpr int OutputDataType_ARRAYSIZE = OutputDataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OutputDataType_descriptor();
template<typename T>
inline const std::string& OutputDataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OutputDataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OutputDataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OutputDataType_descriptor(), enum_t_value);
}
inline bool OutputDataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OutputDataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OutputDataType>(
    OutputDataType_descriptor(), name, value);
}
enum OutputFormat : int {
  FORMAT_NCHW = 0,
  FORMAT_NHWC = 1,
  FORMAT_ND = 2,
  FORMAT_NC1HWC0 = 3,
  FORMAT_FRACTAL_Z = 4,
  FORMAT_NC1C0HWPAD = 5,
  FORMAT_NHWC1C0 = 6,
  FORMAT_FSR_NCHW = 7,
  FORMAT_FRACTAL_DECONV = 8,
  FORMAT_C1HWNC0 = 9,
  FORMAT_FRACTAL_DECONV_TRANSPOSE = 10,
  FORMAT_FRACTAL_DECONV_SP_STRIDE_TRANS = 11,
  FORMAT_NC1HWC0_C04 = 12,
  FORMAT_FRACTAL_Z_C04 = 13,
  FORMAT_CHWN = 14,
  FORMAT_FRACTAL_DECONV_SP_STRIDE8_TRANS = 15,
  FORMAT_HWCN = 16,
  FORMAT_NC1KHKWHWC0 = 17,
  FORMAT_BN_WEIGHT = 18,
  FORMAT_FILTER_HWCK = 19,
  FORMAT_HASHTABLE_LOOKUP_LOOKUPS = 20,
  FORMAT_HASHTABLE_LOOKUP_KEYS = 21,
  FORMAT_HASHTABLE_LOOKUP_VALUE = 22,
  FORMAT_HASHTABLE_LOOKUP_OUTPUT = 23,
  FORMAT_HASHTABLE_LOOKUP_HITS = 24,
  FORMAT_C1HWNCoC0 = 25,
  FORMAT_MD = 26,
  FORMAT_NDHWC = 27,
  FORMAT_FRACTAL_ZZ = 28,
  FORMAT_FRACTAL_NZ = 29,
  FORMAT_NCDHW = 30,
  FORMAT_DHWCH = 31,
  FORMAT_NDC1HWC0 = 32,
  FORMAT_FRACTAL_Z_3D = 33,
  FORMAT_CN = 34,
  FORMAT_NC = 35,
  FORMAT_DHWNC = 36,
  FORMAT_FRACTAL_Z_3D_TRANSPOSE = 37,
  FORMAT_FRACTAL_ZN_LSTM = 38,
  FORMAT_FRACTAL_Z_G = 39,
  FORMAT_RESERVED = 40,
  FORMAT_MAX = 255,
  OutputFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OutputFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OutputFormat_IsValid(int value);
constexpr OutputFormat OutputFormat_MIN = FORMAT_NCHW;
constexpr OutputFormat OutputFormat_MAX = FORMAT_MAX;
constexpr int OutputFormat_ARRAYSIZE = OutputFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OutputFormat_descriptor();
template<typename T>
inline const std::string& OutputFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OutputFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OutputFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OutputFormat_descriptor(), enum_t_value);
}
inline bool OutputFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OutputFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OutputFormat>(
    OutputFormat_descriptor(), name, value);
}
enum BufferType : int {
  L1 = 0,
  BufferType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BufferType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BufferType_IsValid(int value);
constexpr BufferType BufferType_MIN = L1;
constexpr BufferType BufferType_MAX = L1;
constexpr int BufferType_ARRAYSIZE = BufferType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BufferType_descriptor();
template<typename T>
inline const std::string& BufferType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BufferType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BufferType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BufferType_descriptor(), enum_t_value);
}
inline bool BufferType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BufferType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BufferType>(
    BufferType_descriptor(), name, value);
}
// ===================================================================

class OriginalOp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:toolkit.dump.OriginalOp) */ {
 public:
  inline OriginalOp() : OriginalOp(nullptr) {}
  virtual ~OriginalOp();

  OriginalOp(const OriginalOp& from);
  OriginalOp(OriginalOp&& from) noexcept
    : OriginalOp() {
    *this = ::std::move(from);
  }

  inline OriginalOp& operator=(const OriginalOp& from) {
    CopyFrom(from);
    return *this;
  }
  inline OriginalOp& operator=(OriginalOp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OriginalOp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OriginalOp* internal_default_instance() {
    return reinterpret_cast<const OriginalOp*>(
               &_OriginalOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OriginalOp& a, OriginalOp& b) {
    a.Swap(&b);
  }
  inline void Swap(OriginalOp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OriginalOp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OriginalOp* New() const final {
    return CreateMaybeMessage<OriginalOp>(nullptr);
  }

  OriginalOp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OriginalOp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OriginalOp& from);
  void MergeFrom(const OriginalOp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OriginalOp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "toolkit.dump.OriginalOp";
  }
  protected:
  explicit OriginalOp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dump_5ftask_2eproto);
    return ::descriptor_table_dump_5ftask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kOutputIndexFieldNumber = 2,
    kDataTypeFieldNumber = 3,
    kFormatFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 output_index = 2;
  void clear_output_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 output_index() const;
  void set_output_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_output_index() const;
  void _internal_set_output_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .toolkit.dump.OutputDataType data_type = 3;
  void clear_data_type();
  ::toolkit::dump::OutputDataType data_type() const;
  void set_data_type(::toolkit::dump::OutputDataType value);
  private:
  ::toolkit::dump::OutputDataType _internal_data_type() const;
  void _internal_set_data_type(::toolkit::dump::OutputDataType value);
  public:

  // .toolkit.dump.OutputFormat format = 4;
  void clear_format();
  ::toolkit::dump::OutputFormat format() const;
  void set_format(::toolkit::dump::OutputFormat value);
  private:
  ::toolkit::dump::OutputFormat _internal_format() const;
  void _internal_set_format(::toolkit::dump::OutputFormat value);
  public:

  // @@protoc_insertion_point(class_scope:toolkit.dump.OriginalOp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 output_index_;
  int data_type_;
  int format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dump_5ftask_2eproto;
};
// -------------------------------------------------------------------

class Shape PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:toolkit.dump.Shape) */ {
 public:
  inline Shape() : Shape(nullptr) {}
  virtual ~Shape();

  Shape(const Shape& from);
  Shape(Shape&& from) noexcept
    : Shape() {
    *this = ::std::move(from);
  }

  inline Shape& operator=(const Shape& from) {
    CopyFrom(from);
    return *this;
  }
  inline Shape& operator=(Shape&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Shape& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Shape* internal_default_instance() {
    return reinterpret_cast<const Shape*>(
               &_Shape_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Shape& a, Shape& b) {
    a.Swap(&b);
  }
  inline void Swap(Shape* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Shape* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Shape* New() const final {
    return CreateMaybeMessage<Shape>(nullptr);
  }

  Shape* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Shape>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Shape& from);
  void MergeFrom(const Shape& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Shape* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "toolkit.dump.Shape";
  }
  protected:
  explicit Shape(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dump_5ftask_2eproto);
    return ::descriptor_table_dump_5ftask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimFieldNumber = 1,
  };
  // repeated uint64 dim = 1;
  int dim_size() const;
  private:
  int _internal_dim_size() const;
  public:
  void clear_dim();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dim(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_dim() const;
  void _internal_add_dim(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_dim();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 dim(int index) const;
  void set_dim(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_dim(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      dim() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_dim();

  // @@protoc_insertion_point(class_scope:toolkit.dump.Shape)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > dim_;
  mutable std::atomic<int> _dim_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dump_5ftask_2eproto;
};
// -------------------------------------------------------------------

class DimRange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:toolkit.dump.DimRange) */ {
 public:
  inline DimRange() : DimRange(nullptr) {}
  virtual ~DimRange();

  DimRange(const DimRange& from);
  DimRange(DimRange&& from) noexcept
    : DimRange() {
    *this = ::std::move(from);
  }

  inline DimRange& operator=(const DimRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline DimRange& operator=(DimRange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DimRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DimRange* internal_default_instance() {
    return reinterpret_cast<const DimRange*>(
               &_DimRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DimRange& a, DimRange& b) {
    a.Swap(&b);
  }
  inline void Swap(DimRange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DimRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DimRange* New() const final {
    return CreateMaybeMessage<DimRange>(nullptr);
  }

  DimRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DimRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DimRange& from);
  void MergeFrom(const DimRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DimRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "toolkit.dump.DimRange";
  }
  protected:
  explicit DimRange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dump_5ftask_2eproto);
    return ::descriptor_table_dump_5ftask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimStartFieldNumber = 1,
    kDimEndFieldNumber = 2,
  };
  // uint64 dim_start = 1;
  void clear_dim_start();
  ::PROTOBUF_NAMESPACE_ID::uint64 dim_start() const;
  void set_dim_start(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dim_start() const;
  void _internal_set_dim_start(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 dim_end = 2;
  void clear_dim_end();
  ::PROTOBUF_NAMESPACE_ID::uint64 dim_end() const;
  void set_dim_end(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dim_end() const;
  void _internal_set_dim_end(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:toolkit.dump.DimRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dim_start_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dim_end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dump_5ftask_2eproto;
};
// -------------------------------------------------------------------

class OpOutput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:toolkit.dump.OpOutput) */ {
 public:
  inline OpOutput() : OpOutput(nullptr) {}
  virtual ~OpOutput();

  OpOutput(const OpOutput& from);
  OpOutput(OpOutput&& from) noexcept
    : OpOutput() {
    *this = ::std::move(from);
  }

  inline OpOutput& operator=(const OpOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpOutput& operator=(OpOutput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpOutput* internal_default_instance() {
    return reinterpret_cast<const OpOutput*>(
               &_OpOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OpOutput& a, OpOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(OpOutput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpOutput* New() const final {
    return CreateMaybeMessage<OpOutput>(nullptr);
  }

  OpOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpOutput& from);
  void MergeFrom(const OpOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "toolkit.dump.OpOutput";
  }
  protected:
  explicit OpOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dump_5ftask_2eproto);
    return ::descriptor_table_dump_5ftask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimRangeFieldNumber = 10,
    kDataFieldNumber = 5,
    kShapeFieldNumber = 3,
    kOriginalOpFieldNumber = 4,
    kOriginalShapeFieldNumber = 7,
    kDataTypeFieldNumber = 1,
    kFormatFieldNumber = 2,
    kSizeFieldNumber = 6,
    kAddressFieldNumber = 9,
    kSubFormatFieldNumber = 8,
  };
  // repeated .toolkit.dump.DimRange dim_range = 10;
  int dim_range_size() const;
  private:
  int _internal_dim_range_size() const;
  public:
  void clear_dim_range();
  ::toolkit::dump::DimRange* mutable_dim_range(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::dump::DimRange >*
      mutable_dim_range();
  private:
  const ::toolkit::dump::DimRange& _internal_dim_range(int index) const;
  ::toolkit::dump::DimRange* _internal_add_dim_range();
  public:
  const ::toolkit::dump::DimRange& dim_range(int index) const;
  ::toolkit::dump::DimRange* add_dim_range();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::dump::DimRange >&
      dim_range() const;

  // bytes data = 5;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .toolkit.dump.Shape shape = 3;
  bool has_shape() const;
  private:
  bool _internal_has_shape() const;
  public:
  void clear_shape();
  const ::toolkit::dump::Shape& shape() const;
  ::toolkit::dump::Shape* release_shape();
  ::toolkit::dump::Shape* mutable_shape();
  void set_allocated_shape(::toolkit::dump::Shape* shape);
  private:
  const ::toolkit::dump::Shape& _internal_shape() const;
  ::toolkit::dump::Shape* _internal_mutable_shape();
  public:
  void unsafe_arena_set_allocated_shape(
      ::toolkit::dump::Shape* shape);
  ::toolkit::dump::Shape* unsafe_arena_release_shape();

  // .toolkit.dump.OriginalOp original_op = 4;
  bool has_original_op() const;
  private:
  bool _internal_has_original_op() const;
  public:
  void clear_original_op();
  const ::toolkit::dump::OriginalOp& original_op() const;
  ::toolkit::dump::OriginalOp* release_original_op();
  ::toolkit::dump::OriginalOp* mutable_original_op();
  void set_allocated_original_op(::toolkit::dump::OriginalOp* original_op);
  private:
  const ::toolkit::dump::OriginalOp& _internal_original_op() const;
  ::toolkit::dump::OriginalOp* _internal_mutable_original_op();
  public:
  void unsafe_arena_set_allocated_original_op(
      ::toolkit::dump::OriginalOp* original_op);
  ::toolkit::dump::OriginalOp* unsafe_arena_release_original_op();

  // .toolkit.dump.Shape original_shape = 7;
  bool has_original_shape() const;
  private:
  bool _internal_has_original_shape() const;
  public:
  void clear_original_shape();
  const ::toolkit::dump::Shape& original_shape() const;
  ::toolkit::dump::Shape* release_original_shape();
  ::toolkit::dump::Shape* mutable_original_shape();
  void set_allocated_original_shape(::toolkit::dump::Shape* original_shape);
  private:
  const ::toolkit::dump::Shape& _internal_original_shape() const;
  ::toolkit::dump::Shape* _internal_mutable_original_shape();
  public:
  void unsafe_arena_set_allocated_original_shape(
      ::toolkit::dump::Shape* original_shape);
  ::toolkit::dump::Shape* unsafe_arena_release_original_shape();

  // .toolkit.dump.OutputDataType data_type = 1;
  void clear_data_type();
  ::toolkit::dump::OutputDataType data_type() const;
  void set_data_type(::toolkit::dump::OutputDataType value);
  private:
  ::toolkit::dump::OutputDataType _internal_data_type() const;
  void _internal_set_data_type(::toolkit::dump::OutputDataType value);
  public:

  // .toolkit.dump.OutputFormat format = 2;
  void clear_format();
  ::toolkit::dump::OutputFormat format() const;
  void set_format(::toolkit::dump::OutputFormat value);
  private:
  ::toolkit::dump::OutputFormat _internal_format() const;
  void _internal_set_format(::toolkit::dump::OutputFormat value);
  public:

  // uint64 size = 6;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 address = 9;
  void clear_address();
  ::PROTOBUF_NAMESPACE_ID::uint64 address() const;
  void set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_address() const;
  void _internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 sub_format = 8;
  void clear_sub_format();
  ::PROTOBUF_NAMESPACE_ID::int32 sub_format() const;
  void set_sub_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sub_format() const;
  void _internal_set_sub_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:toolkit.dump.OpOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::dump::DimRange > dim_range_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::toolkit::dump::Shape* shape_;
  ::toolkit::dump::OriginalOp* original_op_;
  ::toolkit::dump::Shape* original_shape_;
  int data_type_;
  int format_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 address_;
  ::PROTOBUF_NAMESPACE_ID::int32 sub_format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dump_5ftask_2eproto;
};
// -------------------------------------------------------------------

class OpInput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:toolkit.dump.OpInput) */ {
 public:
  inline OpInput() : OpInput(nullptr) {}
  virtual ~OpInput();

  OpInput(const OpInput& from);
  OpInput(OpInput&& from) noexcept
    : OpInput() {
    *this = ::std::move(from);
  }

  inline OpInput& operator=(const OpInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpInput& operator=(OpInput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpInput* internal_default_instance() {
    return reinterpret_cast<const OpInput*>(
               &_OpInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OpInput& a, OpInput& b) {
    a.Swap(&b);
  }
  inline void Swap(OpInput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpInput* New() const final {
    return CreateMaybeMessage<OpInput>(nullptr);
  }

  OpInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpInput& from);
  void MergeFrom(const OpInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "toolkit.dump.OpInput";
  }
  protected:
  explicit OpInput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dump_5ftask_2eproto);
    return ::descriptor_table_dump_5ftask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 4,
    kShapeFieldNumber = 3,
    kOriginalShapeFieldNumber = 6,
    kDataTypeFieldNumber = 1,
    kFormatFieldNumber = 2,
    kSizeFieldNumber = 5,
    kAddressFieldNumber = 8,
    kSubFormatFieldNumber = 7,
  };
  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .toolkit.dump.Shape shape = 3;
  bool has_shape() const;
  private:
  bool _internal_has_shape() const;
  public:
  void clear_shape();
  const ::toolkit::dump::Shape& shape() const;
  ::toolkit::dump::Shape* release_shape();
  ::toolkit::dump::Shape* mutable_shape();
  void set_allocated_shape(::toolkit::dump::Shape* shape);
  private:
  const ::toolkit::dump::Shape& _internal_shape() const;
  ::toolkit::dump::Shape* _internal_mutable_shape();
  public:
  void unsafe_arena_set_allocated_shape(
      ::toolkit::dump::Shape* shape);
  ::toolkit::dump::Shape* unsafe_arena_release_shape();

  // .toolkit.dump.Shape original_shape = 6;
  bool has_original_shape() const;
  private:
  bool _internal_has_original_shape() const;
  public:
  void clear_original_shape();
  const ::toolkit::dump::Shape& original_shape() const;
  ::toolkit::dump::Shape* release_original_shape();
  ::toolkit::dump::Shape* mutable_original_shape();
  void set_allocated_original_shape(::toolkit::dump::Shape* original_shape);
  private:
  const ::toolkit::dump::Shape& _internal_original_shape() const;
  ::toolkit::dump::Shape* _internal_mutable_original_shape();
  public:
  void unsafe_arena_set_allocated_original_shape(
      ::toolkit::dump::Shape* original_shape);
  ::toolkit::dump::Shape* unsafe_arena_release_original_shape();

  // .toolkit.dump.OutputDataType data_type = 1;
  void clear_data_type();
  ::toolkit::dump::OutputDataType data_type() const;
  void set_data_type(::toolkit::dump::OutputDataType value);
  private:
  ::toolkit::dump::OutputDataType _internal_data_type() const;
  void _internal_set_data_type(::toolkit::dump::OutputDataType value);
  public:

  // .toolkit.dump.OutputFormat format = 2;
  void clear_format();
  ::toolkit::dump::OutputFormat format() const;
  void set_format(::toolkit::dump::OutputFormat value);
  private:
  ::toolkit::dump::OutputFormat _internal_format() const;
  void _internal_set_format(::toolkit::dump::OutputFormat value);
  public:

  // uint64 size = 5;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 address = 8;
  void clear_address();
  ::PROTOBUF_NAMESPACE_ID::uint64 address() const;
  void set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_address() const;
  void _internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 sub_format = 7;
  void clear_sub_format();
  ::PROTOBUF_NAMESPACE_ID::int32 sub_format() const;
  void set_sub_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sub_format() const;
  void _internal_set_sub_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:toolkit.dump.OpInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::toolkit::dump::Shape* shape_;
  ::toolkit::dump::Shape* original_shape_;
  int data_type_;
  int format_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 address_;
  ::PROTOBUF_NAMESPACE_ID::int32 sub_format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dump_5ftask_2eproto;
};
// -------------------------------------------------------------------

class OpBuffer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:toolkit.dump.OpBuffer) */ {
 public:
  inline OpBuffer() : OpBuffer(nullptr) {}
  virtual ~OpBuffer();

  OpBuffer(const OpBuffer& from);
  OpBuffer(OpBuffer&& from) noexcept
    : OpBuffer() {
    *this = ::std::move(from);
  }

  inline OpBuffer& operator=(const OpBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpBuffer& operator=(OpBuffer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpBuffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpBuffer* internal_default_instance() {
    return reinterpret_cast<const OpBuffer*>(
               &_OpBuffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OpBuffer& a, OpBuffer& b) {
    a.Swap(&b);
  }
  inline void Swap(OpBuffer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpBuffer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpBuffer* New() const final {
    return CreateMaybeMessage<OpBuffer>(nullptr);
  }

  OpBuffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpBuffer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpBuffer& from);
  void MergeFrom(const OpBuffer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpBuffer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "toolkit.dump.OpBuffer";
  }
  protected:
  explicit OpBuffer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dump_5ftask_2eproto);
    return ::descriptor_table_dump_5ftask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kSizeFieldNumber = 3,
    kBufferTypeFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint64 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .toolkit.dump.BufferType buffer_type = 1;
  void clear_buffer_type();
  ::toolkit::dump::BufferType buffer_type() const;
  void set_buffer_type(::toolkit::dump::BufferType value);
  private:
  ::toolkit::dump::BufferType _internal_buffer_type() const;
  void _internal_set_buffer_type(::toolkit::dump::BufferType value);
  public:

  // @@protoc_insertion_point(class_scope:toolkit.dump.OpBuffer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  int buffer_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dump_5ftask_2eproto;
};
// -------------------------------------------------------------------

class OpAttr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:toolkit.dump.OpAttr) */ {
 public:
  inline OpAttr() : OpAttr(nullptr) {}
  virtual ~OpAttr();

  OpAttr(const OpAttr& from);
  OpAttr(OpAttr&& from) noexcept
    : OpAttr() {
    *this = ::std::move(from);
  }

  inline OpAttr& operator=(const OpAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpAttr& operator=(OpAttr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpAttr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpAttr* internal_default_instance() {
    return reinterpret_cast<const OpAttr*>(
               &_OpAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(OpAttr& a, OpAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(OpAttr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpAttr* New() const final {
    return CreateMaybeMessage<OpAttr>(nullptr);
  }

  OpAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpAttr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpAttr& from);
  void MergeFrom(const OpAttr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpAttr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "toolkit.dump.OpAttr";
  }
  protected:
  explicit OpAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dump_5ftask_2eproto);
    return ::descriptor_table_dump_5ftask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:toolkit.dump.OpAttr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dump_5ftask_2eproto;
};
// -------------------------------------------------------------------

class Workspace PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:toolkit.dump.Workspace) */ {
 public:
  inline Workspace() : Workspace(nullptr) {}
  virtual ~Workspace();

  Workspace(const Workspace& from);
  Workspace(Workspace&& from) noexcept
    : Workspace() {
    *this = ::std::move(from);
  }

  inline Workspace& operator=(const Workspace& from) {
    CopyFrom(from);
    return *this;
  }
  inline Workspace& operator=(Workspace&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Workspace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Workspace* internal_default_instance() {
    return reinterpret_cast<const Workspace*>(
               &_Workspace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Workspace& a, Workspace& b) {
    a.Swap(&b);
  }
  inline void Swap(Workspace* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Workspace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Workspace* New() const final {
    return CreateMaybeMessage<Workspace>(nullptr);
  }

  Workspace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Workspace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Workspace& from);
  void MergeFrom(const Workspace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Workspace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "toolkit.dump.Workspace";
  }
  protected:
  explicit Workspace(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dump_5ftask_2eproto);
    return ::descriptor_table_dump_5ftask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Workspace_SpaceType SpaceType;
  static constexpr SpaceType LOG =
    Workspace_SpaceType_LOG;
  static inline bool SpaceType_IsValid(int value) {
    return Workspace_SpaceType_IsValid(value);
  }
  static constexpr SpaceType SpaceType_MIN =
    Workspace_SpaceType_SpaceType_MIN;
  static constexpr SpaceType SpaceType_MAX =
    Workspace_SpaceType_SpaceType_MAX;
  static constexpr int SpaceType_ARRAYSIZE =
    Workspace_SpaceType_SpaceType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SpaceType_descriptor() {
    return Workspace_SpaceType_descriptor();
  }
  template<typename T>
  static inline const std::string& SpaceType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SpaceType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SpaceType_Name.");
    return Workspace_SpaceType_Name(enum_t_value);
  }
  static inline bool SpaceType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SpaceType* value) {
    return Workspace_SpaceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kSizeFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint64 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .toolkit.dump.Workspace.SpaceType type = 1;
  void clear_type();
  ::toolkit::dump::Workspace_SpaceType type() const;
  void set_type(::toolkit::dump::Workspace_SpaceType value);
  private:
  ::toolkit::dump::Workspace_SpaceType _internal_type() const;
  void _internal_set_type(::toolkit::dump::Workspace_SpaceType value);
  public:

  // @@protoc_insertion_point(class_scope:toolkit.dump.Workspace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dump_5ftask_2eproto;
};
// -------------------------------------------------------------------

class DumpData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:toolkit.dump.DumpData) */ {
 public:
  inline DumpData() : DumpData(nullptr) {}
  virtual ~DumpData();

  DumpData(const DumpData& from);
  DumpData(DumpData&& from) noexcept
    : DumpData() {
    *this = ::std::move(from);
  }

  inline DumpData& operator=(const DumpData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DumpData& operator=(DumpData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DumpData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DumpData* internal_default_instance() {
    return reinterpret_cast<const DumpData*>(
               &_DumpData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DumpData& a, DumpData& b) {
    a.Swap(&b);
  }
  inline void Swap(DumpData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DumpData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DumpData* New() const final {
    return CreateMaybeMessage<DumpData>(nullptr);
  }

  DumpData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DumpData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DumpData& from);
  void MergeFrom(const DumpData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DumpData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "toolkit.dump.DumpData";
  }
  protected:
  explicit DumpData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dump_5ftask_2eproto);
    return ::descriptor_table_dump_5ftask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputFieldNumber = 3,
    kInputFieldNumber = 4,
    kBufferFieldNumber = 5,
    kAttrFieldNumber = 7,
    kSpaceFieldNumber = 8,
    kVersionFieldNumber = 1,
    kOpNameFieldNumber = 6,
    kDumpTimeFieldNumber = 2,
  };
  // repeated .toolkit.dump.OpOutput output = 3;
  int output_size() const;
  private:
  int _internal_output_size() const;
  public:
  void clear_output();
  ::toolkit::dump::OpOutput* mutable_output(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::dump::OpOutput >*
      mutable_output();
  private:
  const ::toolkit::dump::OpOutput& _internal_output(int index) const;
  ::toolkit::dump::OpOutput* _internal_add_output();
  public:
  const ::toolkit::dump::OpOutput& output(int index) const;
  ::toolkit::dump::OpOutput* add_output();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::dump::OpOutput >&
      output() const;

  // repeated .toolkit.dump.OpInput input = 4;
  int input_size() const;
  private:
  int _internal_input_size() const;
  public:
  void clear_input();
  ::toolkit::dump::OpInput* mutable_input(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::dump::OpInput >*
      mutable_input();
  private:
  const ::toolkit::dump::OpInput& _internal_input(int index) const;
  ::toolkit::dump::OpInput* _internal_add_input();
  public:
  const ::toolkit::dump::OpInput& input(int index) const;
  ::toolkit::dump::OpInput* add_input();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::dump::OpInput >&
      input() const;

  // repeated .toolkit.dump.OpBuffer buffer = 5;
  int buffer_size() const;
  private:
  int _internal_buffer_size() const;
  public:
  void clear_buffer();
  ::toolkit::dump::OpBuffer* mutable_buffer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::dump::OpBuffer >*
      mutable_buffer();
  private:
  const ::toolkit::dump::OpBuffer& _internal_buffer(int index) const;
  ::toolkit::dump::OpBuffer* _internal_add_buffer();
  public:
  const ::toolkit::dump::OpBuffer& buffer(int index) const;
  ::toolkit::dump::OpBuffer* add_buffer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::dump::OpBuffer >&
      buffer() const;

  // repeated .toolkit.dump.OpAttr attr = 7;
  int attr_size() const;
  private:
  int _internal_attr_size() const;
  public:
  void clear_attr();
  ::toolkit::dump::OpAttr* mutable_attr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::dump::OpAttr >*
      mutable_attr();
  private:
  const ::toolkit::dump::OpAttr& _internal_attr(int index) const;
  ::toolkit::dump::OpAttr* _internal_add_attr();
  public:
  const ::toolkit::dump::OpAttr& attr(int index) const;
  ::toolkit::dump::OpAttr* add_attr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::dump::OpAttr >&
      attr() const;

  // repeated .toolkit.dump.Workspace space = 8;
  int space_size() const;
  private:
  int _internal_space_size() const;
  public:
  void clear_space();
  ::toolkit::dump::Workspace* mutable_space(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::dump::Workspace >*
      mutable_space();
  private:
  const ::toolkit::dump::Workspace& _internal_space(int index) const;
  ::toolkit::dump::Workspace* _internal_add_space();
  public:
  const ::toolkit::dump::Workspace& space(int index) const;
  ::toolkit::dump::Workspace* add_space();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::dump::Workspace >&
      space() const;

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string op_name = 6;
  void clear_op_name();
  const std::string& op_name() const;
  void set_op_name(const std::string& value);
  void set_op_name(std::string&& value);
  void set_op_name(const char* value);
  void set_op_name(const char* value, size_t size);
  std::string* mutable_op_name();
  std::string* release_op_name();
  void set_allocated_op_name(std::string* op_name);
  private:
  const std::string& _internal_op_name() const;
  void _internal_set_op_name(const std::string& value);
  std::string* _internal_mutable_op_name();
  public:

  // uint64 dump_time = 2;
  void clear_dump_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 dump_time() const;
  void set_dump_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dump_time() const;
  void _internal_set_dump_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:toolkit.dump.DumpData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::dump::OpOutput > output_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::dump::OpInput > input_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::dump::OpBuffer > buffer_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::dump::OpAttr > attr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::dump::Workspace > space_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr op_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dump_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dump_5ftask_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OriginalOp

// string name = 1;
inline void OriginalOp::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OriginalOp::name() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.OriginalOp.name)
  return _internal_name();
}
inline void OriginalOp::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:toolkit.dump.OriginalOp.name)
}
inline std::string* OriginalOp::mutable_name() {
  // @@protoc_insertion_point(field_mutable:toolkit.dump.OriginalOp.name)
  return _internal_mutable_name();
}
inline const std::string& OriginalOp::_internal_name() const {
  return name_.Get();
}
inline void OriginalOp::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OriginalOp::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:toolkit.dump.OriginalOp.name)
}
inline void OriginalOp::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:toolkit.dump.OriginalOp.name)
}
inline void OriginalOp::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:toolkit.dump.OriginalOp.name)
}
inline std::string* OriginalOp::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OriginalOp::release_name() {
  // @@protoc_insertion_point(field_release:toolkit.dump.OriginalOp.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OriginalOp::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:toolkit.dump.OriginalOp.name)
}

// uint32 output_index = 2;
inline void OriginalOp::clear_output_index() {
  output_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OriginalOp::_internal_output_index() const {
  return output_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OriginalOp::output_index() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.OriginalOp.output_index)
  return _internal_output_index();
}
inline void OriginalOp::_internal_set_output_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  output_index_ = value;
}
inline void OriginalOp::set_output_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_output_index(value);
  // @@protoc_insertion_point(field_set:toolkit.dump.OriginalOp.output_index)
}

// .toolkit.dump.OutputDataType data_type = 3;
inline void OriginalOp::clear_data_type() {
  data_type_ = 0;
}
inline ::toolkit::dump::OutputDataType OriginalOp::_internal_data_type() const {
  return static_cast< ::toolkit::dump::OutputDataType >(data_type_);
}
inline ::toolkit::dump::OutputDataType OriginalOp::data_type() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.OriginalOp.data_type)
  return _internal_data_type();
}
inline void OriginalOp::_internal_set_data_type(::toolkit::dump::OutputDataType value) {
  
  data_type_ = value;
}
inline void OriginalOp::set_data_type(::toolkit::dump::OutputDataType value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:toolkit.dump.OriginalOp.data_type)
}

// .toolkit.dump.OutputFormat format = 4;
inline void OriginalOp::clear_format() {
  format_ = 0;
}
inline ::toolkit::dump::OutputFormat OriginalOp::_internal_format() const {
  return static_cast< ::toolkit::dump::OutputFormat >(format_);
}
inline ::toolkit::dump::OutputFormat OriginalOp::format() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.OriginalOp.format)
  return _internal_format();
}
inline void OriginalOp::_internal_set_format(::toolkit::dump::OutputFormat value) {
  
  format_ = value;
}
inline void OriginalOp::set_format(::toolkit::dump::OutputFormat value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:toolkit.dump.OriginalOp.format)
}

// -------------------------------------------------------------------

// Shape

// repeated uint64 dim = 1;
inline int Shape::_internal_dim_size() const {
  return dim_.size();
}
inline int Shape::dim_size() const {
  return _internal_dim_size();
}
inline void Shape::clear_dim() {
  dim_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Shape::_internal_dim(int index) const {
  return dim_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Shape::dim(int index) const {
  // @@protoc_insertion_point(field_get:toolkit.dump.Shape.dim)
  return _internal_dim(index);
}
inline void Shape::set_dim(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:toolkit.dump.Shape.dim)
}
inline void Shape::_internal_add_dim(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  dim_.Add(value);
}
inline void Shape::add_dim(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_dim(value);
  // @@protoc_insertion_point(field_add:toolkit.dump.Shape.dim)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Shape::_internal_dim() const {
  return dim_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Shape::dim() const {
  // @@protoc_insertion_point(field_list:toolkit.dump.Shape.dim)
  return _internal_dim();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Shape::_internal_mutable_dim() {
  return &dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Shape::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:toolkit.dump.Shape.dim)
  return _internal_mutable_dim();
}

// -------------------------------------------------------------------

// DimRange

// uint64 dim_start = 1;
inline void DimRange::clear_dim_start() {
  dim_start_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DimRange::_internal_dim_start() const {
  return dim_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DimRange::dim_start() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.DimRange.dim_start)
  return _internal_dim_start();
}
inline void DimRange::_internal_set_dim_start(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  dim_start_ = value;
}
inline void DimRange::set_dim_start(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_dim_start(value);
  // @@protoc_insertion_point(field_set:toolkit.dump.DimRange.dim_start)
}

// uint64 dim_end = 2;
inline void DimRange::clear_dim_end() {
  dim_end_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DimRange::_internal_dim_end() const {
  return dim_end_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DimRange::dim_end() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.DimRange.dim_end)
  return _internal_dim_end();
}
inline void DimRange::_internal_set_dim_end(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  dim_end_ = value;
}
inline void DimRange::set_dim_end(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_dim_end(value);
  // @@protoc_insertion_point(field_set:toolkit.dump.DimRange.dim_end)
}

// -------------------------------------------------------------------

// OpOutput

// .toolkit.dump.OutputDataType data_type = 1;
inline void OpOutput::clear_data_type() {
  data_type_ = 0;
}
inline ::toolkit::dump::OutputDataType OpOutput::_internal_data_type() const {
  return static_cast< ::toolkit::dump::OutputDataType >(data_type_);
}
inline ::toolkit::dump::OutputDataType OpOutput::data_type() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.OpOutput.data_type)
  return _internal_data_type();
}
inline void OpOutput::_internal_set_data_type(::toolkit::dump::OutputDataType value) {
  
  data_type_ = value;
}
inline void OpOutput::set_data_type(::toolkit::dump::OutputDataType value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:toolkit.dump.OpOutput.data_type)
}

// .toolkit.dump.OutputFormat format = 2;
inline void OpOutput::clear_format() {
  format_ = 0;
}
inline ::toolkit::dump::OutputFormat OpOutput::_internal_format() const {
  return static_cast< ::toolkit::dump::OutputFormat >(format_);
}
inline ::toolkit::dump::OutputFormat OpOutput::format() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.OpOutput.format)
  return _internal_format();
}
inline void OpOutput::_internal_set_format(::toolkit::dump::OutputFormat value) {
  
  format_ = value;
}
inline void OpOutput::set_format(::toolkit::dump::OutputFormat value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:toolkit.dump.OpOutput.format)
}

// .toolkit.dump.Shape shape = 3;
inline bool OpOutput::_internal_has_shape() const {
  return this != internal_default_instance() && shape_ != nullptr;
}
inline bool OpOutput::has_shape() const {
  return _internal_has_shape();
}
inline void OpOutput::clear_shape() {
  if (GetArena() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
}
inline const ::toolkit::dump::Shape& OpOutput::_internal_shape() const {
  const ::toolkit::dump::Shape* p = shape_;
  return p != nullptr ? *p : *reinterpret_cast<const ::toolkit::dump::Shape*>(
      &::toolkit::dump::_Shape_default_instance_);
}
inline const ::toolkit::dump::Shape& OpOutput::shape() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.OpOutput.shape)
  return _internal_shape();
}
inline void OpOutput::unsafe_arena_set_allocated_shape(
    ::toolkit::dump::Shape* shape) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:toolkit.dump.OpOutput.shape)
}
inline ::toolkit::dump::Shape* OpOutput::release_shape() {
  
  ::toolkit::dump::Shape* temp = shape_;
  shape_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::toolkit::dump::Shape* OpOutput::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_release:toolkit.dump.OpOutput.shape)
  
  ::toolkit::dump::Shape* temp = shape_;
  shape_ = nullptr;
  return temp;
}
inline ::toolkit::dump::Shape* OpOutput::_internal_mutable_shape() {
  
  if (shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::toolkit::dump::Shape>(GetArena());
    shape_ = p;
  }
  return shape_;
}
inline ::toolkit::dump::Shape* OpOutput::mutable_shape() {
  // @@protoc_insertion_point(field_mutable:toolkit.dump.OpOutput.shape)
  return _internal_mutable_shape();
}
inline void OpOutput::set_allocated_shape(::toolkit::dump::Shape* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shape_;
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shape);
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    
  } else {
    
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:toolkit.dump.OpOutput.shape)
}

// .toolkit.dump.OriginalOp original_op = 4;
inline bool OpOutput::_internal_has_original_op() const {
  return this != internal_default_instance() && original_op_ != nullptr;
}
inline bool OpOutput::has_original_op() const {
  return _internal_has_original_op();
}
inline void OpOutput::clear_original_op() {
  if (GetArena() == nullptr && original_op_ != nullptr) {
    delete original_op_;
  }
  original_op_ = nullptr;
}
inline const ::toolkit::dump::OriginalOp& OpOutput::_internal_original_op() const {
  const ::toolkit::dump::OriginalOp* p = original_op_;
  return p != nullptr ? *p : *reinterpret_cast<const ::toolkit::dump::OriginalOp*>(
      &::toolkit::dump::_OriginalOp_default_instance_);
}
inline const ::toolkit::dump::OriginalOp& OpOutput::original_op() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.OpOutput.original_op)
  return _internal_original_op();
}
inline void OpOutput::unsafe_arena_set_allocated_original_op(
    ::toolkit::dump::OriginalOp* original_op) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_op_);
  }
  original_op_ = original_op;
  if (original_op) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:toolkit.dump.OpOutput.original_op)
}
inline ::toolkit::dump::OriginalOp* OpOutput::release_original_op() {
  
  ::toolkit::dump::OriginalOp* temp = original_op_;
  original_op_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::toolkit::dump::OriginalOp* OpOutput::unsafe_arena_release_original_op() {
  // @@protoc_insertion_point(field_release:toolkit.dump.OpOutput.original_op)
  
  ::toolkit::dump::OriginalOp* temp = original_op_;
  original_op_ = nullptr;
  return temp;
}
inline ::toolkit::dump::OriginalOp* OpOutput::_internal_mutable_original_op() {
  
  if (original_op_ == nullptr) {
    auto* p = CreateMaybeMessage<::toolkit::dump::OriginalOp>(GetArena());
    original_op_ = p;
  }
  return original_op_;
}
inline ::toolkit::dump::OriginalOp* OpOutput::mutable_original_op() {
  // @@protoc_insertion_point(field_mutable:toolkit.dump.OpOutput.original_op)
  return _internal_mutable_original_op();
}
inline void OpOutput::set_allocated_original_op(::toolkit::dump::OriginalOp* original_op) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete original_op_;
  }
  if (original_op) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(original_op);
    if (message_arena != submessage_arena) {
      original_op = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_op, submessage_arena);
    }
    
  } else {
    
  }
  original_op_ = original_op;
  // @@protoc_insertion_point(field_set_allocated:toolkit.dump.OpOutput.original_op)
}

// bytes data = 5;
inline void OpOutput::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OpOutput::data() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.OpOutput.data)
  return _internal_data();
}
inline void OpOutput::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:toolkit.dump.OpOutput.data)
}
inline std::string* OpOutput::mutable_data() {
  // @@protoc_insertion_point(field_mutable:toolkit.dump.OpOutput.data)
  return _internal_mutable_data();
}
inline const std::string& OpOutput::_internal_data() const {
  return data_.Get();
}
inline void OpOutput::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OpOutput::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:toolkit.dump.OpOutput.data)
}
inline void OpOutput::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:toolkit.dump.OpOutput.data)
}
inline void OpOutput::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:toolkit.dump.OpOutput.data)
}
inline std::string* OpOutput::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OpOutput::release_data() {
  // @@protoc_insertion_point(field_release:toolkit.dump.OpOutput.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpOutput::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:toolkit.dump.OpOutput.data)
}

// uint64 size = 6;
inline void OpOutput::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OpOutput::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OpOutput::size() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.OpOutput.size)
  return _internal_size();
}
inline void OpOutput::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void OpOutput::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:toolkit.dump.OpOutput.size)
}

// .toolkit.dump.Shape original_shape = 7;
inline bool OpOutput::_internal_has_original_shape() const {
  return this != internal_default_instance() && original_shape_ != nullptr;
}
inline bool OpOutput::has_original_shape() const {
  return _internal_has_original_shape();
}
inline void OpOutput::clear_original_shape() {
  if (GetArena() == nullptr && original_shape_ != nullptr) {
    delete original_shape_;
  }
  original_shape_ = nullptr;
}
inline const ::toolkit::dump::Shape& OpOutput::_internal_original_shape() const {
  const ::toolkit::dump::Shape* p = original_shape_;
  return p != nullptr ? *p : *reinterpret_cast<const ::toolkit::dump::Shape*>(
      &::toolkit::dump::_Shape_default_instance_);
}
inline const ::toolkit::dump::Shape& OpOutput::original_shape() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.OpOutput.original_shape)
  return _internal_original_shape();
}
inline void OpOutput::unsafe_arena_set_allocated_original_shape(
    ::toolkit::dump::Shape* original_shape) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_shape_);
  }
  original_shape_ = original_shape;
  if (original_shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:toolkit.dump.OpOutput.original_shape)
}
inline ::toolkit::dump::Shape* OpOutput::release_original_shape() {
  
  ::toolkit::dump::Shape* temp = original_shape_;
  original_shape_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::toolkit::dump::Shape* OpOutput::unsafe_arena_release_original_shape() {
  // @@protoc_insertion_point(field_release:toolkit.dump.OpOutput.original_shape)
  
  ::toolkit::dump::Shape* temp = original_shape_;
  original_shape_ = nullptr;
  return temp;
}
inline ::toolkit::dump::Shape* OpOutput::_internal_mutable_original_shape() {
  
  if (original_shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::toolkit::dump::Shape>(GetArena());
    original_shape_ = p;
  }
  return original_shape_;
}
inline ::toolkit::dump::Shape* OpOutput::mutable_original_shape() {
  // @@protoc_insertion_point(field_mutable:toolkit.dump.OpOutput.original_shape)
  return _internal_mutable_original_shape();
}
inline void OpOutput::set_allocated_original_shape(::toolkit::dump::Shape* original_shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete original_shape_;
  }
  if (original_shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(original_shape);
    if (message_arena != submessage_arena) {
      original_shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_shape, submessage_arena);
    }
    
  } else {
    
  }
  original_shape_ = original_shape;
  // @@protoc_insertion_point(field_set_allocated:toolkit.dump.OpOutput.original_shape)
}

// int32 sub_format = 8;
inline void OpOutput::clear_sub_format() {
  sub_format_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpOutput::_internal_sub_format() const {
  return sub_format_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpOutput::sub_format() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.OpOutput.sub_format)
  return _internal_sub_format();
}
inline void OpOutput::_internal_set_sub_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sub_format_ = value;
}
inline void OpOutput::set_sub_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sub_format(value);
  // @@protoc_insertion_point(field_set:toolkit.dump.OpOutput.sub_format)
}

// uint64 address = 9;
inline void OpOutput::clear_address() {
  address_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OpOutput::_internal_address() const {
  return address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OpOutput::address() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.OpOutput.address)
  return _internal_address();
}
inline void OpOutput::_internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  address_ = value;
}
inline void OpOutput::set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:toolkit.dump.OpOutput.address)
}

// repeated .toolkit.dump.DimRange dim_range = 10;
inline int OpOutput::_internal_dim_range_size() const {
  return dim_range_.size();
}
inline int OpOutput::dim_range_size() const {
  return _internal_dim_range_size();
}
inline void OpOutput::clear_dim_range() {
  dim_range_.Clear();
}
inline ::toolkit::dump::DimRange* OpOutput::mutable_dim_range(int index) {
  // @@protoc_insertion_point(field_mutable:toolkit.dump.OpOutput.dim_range)
  return dim_range_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::dump::DimRange >*
OpOutput::mutable_dim_range() {
  // @@protoc_insertion_point(field_mutable_list:toolkit.dump.OpOutput.dim_range)
  return &dim_range_;
}
inline const ::toolkit::dump::DimRange& OpOutput::_internal_dim_range(int index) const {
  return dim_range_.Get(index);
}
inline const ::toolkit::dump::DimRange& OpOutput::dim_range(int index) const {
  // @@protoc_insertion_point(field_get:toolkit.dump.OpOutput.dim_range)
  return _internal_dim_range(index);
}
inline ::toolkit::dump::DimRange* OpOutput::_internal_add_dim_range() {
  return dim_range_.Add();
}
inline ::toolkit::dump::DimRange* OpOutput::add_dim_range() {
  // @@protoc_insertion_point(field_add:toolkit.dump.OpOutput.dim_range)
  return _internal_add_dim_range();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::dump::DimRange >&
OpOutput::dim_range() const {
  // @@protoc_insertion_point(field_list:toolkit.dump.OpOutput.dim_range)
  return dim_range_;
}

// -------------------------------------------------------------------

// OpInput

// .toolkit.dump.OutputDataType data_type = 1;
inline void OpInput::clear_data_type() {
  data_type_ = 0;
}
inline ::toolkit::dump::OutputDataType OpInput::_internal_data_type() const {
  return static_cast< ::toolkit::dump::OutputDataType >(data_type_);
}
inline ::toolkit::dump::OutputDataType OpInput::data_type() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.OpInput.data_type)
  return _internal_data_type();
}
inline void OpInput::_internal_set_data_type(::toolkit::dump::OutputDataType value) {
  
  data_type_ = value;
}
inline void OpInput::set_data_type(::toolkit::dump::OutputDataType value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:toolkit.dump.OpInput.data_type)
}

// .toolkit.dump.OutputFormat format = 2;
inline void OpInput::clear_format() {
  format_ = 0;
}
inline ::toolkit::dump::OutputFormat OpInput::_internal_format() const {
  return static_cast< ::toolkit::dump::OutputFormat >(format_);
}
inline ::toolkit::dump::OutputFormat OpInput::format() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.OpInput.format)
  return _internal_format();
}
inline void OpInput::_internal_set_format(::toolkit::dump::OutputFormat value) {
  
  format_ = value;
}
inline void OpInput::set_format(::toolkit::dump::OutputFormat value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:toolkit.dump.OpInput.format)
}

// .toolkit.dump.Shape shape = 3;
inline bool OpInput::_internal_has_shape() const {
  return this != internal_default_instance() && shape_ != nullptr;
}
inline bool OpInput::has_shape() const {
  return _internal_has_shape();
}
inline void OpInput::clear_shape() {
  if (GetArena() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
}
inline const ::toolkit::dump::Shape& OpInput::_internal_shape() const {
  const ::toolkit::dump::Shape* p = shape_;
  return p != nullptr ? *p : *reinterpret_cast<const ::toolkit::dump::Shape*>(
      &::toolkit::dump::_Shape_default_instance_);
}
inline const ::toolkit::dump::Shape& OpInput::shape() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.OpInput.shape)
  return _internal_shape();
}
inline void OpInput::unsafe_arena_set_allocated_shape(
    ::toolkit::dump::Shape* shape) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:toolkit.dump.OpInput.shape)
}
inline ::toolkit::dump::Shape* OpInput::release_shape() {
  
  ::toolkit::dump::Shape* temp = shape_;
  shape_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::toolkit::dump::Shape* OpInput::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_release:toolkit.dump.OpInput.shape)
  
  ::toolkit::dump::Shape* temp = shape_;
  shape_ = nullptr;
  return temp;
}
inline ::toolkit::dump::Shape* OpInput::_internal_mutable_shape() {
  
  if (shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::toolkit::dump::Shape>(GetArena());
    shape_ = p;
  }
  return shape_;
}
inline ::toolkit::dump::Shape* OpInput::mutable_shape() {
  // @@protoc_insertion_point(field_mutable:toolkit.dump.OpInput.shape)
  return _internal_mutable_shape();
}
inline void OpInput::set_allocated_shape(::toolkit::dump::Shape* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shape_;
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shape);
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    
  } else {
    
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:toolkit.dump.OpInput.shape)
}

// bytes data = 4;
inline void OpInput::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OpInput::data() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.OpInput.data)
  return _internal_data();
}
inline void OpInput::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:toolkit.dump.OpInput.data)
}
inline std::string* OpInput::mutable_data() {
  // @@protoc_insertion_point(field_mutable:toolkit.dump.OpInput.data)
  return _internal_mutable_data();
}
inline const std::string& OpInput::_internal_data() const {
  return data_.Get();
}
inline void OpInput::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OpInput::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:toolkit.dump.OpInput.data)
}
inline void OpInput::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:toolkit.dump.OpInput.data)
}
inline void OpInput::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:toolkit.dump.OpInput.data)
}
inline std::string* OpInput::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OpInput::release_data() {
  // @@protoc_insertion_point(field_release:toolkit.dump.OpInput.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpInput::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:toolkit.dump.OpInput.data)
}

// uint64 size = 5;
inline void OpInput::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OpInput::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OpInput::size() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.OpInput.size)
  return _internal_size();
}
inline void OpInput::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void OpInput::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:toolkit.dump.OpInput.size)
}

// .toolkit.dump.Shape original_shape = 6;
inline bool OpInput::_internal_has_original_shape() const {
  return this != internal_default_instance() && original_shape_ != nullptr;
}
inline bool OpInput::has_original_shape() const {
  return _internal_has_original_shape();
}
inline void OpInput::clear_original_shape() {
  if (GetArena() == nullptr && original_shape_ != nullptr) {
    delete original_shape_;
  }
  original_shape_ = nullptr;
}
inline const ::toolkit::dump::Shape& OpInput::_internal_original_shape() const {
  const ::toolkit::dump::Shape* p = original_shape_;
  return p != nullptr ? *p : *reinterpret_cast<const ::toolkit::dump::Shape*>(
      &::toolkit::dump::_Shape_default_instance_);
}
inline const ::toolkit::dump::Shape& OpInput::original_shape() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.OpInput.original_shape)
  return _internal_original_shape();
}
inline void OpInput::unsafe_arena_set_allocated_original_shape(
    ::toolkit::dump::Shape* original_shape) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_shape_);
  }
  original_shape_ = original_shape;
  if (original_shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:toolkit.dump.OpInput.original_shape)
}
inline ::toolkit::dump::Shape* OpInput::release_original_shape() {
  
  ::toolkit::dump::Shape* temp = original_shape_;
  original_shape_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::toolkit::dump::Shape* OpInput::unsafe_arena_release_original_shape() {
  // @@protoc_insertion_point(field_release:toolkit.dump.OpInput.original_shape)
  
  ::toolkit::dump::Shape* temp = original_shape_;
  original_shape_ = nullptr;
  return temp;
}
inline ::toolkit::dump::Shape* OpInput::_internal_mutable_original_shape() {
  
  if (original_shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::toolkit::dump::Shape>(GetArena());
    original_shape_ = p;
  }
  return original_shape_;
}
inline ::toolkit::dump::Shape* OpInput::mutable_original_shape() {
  // @@protoc_insertion_point(field_mutable:toolkit.dump.OpInput.original_shape)
  return _internal_mutable_original_shape();
}
inline void OpInput::set_allocated_original_shape(::toolkit::dump::Shape* original_shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete original_shape_;
  }
  if (original_shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(original_shape);
    if (message_arena != submessage_arena) {
      original_shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_shape, submessage_arena);
    }
    
  } else {
    
  }
  original_shape_ = original_shape;
  // @@protoc_insertion_point(field_set_allocated:toolkit.dump.OpInput.original_shape)
}

// int32 sub_format = 7;
inline void OpInput::clear_sub_format() {
  sub_format_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpInput::_internal_sub_format() const {
  return sub_format_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpInput::sub_format() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.OpInput.sub_format)
  return _internal_sub_format();
}
inline void OpInput::_internal_set_sub_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sub_format_ = value;
}
inline void OpInput::set_sub_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sub_format(value);
  // @@protoc_insertion_point(field_set:toolkit.dump.OpInput.sub_format)
}

// uint64 address = 8;
inline void OpInput::clear_address() {
  address_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OpInput::_internal_address() const {
  return address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OpInput::address() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.OpInput.address)
  return _internal_address();
}
inline void OpInput::_internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  address_ = value;
}
inline void OpInput::set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:toolkit.dump.OpInput.address)
}

// -------------------------------------------------------------------

// OpBuffer

// .toolkit.dump.BufferType buffer_type = 1;
inline void OpBuffer::clear_buffer_type() {
  buffer_type_ = 0;
}
inline ::toolkit::dump::BufferType OpBuffer::_internal_buffer_type() const {
  return static_cast< ::toolkit::dump::BufferType >(buffer_type_);
}
inline ::toolkit::dump::BufferType OpBuffer::buffer_type() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.OpBuffer.buffer_type)
  return _internal_buffer_type();
}
inline void OpBuffer::_internal_set_buffer_type(::toolkit::dump::BufferType value) {
  
  buffer_type_ = value;
}
inline void OpBuffer::set_buffer_type(::toolkit::dump::BufferType value) {
  _internal_set_buffer_type(value);
  // @@protoc_insertion_point(field_set:toolkit.dump.OpBuffer.buffer_type)
}

// bytes data = 2;
inline void OpBuffer::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OpBuffer::data() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.OpBuffer.data)
  return _internal_data();
}
inline void OpBuffer::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:toolkit.dump.OpBuffer.data)
}
inline std::string* OpBuffer::mutable_data() {
  // @@protoc_insertion_point(field_mutable:toolkit.dump.OpBuffer.data)
  return _internal_mutable_data();
}
inline const std::string& OpBuffer::_internal_data() const {
  return data_.Get();
}
inline void OpBuffer::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OpBuffer::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:toolkit.dump.OpBuffer.data)
}
inline void OpBuffer::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:toolkit.dump.OpBuffer.data)
}
inline void OpBuffer::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:toolkit.dump.OpBuffer.data)
}
inline std::string* OpBuffer::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OpBuffer::release_data() {
  // @@protoc_insertion_point(field_release:toolkit.dump.OpBuffer.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpBuffer::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:toolkit.dump.OpBuffer.data)
}

// uint64 size = 3;
inline void OpBuffer::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OpBuffer::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OpBuffer::size() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.OpBuffer.size)
  return _internal_size();
}
inline void OpBuffer::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void OpBuffer::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:toolkit.dump.OpBuffer.size)
}

// -------------------------------------------------------------------

// OpAttr

// string name = 1;
inline void OpAttr::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OpAttr::name() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.OpAttr.name)
  return _internal_name();
}
inline void OpAttr::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:toolkit.dump.OpAttr.name)
}
inline std::string* OpAttr::mutable_name() {
  // @@protoc_insertion_point(field_mutable:toolkit.dump.OpAttr.name)
  return _internal_mutable_name();
}
inline const std::string& OpAttr::_internal_name() const {
  return name_.Get();
}
inline void OpAttr::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OpAttr::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:toolkit.dump.OpAttr.name)
}
inline void OpAttr::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:toolkit.dump.OpAttr.name)
}
inline void OpAttr::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:toolkit.dump.OpAttr.name)
}
inline std::string* OpAttr::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OpAttr::release_name() {
  // @@protoc_insertion_point(field_release:toolkit.dump.OpAttr.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpAttr::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:toolkit.dump.OpAttr.name)
}

// string value = 2;
inline void OpAttr::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OpAttr::value() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.OpAttr.value)
  return _internal_value();
}
inline void OpAttr::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:toolkit.dump.OpAttr.value)
}
inline std::string* OpAttr::mutable_value() {
  // @@protoc_insertion_point(field_mutable:toolkit.dump.OpAttr.value)
  return _internal_mutable_value();
}
inline const std::string& OpAttr::_internal_value() const {
  return value_.Get();
}
inline void OpAttr::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OpAttr::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:toolkit.dump.OpAttr.value)
}
inline void OpAttr::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:toolkit.dump.OpAttr.value)
}
inline void OpAttr::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:toolkit.dump.OpAttr.value)
}
inline std::string* OpAttr::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OpAttr::release_value() {
  // @@protoc_insertion_point(field_release:toolkit.dump.OpAttr.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpAttr::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:toolkit.dump.OpAttr.value)
}

// -------------------------------------------------------------------

// Workspace

// .toolkit.dump.Workspace.SpaceType type = 1;
inline void Workspace::clear_type() {
  type_ = 0;
}
inline ::toolkit::dump::Workspace_SpaceType Workspace::_internal_type() const {
  return static_cast< ::toolkit::dump::Workspace_SpaceType >(type_);
}
inline ::toolkit::dump::Workspace_SpaceType Workspace::type() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.Workspace.type)
  return _internal_type();
}
inline void Workspace::_internal_set_type(::toolkit::dump::Workspace_SpaceType value) {
  
  type_ = value;
}
inline void Workspace::set_type(::toolkit::dump::Workspace_SpaceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:toolkit.dump.Workspace.type)
}

// bytes data = 2;
inline void Workspace::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Workspace::data() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.Workspace.data)
  return _internal_data();
}
inline void Workspace::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:toolkit.dump.Workspace.data)
}
inline std::string* Workspace::mutable_data() {
  // @@protoc_insertion_point(field_mutable:toolkit.dump.Workspace.data)
  return _internal_mutable_data();
}
inline const std::string& Workspace::_internal_data() const {
  return data_.Get();
}
inline void Workspace::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Workspace::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:toolkit.dump.Workspace.data)
}
inline void Workspace::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:toolkit.dump.Workspace.data)
}
inline void Workspace::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:toolkit.dump.Workspace.data)
}
inline std::string* Workspace::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Workspace::release_data() {
  // @@protoc_insertion_point(field_release:toolkit.dump.Workspace.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Workspace::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:toolkit.dump.Workspace.data)
}

// uint64 size = 3;
inline void Workspace::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Workspace::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Workspace::size() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.Workspace.size)
  return _internal_size();
}
inline void Workspace::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void Workspace::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:toolkit.dump.Workspace.size)
}

// -------------------------------------------------------------------

// DumpData

// string version = 1;
inline void DumpData::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DumpData::version() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.DumpData.version)
  return _internal_version();
}
inline void DumpData::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:toolkit.dump.DumpData.version)
}
inline std::string* DumpData::mutable_version() {
  // @@protoc_insertion_point(field_mutable:toolkit.dump.DumpData.version)
  return _internal_mutable_version();
}
inline const std::string& DumpData::_internal_version() const {
  return version_.Get();
}
inline void DumpData::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DumpData::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:toolkit.dump.DumpData.version)
}
inline void DumpData::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:toolkit.dump.DumpData.version)
}
inline void DumpData::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:toolkit.dump.DumpData.version)
}
inline std::string* DumpData::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DumpData::release_version() {
  // @@protoc_insertion_point(field_release:toolkit.dump.DumpData.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DumpData::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:toolkit.dump.DumpData.version)
}

// uint64 dump_time = 2;
inline void DumpData::clear_dump_time() {
  dump_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DumpData::_internal_dump_time() const {
  return dump_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DumpData::dump_time() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.DumpData.dump_time)
  return _internal_dump_time();
}
inline void DumpData::_internal_set_dump_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  dump_time_ = value;
}
inline void DumpData::set_dump_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_dump_time(value);
  // @@protoc_insertion_point(field_set:toolkit.dump.DumpData.dump_time)
}

// repeated .toolkit.dump.OpOutput output = 3;
inline int DumpData::_internal_output_size() const {
  return output_.size();
}
inline int DumpData::output_size() const {
  return _internal_output_size();
}
inline void DumpData::clear_output() {
  output_.Clear();
}
inline ::toolkit::dump::OpOutput* DumpData::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:toolkit.dump.DumpData.output)
  return output_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::dump::OpOutput >*
DumpData::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:toolkit.dump.DumpData.output)
  return &output_;
}
inline const ::toolkit::dump::OpOutput& DumpData::_internal_output(int index) const {
  return output_.Get(index);
}
inline const ::toolkit::dump::OpOutput& DumpData::output(int index) const {
  // @@protoc_insertion_point(field_get:toolkit.dump.DumpData.output)
  return _internal_output(index);
}
inline ::toolkit::dump::OpOutput* DumpData::_internal_add_output() {
  return output_.Add();
}
inline ::toolkit::dump::OpOutput* DumpData::add_output() {
  // @@protoc_insertion_point(field_add:toolkit.dump.DumpData.output)
  return _internal_add_output();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::dump::OpOutput >&
DumpData::output() const {
  // @@protoc_insertion_point(field_list:toolkit.dump.DumpData.output)
  return output_;
}

// repeated .toolkit.dump.OpInput input = 4;
inline int DumpData::_internal_input_size() const {
  return input_.size();
}
inline int DumpData::input_size() const {
  return _internal_input_size();
}
inline void DumpData::clear_input() {
  input_.Clear();
}
inline ::toolkit::dump::OpInput* DumpData::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:toolkit.dump.DumpData.input)
  return input_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::dump::OpInput >*
DumpData::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:toolkit.dump.DumpData.input)
  return &input_;
}
inline const ::toolkit::dump::OpInput& DumpData::_internal_input(int index) const {
  return input_.Get(index);
}
inline const ::toolkit::dump::OpInput& DumpData::input(int index) const {
  // @@protoc_insertion_point(field_get:toolkit.dump.DumpData.input)
  return _internal_input(index);
}
inline ::toolkit::dump::OpInput* DumpData::_internal_add_input() {
  return input_.Add();
}
inline ::toolkit::dump::OpInput* DumpData::add_input() {
  // @@protoc_insertion_point(field_add:toolkit.dump.DumpData.input)
  return _internal_add_input();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::dump::OpInput >&
DumpData::input() const {
  // @@protoc_insertion_point(field_list:toolkit.dump.DumpData.input)
  return input_;
}

// repeated .toolkit.dump.OpBuffer buffer = 5;
inline int DumpData::_internal_buffer_size() const {
  return buffer_.size();
}
inline int DumpData::buffer_size() const {
  return _internal_buffer_size();
}
inline void DumpData::clear_buffer() {
  buffer_.Clear();
}
inline ::toolkit::dump::OpBuffer* DumpData::mutable_buffer(int index) {
  // @@protoc_insertion_point(field_mutable:toolkit.dump.DumpData.buffer)
  return buffer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::dump::OpBuffer >*
DumpData::mutable_buffer() {
  // @@protoc_insertion_point(field_mutable_list:toolkit.dump.DumpData.buffer)
  return &buffer_;
}
inline const ::toolkit::dump::OpBuffer& DumpData::_internal_buffer(int index) const {
  return buffer_.Get(index);
}
inline const ::toolkit::dump::OpBuffer& DumpData::buffer(int index) const {
  // @@protoc_insertion_point(field_get:toolkit.dump.DumpData.buffer)
  return _internal_buffer(index);
}
inline ::toolkit::dump::OpBuffer* DumpData::_internal_add_buffer() {
  return buffer_.Add();
}
inline ::toolkit::dump::OpBuffer* DumpData::add_buffer() {
  // @@protoc_insertion_point(field_add:toolkit.dump.DumpData.buffer)
  return _internal_add_buffer();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::dump::OpBuffer >&
DumpData::buffer() const {
  // @@protoc_insertion_point(field_list:toolkit.dump.DumpData.buffer)
  return buffer_;
}

// string op_name = 6;
inline void DumpData::clear_op_name() {
  op_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DumpData::op_name() const {
  // @@protoc_insertion_point(field_get:toolkit.dump.DumpData.op_name)
  return _internal_op_name();
}
inline void DumpData::set_op_name(const std::string& value) {
  _internal_set_op_name(value);
  // @@protoc_insertion_point(field_set:toolkit.dump.DumpData.op_name)
}
inline std::string* DumpData::mutable_op_name() {
  // @@protoc_insertion_point(field_mutable:toolkit.dump.DumpData.op_name)
  return _internal_mutable_op_name();
}
inline const std::string& DumpData::_internal_op_name() const {
  return op_name_.Get();
}
inline void DumpData::_internal_set_op_name(const std::string& value) {
  
  op_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DumpData::set_op_name(std::string&& value) {
  
  op_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:toolkit.dump.DumpData.op_name)
}
inline void DumpData::set_op_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  op_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:toolkit.dump.DumpData.op_name)
}
inline void DumpData::set_op_name(const char* value,
    size_t size) {
  
  op_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:toolkit.dump.DumpData.op_name)
}
inline std::string* DumpData::_internal_mutable_op_name() {
  
  return op_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DumpData::release_op_name() {
  // @@protoc_insertion_point(field_release:toolkit.dump.DumpData.op_name)
  return op_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DumpData::set_allocated_op_name(std::string* op_name) {
  if (op_name != nullptr) {
    
  } else {
    
  }
  op_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), op_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:toolkit.dump.DumpData.op_name)
}

// repeated .toolkit.dump.OpAttr attr = 7;
inline int DumpData::_internal_attr_size() const {
  return attr_.size();
}
inline int DumpData::attr_size() const {
  return _internal_attr_size();
}
inline void DumpData::clear_attr() {
  attr_.Clear();
}
inline ::toolkit::dump::OpAttr* DumpData::mutable_attr(int index) {
  // @@protoc_insertion_point(field_mutable:toolkit.dump.DumpData.attr)
  return attr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::dump::OpAttr >*
DumpData::mutable_attr() {
  // @@protoc_insertion_point(field_mutable_list:toolkit.dump.DumpData.attr)
  return &attr_;
}
inline const ::toolkit::dump::OpAttr& DumpData::_internal_attr(int index) const {
  return attr_.Get(index);
}
inline const ::toolkit::dump::OpAttr& DumpData::attr(int index) const {
  // @@protoc_insertion_point(field_get:toolkit.dump.DumpData.attr)
  return _internal_attr(index);
}
inline ::toolkit::dump::OpAttr* DumpData::_internal_add_attr() {
  return attr_.Add();
}
inline ::toolkit::dump::OpAttr* DumpData::add_attr() {
  // @@protoc_insertion_point(field_add:toolkit.dump.DumpData.attr)
  return _internal_add_attr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::dump::OpAttr >&
DumpData::attr() const {
  // @@protoc_insertion_point(field_list:toolkit.dump.DumpData.attr)
  return attr_;
}

// repeated .toolkit.dump.Workspace space = 8;
inline int DumpData::_internal_space_size() const {
  return space_.size();
}
inline int DumpData::space_size() const {
  return _internal_space_size();
}
inline void DumpData::clear_space() {
  space_.Clear();
}
inline ::toolkit::dump::Workspace* DumpData::mutable_space(int index) {
  // @@protoc_insertion_point(field_mutable:toolkit.dump.DumpData.space)
  return space_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::dump::Workspace >*
DumpData::mutable_space() {
  // @@protoc_insertion_point(field_mutable_list:toolkit.dump.DumpData.space)
  return &space_;
}
inline const ::toolkit::dump::Workspace& DumpData::_internal_space(int index) const {
  return space_.Get(index);
}
inline const ::toolkit::dump::Workspace& DumpData::space(int index) const {
  // @@protoc_insertion_point(field_get:toolkit.dump.DumpData.space)
  return _internal_space(index);
}
inline ::toolkit::dump::Workspace* DumpData::_internal_add_space() {
  return space_.Add();
}
inline ::toolkit::dump::Workspace* DumpData::add_space() {
  // @@protoc_insertion_point(field_add:toolkit.dump.DumpData.space)
  return _internal_add_space();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::dump::Workspace >&
DumpData::space() const {
  // @@protoc_insertion_point(field_list:toolkit.dump.DumpData.space)
  return space_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dump
}  // namespace toolkit

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::toolkit::dump::Workspace_SpaceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::toolkit::dump::Workspace_SpaceType>() {
  return ::toolkit::dump::Workspace_SpaceType_descriptor();
}
template <> struct is_proto_enum< ::toolkit::dump::OutputDataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::toolkit::dump::OutputDataType>() {
  return ::toolkit::dump::OutputDataType_descriptor();
}
template <> struct is_proto_enum< ::toolkit::dump::OutputFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::toolkit::dump::OutputFormat>() {
  return ::toolkit::dump::OutputFormat_descriptor();
}
template <> struct is_proto_enum< ::toolkit::dump::BufferType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::toolkit::dump::BufferType>() {
  return ::toolkit::dump::BufferType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dump_5ftask_2eproto
