// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flow_model.proto

#include "flow_model.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_flow_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CompileResource_flow_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flow_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse_flow_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flow_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FlowModelDef_DeviceToRankIdsEntry_DoNotUse_flow_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flow_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FlowModelDef_EschedPriority_flow_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flow_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse_flow_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flow_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FlowModelDef_GroupNameToRankIdsEntry_DoNotUse_flow_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flow_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlowModelDef_ModelNameToRankIdEntry_DoNotUse_flow_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flow_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FlowModelDef_ModelsEschedPriorityEntry_DoNotUse_flow_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flow_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlowModelDef_RankIds_flow_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flow_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelDeployInfo_flow_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flow_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelDeployResource_flow_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flow_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_ModelRelationDef_flow_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flow_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelRelationDef_AttrValue_flow_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flow_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelRelationDef_Endpoint_flow_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flow_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelRelationDef_Endpoint_AttrsEntry_DoNotUse_flow_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flow_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelRelationDef_InvokedModelQueueInfo_flow_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flow_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse_flow_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flow_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelRelationDef_ModelEndpointInfo_flow_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flow_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelRelationDef_ModelQueueInfo_flow_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flow_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelRelationDef_QueueDef_flow_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flow_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse_flow_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flow_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse_flow_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flow_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RunningResource_flow_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ge_5fir_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AttrDef_ge_5fir_2eproto;
namespace ge {
namespace flow_model {
namespace proto {
class ModelRelationDef_QueueDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelRelationDef_QueueDef> _instance;
} _ModelRelationDef_QueueDef_default_instance_;
class ModelRelationDef_AttrValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelRelationDef_AttrValue> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_;
  ::PROTOBUF_NAMESPACE_ID::int64 i_;
  bool b_;
} _ModelRelationDef_AttrValue_default_instance_;
class ModelRelationDef_Endpoint_AttrsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelRelationDef_Endpoint_AttrsEntry_DoNotUse> _instance;
} _ModelRelationDef_Endpoint_AttrsEntry_DoNotUse_default_instance_;
class ModelRelationDef_EndpointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelRelationDef_Endpoint> _instance;
} _ModelRelationDef_Endpoint_default_instance_;
class ModelRelationDef_InvokedModelQueueInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelRelationDef_InvokedModelQueueInfo> _instance;
} _ModelRelationDef_InvokedModelQueueInfo_default_instance_;
class ModelRelationDef_ModelQueueInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelRelationDef_ModelQueueInfo> _instance;
} _ModelRelationDef_ModelQueueInfo_default_instance_;
class ModelRelationDef_ModelEndpointInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelRelationDef_ModelEndpointInfo> _instance;
} _ModelRelationDef_ModelEndpointInfo_default_instance_;
class ModelRelationDef_SubmodelQueueInfoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse> _instance;
} _ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse_default_instance_;
class ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse> _instance;
} _ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse_default_instance_;
class ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse> _instance;
} _ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse_default_instance_;
class ModelRelationDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelRelationDef> _instance;
} _ModelRelationDef_default_instance_;
class RunningResourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RunningResource> _instance;
} _RunningResource_default_instance_;
class ModelDeployResourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelDeployResource> _instance;
} _ModelDeployResource_default_instance_;
class ModelDeployInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelDeployInfo> _instance;
} _ModelDeployInfo_default_instance_;
class SubmodelDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubmodelDef> _instance;
} _SubmodelDef_default_instance_;
class CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse> _instance;
} _CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse_default_instance_;
class CompileResourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompileResource> _instance;
} _CompileResource_default_instance_;
class FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse> _instance;
} _FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse_default_instance_;
class FlowModelDef_EschedPriorityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlowModelDef_EschedPriority> _instance;
} _FlowModelDef_EschedPriority_default_instance_;
class FlowModelDef_RankIdsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlowModelDef_RankIds> _instance;
} _FlowModelDef_RankIds_default_instance_;
class FlowModelDef_ModelsEschedPriorityEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlowModelDef_ModelsEschedPriorityEntry_DoNotUse> _instance;
} _FlowModelDef_ModelsEschedPriorityEntry_DoNotUse_default_instance_;
class FlowModelDef_ModelNameToRankIdEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlowModelDef_ModelNameToRankIdEntry_DoNotUse> _instance;
} _FlowModelDef_ModelNameToRankIdEntry_DoNotUse_default_instance_;
class FlowModelDef_GroupNameToRankIdsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlowModelDef_GroupNameToRankIdsEntry_DoNotUse> _instance;
} _FlowModelDef_GroupNameToRankIdsEntry_DoNotUse_default_instance_;
class FlowModelDef_DeviceToRankIdsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlowModelDef_DeviceToRankIdsEntry_DoNotUse> _instance;
} _FlowModelDef_DeviceToRankIdsEntry_DoNotUse_default_instance_;
class FlowModelDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlowModelDef> _instance;
} _FlowModelDef_default_instance_;
}  // namespace proto
}  // namespace flow_model
}  // namespace ge
static void InitDefaultsscc_info_CompileResource_flow_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::flow_model::proto::_CompileResource_default_instance_;
    new (ptr) ::ge::flow_model::proto::CompileResource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::flow_model::proto::CompileResource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CompileResource_flow_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CompileResource_flow_5fmodel_2eproto}, {
      &scc_info_CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse_flow_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse_flow_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::flow_model::proto::_CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse_default_instance_;
    new (ptr) ::ge::flow_model::proto::CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse();
  }
  ::ge::flow_model::proto::CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse_flow_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse_flow_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_FlowModelDef_flow_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::flow_model::proto::_FlowModelDef_default_instance_;
    new (ptr) ::ge::flow_model::proto::FlowModelDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::flow_model::proto::FlowModelDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_FlowModelDef_flow_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_FlowModelDef_flow_5fmodel_2eproto}, {
      &scc_info_ModelRelationDef_flow_5fmodel_2eproto.base,
      &scc_info_FlowModelDef_ModelsEschedPriorityEntry_DoNotUse_flow_5fmodel_2eproto.base,
      &scc_info_FlowModelDef_ModelNameToRankIdEntry_DoNotUse_flow_5fmodel_2eproto.base,
      &scc_info_FlowModelDef_GroupNameToRankIdsEntry_DoNotUse_flow_5fmodel_2eproto.base,
      &scc_info_FlowModelDef_DeviceToRankIdsEntry_DoNotUse_flow_5fmodel_2eproto.base,
      &scc_info_CompileResource_flow_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_FlowModelDef_DeviceToRankIdsEntry_DoNotUse_flow_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::flow_model::proto::_FlowModelDef_DeviceToRankIdsEntry_DoNotUse_default_instance_;
    new (ptr) ::ge::flow_model::proto::FlowModelDef_DeviceToRankIdsEntry_DoNotUse();
  }
  ::ge::flow_model::proto::FlowModelDef_DeviceToRankIdsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FlowModelDef_DeviceToRankIdsEntry_DoNotUse_flow_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FlowModelDef_DeviceToRankIdsEntry_DoNotUse_flow_5fmodel_2eproto}, {
      &scc_info_FlowModelDef_RankIds_flow_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_FlowModelDef_EschedPriority_flow_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::flow_model::proto::_FlowModelDef_EschedPriority_default_instance_;
    new (ptr) ::ge::flow_model::proto::FlowModelDef_EschedPriority();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::flow_model::proto::FlowModelDef_EschedPriority::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FlowModelDef_EschedPriority_flow_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FlowModelDef_EschedPriority_flow_5fmodel_2eproto}, {
      &scc_info_FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse_flow_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse_flow_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::flow_model::proto::_FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse_default_instance_;
    new (ptr) ::ge::flow_model::proto::FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse();
  }
  ::ge::flow_model::proto::FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse_flow_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse_flow_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_FlowModelDef_GroupNameToRankIdsEntry_DoNotUse_flow_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::flow_model::proto::_FlowModelDef_GroupNameToRankIdsEntry_DoNotUse_default_instance_;
    new (ptr) ::ge::flow_model::proto::FlowModelDef_GroupNameToRankIdsEntry_DoNotUse();
  }
  ::ge::flow_model::proto::FlowModelDef_GroupNameToRankIdsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FlowModelDef_GroupNameToRankIdsEntry_DoNotUse_flow_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FlowModelDef_GroupNameToRankIdsEntry_DoNotUse_flow_5fmodel_2eproto}, {
      &scc_info_FlowModelDef_RankIds_flow_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_FlowModelDef_ModelNameToRankIdEntry_DoNotUse_flow_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::flow_model::proto::_FlowModelDef_ModelNameToRankIdEntry_DoNotUse_default_instance_;
    new (ptr) ::ge::flow_model::proto::FlowModelDef_ModelNameToRankIdEntry_DoNotUse();
  }
  ::ge::flow_model::proto::FlowModelDef_ModelNameToRankIdEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlowModelDef_ModelNameToRankIdEntry_DoNotUse_flow_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FlowModelDef_ModelNameToRankIdEntry_DoNotUse_flow_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_FlowModelDef_ModelsEschedPriorityEntry_DoNotUse_flow_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::flow_model::proto::_FlowModelDef_ModelsEschedPriorityEntry_DoNotUse_default_instance_;
    new (ptr) ::ge::flow_model::proto::FlowModelDef_ModelsEschedPriorityEntry_DoNotUse();
  }
  ::ge::flow_model::proto::FlowModelDef_ModelsEschedPriorityEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FlowModelDef_ModelsEschedPriorityEntry_DoNotUse_flow_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FlowModelDef_ModelsEschedPriorityEntry_DoNotUse_flow_5fmodel_2eproto}, {
      &scc_info_FlowModelDef_EschedPriority_flow_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_FlowModelDef_RankIds_flow_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::flow_model::proto::_FlowModelDef_RankIds_default_instance_;
    new (ptr) ::ge::flow_model::proto::FlowModelDef_RankIds();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::flow_model::proto::FlowModelDef_RankIds::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlowModelDef_RankIds_flow_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FlowModelDef_RankIds_flow_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_ModelDeployInfo_flow_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::flow_model::proto::_ModelDeployInfo_default_instance_;
    new (ptr) ::ge::flow_model::proto::ModelDeployInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::flow_model::proto::ModelDeployInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelDeployInfo_flow_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelDeployInfo_flow_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_ModelDeployResource_flow_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::flow_model::proto::_ModelDeployResource_default_instance_;
    new (ptr) ::ge::flow_model::proto::ModelDeployResource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::flow_model::proto::ModelDeployResource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelDeployResource_flow_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModelDeployResource_flow_5fmodel_2eproto}, {
      &scc_info_RunningResource_flow_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_ModelRelationDef_flow_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::flow_model::proto::_ModelRelationDef_default_instance_;
    new (ptr) ::ge::flow_model::proto::ModelRelationDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::flow_model::proto::ModelRelationDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_ModelRelationDef_flow_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_ModelRelationDef_flow_5fmodel_2eproto}, {
      &scc_info_ModelRelationDef_QueueDef_flow_5fmodel_2eproto.base,
      &scc_info_ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse_flow_5fmodel_2eproto.base,
      &scc_info_ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse_flow_5fmodel_2eproto.base,
      &scc_info_ModelRelationDef_ModelQueueInfo_flow_5fmodel_2eproto.base,
      &scc_info_ModelRelationDef_Endpoint_flow_5fmodel_2eproto.base,
      &scc_info_ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse_flow_5fmodel_2eproto.base,
      &scc_info_ModelRelationDef_ModelEndpointInfo_flow_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_ModelRelationDef_AttrValue_flow_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::flow_model::proto::_ModelRelationDef_AttrValue_default_instance_;
    new (ptr) ::ge::flow_model::proto::ModelRelationDef_AttrValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::flow_model::proto::ModelRelationDef_AttrValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelRelationDef_AttrValue_flow_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelRelationDef_AttrValue_flow_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_ModelRelationDef_Endpoint_flow_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::flow_model::proto::_ModelRelationDef_Endpoint_default_instance_;
    new (ptr) ::ge::flow_model::proto::ModelRelationDef_Endpoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::flow_model::proto::ModelRelationDef_Endpoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelRelationDef_Endpoint_flow_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModelRelationDef_Endpoint_flow_5fmodel_2eproto}, {
      &scc_info_ModelRelationDef_Endpoint_AttrsEntry_DoNotUse_flow_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_ModelRelationDef_Endpoint_AttrsEntry_DoNotUse_flow_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::flow_model::proto::_ModelRelationDef_Endpoint_AttrsEntry_DoNotUse_default_instance_;
    new (ptr) ::ge::flow_model::proto::ModelRelationDef_Endpoint_AttrsEntry_DoNotUse();
  }
  ::ge::flow_model::proto::ModelRelationDef_Endpoint_AttrsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelRelationDef_Endpoint_AttrsEntry_DoNotUse_flow_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModelRelationDef_Endpoint_AttrsEntry_DoNotUse_flow_5fmodel_2eproto}, {
      &scc_info_ModelRelationDef_AttrValue_flow_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_ModelRelationDef_InvokedModelQueueInfo_flow_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::flow_model::proto::_ModelRelationDef_InvokedModelQueueInfo_default_instance_;
    new (ptr) ::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelRelationDef_InvokedModelQueueInfo_flow_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelRelationDef_InvokedModelQueueInfo_flow_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse_flow_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::flow_model::proto::_ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse_default_instance_;
    new (ptr) ::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse();
  }
  ::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse_flow_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse_flow_5fmodel_2eproto}, {
      &scc_info_ModelRelationDef_InvokedModelQueueInfo_flow_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_ModelRelationDef_ModelEndpointInfo_flow_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::flow_model::proto::_ModelRelationDef_ModelEndpointInfo_default_instance_;
    new (ptr) ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelRelationDef_ModelEndpointInfo_flow_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelRelationDef_ModelEndpointInfo_flow_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_ModelRelationDef_ModelQueueInfo_flow_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::flow_model::proto::_ModelRelationDef_ModelQueueInfo_default_instance_;
    new (ptr) ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelRelationDef_ModelQueueInfo_flow_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelRelationDef_ModelQueueInfo_flow_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_ModelRelationDef_QueueDef_flow_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::flow_model::proto::_ModelRelationDef_QueueDef_default_instance_;
    new (ptr) ::ge::flow_model::proto::ModelRelationDef_QueueDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::flow_model::proto::ModelRelationDef_QueueDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelRelationDef_QueueDef_flow_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelRelationDef_QueueDef_flow_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse_flow_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::flow_model::proto::_ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse_default_instance_;
    new (ptr) ::ge::flow_model::proto::ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse();
  }
  ::ge::flow_model::proto::ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse_flow_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse_flow_5fmodel_2eproto}, {
      &scc_info_ModelRelationDef_ModelEndpointInfo_flow_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse_flow_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::flow_model::proto::_ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse_default_instance_;
    new (ptr) ::ge::flow_model::proto::ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse();
  }
  ::ge::flow_model::proto::ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse_flow_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse_flow_5fmodel_2eproto}, {
      &scc_info_ModelRelationDef_ModelQueueInfo_flow_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_RunningResource_flow_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::flow_model::proto::_RunningResource_default_instance_;
    new (ptr) ::ge::flow_model::proto::RunningResource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::flow_model::proto::RunningResource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RunningResource_flow_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RunningResource_flow_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_SubmodelDef_flow_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::flow_model::proto::_SubmodelDef_default_instance_;
    new (ptr) ::ge::flow_model::proto::SubmodelDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::flow_model::proto::SubmodelDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SubmodelDef_flow_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SubmodelDef_flow_5fmodel_2eproto}, {
      &scc_info_AttrDef_ge_5fir_2eproto.base,
      &scc_info_ModelDeployResource_flow_5fmodel_2eproto.base,
      &scc_info_ModelDeployInfo_flow_5fmodel_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flow_5fmodel_2eproto[25];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_flow_5fmodel_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flow_5fmodel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_flow_5fmodel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_QueueDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_QueueDef, name_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_QueueDef, depth_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_QueueDef, enqueue_policy_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_QueueDef, is_control_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_AttrValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_AttrValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ge::flow_model::proto::ModelRelationDef_AttrValueDefaultTypeInternal, s_),
  offsetof(::ge::flow_model::proto::ModelRelationDef_AttrValueDefaultTypeInternal, i_),
  offsetof(::ge::flow_model::proto::ModelRelationDef_AttrValueDefaultTypeInternal, b_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_AttrValue, value_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_Endpoint_AttrsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_Endpoint_AttrsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_Endpoint_AttrsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_Endpoint_AttrsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_Endpoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_Endpoint, name_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_Endpoint, endpoint_type_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_Endpoint, attrs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfo, input_queue_name_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfo, output_queue_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo, model_name_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo, input_queue_name_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo, output_queue_name_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo, external_input_queue_name_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo, external_output_queue_name_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo, invoke_model_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo, model_name_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo, input_endpoint_name_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo, output_endpoint_name_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo, external_input_queue_name_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo, external_output_queue_name_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo, event_input_name_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo, event_output_name_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo, invoke_model_key_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef, queue_def_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef, submodel_queue_info_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef, invoked_model_queue_info_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef, root_model_queue_info_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef, endpoint_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef, submodel_endpoint_info_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelRelationDef, root_model_endpoint_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::RunningResource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::RunningResource, type_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::RunningResource, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelDeployResource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelDeployResource, resource_type_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelDeployResource, running_resource_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelDeployInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::ModelDeployInfo, logic_device_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::SubmodelDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::SubmodelDef, model_name_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::SubmodelDef, model_type_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::SubmodelDef, om_data_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::SubmodelDef, graph_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::SubmodelDef, deploy_resource_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::SubmodelDef, deploy_info_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::CompileResource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::CompileResource, host_resource_type_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::CompileResource, logic_device_id_to_resource_type_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::FlowModelDef_EschedPriority, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::FlowModelDef_EschedPriority, esched_priority_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::FlowModelDef_RankIds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::FlowModelDef_RankIds, rank_id_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::FlowModelDef_ModelsEschedPriorityEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::FlowModelDef_ModelsEschedPriorityEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::FlowModelDef_ModelsEschedPriorityEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::FlowModelDef_ModelsEschedPriorityEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::FlowModelDef_ModelNameToRankIdEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::FlowModelDef_ModelNameToRankIdEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::FlowModelDef_ModelNameToRankIdEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::FlowModelDef_ModelNameToRankIdEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::FlowModelDef_GroupNameToRankIdsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::FlowModelDef_GroupNameToRankIdsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::FlowModelDef_GroupNameToRankIdsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::FlowModelDef_GroupNameToRankIdsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::FlowModelDef_DeviceToRankIdsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::FlowModelDef_DeviceToRankIdsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::FlowModelDef_DeviceToRankIdsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::FlowModelDef_DeviceToRankIdsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::FlowModelDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::FlowModelDef, model_name_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::FlowModelDef, relation_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::FlowModelDef, submodel_name_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::FlowModelDef, models_esched_priority_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::FlowModelDef, model_name_to_rank_id_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::FlowModelDef, group_name_to_rank_ids_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::FlowModelDef, device_to_rank_ids_),
  PROTOBUF_FIELD_OFFSET(::ge::flow_model::proto::FlowModelDef, compile_resource_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ge::flow_model::proto::ModelRelationDef_QueueDef)},
  { 9, -1, sizeof(::ge::flow_model::proto::ModelRelationDef_AttrValue)},
  { 18, 25, sizeof(::ge::flow_model::proto::ModelRelationDef_Endpoint_AttrsEntry_DoNotUse)},
  { 27, -1, sizeof(::ge::flow_model::proto::ModelRelationDef_Endpoint)},
  { 35, -1, sizeof(::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfo)},
  { 42, -1, sizeof(::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo)},
  { 53, -1, sizeof(::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo)},
  { 66, 73, sizeof(::ge::flow_model::proto::ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse)},
  { 75, 82, sizeof(::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse)},
  { 84, 91, sizeof(::ge::flow_model::proto::ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse)},
  { 93, -1, sizeof(::ge::flow_model::proto::ModelRelationDef)},
  { 105, -1, sizeof(::ge::flow_model::proto::RunningResource)},
  { 112, -1, sizeof(::ge::flow_model::proto::ModelDeployResource)},
  { 119, -1, sizeof(::ge::flow_model::proto::ModelDeployInfo)},
  { 125, -1, sizeof(::ge::flow_model::proto::SubmodelDef)},
  { 136, 143, sizeof(::ge::flow_model::proto::CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse)},
  { 145, -1, sizeof(::ge::flow_model::proto::CompileResource)},
  { 152, 159, sizeof(::ge::flow_model::proto::FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse)},
  { 161, -1, sizeof(::ge::flow_model::proto::FlowModelDef_EschedPriority)},
  { 167, -1, sizeof(::ge::flow_model::proto::FlowModelDef_RankIds)},
  { 173, 180, sizeof(::ge::flow_model::proto::FlowModelDef_ModelsEschedPriorityEntry_DoNotUse)},
  { 182, 189, sizeof(::ge::flow_model::proto::FlowModelDef_ModelNameToRankIdEntry_DoNotUse)},
  { 191, 198, sizeof(::ge::flow_model::proto::FlowModelDef_GroupNameToRankIdsEntry_DoNotUse)},
  { 200, 207, sizeof(::ge::flow_model::proto::FlowModelDef_DeviceToRankIdsEntry_DoNotUse)},
  { 209, -1, sizeof(::ge::flow_model::proto::FlowModelDef)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::flow_model::proto::_ModelRelationDef_QueueDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::flow_model::proto::_ModelRelationDef_AttrValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::flow_model::proto::_ModelRelationDef_Endpoint_AttrsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::flow_model::proto::_ModelRelationDef_Endpoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::flow_model::proto::_ModelRelationDef_InvokedModelQueueInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::flow_model::proto::_ModelRelationDef_ModelQueueInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::flow_model::proto::_ModelRelationDef_ModelEndpointInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::flow_model::proto::_ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::flow_model::proto::_ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::flow_model::proto::_ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::flow_model::proto::_ModelRelationDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::flow_model::proto::_RunningResource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::flow_model::proto::_ModelDeployResource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::flow_model::proto::_ModelDeployInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::flow_model::proto::_SubmodelDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::flow_model::proto::_CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::flow_model::proto::_CompileResource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::flow_model::proto::_FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::flow_model::proto::_FlowModelDef_EschedPriority_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::flow_model::proto::_FlowModelDef_RankIds_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::flow_model::proto::_FlowModelDef_ModelsEschedPriorityEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::flow_model::proto::_FlowModelDef_ModelNameToRankIdEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::flow_model::proto::_FlowModelDef_GroupNameToRankIdsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::flow_model::proto::_FlowModelDef_DeviceToRankIdsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::flow_model::proto::_FlowModelDef_default_instance_),
};

const char descriptor_table_protodef_flow_5fmodel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020flow_model.proto\022\023ge.flow_model.proto\032"
  "\013ge_ir.proto\"\273\016\n\020ModelRelationDef\022A\n\tque"
  "ue_def\030\001 \003(\0132..ge.flow_model.proto.Model"
  "RelationDef.QueueDef\022Y\n\023submodel_queue_i"
  "nfo\030\002 \003(\0132<.ge.flow_model.proto.ModelRel"
  "ationDef.SubmodelQueueInfoEntry\022b\n\030invok"
  "ed_model_queue_info\030\003 \003(\0132@.ge.flow_mode"
  "l.proto.ModelRelationDef.InvokedModelQue"
  "ueInfoEntry\022S\n\025root_model_queue_info\030\004 \001"
  "(\01324.ge.flow_model.proto.ModelRelationDe"
  "f.ModelQueueInfo\022@\n\010endpoint\030\005 \003(\0132..ge."
  "flow_model.proto.ModelRelationDef.Endpoi"
  "nt\022_\n\026submodel_endpoint_info\030\006 \003(\0132\?.ge."
  "flow_model.proto.ModelRelationDef.Submod"
  "elEndpointInfoEntry\022Y\n\030root_model_endpoi"
  "nt_info\030\007 \001(\01327.ge.flow_model.proto.Mode"
  "lRelationDef.ModelEndpointInfo\032S\n\010QueueD"
  "ef\022\014\n\004name\030\001 \001(\t\022\r\n\005depth\030\002 \001(\r\022\026\n\016enque"
  "ue_policy\030\003 \001(\t\022\022\n\nis_control\030\004 \001(\010\032;\n\tA"
  "ttrValue\022\013\n\001s\030\001 \001(\014H\000\022\013\n\001i\030\002 \001(\003H\000\022\013\n\001b\030"
  "\003 \001(\010H\000B\007\n\005value\032\330\001\n\010Endpoint\022\014\n\004name\030\001 "
  "\001(\t\022\025\n\rendpoint_type\030\002 \001(\005\022H\n\005attrs\030\003 \003("
  "\01329.ge.flow_model.proto.ModelRelationDef"
  ".Endpoint.AttrsEntry\032]\n\nAttrsEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022>\n\005value\030\002 \001(\0132/.ge.flow_model.p"
  "roto.ModelRelationDef.AttrValue:\0028\001\032L\n\025I"
  "nvokedModelQueueInfo\022\030\n\020input_queue_name"
  "\030\001 \003(\t\022\031\n\021output_queue_name\030\002 \003(\t\032\272\001\n\016Mo"
  "delQueueInfo\022\022\n\nmodel_name\030\001 \001(\t\022\030\n\020inpu"
  "t_queue_name\030\002 \003(\t\022\031\n\021output_queue_name\030"
  "\003 \003(\t\022!\n\031external_input_queue_name\030\004 \003(\t"
  "\022\"\n\032external_output_queue_name\030\005 \003(\t\022\030\n\020"
  "invoke_model_key\030\006 \003(\t\032\370\001\n\021ModelEndpoint"
  "Info\022\022\n\nmodel_name\030\001 \001(\t\022\033\n\023input_endpoi"
  "nt_name\030\002 \003(\t\022\034\n\024output_endpoint_name\030\003 "
  "\003(\t\022!\n\031external_input_queue_name\030\004 \003(\t\022\""
  "\n\032external_output_queue_name\030\005 \003(\t\022\030\n\020ev"
  "ent_input_name\030\006 \003(\t\022\031\n\021event_output_nam"
  "e\030\007 \003(\t\022\030\n\020invoke_model_key\030\010 \003(\t\032n\n\026Sub"
  "modelQueueInfoEntry\022\013\n\003key\030\001 \001(\t\022C\n\005valu"
  "e\030\002 \001(\01324.ge.flow_model.proto.ModelRelat"
  "ionDef.ModelQueueInfo:\0028\001\032y\n\032InvokedMode"
  "lQueueInfoEntry\022\013\n\003key\030\001 \001(\t\022J\n\005value\030\002 "
  "\001(\0132;.ge.flow_model.proto.ModelRelationD"
  "ef.InvokedModelQueueInfo:\0028\001\032t\n\031Submodel"
  "EndpointInfoEntry\022\013\n\003key\030\001 \001(\t\022F\n\005value\030"
  "\002 \001(\01327.ge.flow_model.proto.ModelRelatio"
  "nDef.ModelEndpointInfo:\0028\001\",\n\017RunningRes"
  "ource\022\014\n\004type\030\001 \001(\t\022\013\n\003num\030\002 \001(\003\"l\n\023Mode"
  "lDeployResource\022\025\n\rresource_type\030\001 \001(\t\022>"
  "\n\020running_resource\030\002 \003(\0132$.ge.flow_model"
  ".proto.RunningResource\"*\n\017ModelDeployInf"
  "o\022\027\n\017logic_device_id\030\001 \001(\t\"\347\001\n\013SubmodelD"
  "ef\022\022\n\nmodel_name\030\001 \001(\t\022\022\n\nmodel_type\030\002 \001"
  "(\t\022\017\n\007om_data\030\003 \001(\014\022!\n\005graph\030\004 \001(\0132\022.ge."
  "proto.GraphDef\022A\n\017deploy_resource\030\005 \001(\0132"
  "(.ge.flow_model.proto.ModelDeployResourc"
  "e\0229\n\013deploy_info\030\006 \001(\0132$.ge.flow_model.p"
  "roto.ModelDeployInfo\"\342\001\n\017CompileResource"
  "\022\032\n\022host_resource_type\030\001 \001(\t\022o\n logic_de"
  "vice_id_to_resource_type\030\002 \003(\0132E.ge.flow"
  "_model.proto.CompileResource.LogicDevice"
  "IdToResourceTypeEntry\032B\n LogicDeviceIdTo"
  "ResourceTypeEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030"
  "\002 \001(\t:\0028\001\"\316\010\n\014FlowModelDef\022\022\n\nmodel_name"
  "\030\001 \001(\t\0227\n\010relation\030\002 \001(\0132%.ge.flow_model"
  ".proto.ModelRelationDef\022\025\n\rsubmodel_name"
  "\030\003 \003(\t\022[\n\026models_esched_priority\030\004 \003(\0132;"
  ".ge.flow_model.proto.FlowModelDef.Models"
  "EschedPriorityEntry\022W\n\025model_name_to_ran"
  "k_id\030\006 \003(\01328.ge.flow_model.proto.FlowMod"
  "elDef.ModelNameToRankIdEntry\022Y\n\026group_na"
  "me_to_rank_ids\030\005 \003(\01329.ge.flow_model.pro"
  "to.FlowModelDef.GroupNameToRankIdsEntry\022"
  "R\n\022device_to_rank_ids\030\007 \003(\01326.ge.flow_mo"
  "del.proto.FlowModelDef.DeviceToRankIdsEn"
  "try\022>\n\020compile_resource\030\010 \001(\0132$.ge.flow_"
  "model.proto.CompileResource\032\246\001\n\016EschedPr"
  "iority\022]\n\017esched_priority\030\001 \003(\0132D.ge.flo"
  "w_model.proto.FlowModelDef.EschedPriorit"
  "y.EschedPriorityEntry\0325\n\023EschedPriorityE"
  "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001\032\032\n\007"
  "RankIds\022\017\n\007rank_id\030\001 \003(\r\032m\n\031ModelsEsched"
  "PriorityEntry\022\013\n\003key\030\001 \001(\t\022\?\n\005value\030\002 \001("
  "\01320.ge.flow_model.proto.FlowModelDef.Esc"
  "hedPriority:\0028\001\0328\n\026ModelNameToRankIdEntr"
  "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\r:\0028\001\032d\n\027Gro"
  "upNameToRankIdsEntry\022\013\n\003key\030\001 \001(\t\0228\n\005val"
  "ue\030\002 \001(\0132).ge.flow_model.proto.FlowModel"
  "Def.RankIds:\0028\001\032a\n\024DeviceToRankIdsEntry\022"
  "\013\n\003key\030\001 \001(\t\0228\n\005value\030\002 \001(\0132).ge.flow_mo"
  "del.proto.FlowModelDef.RankIds:\0028\001b\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_flow_5fmodel_2eproto_deps[1] = {
  &::descriptor_table_ge_5fir_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_flow_5fmodel_2eproto_sccs[25] = {
  &scc_info_CompileResource_flow_5fmodel_2eproto.base,
  &scc_info_CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse_flow_5fmodel_2eproto.base,
  &scc_info_FlowModelDef_flow_5fmodel_2eproto.base,
  &scc_info_FlowModelDef_DeviceToRankIdsEntry_DoNotUse_flow_5fmodel_2eproto.base,
  &scc_info_FlowModelDef_EschedPriority_flow_5fmodel_2eproto.base,
  &scc_info_FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse_flow_5fmodel_2eproto.base,
  &scc_info_FlowModelDef_GroupNameToRankIdsEntry_DoNotUse_flow_5fmodel_2eproto.base,
  &scc_info_FlowModelDef_ModelNameToRankIdEntry_DoNotUse_flow_5fmodel_2eproto.base,
  &scc_info_FlowModelDef_ModelsEschedPriorityEntry_DoNotUse_flow_5fmodel_2eproto.base,
  &scc_info_FlowModelDef_RankIds_flow_5fmodel_2eproto.base,
  &scc_info_ModelDeployInfo_flow_5fmodel_2eproto.base,
  &scc_info_ModelDeployResource_flow_5fmodel_2eproto.base,
  &scc_info_ModelRelationDef_flow_5fmodel_2eproto.base,
  &scc_info_ModelRelationDef_AttrValue_flow_5fmodel_2eproto.base,
  &scc_info_ModelRelationDef_Endpoint_flow_5fmodel_2eproto.base,
  &scc_info_ModelRelationDef_Endpoint_AttrsEntry_DoNotUse_flow_5fmodel_2eproto.base,
  &scc_info_ModelRelationDef_InvokedModelQueueInfo_flow_5fmodel_2eproto.base,
  &scc_info_ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse_flow_5fmodel_2eproto.base,
  &scc_info_ModelRelationDef_ModelEndpointInfo_flow_5fmodel_2eproto.base,
  &scc_info_ModelRelationDef_ModelQueueInfo_flow_5fmodel_2eproto.base,
  &scc_info_ModelRelationDef_QueueDef_flow_5fmodel_2eproto.base,
  &scc_info_ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse_flow_5fmodel_2eproto.base,
  &scc_info_ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse_flow_5fmodel_2eproto.base,
  &scc_info_RunningResource_flow_5fmodel_2eproto.base,
  &scc_info_SubmodelDef_flow_5fmodel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flow_5fmodel_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flow_5fmodel_2eproto = {
  false, false, descriptor_table_protodef_flow_5fmodel_2eproto, "flow_model.proto", 3682,
  &descriptor_table_flow_5fmodel_2eproto_once, descriptor_table_flow_5fmodel_2eproto_sccs, descriptor_table_flow_5fmodel_2eproto_deps, 25, 1,
  schemas, file_default_instances, TableStruct_flow_5fmodel_2eproto::offsets,
  file_level_metadata_flow_5fmodel_2eproto, 25, file_level_enum_descriptors_flow_5fmodel_2eproto, file_level_service_descriptors_flow_5fmodel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flow_5fmodel_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_flow_5fmodel_2eproto)), true);
namespace ge {
namespace flow_model {
namespace proto {

// ===================================================================

void ModelRelationDef_QueueDef::InitAsDefaultInstance() {
}
class ModelRelationDef_QueueDef::_Internal {
 public:
};

ModelRelationDef_QueueDef::ModelRelationDef_QueueDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.flow_model.proto.ModelRelationDef.QueueDef)
}
ModelRelationDef_QueueDef::ModelRelationDef_QueueDef(const ModelRelationDef_QueueDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  enqueue_policy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_enqueue_policy().empty()) {
    enqueue_policy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enqueue_policy(),
      GetArena());
  }
  ::memcpy(&depth_, &from.depth_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_control_) -
    reinterpret_cast<char*>(&depth_)) + sizeof(is_control_));
  // @@protoc_insertion_point(copy_constructor:ge.flow_model.proto.ModelRelationDef.QueueDef)
}

void ModelRelationDef_QueueDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelRelationDef_QueueDef_flow_5fmodel_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enqueue_policy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&depth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_control_) -
      reinterpret_cast<char*>(&depth_)) + sizeof(is_control_));
}

ModelRelationDef_QueueDef::~ModelRelationDef_QueueDef() {
  // @@protoc_insertion_point(destructor:ge.flow_model.proto.ModelRelationDef.QueueDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelRelationDef_QueueDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enqueue_policy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelRelationDef_QueueDef::ArenaDtor(void* object) {
  ModelRelationDef_QueueDef* _this = reinterpret_cast< ModelRelationDef_QueueDef* >(object);
  (void)_this;
}
void ModelRelationDef_QueueDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelRelationDef_QueueDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelRelationDef_QueueDef& ModelRelationDef_QueueDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelRelationDef_QueueDef_flow_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void ModelRelationDef_QueueDef::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.flow_model.proto.ModelRelationDef.QueueDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  enqueue_policy_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&depth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_control_) -
      reinterpret_cast<char*>(&depth_)) + sizeof(is_control_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelRelationDef_QueueDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.flow_model.proto.ModelRelationDef.QueueDef.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 depth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string enqueue_policy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_enqueue_policy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.flow_model.proto.ModelRelationDef.QueueDef.enqueue_policy"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_control = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelRelationDef_QueueDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.flow_model.proto.ModelRelationDef.QueueDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.flow_model.proto.ModelRelationDef.QueueDef.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 depth = 2;
  if (this->depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_depth(), target);
  }

  // string enqueue_policy = 3;
  if (this->enqueue_policy().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enqueue_policy().data(), static_cast<int>(this->_internal_enqueue_policy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.flow_model.proto.ModelRelationDef.QueueDef.enqueue_policy");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_enqueue_policy(), target);
  }

  // bool is_control = 4;
  if (this->is_control() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_control(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.flow_model.proto.ModelRelationDef.QueueDef)
  return target;
}

size_t ModelRelationDef_QueueDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.flow_model.proto.ModelRelationDef.QueueDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string enqueue_policy = 3;
  if (this->enqueue_policy().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enqueue_policy());
  }

  // uint32 depth = 2;
  if (this->depth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_depth());
  }

  // bool is_control = 4;
  if (this->is_control() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelRelationDef_QueueDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.flow_model.proto.ModelRelationDef.QueueDef)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelRelationDef_QueueDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelRelationDef_QueueDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.flow_model.proto.ModelRelationDef.QueueDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.flow_model.proto.ModelRelationDef.QueueDef)
    MergeFrom(*source);
  }
}

void ModelRelationDef_QueueDef::MergeFrom(const ModelRelationDef_QueueDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.flow_model.proto.ModelRelationDef.QueueDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.enqueue_policy().size() > 0) {
    _internal_set_enqueue_policy(from._internal_enqueue_policy());
  }
  if (from.depth() != 0) {
    _internal_set_depth(from._internal_depth());
  }
  if (from.is_control() != 0) {
    _internal_set_is_control(from._internal_is_control());
  }
}

void ModelRelationDef_QueueDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.flow_model.proto.ModelRelationDef.QueueDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelRelationDef_QueueDef::CopyFrom(const ModelRelationDef_QueueDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.flow_model.proto.ModelRelationDef.QueueDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelRelationDef_QueueDef::IsInitialized() const {
  return true;
}

void ModelRelationDef_QueueDef::InternalSwap(ModelRelationDef_QueueDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  enqueue_policy_.Swap(&other->enqueue_policy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelRelationDef_QueueDef, is_control_)
      + sizeof(ModelRelationDef_QueueDef::is_control_)
      - PROTOBUF_FIELD_OFFSET(ModelRelationDef_QueueDef, depth_)>(
          reinterpret_cast<char*>(&depth_),
          reinterpret_cast<char*>(&other->depth_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelRelationDef_QueueDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelRelationDef_AttrValue::InitAsDefaultInstance() {
  ::ge::flow_model::proto::_ModelRelationDef_AttrValue_default_instance_.s_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::ge::flow_model::proto::_ModelRelationDef_AttrValue_default_instance_.i_ = PROTOBUF_LONGLONG(0);
  ::ge::flow_model::proto::_ModelRelationDef_AttrValue_default_instance_.b_ = false;
}
class ModelRelationDef_AttrValue::_Internal {
 public:
};

ModelRelationDef_AttrValue::ModelRelationDef_AttrValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.flow_model.proto.ModelRelationDef.AttrValue)
}
ModelRelationDef_AttrValue::ModelRelationDef_AttrValue(const ModelRelationDef_AttrValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kS: {
      _internal_set_s(from._internal_s());
      break;
    }
    case kI: {
      _internal_set_i(from._internal_i());
      break;
    }
    case kB: {
      _internal_set_b(from._internal_b());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ge.flow_model.proto.ModelRelationDef.AttrValue)
}

void ModelRelationDef_AttrValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelRelationDef_AttrValue_flow_5fmodel_2eproto.base);
  clear_has_value();
}

ModelRelationDef_AttrValue::~ModelRelationDef_AttrValue() {
  // @@protoc_insertion_point(destructor:ge.flow_model.proto.ModelRelationDef.AttrValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelRelationDef_AttrValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void ModelRelationDef_AttrValue::ArenaDtor(void* object) {
  ModelRelationDef_AttrValue* _this = reinterpret_cast< ModelRelationDef_AttrValue* >(object);
  (void)_this;
}
void ModelRelationDef_AttrValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelRelationDef_AttrValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelRelationDef_AttrValue& ModelRelationDef_AttrValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelRelationDef_AttrValue_flow_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void ModelRelationDef_AttrValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:ge.flow_model.proto.ModelRelationDef.AttrValue)
  switch (value_case()) {
    case kS: {
      value_.s_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kI: {
      // No need to clear
      break;
    }
    case kB: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void ModelRelationDef_AttrValue::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.flow_model.proto.ModelRelationDef.AttrValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelRelationDef_AttrValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_s();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 i = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_i(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_b(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelRelationDef_AttrValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.flow_model.proto.ModelRelationDef.AttrValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes s = 1;
  if (_internal_has_s()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_s(), target);
  }

  // int64 i = 2;
  if (_internal_has_i()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_i(), target);
  }

  // bool b = 3;
  if (_internal_has_b()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.flow_model.proto.ModelRelationDef.AttrValue)
  return target;
}

size_t ModelRelationDef_AttrValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.flow_model.proto.ModelRelationDef.AttrValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // bytes s = 1;
    case kS: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_s());
      break;
    }
    // int64 i = 2;
    case kI: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_i());
      break;
    }
    // bool b = 3;
    case kB: {
      total_size += 1 + 1;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelRelationDef_AttrValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.flow_model.proto.ModelRelationDef.AttrValue)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelRelationDef_AttrValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelRelationDef_AttrValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.flow_model.proto.ModelRelationDef.AttrValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.flow_model.proto.ModelRelationDef.AttrValue)
    MergeFrom(*source);
  }
}

void ModelRelationDef_AttrValue::MergeFrom(const ModelRelationDef_AttrValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.flow_model.proto.ModelRelationDef.AttrValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kS: {
      _internal_set_s(from._internal_s());
      break;
    }
    case kI: {
      _internal_set_i(from._internal_i());
      break;
    }
    case kB: {
      _internal_set_b(from._internal_b());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void ModelRelationDef_AttrValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.flow_model.proto.ModelRelationDef.AttrValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelRelationDef_AttrValue::CopyFrom(const ModelRelationDef_AttrValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.flow_model.proto.ModelRelationDef.AttrValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelRelationDef_AttrValue::IsInitialized() const {
  return true;
}

void ModelRelationDef_AttrValue::InternalSwap(ModelRelationDef_AttrValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelRelationDef_AttrValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ModelRelationDef_Endpoint_AttrsEntry_DoNotUse::ModelRelationDef_Endpoint_AttrsEntry_DoNotUse() {}
ModelRelationDef_Endpoint_AttrsEntry_DoNotUse::ModelRelationDef_Endpoint_AttrsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ModelRelationDef_Endpoint_AttrsEntry_DoNotUse::MergeFrom(const ModelRelationDef_Endpoint_AttrsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ModelRelationDef_Endpoint_AttrsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ModelRelationDef_Endpoint_AttrsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ModelRelationDef_Endpoint::InitAsDefaultInstance() {
}
class ModelRelationDef_Endpoint::_Internal {
 public:
};

ModelRelationDef_Endpoint::ModelRelationDef_Endpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attrs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.flow_model.proto.ModelRelationDef.Endpoint)
}
ModelRelationDef_Endpoint::ModelRelationDef_Endpoint(const ModelRelationDef_Endpoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attrs_.MergeFrom(from.attrs_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  endpoint_type_ = from.endpoint_type_;
  // @@protoc_insertion_point(copy_constructor:ge.flow_model.proto.ModelRelationDef.Endpoint)
}

void ModelRelationDef_Endpoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelRelationDef_Endpoint_flow_5fmodel_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endpoint_type_ = 0;
}

ModelRelationDef_Endpoint::~ModelRelationDef_Endpoint() {
  // @@protoc_insertion_point(destructor:ge.flow_model.proto.ModelRelationDef.Endpoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelRelationDef_Endpoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelRelationDef_Endpoint::ArenaDtor(void* object) {
  ModelRelationDef_Endpoint* _this = reinterpret_cast< ModelRelationDef_Endpoint* >(object);
  (void)_this;
}
void ModelRelationDef_Endpoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelRelationDef_Endpoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelRelationDef_Endpoint& ModelRelationDef_Endpoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelRelationDef_Endpoint_flow_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void ModelRelationDef_Endpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.flow_model.proto.ModelRelationDef.Endpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attrs_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  endpoint_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelRelationDef_Endpoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.flow_model.proto.ModelRelationDef.Endpoint.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 endpoint_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          endpoint_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .ge.flow_model.proto.ModelRelationDef.AttrValue> attrs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&attrs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelRelationDef_Endpoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.flow_model.proto.ModelRelationDef.Endpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.flow_model.proto.ModelRelationDef.Endpoint.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 endpoint_type = 2;
  if (this->endpoint_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_endpoint_type(), target);
  }

  // map<string, .ge.flow_model.proto.ModelRelationDef.AttrValue> attrs = 3;
  if (!this->_internal_attrs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_AttrValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ge.flow_model.proto.ModelRelationDef.Endpoint.AttrsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_attrs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_attrs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_AttrValue >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_AttrValue >::const_iterator
          it = this->_internal_attrs().begin();
          it != this->_internal_attrs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ModelRelationDef_Endpoint_AttrsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_AttrValue >::const_iterator
          it = this->_internal_attrs().begin();
          it != this->_internal_attrs().end(); ++it) {
        target = ModelRelationDef_Endpoint_AttrsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.flow_model.proto.ModelRelationDef.Endpoint)
  return target;
}

size_t ModelRelationDef_Endpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.flow_model.proto.ModelRelationDef.Endpoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .ge.flow_model.proto.ModelRelationDef.AttrValue> attrs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attrs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_AttrValue >::const_iterator
      it = this->_internal_attrs().begin();
      it != this->_internal_attrs().end(); ++it) {
    total_size += ModelRelationDef_Endpoint_AttrsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 endpoint_type = 2;
  if (this->endpoint_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_endpoint_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelRelationDef_Endpoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.flow_model.proto.ModelRelationDef.Endpoint)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelRelationDef_Endpoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelRelationDef_Endpoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.flow_model.proto.ModelRelationDef.Endpoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.flow_model.proto.ModelRelationDef.Endpoint)
    MergeFrom(*source);
  }
}

void ModelRelationDef_Endpoint::MergeFrom(const ModelRelationDef_Endpoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.flow_model.proto.ModelRelationDef.Endpoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attrs_.MergeFrom(from.attrs_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.endpoint_type() != 0) {
    _internal_set_endpoint_type(from._internal_endpoint_type());
  }
}

void ModelRelationDef_Endpoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.flow_model.proto.ModelRelationDef.Endpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelRelationDef_Endpoint::CopyFrom(const ModelRelationDef_Endpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.flow_model.proto.ModelRelationDef.Endpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelRelationDef_Endpoint::IsInitialized() const {
  return true;
}

void ModelRelationDef_Endpoint::InternalSwap(ModelRelationDef_Endpoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attrs_.Swap(&other->attrs_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(endpoint_type_, other->endpoint_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelRelationDef_Endpoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelRelationDef_InvokedModelQueueInfo::InitAsDefaultInstance() {
}
class ModelRelationDef_InvokedModelQueueInfo::_Internal {
 public:
};

ModelRelationDef_InvokedModelQueueInfo::ModelRelationDef_InvokedModelQueueInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  input_queue_name_(arena),
  output_queue_name_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo)
}
ModelRelationDef_InvokedModelQueueInfo::ModelRelationDef_InvokedModelQueueInfo(const ModelRelationDef_InvokedModelQueueInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      input_queue_name_(from.input_queue_name_),
      output_queue_name_(from.output_queue_name_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo)
}

void ModelRelationDef_InvokedModelQueueInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelRelationDef_InvokedModelQueueInfo_flow_5fmodel_2eproto.base);
}

ModelRelationDef_InvokedModelQueueInfo::~ModelRelationDef_InvokedModelQueueInfo() {
  // @@protoc_insertion_point(destructor:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelRelationDef_InvokedModelQueueInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ModelRelationDef_InvokedModelQueueInfo::ArenaDtor(void* object) {
  ModelRelationDef_InvokedModelQueueInfo* _this = reinterpret_cast< ModelRelationDef_InvokedModelQueueInfo* >(object);
  (void)_this;
}
void ModelRelationDef_InvokedModelQueueInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelRelationDef_InvokedModelQueueInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelRelationDef_InvokedModelQueueInfo& ModelRelationDef_InvokedModelQueueInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelRelationDef_InvokedModelQueueInfo_flow_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void ModelRelationDef_InvokedModelQueueInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_queue_name_.Clear();
  output_queue_name_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelRelationDef_InvokedModelQueueInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string input_queue_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input_queue_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo.input_queue_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string output_queue_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_output_queue_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo.output_queue_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelRelationDef_InvokedModelQueueInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string input_queue_name = 1;
  for (int i = 0, n = this->_internal_input_queue_name_size(); i < n; i++) {
    const auto& s = this->_internal_input_queue_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo.input_queue_name");
    target = stream->WriteString(1, s, target);
  }

  // repeated string output_queue_name = 2;
  for (int i = 0, n = this->_internal_output_queue_name_size(); i < n; i++) {
    const auto& s = this->_internal_output_queue_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo.output_queue_name");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo)
  return target;
}

size_t ModelRelationDef_InvokedModelQueueInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string input_queue_name = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(input_queue_name_.size());
  for (int i = 0, n = input_queue_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      input_queue_name_.Get(i));
  }

  // repeated string output_queue_name = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(output_queue_name_.size());
  for (int i = 0, n = output_queue_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      output_queue_name_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelRelationDef_InvokedModelQueueInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelRelationDef_InvokedModelQueueInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelRelationDef_InvokedModelQueueInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo)
    MergeFrom(*source);
  }
}

void ModelRelationDef_InvokedModelQueueInfo::MergeFrom(const ModelRelationDef_InvokedModelQueueInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_queue_name_.MergeFrom(from.input_queue_name_);
  output_queue_name_.MergeFrom(from.output_queue_name_);
}

void ModelRelationDef_InvokedModelQueueInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelRelationDef_InvokedModelQueueInfo::CopyFrom(const ModelRelationDef_InvokedModelQueueInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelRelationDef_InvokedModelQueueInfo::IsInitialized() const {
  return true;
}

void ModelRelationDef_InvokedModelQueueInfo::InternalSwap(ModelRelationDef_InvokedModelQueueInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  input_queue_name_.InternalSwap(&other->input_queue_name_);
  output_queue_name_.InternalSwap(&other->output_queue_name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelRelationDef_InvokedModelQueueInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelRelationDef_ModelQueueInfo::InitAsDefaultInstance() {
}
class ModelRelationDef_ModelQueueInfo::_Internal {
 public:
};

ModelRelationDef_ModelQueueInfo::ModelRelationDef_ModelQueueInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  input_queue_name_(arena),
  output_queue_name_(arena),
  external_input_queue_name_(arena),
  external_output_queue_name_(arena),
  invoke_model_key_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo)
}
ModelRelationDef_ModelQueueInfo::ModelRelationDef_ModelQueueInfo(const ModelRelationDef_ModelQueueInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      input_queue_name_(from.input_queue_name_),
      output_queue_name_(from.output_queue_name_),
      external_input_queue_name_(from.external_input_queue_name_),
      external_output_queue_name_(from.external_output_queue_name_),
      invoke_model_key_(from.invoke_model_key_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_name().empty()) {
    model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_model_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo)
}

void ModelRelationDef_ModelQueueInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelRelationDef_ModelQueueInfo_flow_5fmodel_2eproto.base);
  model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ModelRelationDef_ModelQueueInfo::~ModelRelationDef_ModelQueueInfo() {
  // @@protoc_insertion_point(destructor:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelRelationDef_ModelQueueInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  model_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelRelationDef_ModelQueueInfo::ArenaDtor(void* object) {
  ModelRelationDef_ModelQueueInfo* _this = reinterpret_cast< ModelRelationDef_ModelQueueInfo* >(object);
  (void)_this;
}
void ModelRelationDef_ModelQueueInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelRelationDef_ModelQueueInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelRelationDef_ModelQueueInfo& ModelRelationDef_ModelQueueInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelRelationDef_ModelQueueInfo_flow_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void ModelRelationDef_ModelQueueInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_queue_name_.Clear();
  output_queue_name_.Clear();
  external_input_queue_name_.Clear();
  external_output_queue_name_.Clear();
  invoke_model_key_.Clear();
  model_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelRelationDef_ModelQueueInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string model_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_model_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.model_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string input_queue_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input_queue_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.input_queue_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string output_queue_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_output_queue_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.output_queue_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string external_input_queue_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_external_input_queue_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.external_input_queue_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string external_output_queue_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_external_output_queue_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.external_output_queue_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string invoke_model_key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_invoke_model_key();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.invoke_model_key"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelRelationDef_ModelQueueInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_name = 1;
  if (this->model_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_name().data(), static_cast<int>(this->_internal_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.model_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model_name(), target);
  }

  // repeated string input_queue_name = 2;
  for (int i = 0, n = this->_internal_input_queue_name_size(); i < n; i++) {
    const auto& s = this->_internal_input_queue_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.input_queue_name");
    target = stream->WriteString(2, s, target);
  }

  // repeated string output_queue_name = 3;
  for (int i = 0, n = this->_internal_output_queue_name_size(); i < n; i++) {
    const auto& s = this->_internal_output_queue_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.output_queue_name");
    target = stream->WriteString(3, s, target);
  }

  // repeated string external_input_queue_name = 4;
  for (int i = 0, n = this->_internal_external_input_queue_name_size(); i < n; i++) {
    const auto& s = this->_internal_external_input_queue_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.external_input_queue_name");
    target = stream->WriteString(4, s, target);
  }

  // repeated string external_output_queue_name = 5;
  for (int i = 0, n = this->_internal_external_output_queue_name_size(); i < n; i++) {
    const auto& s = this->_internal_external_output_queue_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.external_output_queue_name");
    target = stream->WriteString(5, s, target);
  }

  // repeated string invoke_model_key = 6;
  for (int i = 0, n = this->_internal_invoke_model_key_size(); i < n; i++) {
    const auto& s = this->_internal_invoke_model_key(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.invoke_model_key");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo)
  return target;
}

size_t ModelRelationDef_ModelQueueInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string input_queue_name = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(input_queue_name_.size());
  for (int i = 0, n = input_queue_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      input_queue_name_.Get(i));
  }

  // repeated string output_queue_name = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(output_queue_name_.size());
  for (int i = 0, n = output_queue_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      output_queue_name_.Get(i));
  }

  // repeated string external_input_queue_name = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(external_input_queue_name_.size());
  for (int i = 0, n = external_input_queue_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      external_input_queue_name_.Get(i));
  }

  // repeated string external_output_queue_name = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(external_output_queue_name_.size());
  for (int i = 0, n = external_output_queue_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      external_output_queue_name_.Get(i));
  }

  // repeated string invoke_model_key = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(invoke_model_key_.size());
  for (int i = 0, n = invoke_model_key_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      invoke_model_key_.Get(i));
  }

  // string model_name = 1;
  if (this->model_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelRelationDef_ModelQueueInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelRelationDef_ModelQueueInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelRelationDef_ModelQueueInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo)
    MergeFrom(*source);
  }
}

void ModelRelationDef_ModelQueueInfo::MergeFrom(const ModelRelationDef_ModelQueueInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_queue_name_.MergeFrom(from.input_queue_name_);
  output_queue_name_.MergeFrom(from.output_queue_name_);
  external_input_queue_name_.MergeFrom(from.external_input_queue_name_);
  external_output_queue_name_.MergeFrom(from.external_output_queue_name_);
  invoke_model_key_.MergeFrom(from.invoke_model_key_);
  if (from.model_name().size() > 0) {
    _internal_set_model_name(from._internal_model_name());
  }
}

void ModelRelationDef_ModelQueueInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelRelationDef_ModelQueueInfo::CopyFrom(const ModelRelationDef_ModelQueueInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelRelationDef_ModelQueueInfo::IsInitialized() const {
  return true;
}

void ModelRelationDef_ModelQueueInfo::InternalSwap(ModelRelationDef_ModelQueueInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  input_queue_name_.InternalSwap(&other->input_queue_name_);
  output_queue_name_.InternalSwap(&other->output_queue_name_);
  external_input_queue_name_.InternalSwap(&other->external_input_queue_name_);
  external_output_queue_name_.InternalSwap(&other->external_output_queue_name_);
  invoke_model_key_.InternalSwap(&other->invoke_model_key_);
  model_name_.Swap(&other->model_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelRelationDef_ModelQueueInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelRelationDef_ModelEndpointInfo::InitAsDefaultInstance() {
}
class ModelRelationDef_ModelEndpointInfo::_Internal {
 public:
};

ModelRelationDef_ModelEndpointInfo::ModelRelationDef_ModelEndpointInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  input_endpoint_name_(arena),
  output_endpoint_name_(arena),
  external_input_queue_name_(arena),
  external_output_queue_name_(arena),
  event_input_name_(arena),
  event_output_name_(arena),
  invoke_model_key_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo)
}
ModelRelationDef_ModelEndpointInfo::ModelRelationDef_ModelEndpointInfo(const ModelRelationDef_ModelEndpointInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      input_endpoint_name_(from.input_endpoint_name_),
      output_endpoint_name_(from.output_endpoint_name_),
      external_input_queue_name_(from.external_input_queue_name_),
      external_output_queue_name_(from.external_output_queue_name_),
      event_input_name_(from.event_input_name_),
      event_output_name_(from.event_output_name_),
      invoke_model_key_(from.invoke_model_key_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_name().empty()) {
    model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_model_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo)
}

void ModelRelationDef_ModelEndpointInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelRelationDef_ModelEndpointInfo_flow_5fmodel_2eproto.base);
  model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ModelRelationDef_ModelEndpointInfo::~ModelRelationDef_ModelEndpointInfo() {
  // @@protoc_insertion_point(destructor:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelRelationDef_ModelEndpointInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  model_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelRelationDef_ModelEndpointInfo::ArenaDtor(void* object) {
  ModelRelationDef_ModelEndpointInfo* _this = reinterpret_cast< ModelRelationDef_ModelEndpointInfo* >(object);
  (void)_this;
}
void ModelRelationDef_ModelEndpointInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelRelationDef_ModelEndpointInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelRelationDef_ModelEndpointInfo& ModelRelationDef_ModelEndpointInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelRelationDef_ModelEndpointInfo_flow_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void ModelRelationDef_ModelEndpointInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_endpoint_name_.Clear();
  output_endpoint_name_.Clear();
  external_input_queue_name_.Clear();
  external_output_queue_name_.Clear();
  event_input_name_.Clear();
  event_output_name_.Clear();
  invoke_model_key_.Clear();
  model_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelRelationDef_ModelEndpointInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string model_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_model_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.model_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string input_endpoint_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input_endpoint_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.input_endpoint_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string output_endpoint_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_output_endpoint_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.output_endpoint_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string external_input_queue_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_external_input_queue_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.external_input_queue_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string external_output_queue_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_external_output_queue_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.external_output_queue_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string event_input_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_event_input_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.event_input_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string event_output_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_event_output_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.event_output_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string invoke_model_key = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_invoke_model_key();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.invoke_model_key"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelRelationDef_ModelEndpointInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_name = 1;
  if (this->model_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_name().data(), static_cast<int>(this->_internal_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.model_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model_name(), target);
  }

  // repeated string input_endpoint_name = 2;
  for (int i = 0, n = this->_internal_input_endpoint_name_size(); i < n; i++) {
    const auto& s = this->_internal_input_endpoint_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.input_endpoint_name");
    target = stream->WriteString(2, s, target);
  }

  // repeated string output_endpoint_name = 3;
  for (int i = 0, n = this->_internal_output_endpoint_name_size(); i < n; i++) {
    const auto& s = this->_internal_output_endpoint_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.output_endpoint_name");
    target = stream->WriteString(3, s, target);
  }

  // repeated string external_input_queue_name = 4;
  for (int i = 0, n = this->_internal_external_input_queue_name_size(); i < n; i++) {
    const auto& s = this->_internal_external_input_queue_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.external_input_queue_name");
    target = stream->WriteString(4, s, target);
  }

  // repeated string external_output_queue_name = 5;
  for (int i = 0, n = this->_internal_external_output_queue_name_size(); i < n; i++) {
    const auto& s = this->_internal_external_output_queue_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.external_output_queue_name");
    target = stream->WriteString(5, s, target);
  }

  // repeated string event_input_name = 6;
  for (int i = 0, n = this->_internal_event_input_name_size(); i < n; i++) {
    const auto& s = this->_internal_event_input_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.event_input_name");
    target = stream->WriteString(6, s, target);
  }

  // repeated string event_output_name = 7;
  for (int i = 0, n = this->_internal_event_output_name_size(); i < n; i++) {
    const auto& s = this->_internal_event_output_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.event_output_name");
    target = stream->WriteString(7, s, target);
  }

  // repeated string invoke_model_key = 8;
  for (int i = 0, n = this->_internal_invoke_model_key_size(); i < n; i++) {
    const auto& s = this->_internal_invoke_model_key(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.invoke_model_key");
    target = stream->WriteString(8, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo)
  return target;
}

size_t ModelRelationDef_ModelEndpointInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string input_endpoint_name = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(input_endpoint_name_.size());
  for (int i = 0, n = input_endpoint_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      input_endpoint_name_.Get(i));
  }

  // repeated string output_endpoint_name = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(output_endpoint_name_.size());
  for (int i = 0, n = output_endpoint_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      output_endpoint_name_.Get(i));
  }

  // repeated string external_input_queue_name = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(external_input_queue_name_.size());
  for (int i = 0, n = external_input_queue_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      external_input_queue_name_.Get(i));
  }

  // repeated string external_output_queue_name = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(external_output_queue_name_.size());
  for (int i = 0, n = external_output_queue_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      external_output_queue_name_.Get(i));
  }

  // repeated string event_input_name = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(event_input_name_.size());
  for (int i = 0, n = event_input_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      event_input_name_.Get(i));
  }

  // repeated string event_output_name = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(event_output_name_.size());
  for (int i = 0, n = event_output_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      event_output_name_.Get(i));
  }

  // repeated string invoke_model_key = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(invoke_model_key_.size());
  for (int i = 0, n = invoke_model_key_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      invoke_model_key_.Get(i));
  }

  // string model_name = 1;
  if (this->model_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelRelationDef_ModelEndpointInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelRelationDef_ModelEndpointInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelRelationDef_ModelEndpointInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo)
    MergeFrom(*source);
  }
}

void ModelRelationDef_ModelEndpointInfo::MergeFrom(const ModelRelationDef_ModelEndpointInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_endpoint_name_.MergeFrom(from.input_endpoint_name_);
  output_endpoint_name_.MergeFrom(from.output_endpoint_name_);
  external_input_queue_name_.MergeFrom(from.external_input_queue_name_);
  external_output_queue_name_.MergeFrom(from.external_output_queue_name_);
  event_input_name_.MergeFrom(from.event_input_name_);
  event_output_name_.MergeFrom(from.event_output_name_);
  invoke_model_key_.MergeFrom(from.invoke_model_key_);
  if (from.model_name().size() > 0) {
    _internal_set_model_name(from._internal_model_name());
  }
}

void ModelRelationDef_ModelEndpointInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelRelationDef_ModelEndpointInfo::CopyFrom(const ModelRelationDef_ModelEndpointInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelRelationDef_ModelEndpointInfo::IsInitialized() const {
  return true;
}

void ModelRelationDef_ModelEndpointInfo::InternalSwap(ModelRelationDef_ModelEndpointInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  input_endpoint_name_.InternalSwap(&other->input_endpoint_name_);
  output_endpoint_name_.InternalSwap(&other->output_endpoint_name_);
  external_input_queue_name_.InternalSwap(&other->external_input_queue_name_);
  external_output_queue_name_.InternalSwap(&other->external_output_queue_name_);
  event_input_name_.InternalSwap(&other->event_input_name_);
  event_output_name_.InternalSwap(&other->event_output_name_);
  invoke_model_key_.InternalSwap(&other->invoke_model_key_);
  model_name_.Swap(&other->model_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelRelationDef_ModelEndpointInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse::ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse() {}
ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse::ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse::MergeFrom(const ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse::ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse() {}
ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse::ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse::MergeFrom(const ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse::ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse() {}
ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse::ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse::MergeFrom(const ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ModelRelationDef::InitAsDefaultInstance() {
  ::ge::flow_model::proto::_ModelRelationDef_default_instance_._instance.get_mutable()->root_model_queue_info_ = const_cast< ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo*>(
      ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo::internal_default_instance());
  ::ge::flow_model::proto::_ModelRelationDef_default_instance_._instance.get_mutable()->root_model_endpoint_info_ = const_cast< ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo*>(
      ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo::internal_default_instance());
}
class ModelRelationDef::_Internal {
 public:
  static const ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo& root_model_queue_info(const ModelRelationDef* msg);
  static const ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo& root_model_endpoint_info(const ModelRelationDef* msg);
};

const ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo&
ModelRelationDef::_Internal::root_model_queue_info(const ModelRelationDef* msg) {
  return *msg->root_model_queue_info_;
}
const ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo&
ModelRelationDef::_Internal::root_model_endpoint_info(const ModelRelationDef* msg) {
  return *msg->root_model_endpoint_info_;
}
ModelRelationDef::ModelRelationDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  queue_def_(arena),
  submodel_queue_info_(arena),
  invoked_model_queue_info_(arena),
  endpoint_(arena),
  submodel_endpoint_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.flow_model.proto.ModelRelationDef)
}
ModelRelationDef::ModelRelationDef(const ModelRelationDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      queue_def_(from.queue_def_),
      endpoint_(from.endpoint_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  submodel_queue_info_.MergeFrom(from.submodel_queue_info_);
  invoked_model_queue_info_.MergeFrom(from.invoked_model_queue_info_);
  submodel_endpoint_info_.MergeFrom(from.submodel_endpoint_info_);
  if (from._internal_has_root_model_queue_info()) {
    root_model_queue_info_ = new ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo(*from.root_model_queue_info_);
  } else {
    root_model_queue_info_ = nullptr;
  }
  if (from._internal_has_root_model_endpoint_info()) {
    root_model_endpoint_info_ = new ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo(*from.root_model_endpoint_info_);
  } else {
    root_model_endpoint_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ge.flow_model.proto.ModelRelationDef)
}

void ModelRelationDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelRelationDef_flow_5fmodel_2eproto.base);
  ::memset(&root_model_queue_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&root_model_endpoint_info_) -
      reinterpret_cast<char*>(&root_model_queue_info_)) + sizeof(root_model_endpoint_info_));
}

ModelRelationDef::~ModelRelationDef() {
  // @@protoc_insertion_point(destructor:ge.flow_model.proto.ModelRelationDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelRelationDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete root_model_queue_info_;
  if (this != internal_default_instance()) delete root_model_endpoint_info_;
}

void ModelRelationDef::ArenaDtor(void* object) {
  ModelRelationDef* _this = reinterpret_cast< ModelRelationDef* >(object);
  (void)_this;
}
void ModelRelationDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelRelationDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelRelationDef& ModelRelationDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelRelationDef_flow_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void ModelRelationDef::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.flow_model.proto.ModelRelationDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queue_def_.Clear();
  submodel_queue_info_.Clear();
  invoked_model_queue_info_.Clear();
  endpoint_.Clear();
  submodel_endpoint_info_.Clear();
  if (GetArena() == nullptr && root_model_queue_info_ != nullptr) {
    delete root_model_queue_info_;
  }
  root_model_queue_info_ = nullptr;
  if (GetArena() == nullptr && root_model_endpoint_info_ != nullptr) {
    delete root_model_endpoint_info_;
  }
  root_model_endpoint_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelRelationDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ge.flow_model.proto.ModelRelationDef.QueueDef queue_def = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_queue_def(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .ge.flow_model.proto.ModelRelationDef.ModelQueueInfo> submodel_queue_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&submodel_queue_info_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo> invoked_model_queue_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&invoked_model_queue_info_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .ge.flow_model.proto.ModelRelationDef.ModelQueueInfo root_model_queue_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_root_model_queue_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ge.flow_model.proto.ModelRelationDef.Endpoint endpoint = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_endpoint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo> submodel_endpoint_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&submodel_endpoint_info_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo root_model_endpoint_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_root_model_endpoint_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelRelationDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.flow_model.proto.ModelRelationDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ge.flow_model.proto.ModelRelationDef.QueueDef queue_def = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_queue_def_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_queue_def(i), target, stream);
  }

  // map<string, .ge.flow_model.proto.ModelRelationDef.ModelQueueInfo> submodel_queue_info = 2;
  if (!this->_internal_submodel_queue_info().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ge.flow_model.proto.ModelRelationDef.SubmodelQueueInfoEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_submodel_queue_info().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_submodel_queue_info().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo >::const_iterator
          it = this->_internal_submodel_queue_info().begin();
          it != this->_internal_submodel_queue_info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo >::const_iterator
          it = this->_internal_submodel_queue_info().begin();
          it != this->_internal_submodel_queue_info().end(); ++it) {
        target = ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo> invoked_model_queue_info = 3;
  if (!this->_internal_invoked_model_queue_info().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfoEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_invoked_model_queue_info().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_invoked_model_queue_info().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfo >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfo >::const_iterator
          it = this->_internal_invoked_model_queue_info().begin();
          it != this->_internal_invoked_model_queue_info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfo >::const_iterator
          it = this->_internal_invoked_model_queue_info().begin();
          it != this->_internal_invoked_model_queue_info().end(); ++it) {
        target = ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .ge.flow_model.proto.ModelRelationDef.ModelQueueInfo root_model_queue_info = 4;
  if (this->has_root_model_queue_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::root_model_queue_info(this), target, stream);
  }

  // repeated .ge.flow_model.proto.ModelRelationDef.Endpoint endpoint = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_endpoint_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_endpoint(i), target, stream);
  }

  // map<string, .ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo> submodel_endpoint_info = 6;
  if (!this->_internal_submodel_endpoint_info().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ge.flow_model.proto.ModelRelationDef.SubmodelEndpointInfoEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_submodel_endpoint_info().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_submodel_endpoint_info().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo >::const_iterator
          it = this->_internal_submodel_endpoint_info().begin();
          it != this->_internal_submodel_endpoint_info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo >::const_iterator
          it = this->_internal_submodel_endpoint_info().begin();
          it != this->_internal_submodel_endpoint_info().end(); ++it) {
        target = ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo root_model_endpoint_info = 7;
  if (this->has_root_model_endpoint_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::root_model_endpoint_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.flow_model.proto.ModelRelationDef)
  return target;
}

size_t ModelRelationDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.flow_model.proto.ModelRelationDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ge.flow_model.proto.ModelRelationDef.QueueDef queue_def = 1;
  total_size += 1UL * this->_internal_queue_def_size();
  for (const auto& msg : this->queue_def_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .ge.flow_model.proto.ModelRelationDef.ModelQueueInfo> submodel_queue_info = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_submodel_queue_info_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo >::const_iterator
      it = this->_internal_submodel_queue_info().begin();
      it != this->_internal_submodel_queue_info().end(); ++it) {
    total_size += ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo> invoked_model_queue_info = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_invoked_model_queue_info_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfo >::const_iterator
      it = this->_internal_invoked_model_queue_info().begin();
      it != this->_internal_invoked_model_queue_info().end(); ++it) {
    total_size += ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .ge.flow_model.proto.ModelRelationDef.Endpoint endpoint = 5;
  total_size += 1UL * this->_internal_endpoint_size();
  for (const auto& msg : this->endpoint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo> submodel_endpoint_info = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_submodel_endpoint_info_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo >::const_iterator
      it = this->_internal_submodel_endpoint_info().begin();
      it != this->_internal_submodel_endpoint_info().end(); ++it) {
    total_size += ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .ge.flow_model.proto.ModelRelationDef.ModelQueueInfo root_model_queue_info = 4;
  if (this->has_root_model_queue_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *root_model_queue_info_);
  }

  // .ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo root_model_endpoint_info = 7;
  if (this->has_root_model_endpoint_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *root_model_endpoint_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelRelationDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.flow_model.proto.ModelRelationDef)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelRelationDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelRelationDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.flow_model.proto.ModelRelationDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.flow_model.proto.ModelRelationDef)
    MergeFrom(*source);
  }
}

void ModelRelationDef::MergeFrom(const ModelRelationDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.flow_model.proto.ModelRelationDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  queue_def_.MergeFrom(from.queue_def_);
  submodel_queue_info_.MergeFrom(from.submodel_queue_info_);
  invoked_model_queue_info_.MergeFrom(from.invoked_model_queue_info_);
  endpoint_.MergeFrom(from.endpoint_);
  submodel_endpoint_info_.MergeFrom(from.submodel_endpoint_info_);
  if (from.has_root_model_queue_info()) {
    _internal_mutable_root_model_queue_info()->::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo::MergeFrom(from._internal_root_model_queue_info());
  }
  if (from.has_root_model_endpoint_info()) {
    _internal_mutable_root_model_endpoint_info()->::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo::MergeFrom(from._internal_root_model_endpoint_info());
  }
}

void ModelRelationDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.flow_model.proto.ModelRelationDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelRelationDef::CopyFrom(const ModelRelationDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.flow_model.proto.ModelRelationDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelRelationDef::IsInitialized() const {
  return true;
}

void ModelRelationDef::InternalSwap(ModelRelationDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  queue_def_.InternalSwap(&other->queue_def_);
  submodel_queue_info_.Swap(&other->submodel_queue_info_);
  invoked_model_queue_info_.Swap(&other->invoked_model_queue_info_);
  endpoint_.InternalSwap(&other->endpoint_);
  submodel_endpoint_info_.Swap(&other->submodel_endpoint_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelRelationDef, root_model_endpoint_info_)
      + sizeof(ModelRelationDef::root_model_endpoint_info_)
      - PROTOBUF_FIELD_OFFSET(ModelRelationDef, root_model_queue_info_)>(
          reinterpret_cast<char*>(&root_model_queue_info_),
          reinterpret_cast<char*>(&other->root_model_queue_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelRelationDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RunningResource::InitAsDefaultInstance() {
}
class RunningResource::_Internal {
 public:
};

RunningResource::RunningResource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.flow_model.proto.RunningResource)
}
RunningResource::RunningResource(const RunningResource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  num_ = from.num_;
  // @@protoc_insertion_point(copy_constructor:ge.flow_model.proto.RunningResource)
}

void RunningResource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RunningResource_flow_5fmodel_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  num_ = PROTOBUF_LONGLONG(0);
}

RunningResource::~RunningResource() {
  // @@protoc_insertion_point(destructor:ge.flow_model.proto.RunningResource)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RunningResource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RunningResource::ArenaDtor(void* object) {
  RunningResource* _this = reinterpret_cast< RunningResource* >(object);
  (void)_this;
}
void RunningResource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RunningResource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunningResource& RunningResource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RunningResource_flow_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void RunningResource::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.flow_model.proto.RunningResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  num_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunningResource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.flow_model.proto.RunningResource.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RunningResource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.flow_model.proto.RunningResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.flow_model.proto.RunningResource.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // int64 num = 2;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.flow_model.proto.RunningResource)
  return target;
}

size_t RunningResource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.flow_model.proto.RunningResource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // int64 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunningResource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.flow_model.proto.RunningResource)
  GOOGLE_DCHECK_NE(&from, this);
  const RunningResource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RunningResource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.flow_model.proto.RunningResource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.flow_model.proto.RunningResource)
    MergeFrom(*source);
  }
}

void RunningResource::MergeFrom(const RunningResource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.flow_model.proto.RunningResource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
}

void RunningResource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.flow_model.proto.RunningResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunningResource::CopyFrom(const RunningResource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.flow_model.proto.RunningResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunningResource::IsInitialized() const {
  return true;
}

void RunningResource::InternalSwap(RunningResource* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RunningResource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelDeployResource::InitAsDefaultInstance() {
}
class ModelDeployResource::_Internal {
 public:
};

ModelDeployResource::ModelDeployResource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  running_resource_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.flow_model.proto.ModelDeployResource)
}
ModelDeployResource::ModelDeployResource(const ModelDeployResource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      running_resource_(from.running_resource_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  resource_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resource_type().empty()) {
    resource_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_resource_type(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ge.flow_model.proto.ModelDeployResource)
}

void ModelDeployResource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelDeployResource_flow_5fmodel_2eproto.base);
  resource_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ModelDeployResource::~ModelDeployResource() {
  // @@protoc_insertion_point(destructor:ge.flow_model.proto.ModelDeployResource)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelDeployResource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  resource_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelDeployResource::ArenaDtor(void* object) {
  ModelDeployResource* _this = reinterpret_cast< ModelDeployResource* >(object);
  (void)_this;
}
void ModelDeployResource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelDeployResource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelDeployResource& ModelDeployResource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelDeployResource_flow_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void ModelDeployResource::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.flow_model.proto.ModelDeployResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  running_resource_.Clear();
  resource_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelDeployResource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string resource_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_resource_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.flow_model.proto.ModelDeployResource.resource_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ge.flow_model.proto.RunningResource running_resource = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_running_resource(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelDeployResource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.flow_model.proto.ModelDeployResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string resource_type = 1;
  if (this->resource_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource_type().data(), static_cast<int>(this->_internal_resource_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.flow_model.proto.ModelDeployResource.resource_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_resource_type(), target);
  }

  // repeated .ge.flow_model.proto.RunningResource running_resource = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_running_resource_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_running_resource(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.flow_model.proto.ModelDeployResource)
  return target;
}

size_t ModelDeployResource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.flow_model.proto.ModelDeployResource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ge.flow_model.proto.RunningResource running_resource = 2;
  total_size += 1UL * this->_internal_running_resource_size();
  for (const auto& msg : this->running_resource_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string resource_type = 1;
  if (this->resource_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelDeployResource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.flow_model.proto.ModelDeployResource)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelDeployResource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelDeployResource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.flow_model.proto.ModelDeployResource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.flow_model.proto.ModelDeployResource)
    MergeFrom(*source);
  }
}

void ModelDeployResource::MergeFrom(const ModelDeployResource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.flow_model.proto.ModelDeployResource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  running_resource_.MergeFrom(from.running_resource_);
  if (from.resource_type().size() > 0) {
    _internal_set_resource_type(from._internal_resource_type());
  }
}

void ModelDeployResource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.flow_model.proto.ModelDeployResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelDeployResource::CopyFrom(const ModelDeployResource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.flow_model.proto.ModelDeployResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelDeployResource::IsInitialized() const {
  return true;
}

void ModelDeployResource::InternalSwap(ModelDeployResource* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  running_resource_.InternalSwap(&other->running_resource_);
  resource_type_.Swap(&other->resource_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelDeployResource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelDeployInfo::InitAsDefaultInstance() {
}
class ModelDeployInfo::_Internal {
 public:
};

ModelDeployInfo::ModelDeployInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.flow_model.proto.ModelDeployInfo)
}
ModelDeployInfo::ModelDeployInfo(const ModelDeployInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  logic_device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_logic_device_id().empty()) {
    logic_device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_logic_device_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ge.flow_model.proto.ModelDeployInfo)
}

void ModelDeployInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelDeployInfo_flow_5fmodel_2eproto.base);
  logic_device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ModelDeployInfo::~ModelDeployInfo() {
  // @@protoc_insertion_point(destructor:ge.flow_model.proto.ModelDeployInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelDeployInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  logic_device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelDeployInfo::ArenaDtor(void* object) {
  ModelDeployInfo* _this = reinterpret_cast< ModelDeployInfo* >(object);
  (void)_this;
}
void ModelDeployInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelDeployInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelDeployInfo& ModelDeployInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelDeployInfo_flow_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void ModelDeployInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.flow_model.proto.ModelDeployInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logic_device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelDeployInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string logic_device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_logic_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.flow_model.proto.ModelDeployInfo.logic_device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelDeployInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.flow_model.proto.ModelDeployInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string logic_device_id = 1;
  if (this->logic_device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logic_device_id().data(), static_cast<int>(this->_internal_logic_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.flow_model.proto.ModelDeployInfo.logic_device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_logic_device_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.flow_model.proto.ModelDeployInfo)
  return target;
}

size_t ModelDeployInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.flow_model.proto.ModelDeployInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string logic_device_id = 1;
  if (this->logic_device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logic_device_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelDeployInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.flow_model.proto.ModelDeployInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelDeployInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelDeployInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.flow_model.proto.ModelDeployInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.flow_model.proto.ModelDeployInfo)
    MergeFrom(*source);
  }
}

void ModelDeployInfo::MergeFrom(const ModelDeployInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.flow_model.proto.ModelDeployInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.logic_device_id().size() > 0) {
    _internal_set_logic_device_id(from._internal_logic_device_id());
  }
}

void ModelDeployInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.flow_model.proto.ModelDeployInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelDeployInfo::CopyFrom(const ModelDeployInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.flow_model.proto.ModelDeployInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelDeployInfo::IsInitialized() const {
  return true;
}

void ModelDeployInfo::InternalSwap(ModelDeployInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  logic_device_id_.Swap(&other->logic_device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelDeployInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubmodelDef::InitAsDefaultInstance() {
  ::ge::flow_model::proto::_SubmodelDef_default_instance_._instance.get_mutable()->graph_ = const_cast< ::ge::proto::GraphDef*>(
      ::ge::proto::GraphDef::internal_default_instance());
  ::ge::flow_model::proto::_SubmodelDef_default_instance_._instance.get_mutable()->deploy_resource_ = const_cast< ::ge::flow_model::proto::ModelDeployResource*>(
      ::ge::flow_model::proto::ModelDeployResource::internal_default_instance());
  ::ge::flow_model::proto::_SubmodelDef_default_instance_._instance.get_mutable()->deploy_info_ = const_cast< ::ge::flow_model::proto::ModelDeployInfo*>(
      ::ge::flow_model::proto::ModelDeployInfo::internal_default_instance());
}
class SubmodelDef::_Internal {
 public:
  static const ::ge::proto::GraphDef& graph(const SubmodelDef* msg);
  static const ::ge::flow_model::proto::ModelDeployResource& deploy_resource(const SubmodelDef* msg);
  static const ::ge::flow_model::proto::ModelDeployInfo& deploy_info(const SubmodelDef* msg);
};

const ::ge::proto::GraphDef&
SubmodelDef::_Internal::graph(const SubmodelDef* msg) {
  return *msg->graph_;
}
const ::ge::flow_model::proto::ModelDeployResource&
SubmodelDef::_Internal::deploy_resource(const SubmodelDef* msg) {
  return *msg->deploy_resource_;
}
const ::ge::flow_model::proto::ModelDeployInfo&
SubmodelDef::_Internal::deploy_info(const SubmodelDef* msg) {
  return *msg->deploy_info_;
}
void SubmodelDef::clear_graph() {
  if (GetArena() == nullptr && graph_ != nullptr) {
    delete graph_;
  }
  graph_ = nullptr;
}
SubmodelDef::SubmodelDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.flow_model.proto.SubmodelDef)
}
SubmodelDef::SubmodelDef(const SubmodelDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_name().empty()) {
    model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_model_name(),
      GetArena());
  }
  model_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_type().empty()) {
    model_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_model_type(),
      GetArena());
  }
  om_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_om_data().empty()) {
    om_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_om_data(),
      GetArena());
  }
  if (from._internal_has_graph()) {
    graph_ = new ::ge::proto::GraphDef(*from.graph_);
  } else {
    graph_ = nullptr;
  }
  if (from._internal_has_deploy_resource()) {
    deploy_resource_ = new ::ge::flow_model::proto::ModelDeployResource(*from.deploy_resource_);
  } else {
    deploy_resource_ = nullptr;
  }
  if (from._internal_has_deploy_info()) {
    deploy_info_ = new ::ge::flow_model::proto::ModelDeployInfo(*from.deploy_info_);
  } else {
    deploy_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ge.flow_model.proto.SubmodelDef)
}

void SubmodelDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubmodelDef_flow_5fmodel_2eproto.base);
  model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  om_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&graph_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deploy_info_) -
      reinterpret_cast<char*>(&graph_)) + sizeof(deploy_info_));
}

SubmodelDef::~SubmodelDef() {
  // @@protoc_insertion_point(destructor:ge.flow_model.proto.SubmodelDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubmodelDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  model_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  om_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete graph_;
  if (this != internal_default_instance()) delete deploy_resource_;
  if (this != internal_default_instance()) delete deploy_info_;
}

void SubmodelDef::ArenaDtor(void* object) {
  SubmodelDef* _this = reinterpret_cast< SubmodelDef* >(object);
  (void)_this;
}
void SubmodelDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubmodelDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmodelDef& SubmodelDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubmodelDef_flow_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void SubmodelDef::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.flow_model.proto.SubmodelDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  model_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  om_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && graph_ != nullptr) {
    delete graph_;
  }
  graph_ = nullptr;
  if (GetArena() == nullptr && deploy_resource_ != nullptr) {
    delete deploy_resource_;
  }
  deploy_resource_ = nullptr;
  if (GetArena() == nullptr && deploy_info_ != nullptr) {
    delete deploy_info_;
  }
  deploy_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmodelDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string model_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_model_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.flow_model.proto.SubmodelDef.model_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.flow_model.proto.SubmodelDef.model_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes om_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_om_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ge.proto.GraphDef graph = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ge.flow_model.proto.ModelDeployResource deploy_resource = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_deploy_resource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ge.flow_model.proto.ModelDeployInfo deploy_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_deploy_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubmodelDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.flow_model.proto.SubmodelDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_name = 1;
  if (this->model_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_name().data(), static_cast<int>(this->_internal_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.flow_model.proto.SubmodelDef.model_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model_name(), target);
  }

  // string model_type = 2;
  if (this->model_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_type().data(), static_cast<int>(this->_internal_model_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.flow_model.proto.SubmodelDef.model_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_type(), target);
  }

  // bytes om_data = 3;
  if (this->om_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_om_data(), target);
  }

  // .ge.proto.GraphDef graph = 4;
  if (this->has_graph()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::graph(this), target, stream);
  }

  // .ge.flow_model.proto.ModelDeployResource deploy_resource = 5;
  if (this->has_deploy_resource()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::deploy_resource(this), target, stream);
  }

  // .ge.flow_model.proto.ModelDeployInfo deploy_info = 6;
  if (this->has_deploy_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::deploy_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.flow_model.proto.SubmodelDef)
  return target;
}

size_t SubmodelDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.flow_model.proto.SubmodelDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_name = 1;
  if (this->model_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_name());
  }

  // string model_type = 2;
  if (this->model_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_type());
  }

  // bytes om_data = 3;
  if (this->om_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_om_data());
  }

  // .ge.proto.GraphDef graph = 4;
  if (this->has_graph()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *graph_);
  }

  // .ge.flow_model.proto.ModelDeployResource deploy_resource = 5;
  if (this->has_deploy_resource()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *deploy_resource_);
  }

  // .ge.flow_model.proto.ModelDeployInfo deploy_info = 6;
  if (this->has_deploy_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *deploy_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmodelDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.flow_model.proto.SubmodelDef)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmodelDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubmodelDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.flow_model.proto.SubmodelDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.flow_model.proto.SubmodelDef)
    MergeFrom(*source);
  }
}

void SubmodelDef::MergeFrom(const SubmodelDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.flow_model.proto.SubmodelDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_name().size() > 0) {
    _internal_set_model_name(from._internal_model_name());
  }
  if (from.model_type().size() > 0) {
    _internal_set_model_type(from._internal_model_type());
  }
  if (from.om_data().size() > 0) {
    _internal_set_om_data(from._internal_om_data());
  }
  if (from.has_graph()) {
    _internal_mutable_graph()->::ge::proto::GraphDef::MergeFrom(from._internal_graph());
  }
  if (from.has_deploy_resource()) {
    _internal_mutable_deploy_resource()->::ge::flow_model::proto::ModelDeployResource::MergeFrom(from._internal_deploy_resource());
  }
  if (from.has_deploy_info()) {
    _internal_mutable_deploy_info()->::ge::flow_model::proto::ModelDeployInfo::MergeFrom(from._internal_deploy_info());
  }
}

void SubmodelDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.flow_model.proto.SubmodelDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmodelDef::CopyFrom(const SubmodelDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.flow_model.proto.SubmodelDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmodelDef::IsInitialized() const {
  return true;
}

void SubmodelDef::InternalSwap(SubmodelDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  model_name_.Swap(&other->model_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  model_type_.Swap(&other->model_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  om_data_.Swap(&other->om_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubmodelDef, deploy_info_)
      + sizeof(SubmodelDef::deploy_info_)
      - PROTOBUF_FIELD_OFFSET(SubmodelDef, graph_)>(
          reinterpret_cast<char*>(&graph_),
          reinterpret_cast<char*>(&other->graph_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmodelDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse::CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse() {}
CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse::CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse::MergeFrom(const CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void CompileResource::InitAsDefaultInstance() {
}
class CompileResource::_Internal {
 public:
};

CompileResource::CompileResource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  logic_device_id_to_resource_type_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.flow_model.proto.CompileResource)
}
CompileResource::CompileResource(const CompileResource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  logic_device_id_to_resource_type_.MergeFrom(from.logic_device_id_to_resource_type_);
  host_resource_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host_resource_type().empty()) {
    host_resource_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_host_resource_type(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ge.flow_model.proto.CompileResource)
}

void CompileResource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CompileResource_flow_5fmodel_2eproto.base);
  host_resource_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CompileResource::~CompileResource() {
  // @@protoc_insertion_point(destructor:ge.flow_model.proto.CompileResource)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CompileResource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  host_resource_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CompileResource::ArenaDtor(void* object) {
  CompileResource* _this = reinterpret_cast< CompileResource* >(object);
  (void)_this;
}
void CompileResource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompileResource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompileResource& CompileResource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompileResource_flow_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void CompileResource::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.flow_model.proto.CompileResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logic_device_id_to_resource_type_.Clear();
  host_resource_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompileResource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string host_resource_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_host_resource_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.flow_model.proto.CompileResource.host_resource_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> logic_device_id_to_resource_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&logic_device_id_to_resource_type_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompileResource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.flow_model.proto.CompileResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host_resource_type = 1;
  if (this->host_resource_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host_resource_type().data(), static_cast<int>(this->_internal_host_resource_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.flow_model.proto.CompileResource.host_resource_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host_resource_type(), target);
  }

  // map<string, string> logic_device_id_to_resource_type = 2;
  if (!this->_internal_logic_device_id_to_resource_type().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ge.flow_model.proto.CompileResource.LogicDeviceIdToResourceTypeEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ge.flow_model.proto.CompileResource.LogicDeviceIdToResourceTypeEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_logic_device_id_to_resource_type().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_logic_device_id_to_resource_type().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_logic_device_id_to_resource_type().begin();
          it != this->_internal_logic_device_id_to_resource_type().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_logic_device_id_to_resource_type().begin();
          it != this->_internal_logic_device_id_to_resource_type().end(); ++it) {
        target = CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.flow_model.proto.CompileResource)
  return target;
}

size_t CompileResource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.flow_model.proto.CompileResource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> logic_device_id_to_resource_type = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_logic_device_id_to_resource_type_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_logic_device_id_to_resource_type().begin();
      it != this->_internal_logic_device_id_to_resource_type().end(); ++it) {
    total_size += CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string host_resource_type = 1;
  if (this->host_resource_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_resource_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompileResource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.flow_model.proto.CompileResource)
  GOOGLE_DCHECK_NE(&from, this);
  const CompileResource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompileResource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.flow_model.proto.CompileResource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.flow_model.proto.CompileResource)
    MergeFrom(*source);
  }
}

void CompileResource::MergeFrom(const CompileResource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.flow_model.proto.CompileResource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logic_device_id_to_resource_type_.MergeFrom(from.logic_device_id_to_resource_type_);
  if (from.host_resource_type().size() > 0) {
    _internal_set_host_resource_type(from._internal_host_resource_type());
  }
}

void CompileResource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.flow_model.proto.CompileResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompileResource::CopyFrom(const CompileResource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.flow_model.proto.CompileResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompileResource::IsInitialized() const {
  return true;
}

void CompileResource::InternalSwap(CompileResource* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  logic_device_id_to_resource_type_.Swap(&other->logic_device_id_to_resource_type_);
  host_resource_type_.Swap(&other->host_resource_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CompileResource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse::FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse() {}
FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse::FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse::MergeFrom(const FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void FlowModelDef_EschedPriority::InitAsDefaultInstance() {
}
class FlowModelDef_EschedPriority::_Internal {
 public:
};

FlowModelDef_EschedPriority::FlowModelDef_EschedPriority(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  esched_priority_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.flow_model.proto.FlowModelDef.EschedPriority)
}
FlowModelDef_EschedPriority::FlowModelDef_EschedPriority(const FlowModelDef_EschedPriority& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  esched_priority_.MergeFrom(from.esched_priority_);
  // @@protoc_insertion_point(copy_constructor:ge.flow_model.proto.FlowModelDef.EschedPriority)
}

void FlowModelDef_EschedPriority::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FlowModelDef_EschedPriority_flow_5fmodel_2eproto.base);
}

FlowModelDef_EschedPriority::~FlowModelDef_EschedPriority() {
  // @@protoc_insertion_point(destructor:ge.flow_model.proto.FlowModelDef.EschedPriority)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlowModelDef_EschedPriority::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FlowModelDef_EschedPriority::ArenaDtor(void* object) {
  FlowModelDef_EschedPriority* _this = reinterpret_cast< FlowModelDef_EschedPriority* >(object);
  (void)_this;
}
void FlowModelDef_EschedPriority::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlowModelDef_EschedPriority::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlowModelDef_EschedPriority& FlowModelDef_EschedPriority::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlowModelDef_EschedPriority_flow_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void FlowModelDef_EschedPriority::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.flow_model.proto.FlowModelDef.EschedPriority)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  esched_priority_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowModelDef_EschedPriority::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, int32> esched_priority = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&esched_priority_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlowModelDef_EschedPriority::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.flow_model.proto.FlowModelDef.EschedPriority)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, int32> esched_priority = 1;
  if (!this->_internal_esched_priority().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ge.flow_model.proto.FlowModelDef.EschedPriority.EschedPriorityEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_esched_priority().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_esched_priority().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_esched_priority().begin();
          it != this->_internal_esched_priority().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_esched_priority().begin();
          it != this->_internal_esched_priority().end(); ++it) {
        target = FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.flow_model.proto.FlowModelDef.EschedPriority)
  return target;
}

size_t FlowModelDef_EschedPriority::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.flow_model.proto.FlowModelDef.EschedPriority)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int32> esched_priority = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_esched_priority_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_esched_priority().begin();
      it != this->_internal_esched_priority().end(); ++it) {
    total_size += FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowModelDef_EschedPriority::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.flow_model.proto.FlowModelDef.EschedPriority)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowModelDef_EschedPriority* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlowModelDef_EschedPriority>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.flow_model.proto.FlowModelDef.EschedPriority)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.flow_model.proto.FlowModelDef.EschedPriority)
    MergeFrom(*source);
  }
}

void FlowModelDef_EschedPriority::MergeFrom(const FlowModelDef_EschedPriority& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.flow_model.proto.FlowModelDef.EschedPriority)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  esched_priority_.MergeFrom(from.esched_priority_);
}

void FlowModelDef_EschedPriority::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.flow_model.proto.FlowModelDef.EschedPriority)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowModelDef_EschedPriority::CopyFrom(const FlowModelDef_EschedPriority& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.flow_model.proto.FlowModelDef.EschedPriority)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowModelDef_EschedPriority::IsInitialized() const {
  return true;
}

void FlowModelDef_EschedPriority::InternalSwap(FlowModelDef_EschedPriority* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  esched_priority_.Swap(&other->esched_priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowModelDef_EschedPriority::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlowModelDef_RankIds::InitAsDefaultInstance() {
}
class FlowModelDef_RankIds::_Internal {
 public:
};

FlowModelDef_RankIds::FlowModelDef_RankIds(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rank_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.flow_model.proto.FlowModelDef.RankIds)
}
FlowModelDef_RankIds::FlowModelDef_RankIds(const FlowModelDef_RankIds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rank_id_(from.rank_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ge.flow_model.proto.FlowModelDef.RankIds)
}

void FlowModelDef_RankIds::SharedCtor() {
}

FlowModelDef_RankIds::~FlowModelDef_RankIds() {
  // @@protoc_insertion_point(destructor:ge.flow_model.proto.FlowModelDef.RankIds)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlowModelDef_RankIds::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FlowModelDef_RankIds::ArenaDtor(void* object) {
  FlowModelDef_RankIds* _this = reinterpret_cast< FlowModelDef_RankIds* >(object);
  (void)_this;
}
void FlowModelDef_RankIds::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlowModelDef_RankIds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlowModelDef_RankIds& FlowModelDef_RankIds::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlowModelDef_RankIds_flow_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void FlowModelDef_RankIds::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.flow_model.proto.FlowModelDef.RankIds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rank_id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowModelDef_RankIds::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 rank_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_rank_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_rank_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlowModelDef_RankIds::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.flow_model.proto.FlowModelDef.RankIds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 rank_id = 1;
  {
    int byte_size = _rank_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_rank_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.flow_model.proto.FlowModelDef.RankIds)
  return target;
}

size_t FlowModelDef_RankIds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.flow_model.proto.FlowModelDef.RankIds)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 rank_id = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->rank_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rank_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowModelDef_RankIds::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.flow_model.proto.FlowModelDef.RankIds)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowModelDef_RankIds* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlowModelDef_RankIds>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.flow_model.proto.FlowModelDef.RankIds)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.flow_model.proto.FlowModelDef.RankIds)
    MergeFrom(*source);
  }
}

void FlowModelDef_RankIds::MergeFrom(const FlowModelDef_RankIds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.flow_model.proto.FlowModelDef.RankIds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rank_id_.MergeFrom(from.rank_id_);
}

void FlowModelDef_RankIds::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.flow_model.proto.FlowModelDef.RankIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowModelDef_RankIds::CopyFrom(const FlowModelDef_RankIds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.flow_model.proto.FlowModelDef.RankIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowModelDef_RankIds::IsInitialized() const {
  return true;
}

void FlowModelDef_RankIds::InternalSwap(FlowModelDef_RankIds* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rank_id_.InternalSwap(&other->rank_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowModelDef_RankIds::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

FlowModelDef_ModelsEschedPriorityEntry_DoNotUse::FlowModelDef_ModelsEschedPriorityEntry_DoNotUse() {}
FlowModelDef_ModelsEschedPriorityEntry_DoNotUse::FlowModelDef_ModelsEschedPriorityEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FlowModelDef_ModelsEschedPriorityEntry_DoNotUse::MergeFrom(const FlowModelDef_ModelsEschedPriorityEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FlowModelDef_ModelsEschedPriorityEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void FlowModelDef_ModelsEschedPriorityEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

FlowModelDef_ModelNameToRankIdEntry_DoNotUse::FlowModelDef_ModelNameToRankIdEntry_DoNotUse() {}
FlowModelDef_ModelNameToRankIdEntry_DoNotUse::FlowModelDef_ModelNameToRankIdEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FlowModelDef_ModelNameToRankIdEntry_DoNotUse::MergeFrom(const FlowModelDef_ModelNameToRankIdEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FlowModelDef_ModelNameToRankIdEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void FlowModelDef_ModelNameToRankIdEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

FlowModelDef_GroupNameToRankIdsEntry_DoNotUse::FlowModelDef_GroupNameToRankIdsEntry_DoNotUse() {}
FlowModelDef_GroupNameToRankIdsEntry_DoNotUse::FlowModelDef_GroupNameToRankIdsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FlowModelDef_GroupNameToRankIdsEntry_DoNotUse::MergeFrom(const FlowModelDef_GroupNameToRankIdsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FlowModelDef_GroupNameToRankIdsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void FlowModelDef_GroupNameToRankIdsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

FlowModelDef_DeviceToRankIdsEntry_DoNotUse::FlowModelDef_DeviceToRankIdsEntry_DoNotUse() {}
FlowModelDef_DeviceToRankIdsEntry_DoNotUse::FlowModelDef_DeviceToRankIdsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FlowModelDef_DeviceToRankIdsEntry_DoNotUse::MergeFrom(const FlowModelDef_DeviceToRankIdsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FlowModelDef_DeviceToRankIdsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void FlowModelDef_DeviceToRankIdsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void FlowModelDef::InitAsDefaultInstance() {
  ::ge::flow_model::proto::_FlowModelDef_default_instance_._instance.get_mutable()->relation_ = const_cast< ::ge::flow_model::proto::ModelRelationDef*>(
      ::ge::flow_model::proto::ModelRelationDef::internal_default_instance());
  ::ge::flow_model::proto::_FlowModelDef_default_instance_._instance.get_mutable()->compile_resource_ = const_cast< ::ge::flow_model::proto::CompileResource*>(
      ::ge::flow_model::proto::CompileResource::internal_default_instance());
}
class FlowModelDef::_Internal {
 public:
  static const ::ge::flow_model::proto::ModelRelationDef& relation(const FlowModelDef* msg);
  static const ::ge::flow_model::proto::CompileResource& compile_resource(const FlowModelDef* msg);
};

const ::ge::flow_model::proto::ModelRelationDef&
FlowModelDef::_Internal::relation(const FlowModelDef* msg) {
  return *msg->relation_;
}
const ::ge::flow_model::proto::CompileResource&
FlowModelDef::_Internal::compile_resource(const FlowModelDef* msg) {
  return *msg->compile_resource_;
}
FlowModelDef::FlowModelDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  submodel_name_(arena),
  models_esched_priority_(arena),
  group_name_to_rank_ids_(arena),
  model_name_to_rank_id_(arena),
  device_to_rank_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.flow_model.proto.FlowModelDef)
}
FlowModelDef::FlowModelDef(const FlowModelDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      submodel_name_(from.submodel_name_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  models_esched_priority_.MergeFrom(from.models_esched_priority_);
  group_name_to_rank_ids_.MergeFrom(from.group_name_to_rank_ids_);
  model_name_to_rank_id_.MergeFrom(from.model_name_to_rank_id_);
  device_to_rank_ids_.MergeFrom(from.device_to_rank_ids_);
  model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_name().empty()) {
    model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_model_name(),
      GetArena());
  }
  if (from._internal_has_relation()) {
    relation_ = new ::ge::flow_model::proto::ModelRelationDef(*from.relation_);
  } else {
    relation_ = nullptr;
  }
  if (from._internal_has_compile_resource()) {
    compile_resource_ = new ::ge::flow_model::proto::CompileResource(*from.compile_resource_);
  } else {
    compile_resource_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ge.flow_model.proto.FlowModelDef)
}

void FlowModelDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FlowModelDef_flow_5fmodel_2eproto.base);
  model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&relation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compile_resource_) -
      reinterpret_cast<char*>(&relation_)) + sizeof(compile_resource_));
}

FlowModelDef::~FlowModelDef() {
  // @@protoc_insertion_point(destructor:ge.flow_model.proto.FlowModelDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlowModelDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  model_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete relation_;
  if (this != internal_default_instance()) delete compile_resource_;
}

void FlowModelDef::ArenaDtor(void* object) {
  FlowModelDef* _this = reinterpret_cast< FlowModelDef* >(object);
  (void)_this;
}
void FlowModelDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlowModelDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlowModelDef& FlowModelDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlowModelDef_flow_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void FlowModelDef::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.flow_model.proto.FlowModelDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  submodel_name_.Clear();
  models_esched_priority_.Clear();
  group_name_to_rank_ids_.Clear();
  model_name_to_rank_id_.Clear();
  device_to_rank_ids_.Clear();
  model_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && relation_ != nullptr) {
    delete relation_;
  }
  relation_ = nullptr;
  if (GetArena() == nullptr && compile_resource_ != nullptr) {
    delete compile_resource_;
  }
  compile_resource_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowModelDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string model_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_model_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.flow_model.proto.FlowModelDef.model_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ge.flow_model.proto.ModelRelationDef relation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_relation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string submodel_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_submodel_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.flow_model.proto.FlowModelDef.submodel_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .ge.flow_model.proto.FlowModelDef.EschedPriority> models_esched_priority = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&models_esched_priority_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .ge.flow_model.proto.FlowModelDef.RankIds> group_name_to_rank_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&group_name_to_rank_ids_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, uint32> model_name_to_rank_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&model_name_to_rank_id_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .ge.flow_model.proto.FlowModelDef.RankIds> device_to_rank_ids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&device_to_rank_ids_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // .ge.flow_model.proto.CompileResource compile_resource = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_compile_resource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlowModelDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.flow_model.proto.FlowModelDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_name = 1;
  if (this->model_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_name().data(), static_cast<int>(this->_internal_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.flow_model.proto.FlowModelDef.model_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model_name(), target);
  }

  // .ge.flow_model.proto.ModelRelationDef relation = 2;
  if (this->has_relation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::relation(this), target, stream);
  }

  // repeated string submodel_name = 3;
  for (int i = 0, n = this->_internal_submodel_name_size(); i < n; i++) {
    const auto& s = this->_internal_submodel_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.flow_model.proto.FlowModelDef.submodel_name");
    target = stream->WriteString(3, s, target);
  }

  // map<string, .ge.flow_model.proto.FlowModelDef.EschedPriority> models_esched_priority = 4;
  if (!this->_internal_models_esched_priority().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_EschedPriority >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ge.flow_model.proto.FlowModelDef.ModelsEschedPriorityEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_models_esched_priority().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_models_esched_priority().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_EschedPriority >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_EschedPriority >::const_iterator
          it = this->_internal_models_esched_priority().begin();
          it != this->_internal_models_esched_priority().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = FlowModelDef_ModelsEschedPriorityEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_EschedPriority >::const_iterator
          it = this->_internal_models_esched_priority().begin();
          it != this->_internal_models_esched_priority().end(); ++it) {
        target = FlowModelDef_ModelsEschedPriorityEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .ge.flow_model.proto.FlowModelDef.RankIds> group_name_to_rank_ids = 5;
  if (!this->_internal_group_name_to_rank_ids().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_RankIds >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ge.flow_model.proto.FlowModelDef.GroupNameToRankIdsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_group_name_to_rank_ids().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_group_name_to_rank_ids().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_RankIds >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_RankIds >::const_iterator
          it = this->_internal_group_name_to_rank_ids().begin();
          it != this->_internal_group_name_to_rank_ids().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = FlowModelDef_GroupNameToRankIdsEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_RankIds >::const_iterator
          it = this->_internal_group_name_to_rank_ids().begin();
          it != this->_internal_group_name_to_rank_ids().end(); ++it) {
        target = FlowModelDef_GroupNameToRankIdsEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, uint32> model_name_to_rank_id = 6;
  if (!this->_internal_model_name_to_rank_id().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ge.flow_model.proto.FlowModelDef.ModelNameToRankIdEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_model_name_to_rank_id().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_model_name_to_rank_id().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_model_name_to_rank_id().begin();
          it != this->_internal_model_name_to_rank_id().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = FlowModelDef_ModelNameToRankIdEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_model_name_to_rank_id().begin();
          it != this->_internal_model_name_to_rank_id().end(); ++it) {
        target = FlowModelDef_ModelNameToRankIdEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .ge.flow_model.proto.FlowModelDef.RankIds> device_to_rank_ids = 7;
  if (!this->_internal_device_to_rank_ids().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_RankIds >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ge.flow_model.proto.FlowModelDef.DeviceToRankIdsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_device_to_rank_ids().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_device_to_rank_ids().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_RankIds >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_RankIds >::const_iterator
          it = this->_internal_device_to_rank_ids().begin();
          it != this->_internal_device_to_rank_ids().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = FlowModelDef_DeviceToRankIdsEntry_DoNotUse::Funcs::InternalSerialize(7, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_RankIds >::const_iterator
          it = this->_internal_device_to_rank_ids().begin();
          it != this->_internal_device_to_rank_ids().end(); ++it) {
        target = FlowModelDef_DeviceToRankIdsEntry_DoNotUse::Funcs::InternalSerialize(7, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .ge.flow_model.proto.CompileResource compile_resource = 8;
  if (this->has_compile_resource()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::compile_resource(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.flow_model.proto.FlowModelDef)
  return target;
}

size_t FlowModelDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.flow_model.proto.FlowModelDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string submodel_name = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(submodel_name_.size());
  for (int i = 0, n = submodel_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      submodel_name_.Get(i));
  }

  // map<string, .ge.flow_model.proto.FlowModelDef.EschedPriority> models_esched_priority = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_models_esched_priority_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_EschedPriority >::const_iterator
      it = this->_internal_models_esched_priority().begin();
      it != this->_internal_models_esched_priority().end(); ++it) {
    total_size += FlowModelDef_ModelsEschedPriorityEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .ge.flow_model.proto.FlowModelDef.RankIds> group_name_to_rank_ids = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_group_name_to_rank_ids_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_RankIds >::const_iterator
      it = this->_internal_group_name_to_rank_ids().begin();
      it != this->_internal_group_name_to_rank_ids().end(); ++it) {
    total_size += FlowModelDef_GroupNameToRankIdsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, uint32> model_name_to_rank_id = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_model_name_to_rank_id_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_model_name_to_rank_id().begin();
      it != this->_internal_model_name_to_rank_id().end(); ++it) {
    total_size += FlowModelDef_ModelNameToRankIdEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .ge.flow_model.proto.FlowModelDef.RankIds> device_to_rank_ids = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_device_to_rank_ids_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_RankIds >::const_iterator
      it = this->_internal_device_to_rank_ids().begin();
      it != this->_internal_device_to_rank_ids().end(); ++it) {
    total_size += FlowModelDef_DeviceToRankIdsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string model_name = 1;
  if (this->model_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_name());
  }

  // .ge.flow_model.proto.ModelRelationDef relation = 2;
  if (this->has_relation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *relation_);
  }

  // .ge.flow_model.proto.CompileResource compile_resource = 8;
  if (this->has_compile_resource()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *compile_resource_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowModelDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.flow_model.proto.FlowModelDef)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowModelDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlowModelDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.flow_model.proto.FlowModelDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.flow_model.proto.FlowModelDef)
    MergeFrom(*source);
  }
}

void FlowModelDef::MergeFrom(const FlowModelDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.flow_model.proto.FlowModelDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  submodel_name_.MergeFrom(from.submodel_name_);
  models_esched_priority_.MergeFrom(from.models_esched_priority_);
  group_name_to_rank_ids_.MergeFrom(from.group_name_to_rank_ids_);
  model_name_to_rank_id_.MergeFrom(from.model_name_to_rank_id_);
  device_to_rank_ids_.MergeFrom(from.device_to_rank_ids_);
  if (from.model_name().size() > 0) {
    _internal_set_model_name(from._internal_model_name());
  }
  if (from.has_relation()) {
    _internal_mutable_relation()->::ge::flow_model::proto::ModelRelationDef::MergeFrom(from._internal_relation());
  }
  if (from.has_compile_resource()) {
    _internal_mutable_compile_resource()->::ge::flow_model::proto::CompileResource::MergeFrom(from._internal_compile_resource());
  }
}

void FlowModelDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.flow_model.proto.FlowModelDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowModelDef::CopyFrom(const FlowModelDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.flow_model.proto.FlowModelDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowModelDef::IsInitialized() const {
  return true;
}

void FlowModelDef::InternalSwap(FlowModelDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  submodel_name_.InternalSwap(&other->submodel_name_);
  models_esched_priority_.Swap(&other->models_esched_priority_);
  group_name_to_rank_ids_.Swap(&other->group_name_to_rank_ids_);
  model_name_to_rank_id_.Swap(&other->model_name_to_rank_id_);
  device_to_rank_ids_.Swap(&other->device_to_rank_ids_);
  model_name_.Swap(&other->model_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlowModelDef, compile_resource_)
      + sizeof(FlowModelDef::compile_resource_)
      - PROTOBUF_FIELD_OFFSET(FlowModelDef, relation_)>(
          reinterpret_cast<char*>(&relation_),
          reinterpret_cast<char*>(&other->relation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowModelDef::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace flow_model
}  // namespace ge
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ge::flow_model::proto::ModelRelationDef_QueueDef* Arena::CreateMaybeMessage< ::ge::flow_model::proto::ModelRelationDef_QueueDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::flow_model::proto::ModelRelationDef_QueueDef >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::flow_model::proto::ModelRelationDef_AttrValue* Arena::CreateMaybeMessage< ::ge::flow_model::proto::ModelRelationDef_AttrValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::flow_model::proto::ModelRelationDef_AttrValue >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::flow_model::proto::ModelRelationDef_Endpoint_AttrsEntry_DoNotUse* Arena::CreateMaybeMessage< ::ge::flow_model::proto::ModelRelationDef_Endpoint_AttrsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::flow_model::proto::ModelRelationDef_Endpoint_AttrsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::flow_model::proto::ModelRelationDef_Endpoint* Arena::CreateMaybeMessage< ::ge::flow_model::proto::ModelRelationDef_Endpoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::flow_model::proto::ModelRelationDef_Endpoint >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfo* Arena::CreateMaybeMessage< ::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo* Arena::CreateMaybeMessage< ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo* Arena::CreateMaybeMessage< ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::flow_model::proto::ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse* Arena::CreateMaybeMessage< ::ge::flow_model::proto::ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::flow_model::proto::ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse* Arena::CreateMaybeMessage< ::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::flow_model::proto::ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse* Arena::CreateMaybeMessage< ::ge::flow_model::proto::ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::flow_model::proto::ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::flow_model::proto::ModelRelationDef* Arena::CreateMaybeMessage< ::ge::flow_model::proto::ModelRelationDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::flow_model::proto::ModelRelationDef >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::flow_model::proto::RunningResource* Arena::CreateMaybeMessage< ::ge::flow_model::proto::RunningResource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::flow_model::proto::RunningResource >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::flow_model::proto::ModelDeployResource* Arena::CreateMaybeMessage< ::ge::flow_model::proto::ModelDeployResource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::flow_model::proto::ModelDeployResource >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::flow_model::proto::ModelDeployInfo* Arena::CreateMaybeMessage< ::ge::flow_model::proto::ModelDeployInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::flow_model::proto::ModelDeployInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::flow_model::proto::SubmodelDef* Arena::CreateMaybeMessage< ::ge::flow_model::proto::SubmodelDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::flow_model::proto::SubmodelDef >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::flow_model::proto::CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse* Arena::CreateMaybeMessage< ::ge::flow_model::proto::CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::flow_model::proto::CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::flow_model::proto::CompileResource* Arena::CreateMaybeMessage< ::ge::flow_model::proto::CompileResource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::flow_model::proto::CompileResource >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::flow_model::proto::FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse* Arena::CreateMaybeMessage< ::ge::flow_model::proto::FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::flow_model::proto::FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::flow_model::proto::FlowModelDef_EschedPriority* Arena::CreateMaybeMessage< ::ge::flow_model::proto::FlowModelDef_EschedPriority >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::flow_model::proto::FlowModelDef_EschedPriority >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::flow_model::proto::FlowModelDef_RankIds* Arena::CreateMaybeMessage< ::ge::flow_model::proto::FlowModelDef_RankIds >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::flow_model::proto::FlowModelDef_RankIds >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::flow_model::proto::FlowModelDef_ModelsEschedPriorityEntry_DoNotUse* Arena::CreateMaybeMessage< ::ge::flow_model::proto::FlowModelDef_ModelsEschedPriorityEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::flow_model::proto::FlowModelDef_ModelsEschedPriorityEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::flow_model::proto::FlowModelDef_ModelNameToRankIdEntry_DoNotUse* Arena::CreateMaybeMessage< ::ge::flow_model::proto::FlowModelDef_ModelNameToRankIdEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::flow_model::proto::FlowModelDef_ModelNameToRankIdEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::flow_model::proto::FlowModelDef_GroupNameToRankIdsEntry_DoNotUse* Arena::CreateMaybeMessage< ::ge::flow_model::proto::FlowModelDef_GroupNameToRankIdsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::flow_model::proto::FlowModelDef_GroupNameToRankIdsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::flow_model::proto::FlowModelDef_DeviceToRankIdsEntry_DoNotUse* Arena::CreateMaybeMessage< ::ge::flow_model::proto::FlowModelDef_DeviceToRankIdsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::flow_model::proto::FlowModelDef_DeviceToRankIdsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::flow_model::proto::FlowModelDef* Arena::CreateMaybeMessage< ::ge::flow_model::proto::FlowModelDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::flow_model::proto::FlowModelDef >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
