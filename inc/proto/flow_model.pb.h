// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flow_model.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flow_5fmodel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flow_5fmodel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "ge_ir.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flow_5fmodel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flow_5fmodel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[25]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flow_5fmodel_2eproto;
namespace ge {
namespace flow_model {
namespace proto {
class CompileResource;
class CompileResourceDefaultTypeInternal;
extern CompileResourceDefaultTypeInternal _CompileResource_default_instance_;
class CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse;
class CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUseDefaultTypeInternal;
extern CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUseDefaultTypeInternal _CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse_default_instance_;
class FlowModelDef;
class FlowModelDefDefaultTypeInternal;
extern FlowModelDefDefaultTypeInternal _FlowModelDef_default_instance_;
class FlowModelDef_DeviceToRankIdsEntry_DoNotUse;
class FlowModelDef_DeviceToRankIdsEntry_DoNotUseDefaultTypeInternal;
extern FlowModelDef_DeviceToRankIdsEntry_DoNotUseDefaultTypeInternal _FlowModelDef_DeviceToRankIdsEntry_DoNotUse_default_instance_;
class FlowModelDef_EschedPriority;
class FlowModelDef_EschedPriorityDefaultTypeInternal;
extern FlowModelDef_EschedPriorityDefaultTypeInternal _FlowModelDef_EschedPriority_default_instance_;
class FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse;
class FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUseDefaultTypeInternal;
extern FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUseDefaultTypeInternal _FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse_default_instance_;
class FlowModelDef_GroupNameToRankIdsEntry_DoNotUse;
class FlowModelDef_GroupNameToRankIdsEntry_DoNotUseDefaultTypeInternal;
extern FlowModelDef_GroupNameToRankIdsEntry_DoNotUseDefaultTypeInternal _FlowModelDef_GroupNameToRankIdsEntry_DoNotUse_default_instance_;
class FlowModelDef_ModelNameToRankIdEntry_DoNotUse;
class FlowModelDef_ModelNameToRankIdEntry_DoNotUseDefaultTypeInternal;
extern FlowModelDef_ModelNameToRankIdEntry_DoNotUseDefaultTypeInternal _FlowModelDef_ModelNameToRankIdEntry_DoNotUse_default_instance_;
class FlowModelDef_ModelsEschedPriorityEntry_DoNotUse;
class FlowModelDef_ModelsEschedPriorityEntry_DoNotUseDefaultTypeInternal;
extern FlowModelDef_ModelsEschedPriorityEntry_DoNotUseDefaultTypeInternal _FlowModelDef_ModelsEschedPriorityEntry_DoNotUse_default_instance_;
class FlowModelDef_RankIds;
class FlowModelDef_RankIdsDefaultTypeInternal;
extern FlowModelDef_RankIdsDefaultTypeInternal _FlowModelDef_RankIds_default_instance_;
class ModelDeployInfo;
class ModelDeployInfoDefaultTypeInternal;
extern ModelDeployInfoDefaultTypeInternal _ModelDeployInfo_default_instance_;
class ModelDeployResource;
class ModelDeployResourceDefaultTypeInternal;
extern ModelDeployResourceDefaultTypeInternal _ModelDeployResource_default_instance_;
class ModelRelationDef;
class ModelRelationDefDefaultTypeInternal;
extern ModelRelationDefDefaultTypeInternal _ModelRelationDef_default_instance_;
class ModelRelationDef_AttrValue;
class ModelRelationDef_AttrValueDefaultTypeInternal;
extern ModelRelationDef_AttrValueDefaultTypeInternal _ModelRelationDef_AttrValue_default_instance_;
class ModelRelationDef_Endpoint;
class ModelRelationDef_EndpointDefaultTypeInternal;
extern ModelRelationDef_EndpointDefaultTypeInternal _ModelRelationDef_Endpoint_default_instance_;
class ModelRelationDef_Endpoint_AttrsEntry_DoNotUse;
class ModelRelationDef_Endpoint_AttrsEntry_DoNotUseDefaultTypeInternal;
extern ModelRelationDef_Endpoint_AttrsEntry_DoNotUseDefaultTypeInternal _ModelRelationDef_Endpoint_AttrsEntry_DoNotUse_default_instance_;
class ModelRelationDef_InvokedModelQueueInfo;
class ModelRelationDef_InvokedModelQueueInfoDefaultTypeInternal;
extern ModelRelationDef_InvokedModelQueueInfoDefaultTypeInternal _ModelRelationDef_InvokedModelQueueInfo_default_instance_;
class ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse;
class ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUseDefaultTypeInternal;
extern ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUseDefaultTypeInternal _ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse_default_instance_;
class ModelRelationDef_ModelEndpointInfo;
class ModelRelationDef_ModelEndpointInfoDefaultTypeInternal;
extern ModelRelationDef_ModelEndpointInfoDefaultTypeInternal _ModelRelationDef_ModelEndpointInfo_default_instance_;
class ModelRelationDef_ModelQueueInfo;
class ModelRelationDef_ModelQueueInfoDefaultTypeInternal;
extern ModelRelationDef_ModelQueueInfoDefaultTypeInternal _ModelRelationDef_ModelQueueInfo_default_instance_;
class ModelRelationDef_QueueDef;
class ModelRelationDef_QueueDefDefaultTypeInternal;
extern ModelRelationDef_QueueDefDefaultTypeInternal _ModelRelationDef_QueueDef_default_instance_;
class ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse;
class ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUseDefaultTypeInternal;
extern ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUseDefaultTypeInternal _ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse_default_instance_;
class ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse;
class ModelRelationDef_SubmodelQueueInfoEntry_DoNotUseDefaultTypeInternal;
extern ModelRelationDef_SubmodelQueueInfoEntry_DoNotUseDefaultTypeInternal _ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse_default_instance_;
class RunningResource;
class RunningResourceDefaultTypeInternal;
extern RunningResourceDefaultTypeInternal _RunningResource_default_instance_;
class SubmodelDef;
class SubmodelDefDefaultTypeInternal;
extern SubmodelDefDefaultTypeInternal _SubmodelDef_default_instance_;
}  // namespace proto
}  // namespace flow_model
}  // namespace ge
PROTOBUF_NAMESPACE_OPEN
template<> ::ge::flow_model::proto::CompileResource* Arena::CreateMaybeMessage<::ge::flow_model::proto::CompileResource>(Arena*);
template<> ::ge::flow_model::proto::CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse* Arena::CreateMaybeMessage<::ge::flow_model::proto::CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse>(Arena*);
template<> ::ge::flow_model::proto::FlowModelDef* Arena::CreateMaybeMessage<::ge::flow_model::proto::FlowModelDef>(Arena*);
template<> ::ge::flow_model::proto::FlowModelDef_DeviceToRankIdsEntry_DoNotUse* Arena::CreateMaybeMessage<::ge::flow_model::proto::FlowModelDef_DeviceToRankIdsEntry_DoNotUse>(Arena*);
template<> ::ge::flow_model::proto::FlowModelDef_EschedPriority* Arena::CreateMaybeMessage<::ge::flow_model::proto::FlowModelDef_EschedPriority>(Arena*);
template<> ::ge::flow_model::proto::FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse* Arena::CreateMaybeMessage<::ge::flow_model::proto::FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse>(Arena*);
template<> ::ge::flow_model::proto::FlowModelDef_GroupNameToRankIdsEntry_DoNotUse* Arena::CreateMaybeMessage<::ge::flow_model::proto::FlowModelDef_GroupNameToRankIdsEntry_DoNotUse>(Arena*);
template<> ::ge::flow_model::proto::FlowModelDef_ModelNameToRankIdEntry_DoNotUse* Arena::CreateMaybeMessage<::ge::flow_model::proto::FlowModelDef_ModelNameToRankIdEntry_DoNotUse>(Arena*);
template<> ::ge::flow_model::proto::FlowModelDef_ModelsEschedPriorityEntry_DoNotUse* Arena::CreateMaybeMessage<::ge::flow_model::proto::FlowModelDef_ModelsEschedPriorityEntry_DoNotUse>(Arena*);
template<> ::ge::flow_model::proto::FlowModelDef_RankIds* Arena::CreateMaybeMessage<::ge::flow_model::proto::FlowModelDef_RankIds>(Arena*);
template<> ::ge::flow_model::proto::ModelDeployInfo* Arena::CreateMaybeMessage<::ge::flow_model::proto::ModelDeployInfo>(Arena*);
template<> ::ge::flow_model::proto::ModelDeployResource* Arena::CreateMaybeMessage<::ge::flow_model::proto::ModelDeployResource>(Arena*);
template<> ::ge::flow_model::proto::ModelRelationDef* Arena::CreateMaybeMessage<::ge::flow_model::proto::ModelRelationDef>(Arena*);
template<> ::ge::flow_model::proto::ModelRelationDef_AttrValue* Arena::CreateMaybeMessage<::ge::flow_model::proto::ModelRelationDef_AttrValue>(Arena*);
template<> ::ge::flow_model::proto::ModelRelationDef_Endpoint* Arena::CreateMaybeMessage<::ge::flow_model::proto::ModelRelationDef_Endpoint>(Arena*);
template<> ::ge::flow_model::proto::ModelRelationDef_Endpoint_AttrsEntry_DoNotUse* Arena::CreateMaybeMessage<::ge::flow_model::proto::ModelRelationDef_Endpoint_AttrsEntry_DoNotUse>(Arena*);
template<> ::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfo* Arena::CreateMaybeMessage<::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfo>(Arena*);
template<> ::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse* Arena::CreateMaybeMessage<::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse>(Arena*);
template<> ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo* Arena::CreateMaybeMessage<::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo>(Arena*);
template<> ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo* Arena::CreateMaybeMessage<::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo>(Arena*);
template<> ::ge::flow_model::proto::ModelRelationDef_QueueDef* Arena::CreateMaybeMessage<::ge::flow_model::proto::ModelRelationDef_QueueDef>(Arena*);
template<> ::ge::flow_model::proto::ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse* Arena::CreateMaybeMessage<::ge::flow_model::proto::ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse>(Arena*);
template<> ::ge::flow_model::proto::ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse* Arena::CreateMaybeMessage<::ge::flow_model::proto::ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse>(Arena*);
template<> ::ge::flow_model::proto::RunningResource* Arena::CreateMaybeMessage<::ge::flow_model::proto::RunningResource>(Arena*);
template<> ::ge::flow_model::proto::SubmodelDef* Arena::CreateMaybeMessage<::ge::flow_model::proto::SubmodelDef>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ge {
namespace flow_model {
namespace proto {

// ===================================================================

class ModelRelationDef_QueueDef PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.flow_model.proto.ModelRelationDef.QueueDef) */ {
 public:
  inline ModelRelationDef_QueueDef() : ModelRelationDef_QueueDef(nullptr) {}
  virtual ~ModelRelationDef_QueueDef();

  ModelRelationDef_QueueDef(const ModelRelationDef_QueueDef& from);
  ModelRelationDef_QueueDef(ModelRelationDef_QueueDef&& from) noexcept
    : ModelRelationDef_QueueDef() {
    *this = ::std::move(from);
  }

  inline ModelRelationDef_QueueDef& operator=(const ModelRelationDef_QueueDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelRelationDef_QueueDef& operator=(ModelRelationDef_QueueDef&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelRelationDef_QueueDef& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelRelationDef_QueueDef* internal_default_instance() {
    return reinterpret_cast<const ModelRelationDef_QueueDef*>(
               &_ModelRelationDef_QueueDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ModelRelationDef_QueueDef& a, ModelRelationDef_QueueDef& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelRelationDef_QueueDef* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelRelationDef_QueueDef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelRelationDef_QueueDef* New() const final {
    return CreateMaybeMessage<ModelRelationDef_QueueDef>(nullptr);
  }

  ModelRelationDef_QueueDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelRelationDef_QueueDef>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelRelationDef_QueueDef& from);
  void MergeFrom(const ModelRelationDef_QueueDef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelRelationDef_QueueDef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.flow_model.proto.ModelRelationDef.QueueDef";
  }
  protected:
  explicit ModelRelationDef_QueueDef(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_flow_5fmodel_2eproto);
    return ::descriptor_table_flow_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kEnqueuePolicyFieldNumber = 3,
    kDepthFieldNumber = 2,
    kIsControlFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string enqueue_policy = 3;
  void clear_enqueue_policy();
  const std::string& enqueue_policy() const;
  void set_enqueue_policy(const std::string& value);
  void set_enqueue_policy(std::string&& value);
  void set_enqueue_policy(const char* value);
  void set_enqueue_policy(const char* value, size_t size);
  std::string* mutable_enqueue_policy();
  std::string* release_enqueue_policy();
  void set_allocated_enqueue_policy(std::string* enqueue_policy);
  private:
  const std::string& _internal_enqueue_policy() const;
  void _internal_set_enqueue_policy(const std::string& value);
  std::string* _internal_mutable_enqueue_policy();
  public:

  // uint32 depth = 2;
  void clear_depth();
  ::PROTOBUF_NAMESPACE_ID::uint32 depth() const;
  void set_depth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_depth() const;
  void _internal_set_depth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_control = 4;
  void clear_is_control();
  bool is_control() const;
  void set_is_control(bool value);
  private:
  bool _internal_is_control() const;
  void _internal_set_is_control(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ge.flow_model.proto.ModelRelationDef.QueueDef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enqueue_policy_;
  ::PROTOBUF_NAMESPACE_ID::uint32 depth_;
  bool is_control_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flow_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class ModelRelationDef_AttrValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.flow_model.proto.ModelRelationDef.AttrValue) */ {
 public:
  inline ModelRelationDef_AttrValue() : ModelRelationDef_AttrValue(nullptr) {}
  virtual ~ModelRelationDef_AttrValue();

  ModelRelationDef_AttrValue(const ModelRelationDef_AttrValue& from);
  ModelRelationDef_AttrValue(ModelRelationDef_AttrValue&& from) noexcept
    : ModelRelationDef_AttrValue() {
    *this = ::std::move(from);
  }

  inline ModelRelationDef_AttrValue& operator=(const ModelRelationDef_AttrValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelRelationDef_AttrValue& operator=(ModelRelationDef_AttrValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelRelationDef_AttrValue& default_instance();

  enum ValueCase {
    kS = 1,
    kI = 2,
    kB = 3,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelRelationDef_AttrValue* internal_default_instance() {
    return reinterpret_cast<const ModelRelationDef_AttrValue*>(
               &_ModelRelationDef_AttrValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ModelRelationDef_AttrValue& a, ModelRelationDef_AttrValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelRelationDef_AttrValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelRelationDef_AttrValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelRelationDef_AttrValue* New() const final {
    return CreateMaybeMessage<ModelRelationDef_AttrValue>(nullptr);
  }

  ModelRelationDef_AttrValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelRelationDef_AttrValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelRelationDef_AttrValue& from);
  void MergeFrom(const ModelRelationDef_AttrValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelRelationDef_AttrValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.flow_model.proto.ModelRelationDef.AttrValue";
  }
  protected:
  explicit ModelRelationDef_AttrValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_flow_5fmodel_2eproto);
    return ::descriptor_table_flow_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSFieldNumber = 1,
    kIFieldNumber = 2,
    kBFieldNumber = 3,
  };
  // bytes s = 1;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  const std::string& s() const;
  void set_s(const std::string& value);
  void set_s(std::string&& value);
  void set_s(const char* value);
  void set_s(const void* value, size_t size);
  std::string* mutable_s();
  std::string* release_s();
  void set_allocated_s(std::string* s);
  private:
  const std::string& _internal_s() const;
  void _internal_set_s(const std::string& value);
  std::string* _internal_mutable_s();
  public:

  // int64 i = 2;
  private:
  bool _internal_has_i() const;
  public:
  void clear_i();
  ::PROTOBUF_NAMESPACE_ID::int64 i() const;
  void set_i(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_i() const;
  void _internal_set_i(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool b = 3;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  bool b() const;
  void set_b(bool value);
  private:
  bool _internal_b() const;
  void _internal_set_b(bool value);
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:ge.flow_model.proto.ModelRelationDef.AttrValue)
 private:
  class _Internal;
  void set_has_s();
  void set_has_i();
  void set_has_b();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueUnion {
    ValueUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_;
    ::PROTOBUF_NAMESPACE_ID::int64 i_;
    bool b_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flow_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class ModelRelationDef_Endpoint_AttrsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ModelRelationDef_Endpoint_AttrsEntry_DoNotUse, 
    std::string, ::ge::flow_model::proto::ModelRelationDef_AttrValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ModelRelationDef_Endpoint_AttrsEntry_DoNotUse, 
    std::string, ::ge::flow_model::proto::ModelRelationDef_AttrValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ModelRelationDef_Endpoint_AttrsEntry_DoNotUse();
  explicit ModelRelationDef_Endpoint_AttrsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ModelRelationDef_Endpoint_AttrsEntry_DoNotUse& other);
  static const ModelRelationDef_Endpoint_AttrsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ModelRelationDef_Endpoint_AttrsEntry_DoNotUse*>(&_ModelRelationDef_Endpoint_AttrsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ge.flow_model.proto.ModelRelationDef.Endpoint.AttrsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_flow_5fmodel_2eproto);
    return ::descriptor_table_flow_5fmodel_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class ModelRelationDef_Endpoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.flow_model.proto.ModelRelationDef.Endpoint) */ {
 public:
  inline ModelRelationDef_Endpoint() : ModelRelationDef_Endpoint(nullptr) {}
  virtual ~ModelRelationDef_Endpoint();

  ModelRelationDef_Endpoint(const ModelRelationDef_Endpoint& from);
  ModelRelationDef_Endpoint(ModelRelationDef_Endpoint&& from) noexcept
    : ModelRelationDef_Endpoint() {
    *this = ::std::move(from);
  }

  inline ModelRelationDef_Endpoint& operator=(const ModelRelationDef_Endpoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelRelationDef_Endpoint& operator=(ModelRelationDef_Endpoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelRelationDef_Endpoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelRelationDef_Endpoint* internal_default_instance() {
    return reinterpret_cast<const ModelRelationDef_Endpoint*>(
               &_ModelRelationDef_Endpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ModelRelationDef_Endpoint& a, ModelRelationDef_Endpoint& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelRelationDef_Endpoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelRelationDef_Endpoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelRelationDef_Endpoint* New() const final {
    return CreateMaybeMessage<ModelRelationDef_Endpoint>(nullptr);
  }

  ModelRelationDef_Endpoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelRelationDef_Endpoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelRelationDef_Endpoint& from);
  void MergeFrom(const ModelRelationDef_Endpoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelRelationDef_Endpoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.flow_model.proto.ModelRelationDef.Endpoint";
  }
  protected:
  explicit ModelRelationDef_Endpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_flow_5fmodel_2eproto);
    return ::descriptor_table_flow_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAttrsFieldNumber = 3,
    kNameFieldNumber = 1,
    kEndpointTypeFieldNumber = 2,
  };
  // map<string, .ge.flow_model.proto.ModelRelationDef.AttrValue> attrs = 3;
  int attrs_size() const;
  private:
  int _internal_attrs_size() const;
  public:
  void clear_attrs();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_AttrValue >&
      _internal_attrs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_AttrValue >*
      _internal_mutable_attrs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_AttrValue >&
      attrs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_AttrValue >*
      mutable_attrs();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 endpoint_type = 2;
  void clear_endpoint_type();
  ::PROTOBUF_NAMESPACE_ID::int32 endpoint_type() const;
  void set_endpoint_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_endpoint_type() const;
  void _internal_set_endpoint_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ge.flow_model.proto.ModelRelationDef.Endpoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ModelRelationDef_Endpoint_AttrsEntry_DoNotUse,
      std::string, ::ge::flow_model::proto::ModelRelationDef_AttrValue,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > attrs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 endpoint_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flow_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class ModelRelationDef_InvokedModelQueueInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo) */ {
 public:
  inline ModelRelationDef_InvokedModelQueueInfo() : ModelRelationDef_InvokedModelQueueInfo(nullptr) {}
  virtual ~ModelRelationDef_InvokedModelQueueInfo();

  ModelRelationDef_InvokedModelQueueInfo(const ModelRelationDef_InvokedModelQueueInfo& from);
  ModelRelationDef_InvokedModelQueueInfo(ModelRelationDef_InvokedModelQueueInfo&& from) noexcept
    : ModelRelationDef_InvokedModelQueueInfo() {
    *this = ::std::move(from);
  }

  inline ModelRelationDef_InvokedModelQueueInfo& operator=(const ModelRelationDef_InvokedModelQueueInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelRelationDef_InvokedModelQueueInfo& operator=(ModelRelationDef_InvokedModelQueueInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelRelationDef_InvokedModelQueueInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelRelationDef_InvokedModelQueueInfo* internal_default_instance() {
    return reinterpret_cast<const ModelRelationDef_InvokedModelQueueInfo*>(
               &_ModelRelationDef_InvokedModelQueueInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ModelRelationDef_InvokedModelQueueInfo& a, ModelRelationDef_InvokedModelQueueInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelRelationDef_InvokedModelQueueInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelRelationDef_InvokedModelQueueInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelRelationDef_InvokedModelQueueInfo* New() const final {
    return CreateMaybeMessage<ModelRelationDef_InvokedModelQueueInfo>(nullptr);
  }

  ModelRelationDef_InvokedModelQueueInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelRelationDef_InvokedModelQueueInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelRelationDef_InvokedModelQueueInfo& from);
  void MergeFrom(const ModelRelationDef_InvokedModelQueueInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelRelationDef_InvokedModelQueueInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo";
  }
  protected:
  explicit ModelRelationDef_InvokedModelQueueInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_flow_5fmodel_2eproto);
    return ::descriptor_table_flow_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputQueueNameFieldNumber = 1,
    kOutputQueueNameFieldNumber = 2,
  };
  // repeated string input_queue_name = 1;
  int input_queue_name_size() const;
  private:
  int _internal_input_queue_name_size() const;
  public:
  void clear_input_queue_name();
  const std::string& input_queue_name(int index) const;
  std::string* mutable_input_queue_name(int index);
  void set_input_queue_name(int index, const std::string& value);
  void set_input_queue_name(int index, std::string&& value);
  void set_input_queue_name(int index, const char* value);
  void set_input_queue_name(int index, const char* value, size_t size);
  std::string* add_input_queue_name();
  void add_input_queue_name(const std::string& value);
  void add_input_queue_name(std::string&& value);
  void add_input_queue_name(const char* value);
  void add_input_queue_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_queue_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_queue_name();
  private:
  const std::string& _internal_input_queue_name(int index) const;
  std::string* _internal_add_input_queue_name();
  public:

  // repeated string output_queue_name = 2;
  int output_queue_name_size() const;
  private:
  int _internal_output_queue_name_size() const;
  public:
  void clear_output_queue_name();
  const std::string& output_queue_name(int index) const;
  std::string* mutable_output_queue_name(int index);
  void set_output_queue_name(int index, const std::string& value);
  void set_output_queue_name(int index, std::string&& value);
  void set_output_queue_name(int index, const char* value);
  void set_output_queue_name(int index, const char* value, size_t size);
  std::string* add_output_queue_name();
  void add_output_queue_name(const std::string& value);
  void add_output_queue_name(std::string&& value);
  void add_output_queue_name(const char* value);
  void add_output_queue_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_queue_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_queue_name();
  private:
  const std::string& _internal_output_queue_name(int index) const;
  std::string* _internal_add_output_queue_name();
  public:

  // @@protoc_insertion_point(class_scope:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_queue_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_queue_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flow_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class ModelRelationDef_ModelQueueInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo) */ {
 public:
  inline ModelRelationDef_ModelQueueInfo() : ModelRelationDef_ModelQueueInfo(nullptr) {}
  virtual ~ModelRelationDef_ModelQueueInfo();

  ModelRelationDef_ModelQueueInfo(const ModelRelationDef_ModelQueueInfo& from);
  ModelRelationDef_ModelQueueInfo(ModelRelationDef_ModelQueueInfo&& from) noexcept
    : ModelRelationDef_ModelQueueInfo() {
    *this = ::std::move(from);
  }

  inline ModelRelationDef_ModelQueueInfo& operator=(const ModelRelationDef_ModelQueueInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelRelationDef_ModelQueueInfo& operator=(ModelRelationDef_ModelQueueInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelRelationDef_ModelQueueInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelRelationDef_ModelQueueInfo* internal_default_instance() {
    return reinterpret_cast<const ModelRelationDef_ModelQueueInfo*>(
               &_ModelRelationDef_ModelQueueInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ModelRelationDef_ModelQueueInfo& a, ModelRelationDef_ModelQueueInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelRelationDef_ModelQueueInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelRelationDef_ModelQueueInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelRelationDef_ModelQueueInfo* New() const final {
    return CreateMaybeMessage<ModelRelationDef_ModelQueueInfo>(nullptr);
  }

  ModelRelationDef_ModelQueueInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelRelationDef_ModelQueueInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelRelationDef_ModelQueueInfo& from);
  void MergeFrom(const ModelRelationDef_ModelQueueInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelRelationDef_ModelQueueInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.flow_model.proto.ModelRelationDef.ModelQueueInfo";
  }
  protected:
  explicit ModelRelationDef_ModelQueueInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_flow_5fmodel_2eproto);
    return ::descriptor_table_flow_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputQueueNameFieldNumber = 2,
    kOutputQueueNameFieldNumber = 3,
    kExternalInputQueueNameFieldNumber = 4,
    kExternalOutputQueueNameFieldNumber = 5,
    kInvokeModelKeyFieldNumber = 6,
    kModelNameFieldNumber = 1,
  };
  // repeated string input_queue_name = 2;
  int input_queue_name_size() const;
  private:
  int _internal_input_queue_name_size() const;
  public:
  void clear_input_queue_name();
  const std::string& input_queue_name(int index) const;
  std::string* mutable_input_queue_name(int index);
  void set_input_queue_name(int index, const std::string& value);
  void set_input_queue_name(int index, std::string&& value);
  void set_input_queue_name(int index, const char* value);
  void set_input_queue_name(int index, const char* value, size_t size);
  std::string* add_input_queue_name();
  void add_input_queue_name(const std::string& value);
  void add_input_queue_name(std::string&& value);
  void add_input_queue_name(const char* value);
  void add_input_queue_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_queue_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_queue_name();
  private:
  const std::string& _internal_input_queue_name(int index) const;
  std::string* _internal_add_input_queue_name();
  public:

  // repeated string output_queue_name = 3;
  int output_queue_name_size() const;
  private:
  int _internal_output_queue_name_size() const;
  public:
  void clear_output_queue_name();
  const std::string& output_queue_name(int index) const;
  std::string* mutable_output_queue_name(int index);
  void set_output_queue_name(int index, const std::string& value);
  void set_output_queue_name(int index, std::string&& value);
  void set_output_queue_name(int index, const char* value);
  void set_output_queue_name(int index, const char* value, size_t size);
  std::string* add_output_queue_name();
  void add_output_queue_name(const std::string& value);
  void add_output_queue_name(std::string&& value);
  void add_output_queue_name(const char* value);
  void add_output_queue_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_queue_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_queue_name();
  private:
  const std::string& _internal_output_queue_name(int index) const;
  std::string* _internal_add_output_queue_name();
  public:

  // repeated string external_input_queue_name = 4;
  int external_input_queue_name_size() const;
  private:
  int _internal_external_input_queue_name_size() const;
  public:
  void clear_external_input_queue_name();
  const std::string& external_input_queue_name(int index) const;
  std::string* mutable_external_input_queue_name(int index);
  void set_external_input_queue_name(int index, const std::string& value);
  void set_external_input_queue_name(int index, std::string&& value);
  void set_external_input_queue_name(int index, const char* value);
  void set_external_input_queue_name(int index, const char* value, size_t size);
  std::string* add_external_input_queue_name();
  void add_external_input_queue_name(const std::string& value);
  void add_external_input_queue_name(std::string&& value);
  void add_external_input_queue_name(const char* value);
  void add_external_input_queue_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& external_input_queue_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_external_input_queue_name();
  private:
  const std::string& _internal_external_input_queue_name(int index) const;
  std::string* _internal_add_external_input_queue_name();
  public:

  // repeated string external_output_queue_name = 5;
  int external_output_queue_name_size() const;
  private:
  int _internal_external_output_queue_name_size() const;
  public:
  void clear_external_output_queue_name();
  const std::string& external_output_queue_name(int index) const;
  std::string* mutable_external_output_queue_name(int index);
  void set_external_output_queue_name(int index, const std::string& value);
  void set_external_output_queue_name(int index, std::string&& value);
  void set_external_output_queue_name(int index, const char* value);
  void set_external_output_queue_name(int index, const char* value, size_t size);
  std::string* add_external_output_queue_name();
  void add_external_output_queue_name(const std::string& value);
  void add_external_output_queue_name(std::string&& value);
  void add_external_output_queue_name(const char* value);
  void add_external_output_queue_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& external_output_queue_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_external_output_queue_name();
  private:
  const std::string& _internal_external_output_queue_name(int index) const;
  std::string* _internal_add_external_output_queue_name();
  public:

  // repeated string invoke_model_key = 6;
  int invoke_model_key_size() const;
  private:
  int _internal_invoke_model_key_size() const;
  public:
  void clear_invoke_model_key();
  const std::string& invoke_model_key(int index) const;
  std::string* mutable_invoke_model_key(int index);
  void set_invoke_model_key(int index, const std::string& value);
  void set_invoke_model_key(int index, std::string&& value);
  void set_invoke_model_key(int index, const char* value);
  void set_invoke_model_key(int index, const char* value, size_t size);
  std::string* add_invoke_model_key();
  void add_invoke_model_key(const std::string& value);
  void add_invoke_model_key(std::string&& value);
  void add_invoke_model_key(const char* value);
  void add_invoke_model_key(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& invoke_model_key() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_invoke_model_key();
  private:
  const std::string& _internal_invoke_model_key(int index) const;
  std::string* _internal_add_invoke_model_key();
  public:

  // string model_name = 1;
  void clear_model_name();
  const std::string& model_name() const;
  void set_model_name(const std::string& value);
  void set_model_name(std::string&& value);
  void set_model_name(const char* value);
  void set_model_name(const char* value, size_t size);
  std::string* mutable_model_name();
  std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // @@protoc_insertion_point(class_scope:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_queue_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_queue_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> external_input_queue_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> external_output_queue_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> invoke_model_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flow_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class ModelRelationDef_ModelEndpointInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo) */ {
 public:
  inline ModelRelationDef_ModelEndpointInfo() : ModelRelationDef_ModelEndpointInfo(nullptr) {}
  virtual ~ModelRelationDef_ModelEndpointInfo();

  ModelRelationDef_ModelEndpointInfo(const ModelRelationDef_ModelEndpointInfo& from);
  ModelRelationDef_ModelEndpointInfo(ModelRelationDef_ModelEndpointInfo&& from) noexcept
    : ModelRelationDef_ModelEndpointInfo() {
    *this = ::std::move(from);
  }

  inline ModelRelationDef_ModelEndpointInfo& operator=(const ModelRelationDef_ModelEndpointInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelRelationDef_ModelEndpointInfo& operator=(ModelRelationDef_ModelEndpointInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelRelationDef_ModelEndpointInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelRelationDef_ModelEndpointInfo* internal_default_instance() {
    return reinterpret_cast<const ModelRelationDef_ModelEndpointInfo*>(
               &_ModelRelationDef_ModelEndpointInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ModelRelationDef_ModelEndpointInfo& a, ModelRelationDef_ModelEndpointInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelRelationDef_ModelEndpointInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelRelationDef_ModelEndpointInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelRelationDef_ModelEndpointInfo* New() const final {
    return CreateMaybeMessage<ModelRelationDef_ModelEndpointInfo>(nullptr);
  }

  ModelRelationDef_ModelEndpointInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelRelationDef_ModelEndpointInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelRelationDef_ModelEndpointInfo& from);
  void MergeFrom(const ModelRelationDef_ModelEndpointInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelRelationDef_ModelEndpointInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo";
  }
  protected:
  explicit ModelRelationDef_ModelEndpointInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_flow_5fmodel_2eproto);
    return ::descriptor_table_flow_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputEndpointNameFieldNumber = 2,
    kOutputEndpointNameFieldNumber = 3,
    kExternalInputQueueNameFieldNumber = 4,
    kExternalOutputQueueNameFieldNumber = 5,
    kEventInputNameFieldNumber = 6,
    kEventOutputNameFieldNumber = 7,
    kInvokeModelKeyFieldNumber = 8,
    kModelNameFieldNumber = 1,
  };
  // repeated string input_endpoint_name = 2;
  int input_endpoint_name_size() const;
  private:
  int _internal_input_endpoint_name_size() const;
  public:
  void clear_input_endpoint_name();
  const std::string& input_endpoint_name(int index) const;
  std::string* mutable_input_endpoint_name(int index);
  void set_input_endpoint_name(int index, const std::string& value);
  void set_input_endpoint_name(int index, std::string&& value);
  void set_input_endpoint_name(int index, const char* value);
  void set_input_endpoint_name(int index, const char* value, size_t size);
  std::string* add_input_endpoint_name();
  void add_input_endpoint_name(const std::string& value);
  void add_input_endpoint_name(std::string&& value);
  void add_input_endpoint_name(const char* value);
  void add_input_endpoint_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_endpoint_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_endpoint_name();
  private:
  const std::string& _internal_input_endpoint_name(int index) const;
  std::string* _internal_add_input_endpoint_name();
  public:

  // repeated string output_endpoint_name = 3;
  int output_endpoint_name_size() const;
  private:
  int _internal_output_endpoint_name_size() const;
  public:
  void clear_output_endpoint_name();
  const std::string& output_endpoint_name(int index) const;
  std::string* mutable_output_endpoint_name(int index);
  void set_output_endpoint_name(int index, const std::string& value);
  void set_output_endpoint_name(int index, std::string&& value);
  void set_output_endpoint_name(int index, const char* value);
  void set_output_endpoint_name(int index, const char* value, size_t size);
  std::string* add_output_endpoint_name();
  void add_output_endpoint_name(const std::string& value);
  void add_output_endpoint_name(std::string&& value);
  void add_output_endpoint_name(const char* value);
  void add_output_endpoint_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_endpoint_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_endpoint_name();
  private:
  const std::string& _internal_output_endpoint_name(int index) const;
  std::string* _internal_add_output_endpoint_name();
  public:

  // repeated string external_input_queue_name = 4;
  int external_input_queue_name_size() const;
  private:
  int _internal_external_input_queue_name_size() const;
  public:
  void clear_external_input_queue_name();
  const std::string& external_input_queue_name(int index) const;
  std::string* mutable_external_input_queue_name(int index);
  void set_external_input_queue_name(int index, const std::string& value);
  void set_external_input_queue_name(int index, std::string&& value);
  void set_external_input_queue_name(int index, const char* value);
  void set_external_input_queue_name(int index, const char* value, size_t size);
  std::string* add_external_input_queue_name();
  void add_external_input_queue_name(const std::string& value);
  void add_external_input_queue_name(std::string&& value);
  void add_external_input_queue_name(const char* value);
  void add_external_input_queue_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& external_input_queue_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_external_input_queue_name();
  private:
  const std::string& _internal_external_input_queue_name(int index) const;
  std::string* _internal_add_external_input_queue_name();
  public:

  // repeated string external_output_queue_name = 5;
  int external_output_queue_name_size() const;
  private:
  int _internal_external_output_queue_name_size() const;
  public:
  void clear_external_output_queue_name();
  const std::string& external_output_queue_name(int index) const;
  std::string* mutable_external_output_queue_name(int index);
  void set_external_output_queue_name(int index, const std::string& value);
  void set_external_output_queue_name(int index, std::string&& value);
  void set_external_output_queue_name(int index, const char* value);
  void set_external_output_queue_name(int index, const char* value, size_t size);
  std::string* add_external_output_queue_name();
  void add_external_output_queue_name(const std::string& value);
  void add_external_output_queue_name(std::string&& value);
  void add_external_output_queue_name(const char* value);
  void add_external_output_queue_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& external_output_queue_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_external_output_queue_name();
  private:
  const std::string& _internal_external_output_queue_name(int index) const;
  std::string* _internal_add_external_output_queue_name();
  public:

  // repeated string event_input_name = 6;
  int event_input_name_size() const;
  private:
  int _internal_event_input_name_size() const;
  public:
  void clear_event_input_name();
  const std::string& event_input_name(int index) const;
  std::string* mutable_event_input_name(int index);
  void set_event_input_name(int index, const std::string& value);
  void set_event_input_name(int index, std::string&& value);
  void set_event_input_name(int index, const char* value);
  void set_event_input_name(int index, const char* value, size_t size);
  std::string* add_event_input_name();
  void add_event_input_name(const std::string& value);
  void add_event_input_name(std::string&& value);
  void add_event_input_name(const char* value);
  void add_event_input_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& event_input_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_event_input_name();
  private:
  const std::string& _internal_event_input_name(int index) const;
  std::string* _internal_add_event_input_name();
  public:

  // repeated string event_output_name = 7;
  int event_output_name_size() const;
  private:
  int _internal_event_output_name_size() const;
  public:
  void clear_event_output_name();
  const std::string& event_output_name(int index) const;
  std::string* mutable_event_output_name(int index);
  void set_event_output_name(int index, const std::string& value);
  void set_event_output_name(int index, std::string&& value);
  void set_event_output_name(int index, const char* value);
  void set_event_output_name(int index, const char* value, size_t size);
  std::string* add_event_output_name();
  void add_event_output_name(const std::string& value);
  void add_event_output_name(std::string&& value);
  void add_event_output_name(const char* value);
  void add_event_output_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& event_output_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_event_output_name();
  private:
  const std::string& _internal_event_output_name(int index) const;
  std::string* _internal_add_event_output_name();
  public:

  // repeated string invoke_model_key = 8;
  int invoke_model_key_size() const;
  private:
  int _internal_invoke_model_key_size() const;
  public:
  void clear_invoke_model_key();
  const std::string& invoke_model_key(int index) const;
  std::string* mutable_invoke_model_key(int index);
  void set_invoke_model_key(int index, const std::string& value);
  void set_invoke_model_key(int index, std::string&& value);
  void set_invoke_model_key(int index, const char* value);
  void set_invoke_model_key(int index, const char* value, size_t size);
  std::string* add_invoke_model_key();
  void add_invoke_model_key(const std::string& value);
  void add_invoke_model_key(std::string&& value);
  void add_invoke_model_key(const char* value);
  void add_invoke_model_key(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& invoke_model_key() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_invoke_model_key();
  private:
  const std::string& _internal_invoke_model_key(int index) const;
  std::string* _internal_add_invoke_model_key();
  public:

  // string model_name = 1;
  void clear_model_name();
  const std::string& model_name() const;
  void set_model_name(const std::string& value);
  void set_model_name(std::string&& value);
  void set_model_name(const char* value);
  void set_model_name(const char* value, size_t size);
  std::string* mutable_model_name();
  std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // @@protoc_insertion_point(class_scope:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_endpoint_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_endpoint_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> external_input_queue_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> external_output_queue_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> event_input_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> event_output_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> invoke_model_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flow_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse, 
    std::string, ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse, 
    std::string, ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse();
  explicit ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse& other);
  static const ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse*>(&_ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ge.flow_model.proto.ModelRelationDef.SubmodelQueueInfoEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_flow_5fmodel_2eproto);
    return ::descriptor_table_flow_5fmodel_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse, 
    std::string, ::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse, 
    std::string, ::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse();
  explicit ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse& other);
  static const ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse*>(&_ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfoEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_flow_5fmodel_2eproto);
    return ::descriptor_table_flow_5fmodel_2eproto.file_level_metadata[8];
  }

  public:
};

// -------------------------------------------------------------------

class ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse, 
    std::string, ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse, 
    std::string, ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse();
  explicit ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse& other);
  static const ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse*>(&_ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ge.flow_model.proto.ModelRelationDef.SubmodelEndpointInfoEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_flow_5fmodel_2eproto);
    return ::descriptor_table_flow_5fmodel_2eproto.file_level_metadata[9];
  }

  public:
};

// -------------------------------------------------------------------

class ModelRelationDef PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.flow_model.proto.ModelRelationDef) */ {
 public:
  inline ModelRelationDef() : ModelRelationDef(nullptr) {}
  virtual ~ModelRelationDef();

  ModelRelationDef(const ModelRelationDef& from);
  ModelRelationDef(ModelRelationDef&& from) noexcept
    : ModelRelationDef() {
    *this = ::std::move(from);
  }

  inline ModelRelationDef& operator=(const ModelRelationDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelRelationDef& operator=(ModelRelationDef&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelRelationDef& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelRelationDef* internal_default_instance() {
    return reinterpret_cast<const ModelRelationDef*>(
               &_ModelRelationDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ModelRelationDef& a, ModelRelationDef& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelRelationDef* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelRelationDef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelRelationDef* New() const final {
    return CreateMaybeMessage<ModelRelationDef>(nullptr);
  }

  ModelRelationDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelRelationDef>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelRelationDef& from);
  void MergeFrom(const ModelRelationDef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelRelationDef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.flow_model.proto.ModelRelationDef";
  }
  protected:
  explicit ModelRelationDef(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_flow_5fmodel_2eproto);
    return ::descriptor_table_flow_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ModelRelationDef_QueueDef QueueDef;
  typedef ModelRelationDef_AttrValue AttrValue;
  typedef ModelRelationDef_Endpoint Endpoint;
  typedef ModelRelationDef_InvokedModelQueueInfo InvokedModelQueueInfo;
  typedef ModelRelationDef_ModelQueueInfo ModelQueueInfo;
  typedef ModelRelationDef_ModelEndpointInfo ModelEndpointInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kQueueDefFieldNumber = 1,
    kSubmodelQueueInfoFieldNumber = 2,
    kInvokedModelQueueInfoFieldNumber = 3,
    kEndpointFieldNumber = 5,
    kSubmodelEndpointInfoFieldNumber = 6,
    kRootModelQueueInfoFieldNumber = 4,
    kRootModelEndpointInfoFieldNumber = 7,
  };
  // repeated .ge.flow_model.proto.ModelRelationDef.QueueDef queue_def = 1;
  int queue_def_size() const;
  private:
  int _internal_queue_def_size() const;
  public:
  void clear_queue_def();
  ::ge::flow_model::proto::ModelRelationDef_QueueDef* mutable_queue_def(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::flow_model::proto::ModelRelationDef_QueueDef >*
      mutable_queue_def();
  private:
  const ::ge::flow_model::proto::ModelRelationDef_QueueDef& _internal_queue_def(int index) const;
  ::ge::flow_model::proto::ModelRelationDef_QueueDef* _internal_add_queue_def();
  public:
  const ::ge::flow_model::proto::ModelRelationDef_QueueDef& queue_def(int index) const;
  ::ge::flow_model::proto::ModelRelationDef_QueueDef* add_queue_def();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::flow_model::proto::ModelRelationDef_QueueDef >&
      queue_def() const;

  // map<string, .ge.flow_model.proto.ModelRelationDef.ModelQueueInfo> submodel_queue_info = 2;
  int submodel_queue_info_size() const;
  private:
  int _internal_submodel_queue_info_size() const;
  public:
  void clear_submodel_queue_info();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo >&
      _internal_submodel_queue_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo >*
      _internal_mutable_submodel_queue_info();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo >&
      submodel_queue_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo >*
      mutable_submodel_queue_info();

  // map<string, .ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo> invoked_model_queue_info = 3;
  int invoked_model_queue_info_size() const;
  private:
  int _internal_invoked_model_queue_info_size() const;
  public:
  void clear_invoked_model_queue_info();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfo >&
      _internal_invoked_model_queue_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfo >*
      _internal_mutable_invoked_model_queue_info();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfo >&
      invoked_model_queue_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfo >*
      mutable_invoked_model_queue_info();

  // repeated .ge.flow_model.proto.ModelRelationDef.Endpoint endpoint = 5;
  int endpoint_size() const;
  private:
  int _internal_endpoint_size() const;
  public:
  void clear_endpoint();
  ::ge::flow_model::proto::ModelRelationDef_Endpoint* mutable_endpoint(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::flow_model::proto::ModelRelationDef_Endpoint >*
      mutable_endpoint();
  private:
  const ::ge::flow_model::proto::ModelRelationDef_Endpoint& _internal_endpoint(int index) const;
  ::ge::flow_model::proto::ModelRelationDef_Endpoint* _internal_add_endpoint();
  public:
  const ::ge::flow_model::proto::ModelRelationDef_Endpoint& endpoint(int index) const;
  ::ge::flow_model::proto::ModelRelationDef_Endpoint* add_endpoint();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::flow_model::proto::ModelRelationDef_Endpoint >&
      endpoint() const;

  // map<string, .ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo> submodel_endpoint_info = 6;
  int submodel_endpoint_info_size() const;
  private:
  int _internal_submodel_endpoint_info_size() const;
  public:
  void clear_submodel_endpoint_info();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo >&
      _internal_submodel_endpoint_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo >*
      _internal_mutable_submodel_endpoint_info();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo >&
      submodel_endpoint_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo >*
      mutable_submodel_endpoint_info();

  // .ge.flow_model.proto.ModelRelationDef.ModelQueueInfo root_model_queue_info = 4;
  bool has_root_model_queue_info() const;
  private:
  bool _internal_has_root_model_queue_info() const;
  public:
  void clear_root_model_queue_info();
  const ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo& root_model_queue_info() const;
  ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo* release_root_model_queue_info();
  ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo* mutable_root_model_queue_info();
  void set_allocated_root_model_queue_info(::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo* root_model_queue_info);
  private:
  const ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo& _internal_root_model_queue_info() const;
  ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo* _internal_mutable_root_model_queue_info();
  public:
  void unsafe_arena_set_allocated_root_model_queue_info(
      ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo* root_model_queue_info);
  ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo* unsafe_arena_release_root_model_queue_info();

  // .ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo root_model_endpoint_info = 7;
  bool has_root_model_endpoint_info() const;
  private:
  bool _internal_has_root_model_endpoint_info() const;
  public:
  void clear_root_model_endpoint_info();
  const ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo& root_model_endpoint_info() const;
  ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo* release_root_model_endpoint_info();
  ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo* mutable_root_model_endpoint_info();
  void set_allocated_root_model_endpoint_info(::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo* root_model_endpoint_info);
  private:
  const ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo& _internal_root_model_endpoint_info() const;
  ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo* _internal_mutable_root_model_endpoint_info();
  public:
  void unsafe_arena_set_allocated_root_model_endpoint_info(
      ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo* root_model_endpoint_info);
  ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo* unsafe_arena_release_root_model_endpoint_info();

  // @@protoc_insertion_point(class_scope:ge.flow_model.proto.ModelRelationDef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::flow_model::proto::ModelRelationDef_QueueDef > queue_def_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ModelRelationDef_SubmodelQueueInfoEntry_DoNotUse,
      std::string, ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > submodel_queue_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ModelRelationDef_InvokedModelQueueInfoEntry_DoNotUse,
      std::string, ::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfo,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > invoked_model_queue_info_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::flow_model::proto::ModelRelationDef_Endpoint > endpoint_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ModelRelationDef_SubmodelEndpointInfoEntry_DoNotUse,
      std::string, ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > submodel_endpoint_info_;
  ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo* root_model_queue_info_;
  ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo* root_model_endpoint_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flow_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class RunningResource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.flow_model.proto.RunningResource) */ {
 public:
  inline RunningResource() : RunningResource(nullptr) {}
  virtual ~RunningResource();

  RunningResource(const RunningResource& from);
  RunningResource(RunningResource&& from) noexcept
    : RunningResource() {
    *this = ::std::move(from);
  }

  inline RunningResource& operator=(const RunningResource& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunningResource& operator=(RunningResource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RunningResource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunningResource* internal_default_instance() {
    return reinterpret_cast<const RunningResource*>(
               &_RunningResource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RunningResource& a, RunningResource& b) {
    a.Swap(&b);
  }
  inline void Swap(RunningResource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RunningResource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RunningResource* New() const final {
    return CreateMaybeMessage<RunningResource>(nullptr);
  }

  RunningResource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RunningResource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RunningResource& from);
  void MergeFrom(const RunningResource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunningResource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.flow_model.proto.RunningResource";
  }
  protected:
  explicit RunningResource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_flow_5fmodel_2eproto);
    return ::descriptor_table_flow_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // int64 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int64 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ge.flow_model.proto.RunningResource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flow_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class ModelDeployResource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.flow_model.proto.ModelDeployResource) */ {
 public:
  inline ModelDeployResource() : ModelDeployResource(nullptr) {}
  virtual ~ModelDeployResource();

  ModelDeployResource(const ModelDeployResource& from);
  ModelDeployResource(ModelDeployResource&& from) noexcept
    : ModelDeployResource() {
    *this = ::std::move(from);
  }

  inline ModelDeployResource& operator=(const ModelDeployResource& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelDeployResource& operator=(ModelDeployResource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelDeployResource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelDeployResource* internal_default_instance() {
    return reinterpret_cast<const ModelDeployResource*>(
               &_ModelDeployResource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ModelDeployResource& a, ModelDeployResource& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelDeployResource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelDeployResource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelDeployResource* New() const final {
    return CreateMaybeMessage<ModelDeployResource>(nullptr);
  }

  ModelDeployResource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelDeployResource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelDeployResource& from);
  void MergeFrom(const ModelDeployResource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelDeployResource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.flow_model.proto.ModelDeployResource";
  }
  protected:
  explicit ModelDeployResource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_flow_5fmodel_2eproto);
    return ::descriptor_table_flow_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunningResourceFieldNumber = 2,
    kResourceTypeFieldNumber = 1,
  };
  // repeated .ge.flow_model.proto.RunningResource running_resource = 2;
  int running_resource_size() const;
  private:
  int _internal_running_resource_size() const;
  public:
  void clear_running_resource();
  ::ge::flow_model::proto::RunningResource* mutable_running_resource(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::flow_model::proto::RunningResource >*
      mutable_running_resource();
  private:
  const ::ge::flow_model::proto::RunningResource& _internal_running_resource(int index) const;
  ::ge::flow_model::proto::RunningResource* _internal_add_running_resource();
  public:
  const ::ge::flow_model::proto::RunningResource& running_resource(int index) const;
  ::ge::flow_model::proto::RunningResource* add_running_resource();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::flow_model::proto::RunningResource >&
      running_resource() const;

  // string resource_type = 1;
  void clear_resource_type();
  const std::string& resource_type() const;
  void set_resource_type(const std::string& value);
  void set_resource_type(std::string&& value);
  void set_resource_type(const char* value);
  void set_resource_type(const char* value, size_t size);
  std::string* mutable_resource_type();
  std::string* release_resource_type();
  void set_allocated_resource_type(std::string* resource_type);
  private:
  const std::string& _internal_resource_type() const;
  void _internal_set_resource_type(const std::string& value);
  std::string* _internal_mutable_resource_type();
  public:

  // @@protoc_insertion_point(class_scope:ge.flow_model.proto.ModelDeployResource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::flow_model::proto::RunningResource > running_resource_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flow_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class ModelDeployInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.flow_model.proto.ModelDeployInfo) */ {
 public:
  inline ModelDeployInfo() : ModelDeployInfo(nullptr) {}
  virtual ~ModelDeployInfo();

  ModelDeployInfo(const ModelDeployInfo& from);
  ModelDeployInfo(ModelDeployInfo&& from) noexcept
    : ModelDeployInfo() {
    *this = ::std::move(from);
  }

  inline ModelDeployInfo& operator=(const ModelDeployInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelDeployInfo& operator=(ModelDeployInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelDeployInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelDeployInfo* internal_default_instance() {
    return reinterpret_cast<const ModelDeployInfo*>(
               &_ModelDeployInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ModelDeployInfo& a, ModelDeployInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelDeployInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelDeployInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelDeployInfo* New() const final {
    return CreateMaybeMessage<ModelDeployInfo>(nullptr);
  }

  ModelDeployInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelDeployInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelDeployInfo& from);
  void MergeFrom(const ModelDeployInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelDeployInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.flow_model.proto.ModelDeployInfo";
  }
  protected:
  explicit ModelDeployInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_flow_5fmodel_2eproto);
    return ::descriptor_table_flow_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicDeviceIdFieldNumber = 1,
  };
  // string logic_device_id = 1;
  void clear_logic_device_id();
  const std::string& logic_device_id() const;
  void set_logic_device_id(const std::string& value);
  void set_logic_device_id(std::string&& value);
  void set_logic_device_id(const char* value);
  void set_logic_device_id(const char* value, size_t size);
  std::string* mutable_logic_device_id();
  std::string* release_logic_device_id();
  void set_allocated_logic_device_id(std::string* logic_device_id);
  private:
  const std::string& _internal_logic_device_id() const;
  void _internal_set_logic_device_id(const std::string& value);
  std::string* _internal_mutable_logic_device_id();
  public:

  // @@protoc_insertion_point(class_scope:ge.flow_model.proto.ModelDeployInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logic_device_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flow_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class SubmodelDef PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.flow_model.proto.SubmodelDef) */ {
 public:
  inline SubmodelDef() : SubmodelDef(nullptr) {}
  virtual ~SubmodelDef();

  SubmodelDef(const SubmodelDef& from);
  SubmodelDef(SubmodelDef&& from) noexcept
    : SubmodelDef() {
    *this = ::std::move(from);
  }

  inline SubmodelDef& operator=(const SubmodelDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmodelDef& operator=(SubmodelDef&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubmodelDef& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubmodelDef* internal_default_instance() {
    return reinterpret_cast<const SubmodelDef*>(
               &_SubmodelDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SubmodelDef& a, SubmodelDef& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmodelDef* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmodelDef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubmodelDef* New() const final {
    return CreateMaybeMessage<SubmodelDef>(nullptr);
  }

  SubmodelDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubmodelDef>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubmodelDef& from);
  void MergeFrom(const SubmodelDef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmodelDef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.flow_model.proto.SubmodelDef";
  }
  protected:
  explicit SubmodelDef(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_flow_5fmodel_2eproto);
    return ::descriptor_table_flow_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelNameFieldNumber = 1,
    kModelTypeFieldNumber = 2,
    kOmDataFieldNumber = 3,
    kGraphFieldNumber = 4,
    kDeployResourceFieldNumber = 5,
    kDeployInfoFieldNumber = 6,
  };
  // string model_name = 1;
  void clear_model_name();
  const std::string& model_name() const;
  void set_model_name(const std::string& value);
  void set_model_name(std::string&& value);
  void set_model_name(const char* value);
  void set_model_name(const char* value, size_t size);
  std::string* mutable_model_name();
  std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // string model_type = 2;
  void clear_model_type();
  const std::string& model_type() const;
  void set_model_type(const std::string& value);
  void set_model_type(std::string&& value);
  void set_model_type(const char* value);
  void set_model_type(const char* value, size_t size);
  std::string* mutable_model_type();
  std::string* release_model_type();
  void set_allocated_model_type(std::string* model_type);
  private:
  const std::string& _internal_model_type() const;
  void _internal_set_model_type(const std::string& value);
  std::string* _internal_mutable_model_type();
  public:

  // bytes om_data = 3;
  void clear_om_data();
  const std::string& om_data() const;
  void set_om_data(const std::string& value);
  void set_om_data(std::string&& value);
  void set_om_data(const char* value);
  void set_om_data(const void* value, size_t size);
  std::string* mutable_om_data();
  std::string* release_om_data();
  void set_allocated_om_data(std::string* om_data);
  private:
  const std::string& _internal_om_data() const;
  void _internal_set_om_data(const std::string& value);
  std::string* _internal_mutable_om_data();
  public:

  // .ge.proto.GraphDef graph = 4;
  bool has_graph() const;
  private:
  bool _internal_has_graph() const;
  public:
  void clear_graph();
  const ::ge::proto::GraphDef& graph() const;
  ::ge::proto::GraphDef* release_graph();
  ::ge::proto::GraphDef* mutable_graph();
  void set_allocated_graph(::ge::proto::GraphDef* graph);
  private:
  const ::ge::proto::GraphDef& _internal_graph() const;
  ::ge::proto::GraphDef* _internal_mutable_graph();
  public:
  void unsafe_arena_set_allocated_graph(
      ::ge::proto::GraphDef* graph);
  ::ge::proto::GraphDef* unsafe_arena_release_graph();

  // .ge.flow_model.proto.ModelDeployResource deploy_resource = 5;
  bool has_deploy_resource() const;
  private:
  bool _internal_has_deploy_resource() const;
  public:
  void clear_deploy_resource();
  const ::ge::flow_model::proto::ModelDeployResource& deploy_resource() const;
  ::ge::flow_model::proto::ModelDeployResource* release_deploy_resource();
  ::ge::flow_model::proto::ModelDeployResource* mutable_deploy_resource();
  void set_allocated_deploy_resource(::ge::flow_model::proto::ModelDeployResource* deploy_resource);
  private:
  const ::ge::flow_model::proto::ModelDeployResource& _internal_deploy_resource() const;
  ::ge::flow_model::proto::ModelDeployResource* _internal_mutable_deploy_resource();
  public:
  void unsafe_arena_set_allocated_deploy_resource(
      ::ge::flow_model::proto::ModelDeployResource* deploy_resource);
  ::ge::flow_model::proto::ModelDeployResource* unsafe_arena_release_deploy_resource();

  // .ge.flow_model.proto.ModelDeployInfo deploy_info = 6;
  bool has_deploy_info() const;
  private:
  bool _internal_has_deploy_info() const;
  public:
  void clear_deploy_info();
  const ::ge::flow_model::proto::ModelDeployInfo& deploy_info() const;
  ::ge::flow_model::proto::ModelDeployInfo* release_deploy_info();
  ::ge::flow_model::proto::ModelDeployInfo* mutable_deploy_info();
  void set_allocated_deploy_info(::ge::flow_model::proto::ModelDeployInfo* deploy_info);
  private:
  const ::ge::flow_model::proto::ModelDeployInfo& _internal_deploy_info() const;
  ::ge::flow_model::proto::ModelDeployInfo* _internal_mutable_deploy_info();
  public:
  void unsafe_arena_set_allocated_deploy_info(
      ::ge::flow_model::proto::ModelDeployInfo* deploy_info);
  ::ge::flow_model::proto::ModelDeployInfo* unsafe_arena_release_deploy_info();

  // @@protoc_insertion_point(class_scope:ge.flow_model.proto.SubmodelDef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr om_data_;
  ::ge::proto::GraphDef* graph_;
  ::ge::flow_model::proto::ModelDeployResource* deploy_resource_;
  ::ge::flow_model::proto::ModelDeployInfo* deploy_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flow_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse();
  explicit CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse& other);
  static const CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse*>(&_CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ge.flow_model.proto.CompileResource.LogicDeviceIdToResourceTypeEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ge.flow_model.proto.CompileResource.LogicDeviceIdToResourceTypeEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_flow_5fmodel_2eproto);
    return ::descriptor_table_flow_5fmodel_2eproto.file_level_metadata[15];
  }

  public:
};

// -------------------------------------------------------------------

class CompileResource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.flow_model.proto.CompileResource) */ {
 public:
  inline CompileResource() : CompileResource(nullptr) {}
  virtual ~CompileResource();

  CompileResource(const CompileResource& from);
  CompileResource(CompileResource&& from) noexcept
    : CompileResource() {
    *this = ::std::move(from);
  }

  inline CompileResource& operator=(const CompileResource& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompileResource& operator=(CompileResource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompileResource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompileResource* internal_default_instance() {
    return reinterpret_cast<const CompileResource*>(
               &_CompileResource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CompileResource& a, CompileResource& b) {
    a.Swap(&b);
  }
  inline void Swap(CompileResource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompileResource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompileResource* New() const final {
    return CreateMaybeMessage<CompileResource>(nullptr);
  }

  CompileResource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompileResource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompileResource& from);
  void MergeFrom(const CompileResource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompileResource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.flow_model.proto.CompileResource";
  }
  protected:
  explicit CompileResource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_flow_5fmodel_2eproto);
    return ::descriptor_table_flow_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLogicDeviceIdToResourceTypeFieldNumber = 2,
    kHostResourceTypeFieldNumber = 1,
  };
  // map<string, string> logic_device_id_to_resource_type = 2;
  int logic_device_id_to_resource_type_size() const;
  private:
  int _internal_logic_device_id_to_resource_type_size() const;
  public:
  void clear_logic_device_id_to_resource_type();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_logic_device_id_to_resource_type() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_logic_device_id_to_resource_type();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      logic_device_id_to_resource_type() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_logic_device_id_to_resource_type();

  // string host_resource_type = 1;
  void clear_host_resource_type();
  const std::string& host_resource_type() const;
  void set_host_resource_type(const std::string& value);
  void set_host_resource_type(std::string&& value);
  void set_host_resource_type(const char* value);
  void set_host_resource_type(const char* value, size_t size);
  std::string* mutable_host_resource_type();
  std::string* release_host_resource_type();
  void set_allocated_host_resource_type(std::string* host_resource_type);
  private:
  const std::string& _internal_host_resource_type() const;
  void _internal_set_host_resource_type(const std::string& value);
  std::string* _internal_mutable_host_resource_type();
  public:

  // @@protoc_insertion_point(class_scope:ge.flow_model.proto.CompileResource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      CompileResource_LogicDeviceIdToResourceTypeEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > logic_device_id_to_resource_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_resource_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flow_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse();
  explicit FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse& other);
  static const FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse*>(&_FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ge.flow_model.proto.FlowModelDef.EschedPriority.EschedPriorityEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_flow_5fmodel_2eproto);
    return ::descriptor_table_flow_5fmodel_2eproto.file_level_metadata[17];
  }

  public:
};

// -------------------------------------------------------------------

class FlowModelDef_EschedPriority PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.flow_model.proto.FlowModelDef.EschedPriority) */ {
 public:
  inline FlowModelDef_EschedPriority() : FlowModelDef_EschedPriority(nullptr) {}
  virtual ~FlowModelDef_EschedPriority();

  FlowModelDef_EschedPriority(const FlowModelDef_EschedPriority& from);
  FlowModelDef_EschedPriority(FlowModelDef_EschedPriority&& from) noexcept
    : FlowModelDef_EschedPriority() {
    *this = ::std::move(from);
  }

  inline FlowModelDef_EschedPriority& operator=(const FlowModelDef_EschedPriority& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlowModelDef_EschedPriority& operator=(FlowModelDef_EschedPriority&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlowModelDef_EschedPriority& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlowModelDef_EschedPriority* internal_default_instance() {
    return reinterpret_cast<const FlowModelDef_EschedPriority*>(
               &_FlowModelDef_EschedPriority_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(FlowModelDef_EschedPriority& a, FlowModelDef_EschedPriority& b) {
    a.Swap(&b);
  }
  inline void Swap(FlowModelDef_EschedPriority* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlowModelDef_EschedPriority* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlowModelDef_EschedPriority* New() const final {
    return CreateMaybeMessage<FlowModelDef_EschedPriority>(nullptr);
  }

  FlowModelDef_EschedPriority* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlowModelDef_EschedPriority>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlowModelDef_EschedPriority& from);
  void MergeFrom(const FlowModelDef_EschedPriority& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlowModelDef_EschedPriority* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.flow_model.proto.FlowModelDef.EschedPriority";
  }
  protected:
  explicit FlowModelDef_EschedPriority(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_flow_5fmodel_2eproto);
    return ::descriptor_table_flow_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kEschedPriorityFieldNumber = 1,
  };
  // map<string, int32> esched_priority = 1;
  int esched_priority_size() const;
  private:
  int _internal_esched_priority_size() const;
  public:
  void clear_esched_priority();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_esched_priority() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_esched_priority();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
      esched_priority() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_esched_priority();

  // @@protoc_insertion_point(class_scope:ge.flow_model.proto.FlowModelDef.EschedPriority)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      FlowModelDef_EschedPriority_EschedPriorityEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::int32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      0 > esched_priority_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flow_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class FlowModelDef_RankIds PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.flow_model.proto.FlowModelDef.RankIds) */ {
 public:
  inline FlowModelDef_RankIds() : FlowModelDef_RankIds(nullptr) {}
  virtual ~FlowModelDef_RankIds();

  FlowModelDef_RankIds(const FlowModelDef_RankIds& from);
  FlowModelDef_RankIds(FlowModelDef_RankIds&& from) noexcept
    : FlowModelDef_RankIds() {
    *this = ::std::move(from);
  }

  inline FlowModelDef_RankIds& operator=(const FlowModelDef_RankIds& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlowModelDef_RankIds& operator=(FlowModelDef_RankIds&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlowModelDef_RankIds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlowModelDef_RankIds* internal_default_instance() {
    return reinterpret_cast<const FlowModelDef_RankIds*>(
               &_FlowModelDef_RankIds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(FlowModelDef_RankIds& a, FlowModelDef_RankIds& b) {
    a.Swap(&b);
  }
  inline void Swap(FlowModelDef_RankIds* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlowModelDef_RankIds* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlowModelDef_RankIds* New() const final {
    return CreateMaybeMessage<FlowModelDef_RankIds>(nullptr);
  }

  FlowModelDef_RankIds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlowModelDef_RankIds>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlowModelDef_RankIds& from);
  void MergeFrom(const FlowModelDef_RankIds& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlowModelDef_RankIds* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.flow_model.proto.FlowModelDef.RankIds";
  }
  protected:
  explicit FlowModelDef_RankIds(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_flow_5fmodel_2eproto);
    return ::descriptor_table_flow_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRankIdFieldNumber = 1,
  };
  // repeated uint32 rank_id = 1;
  int rank_id_size() const;
  private:
  int _internal_rank_id_size() const;
  public:
  void clear_rank_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rank_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_rank_id() const;
  void _internal_add_rank_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_rank_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 rank_id(int index) const;
  void set_rank_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_rank_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      rank_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_rank_id();

  // @@protoc_insertion_point(class_scope:ge.flow_model.proto.FlowModelDef.RankIds)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > rank_id_;
  mutable std::atomic<int> _rank_id_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flow_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class FlowModelDef_ModelsEschedPriorityEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FlowModelDef_ModelsEschedPriorityEntry_DoNotUse, 
    std::string, ::ge::flow_model::proto::FlowModelDef_EschedPriority,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FlowModelDef_ModelsEschedPriorityEntry_DoNotUse, 
    std::string, ::ge::flow_model::proto::FlowModelDef_EschedPriority,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  FlowModelDef_ModelsEschedPriorityEntry_DoNotUse();
  explicit FlowModelDef_ModelsEschedPriorityEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FlowModelDef_ModelsEschedPriorityEntry_DoNotUse& other);
  static const FlowModelDef_ModelsEschedPriorityEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FlowModelDef_ModelsEschedPriorityEntry_DoNotUse*>(&_FlowModelDef_ModelsEschedPriorityEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ge.flow_model.proto.FlowModelDef.ModelsEschedPriorityEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_flow_5fmodel_2eproto);
    return ::descriptor_table_flow_5fmodel_2eproto.file_level_metadata[20];
  }

  public:
};

// -------------------------------------------------------------------

class FlowModelDef_ModelNameToRankIdEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FlowModelDef_ModelNameToRankIdEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FlowModelDef_ModelNameToRankIdEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    0 > SuperType;
  FlowModelDef_ModelNameToRankIdEntry_DoNotUse();
  explicit FlowModelDef_ModelNameToRankIdEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FlowModelDef_ModelNameToRankIdEntry_DoNotUse& other);
  static const FlowModelDef_ModelNameToRankIdEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FlowModelDef_ModelNameToRankIdEntry_DoNotUse*>(&_FlowModelDef_ModelNameToRankIdEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ge.flow_model.proto.FlowModelDef.ModelNameToRankIdEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_flow_5fmodel_2eproto);
    return ::descriptor_table_flow_5fmodel_2eproto.file_level_metadata[21];
  }

  public:
};

// -------------------------------------------------------------------

class FlowModelDef_GroupNameToRankIdsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FlowModelDef_GroupNameToRankIdsEntry_DoNotUse, 
    std::string, ::ge::flow_model::proto::FlowModelDef_RankIds,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FlowModelDef_GroupNameToRankIdsEntry_DoNotUse, 
    std::string, ::ge::flow_model::proto::FlowModelDef_RankIds,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  FlowModelDef_GroupNameToRankIdsEntry_DoNotUse();
  explicit FlowModelDef_GroupNameToRankIdsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FlowModelDef_GroupNameToRankIdsEntry_DoNotUse& other);
  static const FlowModelDef_GroupNameToRankIdsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FlowModelDef_GroupNameToRankIdsEntry_DoNotUse*>(&_FlowModelDef_GroupNameToRankIdsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ge.flow_model.proto.FlowModelDef.GroupNameToRankIdsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_flow_5fmodel_2eproto);
    return ::descriptor_table_flow_5fmodel_2eproto.file_level_metadata[22];
  }

  public:
};

// -------------------------------------------------------------------

class FlowModelDef_DeviceToRankIdsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FlowModelDef_DeviceToRankIdsEntry_DoNotUse, 
    std::string, ::ge::flow_model::proto::FlowModelDef_RankIds,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FlowModelDef_DeviceToRankIdsEntry_DoNotUse, 
    std::string, ::ge::flow_model::proto::FlowModelDef_RankIds,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  FlowModelDef_DeviceToRankIdsEntry_DoNotUse();
  explicit FlowModelDef_DeviceToRankIdsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FlowModelDef_DeviceToRankIdsEntry_DoNotUse& other);
  static const FlowModelDef_DeviceToRankIdsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FlowModelDef_DeviceToRankIdsEntry_DoNotUse*>(&_FlowModelDef_DeviceToRankIdsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ge.flow_model.proto.FlowModelDef.DeviceToRankIdsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_flow_5fmodel_2eproto);
    return ::descriptor_table_flow_5fmodel_2eproto.file_level_metadata[23];
  }

  public:
};

// -------------------------------------------------------------------

class FlowModelDef PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.flow_model.proto.FlowModelDef) */ {
 public:
  inline FlowModelDef() : FlowModelDef(nullptr) {}
  virtual ~FlowModelDef();

  FlowModelDef(const FlowModelDef& from);
  FlowModelDef(FlowModelDef&& from) noexcept
    : FlowModelDef() {
    *this = ::std::move(from);
  }

  inline FlowModelDef& operator=(const FlowModelDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlowModelDef& operator=(FlowModelDef&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlowModelDef& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlowModelDef* internal_default_instance() {
    return reinterpret_cast<const FlowModelDef*>(
               &_FlowModelDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(FlowModelDef& a, FlowModelDef& b) {
    a.Swap(&b);
  }
  inline void Swap(FlowModelDef* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlowModelDef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlowModelDef* New() const final {
    return CreateMaybeMessage<FlowModelDef>(nullptr);
  }

  FlowModelDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlowModelDef>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlowModelDef& from);
  void MergeFrom(const FlowModelDef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlowModelDef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.flow_model.proto.FlowModelDef";
  }
  protected:
  explicit FlowModelDef(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_flow_5fmodel_2eproto);
    return ::descriptor_table_flow_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FlowModelDef_EschedPriority EschedPriority;
  typedef FlowModelDef_RankIds RankIds;

  // accessors -------------------------------------------------------

  enum : int {
    kSubmodelNameFieldNumber = 3,
    kModelsEschedPriorityFieldNumber = 4,
    kGroupNameToRankIdsFieldNumber = 5,
    kModelNameToRankIdFieldNumber = 6,
    kDeviceToRankIdsFieldNumber = 7,
    kModelNameFieldNumber = 1,
    kRelationFieldNumber = 2,
    kCompileResourceFieldNumber = 8,
  };
  // repeated string submodel_name = 3;
  int submodel_name_size() const;
  private:
  int _internal_submodel_name_size() const;
  public:
  void clear_submodel_name();
  const std::string& submodel_name(int index) const;
  std::string* mutable_submodel_name(int index);
  void set_submodel_name(int index, const std::string& value);
  void set_submodel_name(int index, std::string&& value);
  void set_submodel_name(int index, const char* value);
  void set_submodel_name(int index, const char* value, size_t size);
  std::string* add_submodel_name();
  void add_submodel_name(const std::string& value);
  void add_submodel_name(std::string&& value);
  void add_submodel_name(const char* value);
  void add_submodel_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& submodel_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_submodel_name();
  private:
  const std::string& _internal_submodel_name(int index) const;
  std::string* _internal_add_submodel_name();
  public:

  // map<string, .ge.flow_model.proto.FlowModelDef.EschedPriority> models_esched_priority = 4;
  int models_esched_priority_size() const;
  private:
  int _internal_models_esched_priority_size() const;
  public:
  void clear_models_esched_priority();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_EschedPriority >&
      _internal_models_esched_priority() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_EschedPriority >*
      _internal_mutable_models_esched_priority();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_EschedPriority >&
      models_esched_priority() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_EschedPriority >*
      mutable_models_esched_priority();

  // map<string, .ge.flow_model.proto.FlowModelDef.RankIds> group_name_to_rank_ids = 5;
  int group_name_to_rank_ids_size() const;
  private:
  int _internal_group_name_to_rank_ids_size() const;
  public:
  void clear_group_name_to_rank_ids();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_RankIds >&
      _internal_group_name_to_rank_ids() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_RankIds >*
      _internal_mutable_group_name_to_rank_ids();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_RankIds >&
      group_name_to_rank_ids() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_RankIds >*
      mutable_group_name_to_rank_ids();

  // map<string, uint32> model_name_to_rank_id = 6;
  int model_name_to_rank_id_size() const;
  private:
  int _internal_model_name_to_rank_id_size() const;
  public:
  void clear_model_name_to_rank_id();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_model_name_to_rank_id() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_model_name_to_rank_id();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      model_name_to_rank_id() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_model_name_to_rank_id();

  // map<string, .ge.flow_model.proto.FlowModelDef.RankIds> device_to_rank_ids = 7;
  int device_to_rank_ids_size() const;
  private:
  int _internal_device_to_rank_ids_size() const;
  public:
  void clear_device_to_rank_ids();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_RankIds >&
      _internal_device_to_rank_ids() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_RankIds >*
      _internal_mutable_device_to_rank_ids();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_RankIds >&
      device_to_rank_ids() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_RankIds >*
      mutable_device_to_rank_ids();

  // string model_name = 1;
  void clear_model_name();
  const std::string& model_name() const;
  void set_model_name(const std::string& value);
  void set_model_name(std::string&& value);
  void set_model_name(const char* value);
  void set_model_name(const char* value, size_t size);
  std::string* mutable_model_name();
  std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // .ge.flow_model.proto.ModelRelationDef relation = 2;
  bool has_relation() const;
  private:
  bool _internal_has_relation() const;
  public:
  void clear_relation();
  const ::ge::flow_model::proto::ModelRelationDef& relation() const;
  ::ge::flow_model::proto::ModelRelationDef* release_relation();
  ::ge::flow_model::proto::ModelRelationDef* mutable_relation();
  void set_allocated_relation(::ge::flow_model::proto::ModelRelationDef* relation);
  private:
  const ::ge::flow_model::proto::ModelRelationDef& _internal_relation() const;
  ::ge::flow_model::proto::ModelRelationDef* _internal_mutable_relation();
  public:
  void unsafe_arena_set_allocated_relation(
      ::ge::flow_model::proto::ModelRelationDef* relation);
  ::ge::flow_model::proto::ModelRelationDef* unsafe_arena_release_relation();

  // .ge.flow_model.proto.CompileResource compile_resource = 8;
  bool has_compile_resource() const;
  private:
  bool _internal_has_compile_resource() const;
  public:
  void clear_compile_resource();
  const ::ge::flow_model::proto::CompileResource& compile_resource() const;
  ::ge::flow_model::proto::CompileResource* release_compile_resource();
  ::ge::flow_model::proto::CompileResource* mutable_compile_resource();
  void set_allocated_compile_resource(::ge::flow_model::proto::CompileResource* compile_resource);
  private:
  const ::ge::flow_model::proto::CompileResource& _internal_compile_resource() const;
  ::ge::flow_model::proto::CompileResource* _internal_mutable_compile_resource();
  public:
  void unsafe_arena_set_allocated_compile_resource(
      ::ge::flow_model::proto::CompileResource* compile_resource);
  ::ge::flow_model::proto::CompileResource* unsafe_arena_release_compile_resource();

  // @@protoc_insertion_point(class_scope:ge.flow_model.proto.FlowModelDef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> submodel_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      FlowModelDef_ModelsEschedPriorityEntry_DoNotUse,
      std::string, ::ge::flow_model::proto::FlowModelDef_EschedPriority,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > models_esched_priority_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      FlowModelDef_GroupNameToRankIdsEntry_DoNotUse,
      std::string, ::ge::flow_model::proto::FlowModelDef_RankIds,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > group_name_to_rank_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      FlowModelDef_ModelNameToRankIdEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      0 > model_name_to_rank_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      FlowModelDef_DeviceToRankIdsEntry_DoNotUse,
      std::string, ::ge::flow_model::proto::FlowModelDef_RankIds,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > device_to_rank_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
  ::ge::flow_model::proto::ModelRelationDef* relation_;
  ::ge::flow_model::proto::CompileResource* compile_resource_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flow_5fmodel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ModelRelationDef_QueueDef

// string name = 1;
inline void ModelRelationDef_QueueDef::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelRelationDef_QueueDef::name() const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.ModelRelationDef.QueueDef.name)
  return _internal_name();
}
inline void ModelRelationDef_QueueDef::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.QueueDef.name)
}
inline std::string* ModelRelationDef_QueueDef::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.ModelRelationDef.QueueDef.name)
  return _internal_mutable_name();
}
inline const std::string& ModelRelationDef_QueueDef::_internal_name() const {
  return name_.Get();
}
inline void ModelRelationDef_QueueDef::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelRelationDef_QueueDef::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ge.flow_model.proto.ModelRelationDef.QueueDef.name)
}
inline void ModelRelationDef_QueueDef::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ge.flow_model.proto.ModelRelationDef.QueueDef.name)
}
inline void ModelRelationDef_QueueDef::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ge.flow_model.proto.ModelRelationDef.QueueDef.name)
}
inline std::string* ModelRelationDef_QueueDef::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelRelationDef_QueueDef::release_name() {
  // @@protoc_insertion_point(field_release:ge.flow_model.proto.ModelRelationDef.QueueDef.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelRelationDef_QueueDef::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ge.flow_model.proto.ModelRelationDef.QueueDef.name)
}

// uint32 depth = 2;
inline void ModelRelationDef_QueueDef::clear_depth() {
  depth_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelRelationDef_QueueDef::_internal_depth() const {
  return depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelRelationDef_QueueDef::depth() const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.ModelRelationDef.QueueDef.depth)
  return _internal_depth();
}
inline void ModelRelationDef_QueueDef::_internal_set_depth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  depth_ = value;
}
inline void ModelRelationDef_QueueDef::set_depth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.QueueDef.depth)
}

// string enqueue_policy = 3;
inline void ModelRelationDef_QueueDef::clear_enqueue_policy() {
  enqueue_policy_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelRelationDef_QueueDef::enqueue_policy() const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.ModelRelationDef.QueueDef.enqueue_policy)
  return _internal_enqueue_policy();
}
inline void ModelRelationDef_QueueDef::set_enqueue_policy(const std::string& value) {
  _internal_set_enqueue_policy(value);
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.QueueDef.enqueue_policy)
}
inline std::string* ModelRelationDef_QueueDef::mutable_enqueue_policy() {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.ModelRelationDef.QueueDef.enqueue_policy)
  return _internal_mutable_enqueue_policy();
}
inline const std::string& ModelRelationDef_QueueDef::_internal_enqueue_policy() const {
  return enqueue_policy_.Get();
}
inline void ModelRelationDef_QueueDef::_internal_set_enqueue_policy(const std::string& value) {
  
  enqueue_policy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelRelationDef_QueueDef::set_enqueue_policy(std::string&& value) {
  
  enqueue_policy_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ge.flow_model.proto.ModelRelationDef.QueueDef.enqueue_policy)
}
inline void ModelRelationDef_QueueDef::set_enqueue_policy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  enqueue_policy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ge.flow_model.proto.ModelRelationDef.QueueDef.enqueue_policy)
}
inline void ModelRelationDef_QueueDef::set_enqueue_policy(const char* value,
    size_t size) {
  
  enqueue_policy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ge.flow_model.proto.ModelRelationDef.QueueDef.enqueue_policy)
}
inline std::string* ModelRelationDef_QueueDef::_internal_mutable_enqueue_policy() {
  
  return enqueue_policy_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelRelationDef_QueueDef::release_enqueue_policy() {
  // @@protoc_insertion_point(field_release:ge.flow_model.proto.ModelRelationDef.QueueDef.enqueue_policy)
  return enqueue_policy_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelRelationDef_QueueDef::set_allocated_enqueue_policy(std::string* enqueue_policy) {
  if (enqueue_policy != nullptr) {
    
  } else {
    
  }
  enqueue_policy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), enqueue_policy,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ge.flow_model.proto.ModelRelationDef.QueueDef.enqueue_policy)
}

// bool is_control = 4;
inline void ModelRelationDef_QueueDef::clear_is_control() {
  is_control_ = false;
}
inline bool ModelRelationDef_QueueDef::_internal_is_control() const {
  return is_control_;
}
inline bool ModelRelationDef_QueueDef::is_control() const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.ModelRelationDef.QueueDef.is_control)
  return _internal_is_control();
}
inline void ModelRelationDef_QueueDef::_internal_set_is_control(bool value) {
  
  is_control_ = value;
}
inline void ModelRelationDef_QueueDef::set_is_control(bool value) {
  _internal_set_is_control(value);
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.QueueDef.is_control)
}

// -------------------------------------------------------------------

// ModelRelationDef_AttrValue

// bytes s = 1;
inline bool ModelRelationDef_AttrValue::_internal_has_s() const {
  return value_case() == kS;
}
inline void ModelRelationDef_AttrValue::set_has_s() {
  _oneof_case_[0] = kS;
}
inline void ModelRelationDef_AttrValue::clear_s() {
  if (_internal_has_s()) {
    value_.s_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_value();
  }
}
inline const std::string& ModelRelationDef_AttrValue::s() const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.ModelRelationDef.AttrValue.s)
  return _internal_s();
}
inline void ModelRelationDef_AttrValue::set_s(const std::string& value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.AttrValue.s)
}
inline std::string* ModelRelationDef_AttrValue::mutable_s() {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.ModelRelationDef.AttrValue.s)
  return _internal_mutable_s();
}
inline const std::string& ModelRelationDef_AttrValue::_internal_s() const {
  if (_internal_has_s()) {
    return value_.s_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ModelRelationDef_AttrValue::_internal_set_s(const std::string& value) {
  if (!_internal_has_s()) {
    clear_value();
    set_has_s();
    value_.s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.s_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelRelationDef_AttrValue::set_s(std::string&& value) {
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.AttrValue.s)
  if (!_internal_has_s()) {
    clear_value();
    set_has_s();
    value_.s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.s_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ge.flow_model.proto.ModelRelationDef.AttrValue.s)
}
inline void ModelRelationDef_AttrValue::set_s(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_s()) {
    clear_value();
    set_has_s();
    value_.s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.s_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ge.flow_model.proto.ModelRelationDef.AttrValue.s)
}
inline void ModelRelationDef_AttrValue::set_s(const void* value,
                             size_t size) {
  if (!_internal_has_s()) {
    clear_value();
    set_has_s();
    value_.s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.s_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:ge.flow_model.proto.ModelRelationDef.AttrValue.s)
}
inline std::string* ModelRelationDef_AttrValue::_internal_mutable_s() {
  if (!_internal_has_s()) {
    clear_value();
    set_has_s();
    value_.s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.s_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelRelationDef_AttrValue::release_s() {
  // @@protoc_insertion_point(field_release:ge.flow_model.proto.ModelRelationDef.AttrValue.s)
  if (_internal_has_s()) {
    clear_has_value();
    return value_.s_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ModelRelationDef_AttrValue::set_allocated_s(std::string* s) {
  if (has_value()) {
    clear_value();
  }
  if (s != nullptr) {
    set_has_s();
    value_.s_.UnsafeSetDefault(s);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(s);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:ge.flow_model.proto.ModelRelationDef.AttrValue.s)
}

// int64 i = 2;
inline bool ModelRelationDef_AttrValue::_internal_has_i() const {
  return value_case() == kI;
}
inline void ModelRelationDef_AttrValue::set_has_i() {
  _oneof_case_[0] = kI;
}
inline void ModelRelationDef_AttrValue::clear_i() {
  if (_internal_has_i()) {
    value_.i_ = PROTOBUF_LONGLONG(0);
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ModelRelationDef_AttrValue::_internal_i() const {
  if (_internal_has_i()) {
    return value_.i_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void ModelRelationDef_AttrValue::_internal_set_i(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_i()) {
    clear_value();
    set_has_i();
  }
  value_.i_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ModelRelationDef_AttrValue::i() const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.ModelRelationDef.AttrValue.i)
  return _internal_i();
}
inline void ModelRelationDef_AttrValue::set_i(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_i(value);
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.AttrValue.i)
}

// bool b = 3;
inline bool ModelRelationDef_AttrValue::_internal_has_b() const {
  return value_case() == kB;
}
inline void ModelRelationDef_AttrValue::set_has_b() {
  _oneof_case_[0] = kB;
}
inline void ModelRelationDef_AttrValue::clear_b() {
  if (_internal_has_b()) {
    value_.b_ = false;
    clear_has_value();
  }
}
inline bool ModelRelationDef_AttrValue::_internal_b() const {
  if (_internal_has_b()) {
    return value_.b_;
  }
  return false;
}
inline void ModelRelationDef_AttrValue::_internal_set_b(bool value) {
  if (!_internal_has_b()) {
    clear_value();
    set_has_b();
  }
  value_.b_ = value;
}
inline bool ModelRelationDef_AttrValue::b() const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.ModelRelationDef.AttrValue.b)
  return _internal_b();
}
inline void ModelRelationDef_AttrValue::set_b(bool value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.AttrValue.b)
}

inline bool ModelRelationDef_AttrValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ModelRelationDef_AttrValue::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ModelRelationDef_AttrValue::ValueCase ModelRelationDef_AttrValue::value_case() const {
  return ModelRelationDef_AttrValue::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ModelRelationDef_Endpoint

// string name = 1;
inline void ModelRelationDef_Endpoint::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelRelationDef_Endpoint::name() const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.ModelRelationDef.Endpoint.name)
  return _internal_name();
}
inline void ModelRelationDef_Endpoint::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.Endpoint.name)
}
inline std::string* ModelRelationDef_Endpoint::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.ModelRelationDef.Endpoint.name)
  return _internal_mutable_name();
}
inline const std::string& ModelRelationDef_Endpoint::_internal_name() const {
  return name_.Get();
}
inline void ModelRelationDef_Endpoint::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelRelationDef_Endpoint::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ge.flow_model.proto.ModelRelationDef.Endpoint.name)
}
inline void ModelRelationDef_Endpoint::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ge.flow_model.proto.ModelRelationDef.Endpoint.name)
}
inline void ModelRelationDef_Endpoint::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ge.flow_model.proto.ModelRelationDef.Endpoint.name)
}
inline std::string* ModelRelationDef_Endpoint::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelRelationDef_Endpoint::release_name() {
  // @@protoc_insertion_point(field_release:ge.flow_model.proto.ModelRelationDef.Endpoint.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelRelationDef_Endpoint::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ge.flow_model.proto.ModelRelationDef.Endpoint.name)
}

// int32 endpoint_type = 2;
inline void ModelRelationDef_Endpoint::clear_endpoint_type() {
  endpoint_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelRelationDef_Endpoint::_internal_endpoint_type() const {
  return endpoint_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelRelationDef_Endpoint::endpoint_type() const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.ModelRelationDef.Endpoint.endpoint_type)
  return _internal_endpoint_type();
}
inline void ModelRelationDef_Endpoint::_internal_set_endpoint_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  endpoint_type_ = value;
}
inline void ModelRelationDef_Endpoint::set_endpoint_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_endpoint_type(value);
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.Endpoint.endpoint_type)
}

// map<string, .ge.flow_model.proto.ModelRelationDef.AttrValue> attrs = 3;
inline int ModelRelationDef_Endpoint::_internal_attrs_size() const {
  return attrs_.size();
}
inline int ModelRelationDef_Endpoint::attrs_size() const {
  return _internal_attrs_size();
}
inline void ModelRelationDef_Endpoint::clear_attrs() {
  attrs_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_AttrValue >&
ModelRelationDef_Endpoint::_internal_attrs() const {
  return attrs_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_AttrValue >&
ModelRelationDef_Endpoint::attrs() const {
  // @@protoc_insertion_point(field_map:ge.flow_model.proto.ModelRelationDef.Endpoint.attrs)
  return _internal_attrs();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_AttrValue >*
ModelRelationDef_Endpoint::_internal_mutable_attrs() {
  return attrs_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_AttrValue >*
ModelRelationDef_Endpoint::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_map:ge.flow_model.proto.ModelRelationDef.Endpoint.attrs)
  return _internal_mutable_attrs();
}

// -------------------------------------------------------------------

// ModelRelationDef_InvokedModelQueueInfo

// repeated string input_queue_name = 1;
inline int ModelRelationDef_InvokedModelQueueInfo::_internal_input_queue_name_size() const {
  return input_queue_name_.size();
}
inline int ModelRelationDef_InvokedModelQueueInfo::input_queue_name_size() const {
  return _internal_input_queue_name_size();
}
inline void ModelRelationDef_InvokedModelQueueInfo::clear_input_queue_name() {
  input_queue_name_.Clear();
}
inline std::string* ModelRelationDef_InvokedModelQueueInfo::add_input_queue_name() {
  // @@protoc_insertion_point(field_add_mutable:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo.input_queue_name)
  return _internal_add_input_queue_name();
}
inline const std::string& ModelRelationDef_InvokedModelQueueInfo::_internal_input_queue_name(int index) const {
  return input_queue_name_.Get(index);
}
inline const std::string& ModelRelationDef_InvokedModelQueueInfo::input_queue_name(int index) const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo.input_queue_name)
  return _internal_input_queue_name(index);
}
inline std::string* ModelRelationDef_InvokedModelQueueInfo::mutable_input_queue_name(int index) {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo.input_queue_name)
  return input_queue_name_.Mutable(index);
}
inline void ModelRelationDef_InvokedModelQueueInfo::set_input_queue_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo.input_queue_name)
  input_queue_name_.Mutable(index)->assign(value);
}
inline void ModelRelationDef_InvokedModelQueueInfo::set_input_queue_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo.input_queue_name)
  input_queue_name_.Mutable(index)->assign(std::move(value));
}
inline void ModelRelationDef_InvokedModelQueueInfo::set_input_queue_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_queue_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo.input_queue_name)
}
inline void ModelRelationDef_InvokedModelQueueInfo::set_input_queue_name(int index, const char* value, size_t size) {
  input_queue_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo.input_queue_name)
}
inline std::string* ModelRelationDef_InvokedModelQueueInfo::_internal_add_input_queue_name() {
  return input_queue_name_.Add();
}
inline void ModelRelationDef_InvokedModelQueueInfo::add_input_queue_name(const std::string& value) {
  input_queue_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo.input_queue_name)
}
inline void ModelRelationDef_InvokedModelQueueInfo::add_input_queue_name(std::string&& value) {
  input_queue_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo.input_queue_name)
}
inline void ModelRelationDef_InvokedModelQueueInfo::add_input_queue_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_queue_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo.input_queue_name)
}
inline void ModelRelationDef_InvokedModelQueueInfo::add_input_queue_name(const char* value, size_t size) {
  input_queue_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo.input_queue_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ModelRelationDef_InvokedModelQueueInfo::input_queue_name() const {
  // @@protoc_insertion_point(field_list:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo.input_queue_name)
  return input_queue_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ModelRelationDef_InvokedModelQueueInfo::mutable_input_queue_name() {
  // @@protoc_insertion_point(field_mutable_list:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo.input_queue_name)
  return &input_queue_name_;
}

// repeated string output_queue_name = 2;
inline int ModelRelationDef_InvokedModelQueueInfo::_internal_output_queue_name_size() const {
  return output_queue_name_.size();
}
inline int ModelRelationDef_InvokedModelQueueInfo::output_queue_name_size() const {
  return _internal_output_queue_name_size();
}
inline void ModelRelationDef_InvokedModelQueueInfo::clear_output_queue_name() {
  output_queue_name_.Clear();
}
inline std::string* ModelRelationDef_InvokedModelQueueInfo::add_output_queue_name() {
  // @@protoc_insertion_point(field_add_mutable:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo.output_queue_name)
  return _internal_add_output_queue_name();
}
inline const std::string& ModelRelationDef_InvokedModelQueueInfo::_internal_output_queue_name(int index) const {
  return output_queue_name_.Get(index);
}
inline const std::string& ModelRelationDef_InvokedModelQueueInfo::output_queue_name(int index) const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo.output_queue_name)
  return _internal_output_queue_name(index);
}
inline std::string* ModelRelationDef_InvokedModelQueueInfo::mutable_output_queue_name(int index) {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo.output_queue_name)
  return output_queue_name_.Mutable(index);
}
inline void ModelRelationDef_InvokedModelQueueInfo::set_output_queue_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo.output_queue_name)
  output_queue_name_.Mutable(index)->assign(value);
}
inline void ModelRelationDef_InvokedModelQueueInfo::set_output_queue_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo.output_queue_name)
  output_queue_name_.Mutable(index)->assign(std::move(value));
}
inline void ModelRelationDef_InvokedModelQueueInfo::set_output_queue_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_queue_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo.output_queue_name)
}
inline void ModelRelationDef_InvokedModelQueueInfo::set_output_queue_name(int index, const char* value, size_t size) {
  output_queue_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo.output_queue_name)
}
inline std::string* ModelRelationDef_InvokedModelQueueInfo::_internal_add_output_queue_name() {
  return output_queue_name_.Add();
}
inline void ModelRelationDef_InvokedModelQueueInfo::add_output_queue_name(const std::string& value) {
  output_queue_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo.output_queue_name)
}
inline void ModelRelationDef_InvokedModelQueueInfo::add_output_queue_name(std::string&& value) {
  output_queue_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo.output_queue_name)
}
inline void ModelRelationDef_InvokedModelQueueInfo::add_output_queue_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_queue_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo.output_queue_name)
}
inline void ModelRelationDef_InvokedModelQueueInfo::add_output_queue_name(const char* value, size_t size) {
  output_queue_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo.output_queue_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ModelRelationDef_InvokedModelQueueInfo::output_queue_name() const {
  // @@protoc_insertion_point(field_list:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo.output_queue_name)
  return output_queue_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ModelRelationDef_InvokedModelQueueInfo::mutable_output_queue_name() {
  // @@protoc_insertion_point(field_mutable_list:ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo.output_queue_name)
  return &output_queue_name_;
}

// -------------------------------------------------------------------

// ModelRelationDef_ModelQueueInfo

// string model_name = 1;
inline void ModelRelationDef_ModelQueueInfo::clear_model_name() {
  model_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelRelationDef_ModelQueueInfo::model_name() const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.model_name)
  return _internal_model_name();
}
inline void ModelRelationDef_ModelQueueInfo::set_model_name(const std::string& value) {
  _internal_set_model_name(value);
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.model_name)
}
inline std::string* ModelRelationDef_ModelQueueInfo::mutable_model_name() {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.model_name)
  return _internal_mutable_model_name();
}
inline const std::string& ModelRelationDef_ModelQueueInfo::_internal_model_name() const {
  return model_name_.Get();
}
inline void ModelRelationDef_ModelQueueInfo::_internal_set_model_name(const std::string& value) {
  
  model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelRelationDef_ModelQueueInfo::set_model_name(std::string&& value) {
  
  model_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.model_name)
}
inline void ModelRelationDef_ModelQueueInfo::set_model_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.model_name)
}
inline void ModelRelationDef_ModelQueueInfo::set_model_name(const char* value,
    size_t size) {
  
  model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.model_name)
}
inline std::string* ModelRelationDef_ModelQueueInfo::_internal_mutable_model_name() {
  
  return model_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelRelationDef_ModelQueueInfo::release_model_name() {
  // @@protoc_insertion_point(field_release:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.model_name)
  return model_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelRelationDef_ModelQueueInfo::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    
  } else {
    
  }
  model_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.model_name)
}

// repeated string input_queue_name = 2;
inline int ModelRelationDef_ModelQueueInfo::_internal_input_queue_name_size() const {
  return input_queue_name_.size();
}
inline int ModelRelationDef_ModelQueueInfo::input_queue_name_size() const {
  return _internal_input_queue_name_size();
}
inline void ModelRelationDef_ModelQueueInfo::clear_input_queue_name() {
  input_queue_name_.Clear();
}
inline std::string* ModelRelationDef_ModelQueueInfo::add_input_queue_name() {
  // @@protoc_insertion_point(field_add_mutable:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.input_queue_name)
  return _internal_add_input_queue_name();
}
inline const std::string& ModelRelationDef_ModelQueueInfo::_internal_input_queue_name(int index) const {
  return input_queue_name_.Get(index);
}
inline const std::string& ModelRelationDef_ModelQueueInfo::input_queue_name(int index) const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.input_queue_name)
  return _internal_input_queue_name(index);
}
inline std::string* ModelRelationDef_ModelQueueInfo::mutable_input_queue_name(int index) {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.input_queue_name)
  return input_queue_name_.Mutable(index);
}
inline void ModelRelationDef_ModelQueueInfo::set_input_queue_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.input_queue_name)
  input_queue_name_.Mutable(index)->assign(value);
}
inline void ModelRelationDef_ModelQueueInfo::set_input_queue_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.input_queue_name)
  input_queue_name_.Mutable(index)->assign(std::move(value));
}
inline void ModelRelationDef_ModelQueueInfo::set_input_queue_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_queue_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.input_queue_name)
}
inline void ModelRelationDef_ModelQueueInfo::set_input_queue_name(int index, const char* value, size_t size) {
  input_queue_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.input_queue_name)
}
inline std::string* ModelRelationDef_ModelQueueInfo::_internal_add_input_queue_name() {
  return input_queue_name_.Add();
}
inline void ModelRelationDef_ModelQueueInfo::add_input_queue_name(const std::string& value) {
  input_queue_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.input_queue_name)
}
inline void ModelRelationDef_ModelQueueInfo::add_input_queue_name(std::string&& value) {
  input_queue_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.input_queue_name)
}
inline void ModelRelationDef_ModelQueueInfo::add_input_queue_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_queue_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.input_queue_name)
}
inline void ModelRelationDef_ModelQueueInfo::add_input_queue_name(const char* value, size_t size) {
  input_queue_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.input_queue_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ModelRelationDef_ModelQueueInfo::input_queue_name() const {
  // @@protoc_insertion_point(field_list:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.input_queue_name)
  return input_queue_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ModelRelationDef_ModelQueueInfo::mutable_input_queue_name() {
  // @@protoc_insertion_point(field_mutable_list:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.input_queue_name)
  return &input_queue_name_;
}

// repeated string output_queue_name = 3;
inline int ModelRelationDef_ModelQueueInfo::_internal_output_queue_name_size() const {
  return output_queue_name_.size();
}
inline int ModelRelationDef_ModelQueueInfo::output_queue_name_size() const {
  return _internal_output_queue_name_size();
}
inline void ModelRelationDef_ModelQueueInfo::clear_output_queue_name() {
  output_queue_name_.Clear();
}
inline std::string* ModelRelationDef_ModelQueueInfo::add_output_queue_name() {
  // @@protoc_insertion_point(field_add_mutable:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.output_queue_name)
  return _internal_add_output_queue_name();
}
inline const std::string& ModelRelationDef_ModelQueueInfo::_internal_output_queue_name(int index) const {
  return output_queue_name_.Get(index);
}
inline const std::string& ModelRelationDef_ModelQueueInfo::output_queue_name(int index) const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.output_queue_name)
  return _internal_output_queue_name(index);
}
inline std::string* ModelRelationDef_ModelQueueInfo::mutable_output_queue_name(int index) {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.output_queue_name)
  return output_queue_name_.Mutable(index);
}
inline void ModelRelationDef_ModelQueueInfo::set_output_queue_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.output_queue_name)
  output_queue_name_.Mutable(index)->assign(value);
}
inline void ModelRelationDef_ModelQueueInfo::set_output_queue_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.output_queue_name)
  output_queue_name_.Mutable(index)->assign(std::move(value));
}
inline void ModelRelationDef_ModelQueueInfo::set_output_queue_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_queue_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.output_queue_name)
}
inline void ModelRelationDef_ModelQueueInfo::set_output_queue_name(int index, const char* value, size_t size) {
  output_queue_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.output_queue_name)
}
inline std::string* ModelRelationDef_ModelQueueInfo::_internal_add_output_queue_name() {
  return output_queue_name_.Add();
}
inline void ModelRelationDef_ModelQueueInfo::add_output_queue_name(const std::string& value) {
  output_queue_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.output_queue_name)
}
inline void ModelRelationDef_ModelQueueInfo::add_output_queue_name(std::string&& value) {
  output_queue_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.output_queue_name)
}
inline void ModelRelationDef_ModelQueueInfo::add_output_queue_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_queue_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.output_queue_name)
}
inline void ModelRelationDef_ModelQueueInfo::add_output_queue_name(const char* value, size_t size) {
  output_queue_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.output_queue_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ModelRelationDef_ModelQueueInfo::output_queue_name() const {
  // @@protoc_insertion_point(field_list:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.output_queue_name)
  return output_queue_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ModelRelationDef_ModelQueueInfo::mutable_output_queue_name() {
  // @@protoc_insertion_point(field_mutable_list:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.output_queue_name)
  return &output_queue_name_;
}

// repeated string external_input_queue_name = 4;
inline int ModelRelationDef_ModelQueueInfo::_internal_external_input_queue_name_size() const {
  return external_input_queue_name_.size();
}
inline int ModelRelationDef_ModelQueueInfo::external_input_queue_name_size() const {
  return _internal_external_input_queue_name_size();
}
inline void ModelRelationDef_ModelQueueInfo::clear_external_input_queue_name() {
  external_input_queue_name_.Clear();
}
inline std::string* ModelRelationDef_ModelQueueInfo::add_external_input_queue_name() {
  // @@protoc_insertion_point(field_add_mutable:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.external_input_queue_name)
  return _internal_add_external_input_queue_name();
}
inline const std::string& ModelRelationDef_ModelQueueInfo::_internal_external_input_queue_name(int index) const {
  return external_input_queue_name_.Get(index);
}
inline const std::string& ModelRelationDef_ModelQueueInfo::external_input_queue_name(int index) const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.external_input_queue_name)
  return _internal_external_input_queue_name(index);
}
inline std::string* ModelRelationDef_ModelQueueInfo::mutable_external_input_queue_name(int index) {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.external_input_queue_name)
  return external_input_queue_name_.Mutable(index);
}
inline void ModelRelationDef_ModelQueueInfo::set_external_input_queue_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.external_input_queue_name)
  external_input_queue_name_.Mutable(index)->assign(value);
}
inline void ModelRelationDef_ModelQueueInfo::set_external_input_queue_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.external_input_queue_name)
  external_input_queue_name_.Mutable(index)->assign(std::move(value));
}
inline void ModelRelationDef_ModelQueueInfo::set_external_input_queue_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  external_input_queue_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.external_input_queue_name)
}
inline void ModelRelationDef_ModelQueueInfo::set_external_input_queue_name(int index, const char* value, size_t size) {
  external_input_queue_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.external_input_queue_name)
}
inline std::string* ModelRelationDef_ModelQueueInfo::_internal_add_external_input_queue_name() {
  return external_input_queue_name_.Add();
}
inline void ModelRelationDef_ModelQueueInfo::add_external_input_queue_name(const std::string& value) {
  external_input_queue_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.external_input_queue_name)
}
inline void ModelRelationDef_ModelQueueInfo::add_external_input_queue_name(std::string&& value) {
  external_input_queue_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.external_input_queue_name)
}
inline void ModelRelationDef_ModelQueueInfo::add_external_input_queue_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  external_input_queue_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.external_input_queue_name)
}
inline void ModelRelationDef_ModelQueueInfo::add_external_input_queue_name(const char* value, size_t size) {
  external_input_queue_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.external_input_queue_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ModelRelationDef_ModelQueueInfo::external_input_queue_name() const {
  // @@protoc_insertion_point(field_list:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.external_input_queue_name)
  return external_input_queue_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ModelRelationDef_ModelQueueInfo::mutable_external_input_queue_name() {
  // @@protoc_insertion_point(field_mutable_list:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.external_input_queue_name)
  return &external_input_queue_name_;
}

// repeated string external_output_queue_name = 5;
inline int ModelRelationDef_ModelQueueInfo::_internal_external_output_queue_name_size() const {
  return external_output_queue_name_.size();
}
inline int ModelRelationDef_ModelQueueInfo::external_output_queue_name_size() const {
  return _internal_external_output_queue_name_size();
}
inline void ModelRelationDef_ModelQueueInfo::clear_external_output_queue_name() {
  external_output_queue_name_.Clear();
}
inline std::string* ModelRelationDef_ModelQueueInfo::add_external_output_queue_name() {
  // @@protoc_insertion_point(field_add_mutable:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.external_output_queue_name)
  return _internal_add_external_output_queue_name();
}
inline const std::string& ModelRelationDef_ModelQueueInfo::_internal_external_output_queue_name(int index) const {
  return external_output_queue_name_.Get(index);
}
inline const std::string& ModelRelationDef_ModelQueueInfo::external_output_queue_name(int index) const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.external_output_queue_name)
  return _internal_external_output_queue_name(index);
}
inline std::string* ModelRelationDef_ModelQueueInfo::mutable_external_output_queue_name(int index) {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.external_output_queue_name)
  return external_output_queue_name_.Mutable(index);
}
inline void ModelRelationDef_ModelQueueInfo::set_external_output_queue_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.external_output_queue_name)
  external_output_queue_name_.Mutable(index)->assign(value);
}
inline void ModelRelationDef_ModelQueueInfo::set_external_output_queue_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.external_output_queue_name)
  external_output_queue_name_.Mutable(index)->assign(std::move(value));
}
inline void ModelRelationDef_ModelQueueInfo::set_external_output_queue_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  external_output_queue_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.external_output_queue_name)
}
inline void ModelRelationDef_ModelQueueInfo::set_external_output_queue_name(int index, const char* value, size_t size) {
  external_output_queue_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.external_output_queue_name)
}
inline std::string* ModelRelationDef_ModelQueueInfo::_internal_add_external_output_queue_name() {
  return external_output_queue_name_.Add();
}
inline void ModelRelationDef_ModelQueueInfo::add_external_output_queue_name(const std::string& value) {
  external_output_queue_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.external_output_queue_name)
}
inline void ModelRelationDef_ModelQueueInfo::add_external_output_queue_name(std::string&& value) {
  external_output_queue_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.external_output_queue_name)
}
inline void ModelRelationDef_ModelQueueInfo::add_external_output_queue_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  external_output_queue_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.external_output_queue_name)
}
inline void ModelRelationDef_ModelQueueInfo::add_external_output_queue_name(const char* value, size_t size) {
  external_output_queue_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.external_output_queue_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ModelRelationDef_ModelQueueInfo::external_output_queue_name() const {
  // @@protoc_insertion_point(field_list:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.external_output_queue_name)
  return external_output_queue_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ModelRelationDef_ModelQueueInfo::mutable_external_output_queue_name() {
  // @@protoc_insertion_point(field_mutable_list:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.external_output_queue_name)
  return &external_output_queue_name_;
}

// repeated string invoke_model_key = 6;
inline int ModelRelationDef_ModelQueueInfo::_internal_invoke_model_key_size() const {
  return invoke_model_key_.size();
}
inline int ModelRelationDef_ModelQueueInfo::invoke_model_key_size() const {
  return _internal_invoke_model_key_size();
}
inline void ModelRelationDef_ModelQueueInfo::clear_invoke_model_key() {
  invoke_model_key_.Clear();
}
inline std::string* ModelRelationDef_ModelQueueInfo::add_invoke_model_key() {
  // @@protoc_insertion_point(field_add_mutable:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.invoke_model_key)
  return _internal_add_invoke_model_key();
}
inline const std::string& ModelRelationDef_ModelQueueInfo::_internal_invoke_model_key(int index) const {
  return invoke_model_key_.Get(index);
}
inline const std::string& ModelRelationDef_ModelQueueInfo::invoke_model_key(int index) const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.invoke_model_key)
  return _internal_invoke_model_key(index);
}
inline std::string* ModelRelationDef_ModelQueueInfo::mutable_invoke_model_key(int index) {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.invoke_model_key)
  return invoke_model_key_.Mutable(index);
}
inline void ModelRelationDef_ModelQueueInfo::set_invoke_model_key(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.invoke_model_key)
  invoke_model_key_.Mutable(index)->assign(value);
}
inline void ModelRelationDef_ModelQueueInfo::set_invoke_model_key(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.invoke_model_key)
  invoke_model_key_.Mutable(index)->assign(std::move(value));
}
inline void ModelRelationDef_ModelQueueInfo::set_invoke_model_key(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  invoke_model_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.invoke_model_key)
}
inline void ModelRelationDef_ModelQueueInfo::set_invoke_model_key(int index, const char* value, size_t size) {
  invoke_model_key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.invoke_model_key)
}
inline std::string* ModelRelationDef_ModelQueueInfo::_internal_add_invoke_model_key() {
  return invoke_model_key_.Add();
}
inline void ModelRelationDef_ModelQueueInfo::add_invoke_model_key(const std::string& value) {
  invoke_model_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.invoke_model_key)
}
inline void ModelRelationDef_ModelQueueInfo::add_invoke_model_key(std::string&& value) {
  invoke_model_key_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.invoke_model_key)
}
inline void ModelRelationDef_ModelQueueInfo::add_invoke_model_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  invoke_model_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.invoke_model_key)
}
inline void ModelRelationDef_ModelQueueInfo::add_invoke_model_key(const char* value, size_t size) {
  invoke_model_key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.invoke_model_key)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ModelRelationDef_ModelQueueInfo::invoke_model_key() const {
  // @@protoc_insertion_point(field_list:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.invoke_model_key)
  return invoke_model_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ModelRelationDef_ModelQueueInfo::mutable_invoke_model_key() {
  // @@protoc_insertion_point(field_mutable_list:ge.flow_model.proto.ModelRelationDef.ModelQueueInfo.invoke_model_key)
  return &invoke_model_key_;
}

// -------------------------------------------------------------------

// ModelRelationDef_ModelEndpointInfo

// string model_name = 1;
inline void ModelRelationDef_ModelEndpointInfo::clear_model_name() {
  model_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelRelationDef_ModelEndpointInfo::model_name() const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.model_name)
  return _internal_model_name();
}
inline void ModelRelationDef_ModelEndpointInfo::set_model_name(const std::string& value) {
  _internal_set_model_name(value);
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.model_name)
}
inline std::string* ModelRelationDef_ModelEndpointInfo::mutable_model_name() {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.model_name)
  return _internal_mutable_model_name();
}
inline const std::string& ModelRelationDef_ModelEndpointInfo::_internal_model_name() const {
  return model_name_.Get();
}
inline void ModelRelationDef_ModelEndpointInfo::_internal_set_model_name(const std::string& value) {
  
  model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelRelationDef_ModelEndpointInfo::set_model_name(std::string&& value) {
  
  model_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.model_name)
}
inline void ModelRelationDef_ModelEndpointInfo::set_model_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.model_name)
}
inline void ModelRelationDef_ModelEndpointInfo::set_model_name(const char* value,
    size_t size) {
  
  model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.model_name)
}
inline std::string* ModelRelationDef_ModelEndpointInfo::_internal_mutable_model_name() {
  
  return model_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelRelationDef_ModelEndpointInfo::release_model_name() {
  // @@protoc_insertion_point(field_release:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.model_name)
  return model_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelRelationDef_ModelEndpointInfo::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    
  } else {
    
  }
  model_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.model_name)
}

// repeated string input_endpoint_name = 2;
inline int ModelRelationDef_ModelEndpointInfo::_internal_input_endpoint_name_size() const {
  return input_endpoint_name_.size();
}
inline int ModelRelationDef_ModelEndpointInfo::input_endpoint_name_size() const {
  return _internal_input_endpoint_name_size();
}
inline void ModelRelationDef_ModelEndpointInfo::clear_input_endpoint_name() {
  input_endpoint_name_.Clear();
}
inline std::string* ModelRelationDef_ModelEndpointInfo::add_input_endpoint_name() {
  // @@protoc_insertion_point(field_add_mutable:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.input_endpoint_name)
  return _internal_add_input_endpoint_name();
}
inline const std::string& ModelRelationDef_ModelEndpointInfo::_internal_input_endpoint_name(int index) const {
  return input_endpoint_name_.Get(index);
}
inline const std::string& ModelRelationDef_ModelEndpointInfo::input_endpoint_name(int index) const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.input_endpoint_name)
  return _internal_input_endpoint_name(index);
}
inline std::string* ModelRelationDef_ModelEndpointInfo::mutable_input_endpoint_name(int index) {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.input_endpoint_name)
  return input_endpoint_name_.Mutable(index);
}
inline void ModelRelationDef_ModelEndpointInfo::set_input_endpoint_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.input_endpoint_name)
  input_endpoint_name_.Mutable(index)->assign(value);
}
inline void ModelRelationDef_ModelEndpointInfo::set_input_endpoint_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.input_endpoint_name)
  input_endpoint_name_.Mutable(index)->assign(std::move(value));
}
inline void ModelRelationDef_ModelEndpointInfo::set_input_endpoint_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_endpoint_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.input_endpoint_name)
}
inline void ModelRelationDef_ModelEndpointInfo::set_input_endpoint_name(int index, const char* value, size_t size) {
  input_endpoint_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.input_endpoint_name)
}
inline std::string* ModelRelationDef_ModelEndpointInfo::_internal_add_input_endpoint_name() {
  return input_endpoint_name_.Add();
}
inline void ModelRelationDef_ModelEndpointInfo::add_input_endpoint_name(const std::string& value) {
  input_endpoint_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.input_endpoint_name)
}
inline void ModelRelationDef_ModelEndpointInfo::add_input_endpoint_name(std::string&& value) {
  input_endpoint_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.input_endpoint_name)
}
inline void ModelRelationDef_ModelEndpointInfo::add_input_endpoint_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_endpoint_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.input_endpoint_name)
}
inline void ModelRelationDef_ModelEndpointInfo::add_input_endpoint_name(const char* value, size_t size) {
  input_endpoint_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.input_endpoint_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ModelRelationDef_ModelEndpointInfo::input_endpoint_name() const {
  // @@protoc_insertion_point(field_list:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.input_endpoint_name)
  return input_endpoint_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ModelRelationDef_ModelEndpointInfo::mutable_input_endpoint_name() {
  // @@protoc_insertion_point(field_mutable_list:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.input_endpoint_name)
  return &input_endpoint_name_;
}

// repeated string output_endpoint_name = 3;
inline int ModelRelationDef_ModelEndpointInfo::_internal_output_endpoint_name_size() const {
  return output_endpoint_name_.size();
}
inline int ModelRelationDef_ModelEndpointInfo::output_endpoint_name_size() const {
  return _internal_output_endpoint_name_size();
}
inline void ModelRelationDef_ModelEndpointInfo::clear_output_endpoint_name() {
  output_endpoint_name_.Clear();
}
inline std::string* ModelRelationDef_ModelEndpointInfo::add_output_endpoint_name() {
  // @@protoc_insertion_point(field_add_mutable:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.output_endpoint_name)
  return _internal_add_output_endpoint_name();
}
inline const std::string& ModelRelationDef_ModelEndpointInfo::_internal_output_endpoint_name(int index) const {
  return output_endpoint_name_.Get(index);
}
inline const std::string& ModelRelationDef_ModelEndpointInfo::output_endpoint_name(int index) const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.output_endpoint_name)
  return _internal_output_endpoint_name(index);
}
inline std::string* ModelRelationDef_ModelEndpointInfo::mutable_output_endpoint_name(int index) {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.output_endpoint_name)
  return output_endpoint_name_.Mutable(index);
}
inline void ModelRelationDef_ModelEndpointInfo::set_output_endpoint_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.output_endpoint_name)
  output_endpoint_name_.Mutable(index)->assign(value);
}
inline void ModelRelationDef_ModelEndpointInfo::set_output_endpoint_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.output_endpoint_name)
  output_endpoint_name_.Mutable(index)->assign(std::move(value));
}
inline void ModelRelationDef_ModelEndpointInfo::set_output_endpoint_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_endpoint_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.output_endpoint_name)
}
inline void ModelRelationDef_ModelEndpointInfo::set_output_endpoint_name(int index, const char* value, size_t size) {
  output_endpoint_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.output_endpoint_name)
}
inline std::string* ModelRelationDef_ModelEndpointInfo::_internal_add_output_endpoint_name() {
  return output_endpoint_name_.Add();
}
inline void ModelRelationDef_ModelEndpointInfo::add_output_endpoint_name(const std::string& value) {
  output_endpoint_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.output_endpoint_name)
}
inline void ModelRelationDef_ModelEndpointInfo::add_output_endpoint_name(std::string&& value) {
  output_endpoint_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.output_endpoint_name)
}
inline void ModelRelationDef_ModelEndpointInfo::add_output_endpoint_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_endpoint_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.output_endpoint_name)
}
inline void ModelRelationDef_ModelEndpointInfo::add_output_endpoint_name(const char* value, size_t size) {
  output_endpoint_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.output_endpoint_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ModelRelationDef_ModelEndpointInfo::output_endpoint_name() const {
  // @@protoc_insertion_point(field_list:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.output_endpoint_name)
  return output_endpoint_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ModelRelationDef_ModelEndpointInfo::mutable_output_endpoint_name() {
  // @@protoc_insertion_point(field_mutable_list:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.output_endpoint_name)
  return &output_endpoint_name_;
}

// repeated string external_input_queue_name = 4;
inline int ModelRelationDef_ModelEndpointInfo::_internal_external_input_queue_name_size() const {
  return external_input_queue_name_.size();
}
inline int ModelRelationDef_ModelEndpointInfo::external_input_queue_name_size() const {
  return _internal_external_input_queue_name_size();
}
inline void ModelRelationDef_ModelEndpointInfo::clear_external_input_queue_name() {
  external_input_queue_name_.Clear();
}
inline std::string* ModelRelationDef_ModelEndpointInfo::add_external_input_queue_name() {
  // @@protoc_insertion_point(field_add_mutable:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.external_input_queue_name)
  return _internal_add_external_input_queue_name();
}
inline const std::string& ModelRelationDef_ModelEndpointInfo::_internal_external_input_queue_name(int index) const {
  return external_input_queue_name_.Get(index);
}
inline const std::string& ModelRelationDef_ModelEndpointInfo::external_input_queue_name(int index) const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.external_input_queue_name)
  return _internal_external_input_queue_name(index);
}
inline std::string* ModelRelationDef_ModelEndpointInfo::mutable_external_input_queue_name(int index) {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.external_input_queue_name)
  return external_input_queue_name_.Mutable(index);
}
inline void ModelRelationDef_ModelEndpointInfo::set_external_input_queue_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.external_input_queue_name)
  external_input_queue_name_.Mutable(index)->assign(value);
}
inline void ModelRelationDef_ModelEndpointInfo::set_external_input_queue_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.external_input_queue_name)
  external_input_queue_name_.Mutable(index)->assign(std::move(value));
}
inline void ModelRelationDef_ModelEndpointInfo::set_external_input_queue_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  external_input_queue_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.external_input_queue_name)
}
inline void ModelRelationDef_ModelEndpointInfo::set_external_input_queue_name(int index, const char* value, size_t size) {
  external_input_queue_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.external_input_queue_name)
}
inline std::string* ModelRelationDef_ModelEndpointInfo::_internal_add_external_input_queue_name() {
  return external_input_queue_name_.Add();
}
inline void ModelRelationDef_ModelEndpointInfo::add_external_input_queue_name(const std::string& value) {
  external_input_queue_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.external_input_queue_name)
}
inline void ModelRelationDef_ModelEndpointInfo::add_external_input_queue_name(std::string&& value) {
  external_input_queue_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.external_input_queue_name)
}
inline void ModelRelationDef_ModelEndpointInfo::add_external_input_queue_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  external_input_queue_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.external_input_queue_name)
}
inline void ModelRelationDef_ModelEndpointInfo::add_external_input_queue_name(const char* value, size_t size) {
  external_input_queue_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.external_input_queue_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ModelRelationDef_ModelEndpointInfo::external_input_queue_name() const {
  // @@protoc_insertion_point(field_list:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.external_input_queue_name)
  return external_input_queue_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ModelRelationDef_ModelEndpointInfo::mutable_external_input_queue_name() {
  // @@protoc_insertion_point(field_mutable_list:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.external_input_queue_name)
  return &external_input_queue_name_;
}

// repeated string external_output_queue_name = 5;
inline int ModelRelationDef_ModelEndpointInfo::_internal_external_output_queue_name_size() const {
  return external_output_queue_name_.size();
}
inline int ModelRelationDef_ModelEndpointInfo::external_output_queue_name_size() const {
  return _internal_external_output_queue_name_size();
}
inline void ModelRelationDef_ModelEndpointInfo::clear_external_output_queue_name() {
  external_output_queue_name_.Clear();
}
inline std::string* ModelRelationDef_ModelEndpointInfo::add_external_output_queue_name() {
  // @@protoc_insertion_point(field_add_mutable:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.external_output_queue_name)
  return _internal_add_external_output_queue_name();
}
inline const std::string& ModelRelationDef_ModelEndpointInfo::_internal_external_output_queue_name(int index) const {
  return external_output_queue_name_.Get(index);
}
inline const std::string& ModelRelationDef_ModelEndpointInfo::external_output_queue_name(int index) const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.external_output_queue_name)
  return _internal_external_output_queue_name(index);
}
inline std::string* ModelRelationDef_ModelEndpointInfo::mutable_external_output_queue_name(int index) {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.external_output_queue_name)
  return external_output_queue_name_.Mutable(index);
}
inline void ModelRelationDef_ModelEndpointInfo::set_external_output_queue_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.external_output_queue_name)
  external_output_queue_name_.Mutable(index)->assign(value);
}
inline void ModelRelationDef_ModelEndpointInfo::set_external_output_queue_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.external_output_queue_name)
  external_output_queue_name_.Mutable(index)->assign(std::move(value));
}
inline void ModelRelationDef_ModelEndpointInfo::set_external_output_queue_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  external_output_queue_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.external_output_queue_name)
}
inline void ModelRelationDef_ModelEndpointInfo::set_external_output_queue_name(int index, const char* value, size_t size) {
  external_output_queue_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.external_output_queue_name)
}
inline std::string* ModelRelationDef_ModelEndpointInfo::_internal_add_external_output_queue_name() {
  return external_output_queue_name_.Add();
}
inline void ModelRelationDef_ModelEndpointInfo::add_external_output_queue_name(const std::string& value) {
  external_output_queue_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.external_output_queue_name)
}
inline void ModelRelationDef_ModelEndpointInfo::add_external_output_queue_name(std::string&& value) {
  external_output_queue_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.external_output_queue_name)
}
inline void ModelRelationDef_ModelEndpointInfo::add_external_output_queue_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  external_output_queue_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.external_output_queue_name)
}
inline void ModelRelationDef_ModelEndpointInfo::add_external_output_queue_name(const char* value, size_t size) {
  external_output_queue_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.external_output_queue_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ModelRelationDef_ModelEndpointInfo::external_output_queue_name() const {
  // @@protoc_insertion_point(field_list:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.external_output_queue_name)
  return external_output_queue_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ModelRelationDef_ModelEndpointInfo::mutable_external_output_queue_name() {
  // @@protoc_insertion_point(field_mutable_list:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.external_output_queue_name)
  return &external_output_queue_name_;
}

// repeated string event_input_name = 6;
inline int ModelRelationDef_ModelEndpointInfo::_internal_event_input_name_size() const {
  return event_input_name_.size();
}
inline int ModelRelationDef_ModelEndpointInfo::event_input_name_size() const {
  return _internal_event_input_name_size();
}
inline void ModelRelationDef_ModelEndpointInfo::clear_event_input_name() {
  event_input_name_.Clear();
}
inline std::string* ModelRelationDef_ModelEndpointInfo::add_event_input_name() {
  // @@protoc_insertion_point(field_add_mutable:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.event_input_name)
  return _internal_add_event_input_name();
}
inline const std::string& ModelRelationDef_ModelEndpointInfo::_internal_event_input_name(int index) const {
  return event_input_name_.Get(index);
}
inline const std::string& ModelRelationDef_ModelEndpointInfo::event_input_name(int index) const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.event_input_name)
  return _internal_event_input_name(index);
}
inline std::string* ModelRelationDef_ModelEndpointInfo::mutable_event_input_name(int index) {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.event_input_name)
  return event_input_name_.Mutable(index);
}
inline void ModelRelationDef_ModelEndpointInfo::set_event_input_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.event_input_name)
  event_input_name_.Mutable(index)->assign(value);
}
inline void ModelRelationDef_ModelEndpointInfo::set_event_input_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.event_input_name)
  event_input_name_.Mutable(index)->assign(std::move(value));
}
inline void ModelRelationDef_ModelEndpointInfo::set_event_input_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  event_input_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.event_input_name)
}
inline void ModelRelationDef_ModelEndpointInfo::set_event_input_name(int index, const char* value, size_t size) {
  event_input_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.event_input_name)
}
inline std::string* ModelRelationDef_ModelEndpointInfo::_internal_add_event_input_name() {
  return event_input_name_.Add();
}
inline void ModelRelationDef_ModelEndpointInfo::add_event_input_name(const std::string& value) {
  event_input_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.event_input_name)
}
inline void ModelRelationDef_ModelEndpointInfo::add_event_input_name(std::string&& value) {
  event_input_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.event_input_name)
}
inline void ModelRelationDef_ModelEndpointInfo::add_event_input_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  event_input_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.event_input_name)
}
inline void ModelRelationDef_ModelEndpointInfo::add_event_input_name(const char* value, size_t size) {
  event_input_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.event_input_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ModelRelationDef_ModelEndpointInfo::event_input_name() const {
  // @@protoc_insertion_point(field_list:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.event_input_name)
  return event_input_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ModelRelationDef_ModelEndpointInfo::mutable_event_input_name() {
  // @@protoc_insertion_point(field_mutable_list:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.event_input_name)
  return &event_input_name_;
}

// repeated string event_output_name = 7;
inline int ModelRelationDef_ModelEndpointInfo::_internal_event_output_name_size() const {
  return event_output_name_.size();
}
inline int ModelRelationDef_ModelEndpointInfo::event_output_name_size() const {
  return _internal_event_output_name_size();
}
inline void ModelRelationDef_ModelEndpointInfo::clear_event_output_name() {
  event_output_name_.Clear();
}
inline std::string* ModelRelationDef_ModelEndpointInfo::add_event_output_name() {
  // @@protoc_insertion_point(field_add_mutable:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.event_output_name)
  return _internal_add_event_output_name();
}
inline const std::string& ModelRelationDef_ModelEndpointInfo::_internal_event_output_name(int index) const {
  return event_output_name_.Get(index);
}
inline const std::string& ModelRelationDef_ModelEndpointInfo::event_output_name(int index) const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.event_output_name)
  return _internal_event_output_name(index);
}
inline std::string* ModelRelationDef_ModelEndpointInfo::mutable_event_output_name(int index) {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.event_output_name)
  return event_output_name_.Mutable(index);
}
inline void ModelRelationDef_ModelEndpointInfo::set_event_output_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.event_output_name)
  event_output_name_.Mutable(index)->assign(value);
}
inline void ModelRelationDef_ModelEndpointInfo::set_event_output_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.event_output_name)
  event_output_name_.Mutable(index)->assign(std::move(value));
}
inline void ModelRelationDef_ModelEndpointInfo::set_event_output_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  event_output_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.event_output_name)
}
inline void ModelRelationDef_ModelEndpointInfo::set_event_output_name(int index, const char* value, size_t size) {
  event_output_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.event_output_name)
}
inline std::string* ModelRelationDef_ModelEndpointInfo::_internal_add_event_output_name() {
  return event_output_name_.Add();
}
inline void ModelRelationDef_ModelEndpointInfo::add_event_output_name(const std::string& value) {
  event_output_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.event_output_name)
}
inline void ModelRelationDef_ModelEndpointInfo::add_event_output_name(std::string&& value) {
  event_output_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.event_output_name)
}
inline void ModelRelationDef_ModelEndpointInfo::add_event_output_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  event_output_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.event_output_name)
}
inline void ModelRelationDef_ModelEndpointInfo::add_event_output_name(const char* value, size_t size) {
  event_output_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.event_output_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ModelRelationDef_ModelEndpointInfo::event_output_name() const {
  // @@protoc_insertion_point(field_list:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.event_output_name)
  return event_output_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ModelRelationDef_ModelEndpointInfo::mutable_event_output_name() {
  // @@protoc_insertion_point(field_mutable_list:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.event_output_name)
  return &event_output_name_;
}

// repeated string invoke_model_key = 8;
inline int ModelRelationDef_ModelEndpointInfo::_internal_invoke_model_key_size() const {
  return invoke_model_key_.size();
}
inline int ModelRelationDef_ModelEndpointInfo::invoke_model_key_size() const {
  return _internal_invoke_model_key_size();
}
inline void ModelRelationDef_ModelEndpointInfo::clear_invoke_model_key() {
  invoke_model_key_.Clear();
}
inline std::string* ModelRelationDef_ModelEndpointInfo::add_invoke_model_key() {
  // @@protoc_insertion_point(field_add_mutable:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.invoke_model_key)
  return _internal_add_invoke_model_key();
}
inline const std::string& ModelRelationDef_ModelEndpointInfo::_internal_invoke_model_key(int index) const {
  return invoke_model_key_.Get(index);
}
inline const std::string& ModelRelationDef_ModelEndpointInfo::invoke_model_key(int index) const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.invoke_model_key)
  return _internal_invoke_model_key(index);
}
inline std::string* ModelRelationDef_ModelEndpointInfo::mutable_invoke_model_key(int index) {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.invoke_model_key)
  return invoke_model_key_.Mutable(index);
}
inline void ModelRelationDef_ModelEndpointInfo::set_invoke_model_key(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.invoke_model_key)
  invoke_model_key_.Mutable(index)->assign(value);
}
inline void ModelRelationDef_ModelEndpointInfo::set_invoke_model_key(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.invoke_model_key)
  invoke_model_key_.Mutable(index)->assign(std::move(value));
}
inline void ModelRelationDef_ModelEndpointInfo::set_invoke_model_key(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  invoke_model_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.invoke_model_key)
}
inline void ModelRelationDef_ModelEndpointInfo::set_invoke_model_key(int index, const char* value, size_t size) {
  invoke_model_key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.invoke_model_key)
}
inline std::string* ModelRelationDef_ModelEndpointInfo::_internal_add_invoke_model_key() {
  return invoke_model_key_.Add();
}
inline void ModelRelationDef_ModelEndpointInfo::add_invoke_model_key(const std::string& value) {
  invoke_model_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.invoke_model_key)
}
inline void ModelRelationDef_ModelEndpointInfo::add_invoke_model_key(std::string&& value) {
  invoke_model_key_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.invoke_model_key)
}
inline void ModelRelationDef_ModelEndpointInfo::add_invoke_model_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  invoke_model_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.invoke_model_key)
}
inline void ModelRelationDef_ModelEndpointInfo::add_invoke_model_key(const char* value, size_t size) {
  invoke_model_key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.invoke_model_key)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ModelRelationDef_ModelEndpointInfo::invoke_model_key() const {
  // @@protoc_insertion_point(field_list:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.invoke_model_key)
  return invoke_model_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ModelRelationDef_ModelEndpointInfo::mutable_invoke_model_key() {
  // @@protoc_insertion_point(field_mutable_list:ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo.invoke_model_key)
  return &invoke_model_key_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ModelRelationDef

// repeated .ge.flow_model.proto.ModelRelationDef.QueueDef queue_def = 1;
inline int ModelRelationDef::_internal_queue_def_size() const {
  return queue_def_.size();
}
inline int ModelRelationDef::queue_def_size() const {
  return _internal_queue_def_size();
}
inline void ModelRelationDef::clear_queue_def() {
  queue_def_.Clear();
}
inline ::ge::flow_model::proto::ModelRelationDef_QueueDef* ModelRelationDef::mutable_queue_def(int index) {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.ModelRelationDef.queue_def)
  return queue_def_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::flow_model::proto::ModelRelationDef_QueueDef >*
ModelRelationDef::mutable_queue_def() {
  // @@protoc_insertion_point(field_mutable_list:ge.flow_model.proto.ModelRelationDef.queue_def)
  return &queue_def_;
}
inline const ::ge::flow_model::proto::ModelRelationDef_QueueDef& ModelRelationDef::_internal_queue_def(int index) const {
  return queue_def_.Get(index);
}
inline const ::ge::flow_model::proto::ModelRelationDef_QueueDef& ModelRelationDef::queue_def(int index) const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.ModelRelationDef.queue_def)
  return _internal_queue_def(index);
}
inline ::ge::flow_model::proto::ModelRelationDef_QueueDef* ModelRelationDef::_internal_add_queue_def() {
  return queue_def_.Add();
}
inline ::ge::flow_model::proto::ModelRelationDef_QueueDef* ModelRelationDef::add_queue_def() {
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.ModelRelationDef.queue_def)
  return _internal_add_queue_def();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::flow_model::proto::ModelRelationDef_QueueDef >&
ModelRelationDef::queue_def() const {
  // @@protoc_insertion_point(field_list:ge.flow_model.proto.ModelRelationDef.queue_def)
  return queue_def_;
}

// map<string, .ge.flow_model.proto.ModelRelationDef.ModelQueueInfo> submodel_queue_info = 2;
inline int ModelRelationDef::_internal_submodel_queue_info_size() const {
  return submodel_queue_info_.size();
}
inline int ModelRelationDef::submodel_queue_info_size() const {
  return _internal_submodel_queue_info_size();
}
inline void ModelRelationDef::clear_submodel_queue_info() {
  submodel_queue_info_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo >&
ModelRelationDef::_internal_submodel_queue_info() const {
  return submodel_queue_info_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo >&
ModelRelationDef::submodel_queue_info() const {
  // @@protoc_insertion_point(field_map:ge.flow_model.proto.ModelRelationDef.submodel_queue_info)
  return _internal_submodel_queue_info();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo >*
ModelRelationDef::_internal_mutable_submodel_queue_info() {
  return submodel_queue_info_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo >*
ModelRelationDef::mutable_submodel_queue_info() {
  // @@protoc_insertion_point(field_mutable_map:ge.flow_model.proto.ModelRelationDef.submodel_queue_info)
  return _internal_mutable_submodel_queue_info();
}

// map<string, .ge.flow_model.proto.ModelRelationDef.InvokedModelQueueInfo> invoked_model_queue_info = 3;
inline int ModelRelationDef::_internal_invoked_model_queue_info_size() const {
  return invoked_model_queue_info_.size();
}
inline int ModelRelationDef::invoked_model_queue_info_size() const {
  return _internal_invoked_model_queue_info_size();
}
inline void ModelRelationDef::clear_invoked_model_queue_info() {
  invoked_model_queue_info_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfo >&
ModelRelationDef::_internal_invoked_model_queue_info() const {
  return invoked_model_queue_info_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfo >&
ModelRelationDef::invoked_model_queue_info() const {
  // @@protoc_insertion_point(field_map:ge.flow_model.proto.ModelRelationDef.invoked_model_queue_info)
  return _internal_invoked_model_queue_info();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfo >*
ModelRelationDef::_internal_mutable_invoked_model_queue_info() {
  return invoked_model_queue_info_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_InvokedModelQueueInfo >*
ModelRelationDef::mutable_invoked_model_queue_info() {
  // @@protoc_insertion_point(field_mutable_map:ge.flow_model.proto.ModelRelationDef.invoked_model_queue_info)
  return _internal_mutable_invoked_model_queue_info();
}

// .ge.flow_model.proto.ModelRelationDef.ModelQueueInfo root_model_queue_info = 4;
inline bool ModelRelationDef::_internal_has_root_model_queue_info() const {
  return this != internal_default_instance() && root_model_queue_info_ != nullptr;
}
inline bool ModelRelationDef::has_root_model_queue_info() const {
  return _internal_has_root_model_queue_info();
}
inline void ModelRelationDef::clear_root_model_queue_info() {
  if (GetArena() == nullptr && root_model_queue_info_ != nullptr) {
    delete root_model_queue_info_;
  }
  root_model_queue_info_ = nullptr;
}
inline const ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo& ModelRelationDef::_internal_root_model_queue_info() const {
  const ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo* p = root_model_queue_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo*>(
      &::ge::flow_model::proto::_ModelRelationDef_ModelQueueInfo_default_instance_);
}
inline const ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo& ModelRelationDef::root_model_queue_info() const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.ModelRelationDef.root_model_queue_info)
  return _internal_root_model_queue_info();
}
inline void ModelRelationDef::unsafe_arena_set_allocated_root_model_queue_info(
    ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo* root_model_queue_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(root_model_queue_info_);
  }
  root_model_queue_info_ = root_model_queue_info;
  if (root_model_queue_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ge.flow_model.proto.ModelRelationDef.root_model_queue_info)
}
inline ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo* ModelRelationDef::release_root_model_queue_info() {
  
  ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo* temp = root_model_queue_info_;
  root_model_queue_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo* ModelRelationDef::unsafe_arena_release_root_model_queue_info() {
  // @@protoc_insertion_point(field_release:ge.flow_model.proto.ModelRelationDef.root_model_queue_info)
  
  ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo* temp = root_model_queue_info_;
  root_model_queue_info_ = nullptr;
  return temp;
}
inline ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo* ModelRelationDef::_internal_mutable_root_model_queue_info() {
  
  if (root_model_queue_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo>(GetArena());
    root_model_queue_info_ = p;
  }
  return root_model_queue_info_;
}
inline ::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo* ModelRelationDef::mutable_root_model_queue_info() {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.ModelRelationDef.root_model_queue_info)
  return _internal_mutable_root_model_queue_info();
}
inline void ModelRelationDef::set_allocated_root_model_queue_info(::ge::flow_model::proto::ModelRelationDef_ModelQueueInfo* root_model_queue_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete root_model_queue_info_;
  }
  if (root_model_queue_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(root_model_queue_info);
    if (message_arena != submessage_arena) {
      root_model_queue_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root_model_queue_info, submessage_arena);
    }
    
  } else {
    
  }
  root_model_queue_info_ = root_model_queue_info;
  // @@protoc_insertion_point(field_set_allocated:ge.flow_model.proto.ModelRelationDef.root_model_queue_info)
}

// repeated .ge.flow_model.proto.ModelRelationDef.Endpoint endpoint = 5;
inline int ModelRelationDef::_internal_endpoint_size() const {
  return endpoint_.size();
}
inline int ModelRelationDef::endpoint_size() const {
  return _internal_endpoint_size();
}
inline void ModelRelationDef::clear_endpoint() {
  endpoint_.Clear();
}
inline ::ge::flow_model::proto::ModelRelationDef_Endpoint* ModelRelationDef::mutable_endpoint(int index) {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.ModelRelationDef.endpoint)
  return endpoint_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::flow_model::proto::ModelRelationDef_Endpoint >*
ModelRelationDef::mutable_endpoint() {
  // @@protoc_insertion_point(field_mutable_list:ge.flow_model.proto.ModelRelationDef.endpoint)
  return &endpoint_;
}
inline const ::ge::flow_model::proto::ModelRelationDef_Endpoint& ModelRelationDef::_internal_endpoint(int index) const {
  return endpoint_.Get(index);
}
inline const ::ge::flow_model::proto::ModelRelationDef_Endpoint& ModelRelationDef::endpoint(int index) const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.ModelRelationDef.endpoint)
  return _internal_endpoint(index);
}
inline ::ge::flow_model::proto::ModelRelationDef_Endpoint* ModelRelationDef::_internal_add_endpoint() {
  return endpoint_.Add();
}
inline ::ge::flow_model::proto::ModelRelationDef_Endpoint* ModelRelationDef::add_endpoint() {
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.ModelRelationDef.endpoint)
  return _internal_add_endpoint();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::flow_model::proto::ModelRelationDef_Endpoint >&
ModelRelationDef::endpoint() const {
  // @@protoc_insertion_point(field_list:ge.flow_model.proto.ModelRelationDef.endpoint)
  return endpoint_;
}

// map<string, .ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo> submodel_endpoint_info = 6;
inline int ModelRelationDef::_internal_submodel_endpoint_info_size() const {
  return submodel_endpoint_info_.size();
}
inline int ModelRelationDef::submodel_endpoint_info_size() const {
  return _internal_submodel_endpoint_info_size();
}
inline void ModelRelationDef::clear_submodel_endpoint_info() {
  submodel_endpoint_info_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo >&
ModelRelationDef::_internal_submodel_endpoint_info() const {
  return submodel_endpoint_info_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo >&
ModelRelationDef::submodel_endpoint_info() const {
  // @@protoc_insertion_point(field_map:ge.flow_model.proto.ModelRelationDef.submodel_endpoint_info)
  return _internal_submodel_endpoint_info();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo >*
ModelRelationDef::_internal_mutable_submodel_endpoint_info() {
  return submodel_endpoint_info_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo >*
ModelRelationDef::mutable_submodel_endpoint_info() {
  // @@protoc_insertion_point(field_mutable_map:ge.flow_model.proto.ModelRelationDef.submodel_endpoint_info)
  return _internal_mutable_submodel_endpoint_info();
}

// .ge.flow_model.proto.ModelRelationDef.ModelEndpointInfo root_model_endpoint_info = 7;
inline bool ModelRelationDef::_internal_has_root_model_endpoint_info() const {
  return this != internal_default_instance() && root_model_endpoint_info_ != nullptr;
}
inline bool ModelRelationDef::has_root_model_endpoint_info() const {
  return _internal_has_root_model_endpoint_info();
}
inline void ModelRelationDef::clear_root_model_endpoint_info() {
  if (GetArena() == nullptr && root_model_endpoint_info_ != nullptr) {
    delete root_model_endpoint_info_;
  }
  root_model_endpoint_info_ = nullptr;
}
inline const ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo& ModelRelationDef::_internal_root_model_endpoint_info() const {
  const ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo* p = root_model_endpoint_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo*>(
      &::ge::flow_model::proto::_ModelRelationDef_ModelEndpointInfo_default_instance_);
}
inline const ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo& ModelRelationDef::root_model_endpoint_info() const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.ModelRelationDef.root_model_endpoint_info)
  return _internal_root_model_endpoint_info();
}
inline void ModelRelationDef::unsafe_arena_set_allocated_root_model_endpoint_info(
    ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo* root_model_endpoint_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(root_model_endpoint_info_);
  }
  root_model_endpoint_info_ = root_model_endpoint_info;
  if (root_model_endpoint_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ge.flow_model.proto.ModelRelationDef.root_model_endpoint_info)
}
inline ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo* ModelRelationDef::release_root_model_endpoint_info() {
  
  ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo* temp = root_model_endpoint_info_;
  root_model_endpoint_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo* ModelRelationDef::unsafe_arena_release_root_model_endpoint_info() {
  // @@protoc_insertion_point(field_release:ge.flow_model.proto.ModelRelationDef.root_model_endpoint_info)
  
  ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo* temp = root_model_endpoint_info_;
  root_model_endpoint_info_ = nullptr;
  return temp;
}
inline ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo* ModelRelationDef::_internal_mutable_root_model_endpoint_info() {
  
  if (root_model_endpoint_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo>(GetArena());
    root_model_endpoint_info_ = p;
  }
  return root_model_endpoint_info_;
}
inline ::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo* ModelRelationDef::mutable_root_model_endpoint_info() {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.ModelRelationDef.root_model_endpoint_info)
  return _internal_mutable_root_model_endpoint_info();
}
inline void ModelRelationDef::set_allocated_root_model_endpoint_info(::ge::flow_model::proto::ModelRelationDef_ModelEndpointInfo* root_model_endpoint_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete root_model_endpoint_info_;
  }
  if (root_model_endpoint_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(root_model_endpoint_info);
    if (message_arena != submessage_arena) {
      root_model_endpoint_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root_model_endpoint_info, submessage_arena);
    }
    
  } else {
    
  }
  root_model_endpoint_info_ = root_model_endpoint_info;
  // @@protoc_insertion_point(field_set_allocated:ge.flow_model.proto.ModelRelationDef.root_model_endpoint_info)
}

// -------------------------------------------------------------------

// RunningResource

// string type = 1;
inline void RunningResource::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RunningResource::type() const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.RunningResource.type)
  return _internal_type();
}
inline void RunningResource::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.RunningResource.type)
}
inline std::string* RunningResource::mutable_type() {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.RunningResource.type)
  return _internal_mutable_type();
}
inline const std::string& RunningResource::_internal_type() const {
  return type_.Get();
}
inline void RunningResource::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RunningResource::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ge.flow_model.proto.RunningResource.type)
}
inline void RunningResource::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ge.flow_model.proto.RunningResource.type)
}
inline void RunningResource::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ge.flow_model.proto.RunningResource.type)
}
inline std::string* RunningResource::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RunningResource::release_type() {
  // @@protoc_insertion_point(field_release:ge.flow_model.proto.RunningResource.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RunningResource::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ge.flow_model.proto.RunningResource.type)
}

// int64 num = 2;
inline void RunningResource::clear_num() {
  num_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RunningResource::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RunningResource::num() const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.RunningResource.num)
  return _internal_num();
}
inline void RunningResource::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_ = value;
}
inline void RunningResource::set_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.RunningResource.num)
}

// -------------------------------------------------------------------

// ModelDeployResource

// string resource_type = 1;
inline void ModelDeployResource::clear_resource_type() {
  resource_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelDeployResource::resource_type() const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.ModelDeployResource.resource_type)
  return _internal_resource_type();
}
inline void ModelDeployResource::set_resource_type(const std::string& value) {
  _internal_set_resource_type(value);
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelDeployResource.resource_type)
}
inline std::string* ModelDeployResource::mutable_resource_type() {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.ModelDeployResource.resource_type)
  return _internal_mutable_resource_type();
}
inline const std::string& ModelDeployResource::_internal_resource_type() const {
  return resource_type_.Get();
}
inline void ModelDeployResource::_internal_set_resource_type(const std::string& value) {
  
  resource_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelDeployResource::set_resource_type(std::string&& value) {
  
  resource_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ge.flow_model.proto.ModelDeployResource.resource_type)
}
inline void ModelDeployResource::set_resource_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resource_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ge.flow_model.proto.ModelDeployResource.resource_type)
}
inline void ModelDeployResource::set_resource_type(const char* value,
    size_t size) {
  
  resource_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ge.flow_model.proto.ModelDeployResource.resource_type)
}
inline std::string* ModelDeployResource::_internal_mutable_resource_type() {
  
  return resource_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelDeployResource::release_resource_type() {
  // @@protoc_insertion_point(field_release:ge.flow_model.proto.ModelDeployResource.resource_type)
  return resource_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelDeployResource::set_allocated_resource_type(std::string* resource_type) {
  if (resource_type != nullptr) {
    
  } else {
    
  }
  resource_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resource_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ge.flow_model.proto.ModelDeployResource.resource_type)
}

// repeated .ge.flow_model.proto.RunningResource running_resource = 2;
inline int ModelDeployResource::_internal_running_resource_size() const {
  return running_resource_.size();
}
inline int ModelDeployResource::running_resource_size() const {
  return _internal_running_resource_size();
}
inline void ModelDeployResource::clear_running_resource() {
  running_resource_.Clear();
}
inline ::ge::flow_model::proto::RunningResource* ModelDeployResource::mutable_running_resource(int index) {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.ModelDeployResource.running_resource)
  return running_resource_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::flow_model::proto::RunningResource >*
ModelDeployResource::mutable_running_resource() {
  // @@protoc_insertion_point(field_mutable_list:ge.flow_model.proto.ModelDeployResource.running_resource)
  return &running_resource_;
}
inline const ::ge::flow_model::proto::RunningResource& ModelDeployResource::_internal_running_resource(int index) const {
  return running_resource_.Get(index);
}
inline const ::ge::flow_model::proto::RunningResource& ModelDeployResource::running_resource(int index) const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.ModelDeployResource.running_resource)
  return _internal_running_resource(index);
}
inline ::ge::flow_model::proto::RunningResource* ModelDeployResource::_internal_add_running_resource() {
  return running_resource_.Add();
}
inline ::ge::flow_model::proto::RunningResource* ModelDeployResource::add_running_resource() {
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.ModelDeployResource.running_resource)
  return _internal_add_running_resource();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::flow_model::proto::RunningResource >&
ModelDeployResource::running_resource() const {
  // @@protoc_insertion_point(field_list:ge.flow_model.proto.ModelDeployResource.running_resource)
  return running_resource_;
}

// -------------------------------------------------------------------

// ModelDeployInfo

// string logic_device_id = 1;
inline void ModelDeployInfo::clear_logic_device_id() {
  logic_device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelDeployInfo::logic_device_id() const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.ModelDeployInfo.logic_device_id)
  return _internal_logic_device_id();
}
inline void ModelDeployInfo::set_logic_device_id(const std::string& value) {
  _internal_set_logic_device_id(value);
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.ModelDeployInfo.logic_device_id)
}
inline std::string* ModelDeployInfo::mutable_logic_device_id() {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.ModelDeployInfo.logic_device_id)
  return _internal_mutable_logic_device_id();
}
inline const std::string& ModelDeployInfo::_internal_logic_device_id() const {
  return logic_device_id_.Get();
}
inline void ModelDeployInfo::_internal_set_logic_device_id(const std::string& value) {
  
  logic_device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelDeployInfo::set_logic_device_id(std::string&& value) {
  
  logic_device_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ge.flow_model.proto.ModelDeployInfo.logic_device_id)
}
inline void ModelDeployInfo::set_logic_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  logic_device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ge.flow_model.proto.ModelDeployInfo.logic_device_id)
}
inline void ModelDeployInfo::set_logic_device_id(const char* value,
    size_t size) {
  
  logic_device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ge.flow_model.proto.ModelDeployInfo.logic_device_id)
}
inline std::string* ModelDeployInfo::_internal_mutable_logic_device_id() {
  
  return logic_device_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelDeployInfo::release_logic_device_id() {
  // @@protoc_insertion_point(field_release:ge.flow_model.proto.ModelDeployInfo.logic_device_id)
  return logic_device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelDeployInfo::set_allocated_logic_device_id(std::string* logic_device_id) {
  if (logic_device_id != nullptr) {
    
  } else {
    
  }
  logic_device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logic_device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ge.flow_model.proto.ModelDeployInfo.logic_device_id)
}

// -------------------------------------------------------------------

// SubmodelDef

// string model_name = 1;
inline void SubmodelDef::clear_model_name() {
  model_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubmodelDef::model_name() const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.SubmodelDef.model_name)
  return _internal_model_name();
}
inline void SubmodelDef::set_model_name(const std::string& value) {
  _internal_set_model_name(value);
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.SubmodelDef.model_name)
}
inline std::string* SubmodelDef::mutable_model_name() {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.SubmodelDef.model_name)
  return _internal_mutable_model_name();
}
inline const std::string& SubmodelDef::_internal_model_name() const {
  return model_name_.Get();
}
inline void SubmodelDef::_internal_set_model_name(const std::string& value) {
  
  model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubmodelDef::set_model_name(std::string&& value) {
  
  model_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ge.flow_model.proto.SubmodelDef.model_name)
}
inline void SubmodelDef::set_model_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ge.flow_model.proto.SubmodelDef.model_name)
}
inline void SubmodelDef::set_model_name(const char* value,
    size_t size) {
  
  model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ge.flow_model.proto.SubmodelDef.model_name)
}
inline std::string* SubmodelDef::_internal_mutable_model_name() {
  
  return model_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubmodelDef::release_model_name() {
  // @@protoc_insertion_point(field_release:ge.flow_model.proto.SubmodelDef.model_name)
  return model_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubmodelDef::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    
  } else {
    
  }
  model_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ge.flow_model.proto.SubmodelDef.model_name)
}

// string model_type = 2;
inline void SubmodelDef::clear_model_type() {
  model_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubmodelDef::model_type() const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.SubmodelDef.model_type)
  return _internal_model_type();
}
inline void SubmodelDef::set_model_type(const std::string& value) {
  _internal_set_model_type(value);
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.SubmodelDef.model_type)
}
inline std::string* SubmodelDef::mutable_model_type() {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.SubmodelDef.model_type)
  return _internal_mutable_model_type();
}
inline const std::string& SubmodelDef::_internal_model_type() const {
  return model_type_.Get();
}
inline void SubmodelDef::_internal_set_model_type(const std::string& value) {
  
  model_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubmodelDef::set_model_type(std::string&& value) {
  
  model_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ge.flow_model.proto.SubmodelDef.model_type)
}
inline void SubmodelDef::set_model_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ge.flow_model.proto.SubmodelDef.model_type)
}
inline void SubmodelDef::set_model_type(const char* value,
    size_t size) {
  
  model_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ge.flow_model.proto.SubmodelDef.model_type)
}
inline std::string* SubmodelDef::_internal_mutable_model_type() {
  
  return model_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubmodelDef::release_model_type() {
  // @@protoc_insertion_point(field_release:ge.flow_model.proto.SubmodelDef.model_type)
  return model_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubmodelDef::set_allocated_model_type(std::string* model_type) {
  if (model_type != nullptr) {
    
  } else {
    
  }
  model_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ge.flow_model.proto.SubmodelDef.model_type)
}

// bytes om_data = 3;
inline void SubmodelDef::clear_om_data() {
  om_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubmodelDef::om_data() const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.SubmodelDef.om_data)
  return _internal_om_data();
}
inline void SubmodelDef::set_om_data(const std::string& value) {
  _internal_set_om_data(value);
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.SubmodelDef.om_data)
}
inline std::string* SubmodelDef::mutable_om_data() {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.SubmodelDef.om_data)
  return _internal_mutable_om_data();
}
inline const std::string& SubmodelDef::_internal_om_data() const {
  return om_data_.Get();
}
inline void SubmodelDef::_internal_set_om_data(const std::string& value) {
  
  om_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubmodelDef::set_om_data(std::string&& value) {
  
  om_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ge.flow_model.proto.SubmodelDef.om_data)
}
inline void SubmodelDef::set_om_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  om_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ge.flow_model.proto.SubmodelDef.om_data)
}
inline void SubmodelDef::set_om_data(const void* value,
    size_t size) {
  
  om_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ge.flow_model.proto.SubmodelDef.om_data)
}
inline std::string* SubmodelDef::_internal_mutable_om_data() {
  
  return om_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubmodelDef::release_om_data() {
  // @@protoc_insertion_point(field_release:ge.flow_model.proto.SubmodelDef.om_data)
  return om_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubmodelDef::set_allocated_om_data(std::string* om_data) {
  if (om_data != nullptr) {
    
  } else {
    
  }
  om_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), om_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ge.flow_model.proto.SubmodelDef.om_data)
}

// .ge.proto.GraphDef graph = 4;
inline bool SubmodelDef::_internal_has_graph() const {
  return this != internal_default_instance() && graph_ != nullptr;
}
inline bool SubmodelDef::has_graph() const {
  return _internal_has_graph();
}
inline const ::ge::proto::GraphDef& SubmodelDef::_internal_graph() const {
  const ::ge::proto::GraphDef* p = graph_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ge::proto::GraphDef*>(
      &::ge::proto::_GraphDef_default_instance_);
}
inline const ::ge::proto::GraphDef& SubmodelDef::graph() const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.SubmodelDef.graph)
  return _internal_graph();
}
inline void SubmodelDef::unsafe_arena_set_allocated_graph(
    ::ge::proto::GraphDef* graph) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_);
  }
  graph_ = graph;
  if (graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ge.flow_model.proto.SubmodelDef.graph)
}
inline ::ge::proto::GraphDef* SubmodelDef::release_graph() {
  
  ::ge::proto::GraphDef* temp = graph_;
  graph_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ge::proto::GraphDef* SubmodelDef::unsafe_arena_release_graph() {
  // @@protoc_insertion_point(field_release:ge.flow_model.proto.SubmodelDef.graph)
  
  ::ge::proto::GraphDef* temp = graph_;
  graph_ = nullptr;
  return temp;
}
inline ::ge::proto::GraphDef* SubmodelDef::_internal_mutable_graph() {
  
  if (graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::ge::proto::GraphDef>(GetArena());
    graph_ = p;
  }
  return graph_;
}
inline ::ge::proto::GraphDef* SubmodelDef::mutable_graph() {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.SubmodelDef.graph)
  return _internal_mutable_graph();
}
inline void SubmodelDef::set_allocated_graph(::ge::proto::GraphDef* graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_);
  }
  if (graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph)->GetArena();
    if (message_arena != submessage_arena) {
      graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph, submessage_arena);
    }
    
  } else {
    
  }
  graph_ = graph;
  // @@protoc_insertion_point(field_set_allocated:ge.flow_model.proto.SubmodelDef.graph)
}

// .ge.flow_model.proto.ModelDeployResource deploy_resource = 5;
inline bool SubmodelDef::_internal_has_deploy_resource() const {
  return this != internal_default_instance() && deploy_resource_ != nullptr;
}
inline bool SubmodelDef::has_deploy_resource() const {
  return _internal_has_deploy_resource();
}
inline void SubmodelDef::clear_deploy_resource() {
  if (GetArena() == nullptr && deploy_resource_ != nullptr) {
    delete deploy_resource_;
  }
  deploy_resource_ = nullptr;
}
inline const ::ge::flow_model::proto::ModelDeployResource& SubmodelDef::_internal_deploy_resource() const {
  const ::ge::flow_model::proto::ModelDeployResource* p = deploy_resource_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ge::flow_model::proto::ModelDeployResource*>(
      &::ge::flow_model::proto::_ModelDeployResource_default_instance_);
}
inline const ::ge::flow_model::proto::ModelDeployResource& SubmodelDef::deploy_resource() const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.SubmodelDef.deploy_resource)
  return _internal_deploy_resource();
}
inline void SubmodelDef::unsafe_arena_set_allocated_deploy_resource(
    ::ge::flow_model::proto::ModelDeployResource* deploy_resource) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deploy_resource_);
  }
  deploy_resource_ = deploy_resource;
  if (deploy_resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ge.flow_model.proto.SubmodelDef.deploy_resource)
}
inline ::ge::flow_model::proto::ModelDeployResource* SubmodelDef::release_deploy_resource() {
  
  ::ge::flow_model::proto::ModelDeployResource* temp = deploy_resource_;
  deploy_resource_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ge::flow_model::proto::ModelDeployResource* SubmodelDef::unsafe_arena_release_deploy_resource() {
  // @@protoc_insertion_point(field_release:ge.flow_model.proto.SubmodelDef.deploy_resource)
  
  ::ge::flow_model::proto::ModelDeployResource* temp = deploy_resource_;
  deploy_resource_ = nullptr;
  return temp;
}
inline ::ge::flow_model::proto::ModelDeployResource* SubmodelDef::_internal_mutable_deploy_resource() {
  
  if (deploy_resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::ge::flow_model::proto::ModelDeployResource>(GetArena());
    deploy_resource_ = p;
  }
  return deploy_resource_;
}
inline ::ge::flow_model::proto::ModelDeployResource* SubmodelDef::mutable_deploy_resource() {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.SubmodelDef.deploy_resource)
  return _internal_mutable_deploy_resource();
}
inline void SubmodelDef::set_allocated_deploy_resource(::ge::flow_model::proto::ModelDeployResource* deploy_resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deploy_resource_;
  }
  if (deploy_resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deploy_resource);
    if (message_arena != submessage_arena) {
      deploy_resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deploy_resource, submessage_arena);
    }
    
  } else {
    
  }
  deploy_resource_ = deploy_resource;
  // @@protoc_insertion_point(field_set_allocated:ge.flow_model.proto.SubmodelDef.deploy_resource)
}

// .ge.flow_model.proto.ModelDeployInfo deploy_info = 6;
inline bool SubmodelDef::_internal_has_deploy_info() const {
  return this != internal_default_instance() && deploy_info_ != nullptr;
}
inline bool SubmodelDef::has_deploy_info() const {
  return _internal_has_deploy_info();
}
inline void SubmodelDef::clear_deploy_info() {
  if (GetArena() == nullptr && deploy_info_ != nullptr) {
    delete deploy_info_;
  }
  deploy_info_ = nullptr;
}
inline const ::ge::flow_model::proto::ModelDeployInfo& SubmodelDef::_internal_deploy_info() const {
  const ::ge::flow_model::proto::ModelDeployInfo* p = deploy_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ge::flow_model::proto::ModelDeployInfo*>(
      &::ge::flow_model::proto::_ModelDeployInfo_default_instance_);
}
inline const ::ge::flow_model::proto::ModelDeployInfo& SubmodelDef::deploy_info() const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.SubmodelDef.deploy_info)
  return _internal_deploy_info();
}
inline void SubmodelDef::unsafe_arena_set_allocated_deploy_info(
    ::ge::flow_model::proto::ModelDeployInfo* deploy_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deploy_info_);
  }
  deploy_info_ = deploy_info;
  if (deploy_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ge.flow_model.proto.SubmodelDef.deploy_info)
}
inline ::ge::flow_model::proto::ModelDeployInfo* SubmodelDef::release_deploy_info() {
  
  ::ge::flow_model::proto::ModelDeployInfo* temp = deploy_info_;
  deploy_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ge::flow_model::proto::ModelDeployInfo* SubmodelDef::unsafe_arena_release_deploy_info() {
  // @@protoc_insertion_point(field_release:ge.flow_model.proto.SubmodelDef.deploy_info)
  
  ::ge::flow_model::proto::ModelDeployInfo* temp = deploy_info_;
  deploy_info_ = nullptr;
  return temp;
}
inline ::ge::flow_model::proto::ModelDeployInfo* SubmodelDef::_internal_mutable_deploy_info() {
  
  if (deploy_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ge::flow_model::proto::ModelDeployInfo>(GetArena());
    deploy_info_ = p;
  }
  return deploy_info_;
}
inline ::ge::flow_model::proto::ModelDeployInfo* SubmodelDef::mutable_deploy_info() {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.SubmodelDef.deploy_info)
  return _internal_mutable_deploy_info();
}
inline void SubmodelDef::set_allocated_deploy_info(::ge::flow_model::proto::ModelDeployInfo* deploy_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deploy_info_;
  }
  if (deploy_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deploy_info);
    if (message_arena != submessage_arena) {
      deploy_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deploy_info, submessage_arena);
    }
    
  } else {
    
  }
  deploy_info_ = deploy_info;
  // @@protoc_insertion_point(field_set_allocated:ge.flow_model.proto.SubmodelDef.deploy_info)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CompileResource

// string host_resource_type = 1;
inline void CompileResource::clear_host_resource_type() {
  host_resource_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CompileResource::host_resource_type() const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.CompileResource.host_resource_type)
  return _internal_host_resource_type();
}
inline void CompileResource::set_host_resource_type(const std::string& value) {
  _internal_set_host_resource_type(value);
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.CompileResource.host_resource_type)
}
inline std::string* CompileResource::mutable_host_resource_type() {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.CompileResource.host_resource_type)
  return _internal_mutable_host_resource_type();
}
inline const std::string& CompileResource::_internal_host_resource_type() const {
  return host_resource_type_.Get();
}
inline void CompileResource::_internal_set_host_resource_type(const std::string& value) {
  
  host_resource_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CompileResource::set_host_resource_type(std::string&& value) {
  
  host_resource_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ge.flow_model.proto.CompileResource.host_resource_type)
}
inline void CompileResource::set_host_resource_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_resource_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ge.flow_model.proto.CompileResource.host_resource_type)
}
inline void CompileResource::set_host_resource_type(const char* value,
    size_t size) {
  
  host_resource_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ge.flow_model.proto.CompileResource.host_resource_type)
}
inline std::string* CompileResource::_internal_mutable_host_resource_type() {
  
  return host_resource_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CompileResource::release_host_resource_type() {
  // @@protoc_insertion_point(field_release:ge.flow_model.proto.CompileResource.host_resource_type)
  return host_resource_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompileResource::set_allocated_host_resource_type(std::string* host_resource_type) {
  if (host_resource_type != nullptr) {
    
  } else {
    
  }
  host_resource_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host_resource_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ge.flow_model.proto.CompileResource.host_resource_type)
}

// map<string, string> logic_device_id_to_resource_type = 2;
inline int CompileResource::_internal_logic_device_id_to_resource_type_size() const {
  return logic_device_id_to_resource_type_.size();
}
inline int CompileResource::logic_device_id_to_resource_type_size() const {
  return _internal_logic_device_id_to_resource_type_size();
}
inline void CompileResource::clear_logic_device_id_to_resource_type() {
  logic_device_id_to_resource_type_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CompileResource::_internal_logic_device_id_to_resource_type() const {
  return logic_device_id_to_resource_type_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CompileResource::logic_device_id_to_resource_type() const {
  // @@protoc_insertion_point(field_map:ge.flow_model.proto.CompileResource.logic_device_id_to_resource_type)
  return _internal_logic_device_id_to_resource_type();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CompileResource::_internal_mutable_logic_device_id_to_resource_type() {
  return logic_device_id_to_resource_type_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CompileResource::mutable_logic_device_id_to_resource_type() {
  // @@protoc_insertion_point(field_mutable_map:ge.flow_model.proto.CompileResource.logic_device_id_to_resource_type)
  return _internal_mutable_logic_device_id_to_resource_type();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FlowModelDef_EschedPriority

// map<string, int32> esched_priority = 1;
inline int FlowModelDef_EschedPriority::_internal_esched_priority_size() const {
  return esched_priority_.size();
}
inline int FlowModelDef_EschedPriority::esched_priority_size() const {
  return _internal_esched_priority_size();
}
inline void FlowModelDef_EschedPriority::clear_esched_priority() {
  esched_priority_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
FlowModelDef_EschedPriority::_internal_esched_priority() const {
  return esched_priority_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
FlowModelDef_EschedPriority::esched_priority() const {
  // @@protoc_insertion_point(field_map:ge.flow_model.proto.FlowModelDef.EschedPriority.esched_priority)
  return _internal_esched_priority();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
FlowModelDef_EschedPriority::_internal_mutable_esched_priority() {
  return esched_priority_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
FlowModelDef_EschedPriority::mutable_esched_priority() {
  // @@protoc_insertion_point(field_mutable_map:ge.flow_model.proto.FlowModelDef.EschedPriority.esched_priority)
  return _internal_mutable_esched_priority();
}

// -------------------------------------------------------------------

// FlowModelDef_RankIds

// repeated uint32 rank_id = 1;
inline int FlowModelDef_RankIds::_internal_rank_id_size() const {
  return rank_id_.size();
}
inline int FlowModelDef_RankIds::rank_id_size() const {
  return _internal_rank_id_size();
}
inline void FlowModelDef_RankIds::clear_rank_id() {
  rank_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowModelDef_RankIds::_internal_rank_id(int index) const {
  return rank_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowModelDef_RankIds::rank_id(int index) const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.FlowModelDef.RankIds.rank_id)
  return _internal_rank_id(index);
}
inline void FlowModelDef_RankIds::set_rank_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  rank_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.FlowModelDef.RankIds.rank_id)
}
inline void FlowModelDef_RankIds::_internal_add_rank_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  rank_id_.Add(value);
}
inline void FlowModelDef_RankIds::add_rank_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_rank_id(value);
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.FlowModelDef.RankIds.rank_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
FlowModelDef_RankIds::_internal_rank_id() const {
  return rank_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
FlowModelDef_RankIds::rank_id() const {
  // @@protoc_insertion_point(field_list:ge.flow_model.proto.FlowModelDef.RankIds.rank_id)
  return _internal_rank_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
FlowModelDef_RankIds::_internal_mutable_rank_id() {
  return &rank_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
FlowModelDef_RankIds::mutable_rank_id() {
  // @@protoc_insertion_point(field_mutable_list:ge.flow_model.proto.FlowModelDef.RankIds.rank_id)
  return _internal_mutable_rank_id();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FlowModelDef

// string model_name = 1;
inline void FlowModelDef::clear_model_name() {
  model_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FlowModelDef::model_name() const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.FlowModelDef.model_name)
  return _internal_model_name();
}
inline void FlowModelDef::set_model_name(const std::string& value) {
  _internal_set_model_name(value);
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.FlowModelDef.model_name)
}
inline std::string* FlowModelDef::mutable_model_name() {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.FlowModelDef.model_name)
  return _internal_mutable_model_name();
}
inline const std::string& FlowModelDef::_internal_model_name() const {
  return model_name_.Get();
}
inline void FlowModelDef::_internal_set_model_name(const std::string& value) {
  
  model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FlowModelDef::set_model_name(std::string&& value) {
  
  model_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ge.flow_model.proto.FlowModelDef.model_name)
}
inline void FlowModelDef::set_model_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ge.flow_model.proto.FlowModelDef.model_name)
}
inline void FlowModelDef::set_model_name(const char* value,
    size_t size) {
  
  model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ge.flow_model.proto.FlowModelDef.model_name)
}
inline std::string* FlowModelDef::_internal_mutable_model_name() {
  
  return model_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FlowModelDef::release_model_name() {
  // @@protoc_insertion_point(field_release:ge.flow_model.proto.FlowModelDef.model_name)
  return model_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FlowModelDef::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    
  } else {
    
  }
  model_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ge.flow_model.proto.FlowModelDef.model_name)
}

// .ge.flow_model.proto.ModelRelationDef relation = 2;
inline bool FlowModelDef::_internal_has_relation() const {
  return this != internal_default_instance() && relation_ != nullptr;
}
inline bool FlowModelDef::has_relation() const {
  return _internal_has_relation();
}
inline void FlowModelDef::clear_relation() {
  if (GetArena() == nullptr && relation_ != nullptr) {
    delete relation_;
  }
  relation_ = nullptr;
}
inline const ::ge::flow_model::proto::ModelRelationDef& FlowModelDef::_internal_relation() const {
  const ::ge::flow_model::proto::ModelRelationDef* p = relation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ge::flow_model::proto::ModelRelationDef*>(
      &::ge::flow_model::proto::_ModelRelationDef_default_instance_);
}
inline const ::ge::flow_model::proto::ModelRelationDef& FlowModelDef::relation() const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.FlowModelDef.relation)
  return _internal_relation();
}
inline void FlowModelDef::unsafe_arena_set_allocated_relation(
    ::ge::flow_model::proto::ModelRelationDef* relation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(relation_);
  }
  relation_ = relation;
  if (relation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ge.flow_model.proto.FlowModelDef.relation)
}
inline ::ge::flow_model::proto::ModelRelationDef* FlowModelDef::release_relation() {
  
  ::ge::flow_model::proto::ModelRelationDef* temp = relation_;
  relation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ge::flow_model::proto::ModelRelationDef* FlowModelDef::unsafe_arena_release_relation() {
  // @@protoc_insertion_point(field_release:ge.flow_model.proto.FlowModelDef.relation)
  
  ::ge::flow_model::proto::ModelRelationDef* temp = relation_;
  relation_ = nullptr;
  return temp;
}
inline ::ge::flow_model::proto::ModelRelationDef* FlowModelDef::_internal_mutable_relation() {
  
  if (relation_ == nullptr) {
    auto* p = CreateMaybeMessage<::ge::flow_model::proto::ModelRelationDef>(GetArena());
    relation_ = p;
  }
  return relation_;
}
inline ::ge::flow_model::proto::ModelRelationDef* FlowModelDef::mutable_relation() {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.FlowModelDef.relation)
  return _internal_mutable_relation();
}
inline void FlowModelDef::set_allocated_relation(::ge::flow_model::proto::ModelRelationDef* relation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete relation_;
  }
  if (relation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(relation);
    if (message_arena != submessage_arena) {
      relation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relation, submessage_arena);
    }
    
  } else {
    
  }
  relation_ = relation;
  // @@protoc_insertion_point(field_set_allocated:ge.flow_model.proto.FlowModelDef.relation)
}

// repeated string submodel_name = 3;
inline int FlowModelDef::_internal_submodel_name_size() const {
  return submodel_name_.size();
}
inline int FlowModelDef::submodel_name_size() const {
  return _internal_submodel_name_size();
}
inline void FlowModelDef::clear_submodel_name() {
  submodel_name_.Clear();
}
inline std::string* FlowModelDef::add_submodel_name() {
  // @@protoc_insertion_point(field_add_mutable:ge.flow_model.proto.FlowModelDef.submodel_name)
  return _internal_add_submodel_name();
}
inline const std::string& FlowModelDef::_internal_submodel_name(int index) const {
  return submodel_name_.Get(index);
}
inline const std::string& FlowModelDef::submodel_name(int index) const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.FlowModelDef.submodel_name)
  return _internal_submodel_name(index);
}
inline std::string* FlowModelDef::mutable_submodel_name(int index) {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.FlowModelDef.submodel_name)
  return submodel_name_.Mutable(index);
}
inline void FlowModelDef::set_submodel_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.FlowModelDef.submodel_name)
  submodel_name_.Mutable(index)->assign(value);
}
inline void FlowModelDef::set_submodel_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ge.flow_model.proto.FlowModelDef.submodel_name)
  submodel_name_.Mutable(index)->assign(std::move(value));
}
inline void FlowModelDef::set_submodel_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  submodel_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ge.flow_model.proto.FlowModelDef.submodel_name)
}
inline void FlowModelDef::set_submodel_name(int index, const char* value, size_t size) {
  submodel_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ge.flow_model.proto.FlowModelDef.submodel_name)
}
inline std::string* FlowModelDef::_internal_add_submodel_name() {
  return submodel_name_.Add();
}
inline void FlowModelDef::add_submodel_name(const std::string& value) {
  submodel_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.FlowModelDef.submodel_name)
}
inline void FlowModelDef::add_submodel_name(std::string&& value) {
  submodel_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ge.flow_model.proto.FlowModelDef.submodel_name)
}
inline void FlowModelDef::add_submodel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  submodel_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ge.flow_model.proto.FlowModelDef.submodel_name)
}
inline void FlowModelDef::add_submodel_name(const char* value, size_t size) {
  submodel_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ge.flow_model.proto.FlowModelDef.submodel_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FlowModelDef::submodel_name() const {
  // @@protoc_insertion_point(field_list:ge.flow_model.proto.FlowModelDef.submodel_name)
  return submodel_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FlowModelDef::mutable_submodel_name() {
  // @@protoc_insertion_point(field_mutable_list:ge.flow_model.proto.FlowModelDef.submodel_name)
  return &submodel_name_;
}

// map<string, .ge.flow_model.proto.FlowModelDef.EschedPriority> models_esched_priority = 4;
inline int FlowModelDef::_internal_models_esched_priority_size() const {
  return models_esched_priority_.size();
}
inline int FlowModelDef::models_esched_priority_size() const {
  return _internal_models_esched_priority_size();
}
inline void FlowModelDef::clear_models_esched_priority() {
  models_esched_priority_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_EschedPriority >&
FlowModelDef::_internal_models_esched_priority() const {
  return models_esched_priority_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_EschedPriority >&
FlowModelDef::models_esched_priority() const {
  // @@protoc_insertion_point(field_map:ge.flow_model.proto.FlowModelDef.models_esched_priority)
  return _internal_models_esched_priority();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_EschedPriority >*
FlowModelDef::_internal_mutable_models_esched_priority() {
  return models_esched_priority_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_EschedPriority >*
FlowModelDef::mutable_models_esched_priority() {
  // @@protoc_insertion_point(field_mutable_map:ge.flow_model.proto.FlowModelDef.models_esched_priority)
  return _internal_mutable_models_esched_priority();
}

// map<string, uint32> model_name_to_rank_id = 6;
inline int FlowModelDef::_internal_model_name_to_rank_id_size() const {
  return model_name_to_rank_id_.size();
}
inline int FlowModelDef::model_name_to_rank_id_size() const {
  return _internal_model_name_to_rank_id_size();
}
inline void FlowModelDef::clear_model_name_to_rank_id() {
  model_name_to_rank_id_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
FlowModelDef::_internal_model_name_to_rank_id() const {
  return model_name_to_rank_id_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
FlowModelDef::model_name_to_rank_id() const {
  // @@protoc_insertion_point(field_map:ge.flow_model.proto.FlowModelDef.model_name_to_rank_id)
  return _internal_model_name_to_rank_id();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
FlowModelDef::_internal_mutable_model_name_to_rank_id() {
  return model_name_to_rank_id_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
FlowModelDef::mutable_model_name_to_rank_id() {
  // @@protoc_insertion_point(field_mutable_map:ge.flow_model.proto.FlowModelDef.model_name_to_rank_id)
  return _internal_mutable_model_name_to_rank_id();
}

// map<string, .ge.flow_model.proto.FlowModelDef.RankIds> group_name_to_rank_ids = 5;
inline int FlowModelDef::_internal_group_name_to_rank_ids_size() const {
  return group_name_to_rank_ids_.size();
}
inline int FlowModelDef::group_name_to_rank_ids_size() const {
  return _internal_group_name_to_rank_ids_size();
}
inline void FlowModelDef::clear_group_name_to_rank_ids() {
  group_name_to_rank_ids_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_RankIds >&
FlowModelDef::_internal_group_name_to_rank_ids() const {
  return group_name_to_rank_ids_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_RankIds >&
FlowModelDef::group_name_to_rank_ids() const {
  // @@protoc_insertion_point(field_map:ge.flow_model.proto.FlowModelDef.group_name_to_rank_ids)
  return _internal_group_name_to_rank_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_RankIds >*
FlowModelDef::_internal_mutable_group_name_to_rank_ids() {
  return group_name_to_rank_ids_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_RankIds >*
FlowModelDef::mutable_group_name_to_rank_ids() {
  // @@protoc_insertion_point(field_mutable_map:ge.flow_model.proto.FlowModelDef.group_name_to_rank_ids)
  return _internal_mutable_group_name_to_rank_ids();
}

// map<string, .ge.flow_model.proto.FlowModelDef.RankIds> device_to_rank_ids = 7;
inline int FlowModelDef::_internal_device_to_rank_ids_size() const {
  return device_to_rank_ids_.size();
}
inline int FlowModelDef::device_to_rank_ids_size() const {
  return _internal_device_to_rank_ids_size();
}
inline void FlowModelDef::clear_device_to_rank_ids() {
  device_to_rank_ids_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_RankIds >&
FlowModelDef::_internal_device_to_rank_ids() const {
  return device_to_rank_ids_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_RankIds >&
FlowModelDef::device_to_rank_ids() const {
  // @@protoc_insertion_point(field_map:ge.flow_model.proto.FlowModelDef.device_to_rank_ids)
  return _internal_device_to_rank_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_RankIds >*
FlowModelDef::_internal_mutable_device_to_rank_ids() {
  return device_to_rank_ids_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::flow_model::proto::FlowModelDef_RankIds >*
FlowModelDef::mutable_device_to_rank_ids() {
  // @@protoc_insertion_point(field_mutable_map:ge.flow_model.proto.FlowModelDef.device_to_rank_ids)
  return _internal_mutable_device_to_rank_ids();
}

// .ge.flow_model.proto.CompileResource compile_resource = 8;
inline bool FlowModelDef::_internal_has_compile_resource() const {
  return this != internal_default_instance() && compile_resource_ != nullptr;
}
inline bool FlowModelDef::has_compile_resource() const {
  return _internal_has_compile_resource();
}
inline void FlowModelDef::clear_compile_resource() {
  if (GetArena() == nullptr && compile_resource_ != nullptr) {
    delete compile_resource_;
  }
  compile_resource_ = nullptr;
}
inline const ::ge::flow_model::proto::CompileResource& FlowModelDef::_internal_compile_resource() const {
  const ::ge::flow_model::proto::CompileResource* p = compile_resource_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ge::flow_model::proto::CompileResource*>(
      &::ge::flow_model::proto::_CompileResource_default_instance_);
}
inline const ::ge::flow_model::proto::CompileResource& FlowModelDef::compile_resource() const {
  // @@protoc_insertion_point(field_get:ge.flow_model.proto.FlowModelDef.compile_resource)
  return _internal_compile_resource();
}
inline void FlowModelDef::unsafe_arena_set_allocated_compile_resource(
    ::ge::flow_model::proto::CompileResource* compile_resource) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(compile_resource_);
  }
  compile_resource_ = compile_resource;
  if (compile_resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ge.flow_model.proto.FlowModelDef.compile_resource)
}
inline ::ge::flow_model::proto::CompileResource* FlowModelDef::release_compile_resource() {
  
  ::ge::flow_model::proto::CompileResource* temp = compile_resource_;
  compile_resource_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ge::flow_model::proto::CompileResource* FlowModelDef::unsafe_arena_release_compile_resource() {
  // @@protoc_insertion_point(field_release:ge.flow_model.proto.FlowModelDef.compile_resource)
  
  ::ge::flow_model::proto::CompileResource* temp = compile_resource_;
  compile_resource_ = nullptr;
  return temp;
}
inline ::ge::flow_model::proto::CompileResource* FlowModelDef::_internal_mutable_compile_resource() {
  
  if (compile_resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::ge::flow_model::proto::CompileResource>(GetArena());
    compile_resource_ = p;
  }
  return compile_resource_;
}
inline ::ge::flow_model::proto::CompileResource* FlowModelDef::mutable_compile_resource() {
  // @@protoc_insertion_point(field_mutable:ge.flow_model.proto.FlowModelDef.compile_resource)
  return _internal_mutable_compile_resource();
}
inline void FlowModelDef::set_allocated_compile_resource(::ge::flow_model::proto::CompileResource* compile_resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete compile_resource_;
  }
  if (compile_resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(compile_resource);
    if (message_arena != submessage_arena) {
      compile_resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compile_resource, submessage_arena);
    }
    
  } else {
    
  }
  compile_resource_ = compile_resource;
  // @@protoc_insertion_point(field_set_allocated:ge.flow_model.proto.FlowModelDef.compile_resource)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace flow_model
}  // namespace ge

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flow_5fmodel_2eproto
