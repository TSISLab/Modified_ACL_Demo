// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fwk_adapter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fwk_5fadapter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fwk_5fadapter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fwk_5fadapter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fwk_5fadapter_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fwk_5fadapter_2eproto;
namespace aicpu {
namespace FWKAdapter {
class KernelRunParam;
class KernelRunParamDefaultTypeInternal;
extern KernelRunParamDefaultTypeInternal _KernelRunParam_default_instance_;
class TensorDataInfo;
class TensorDataInfoDefaultTypeInternal;
extern TensorDataInfoDefaultTypeInternal _TensorDataInfo_default_instance_;
}  // namespace FWKAdapter
}  // namespace aicpu
PROTOBUF_NAMESPACE_OPEN
template<> ::aicpu::FWKAdapter::KernelRunParam* Arena::CreateMaybeMessage<::aicpu::FWKAdapter::KernelRunParam>(Arena*);
template<> ::aicpu::FWKAdapter::TensorDataInfo* Arena::CreateMaybeMessage<::aicpu::FWKAdapter::TensorDataInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace aicpu {
namespace FWKAdapter {

// ===================================================================

class TensorDataInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aicpu.FWKAdapter.TensorDataInfo) */ {
 public:
  inline TensorDataInfo() : TensorDataInfo(nullptr) {}
  virtual ~TensorDataInfo();

  TensorDataInfo(const TensorDataInfo& from);
  TensorDataInfo(TensorDataInfo&& from) noexcept
    : TensorDataInfo() {
    *this = ::std::move(from);
  }

  inline TensorDataInfo& operator=(const TensorDataInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorDataInfo& operator=(TensorDataInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TensorDataInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorDataInfo* internal_default_instance() {
    return reinterpret_cast<const TensorDataInfo*>(
               &_TensorDataInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TensorDataInfo& a, TensorDataInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorDataInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TensorDataInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TensorDataInfo* New() const final {
    return CreateMaybeMessage<TensorDataInfo>(nullptr);
  }

  TensorDataInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TensorDataInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TensorDataInfo& from);
  void MergeFrom(const TensorDataInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorDataInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aicpu.FWKAdapter.TensorDataInfo";
  }
  protected:
  explicit TensorDataInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fwk_5fadapter_2eproto);
    return ::descriptor_table_fwk_5fadapter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimFieldNumber = 2,
    kDataAddrFieldNumber = 3,
    kDtypeFieldNumber = 1,
  };
  // repeated int64 dim = 2;
  int dim_size() const;
  private:
  int _internal_dim_size() const;
  public:
  void clear_dim();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_dim(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_dim() const;
  void _internal_add_dim(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_dim();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 dim(int index) const;
  void set_dim(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_dim(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      dim() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_dim();

  // int64 data_addr = 3;
  void clear_data_addr();
  ::PROTOBUF_NAMESPACE_ID::int64 data_addr() const;
  void set_data_addr(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_data_addr() const;
  void _internal_set_data_addr(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 dtype = 1;
  void clear_dtype();
  ::PROTOBUF_NAMESPACE_ID::uint32 dtype() const;
  void set_dtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dtype() const;
  void _internal_set_dtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aicpu.FWKAdapter.TensorDataInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > dim_;
  mutable std::atomic<int> _dim_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 data_addr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fwk_5fadapter_2eproto;
};
// -------------------------------------------------------------------

class KernelRunParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aicpu.FWKAdapter.KernelRunParam) */ {
 public:
  inline KernelRunParam() : KernelRunParam(nullptr) {}
  virtual ~KernelRunParam();

  KernelRunParam(const KernelRunParam& from);
  KernelRunParam(KernelRunParam&& from) noexcept
    : KernelRunParam() {
    *this = ::std::move(from);
  }

  inline KernelRunParam& operator=(const KernelRunParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline KernelRunParam& operator=(KernelRunParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KernelRunParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KernelRunParam* internal_default_instance() {
    return reinterpret_cast<const KernelRunParam*>(
               &_KernelRunParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KernelRunParam& a, KernelRunParam& b) {
    a.Swap(&b);
  }
  inline void Swap(KernelRunParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KernelRunParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KernelRunParam* New() const final {
    return CreateMaybeMessage<KernelRunParam>(nullptr);
  }

  KernelRunParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KernelRunParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KernelRunParam& from);
  void MergeFrom(const KernelRunParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KernelRunParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aicpu.FWKAdapter.KernelRunParam";
  }
  protected:
  explicit KernelRunParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fwk_5fadapter_2eproto);
    return ::descriptor_table_fwk_5fadapter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 1,
    kOutputFieldNumber = 2,
  };
  // repeated .aicpu.FWKAdapter.TensorDataInfo input = 1;
  int input_size() const;
  private:
  int _internal_input_size() const;
  public:
  void clear_input();
  ::aicpu::FWKAdapter::TensorDataInfo* mutable_input(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aicpu::FWKAdapter::TensorDataInfo >*
      mutable_input();
  private:
  const ::aicpu::FWKAdapter::TensorDataInfo& _internal_input(int index) const;
  ::aicpu::FWKAdapter::TensorDataInfo* _internal_add_input();
  public:
  const ::aicpu::FWKAdapter::TensorDataInfo& input(int index) const;
  ::aicpu::FWKAdapter::TensorDataInfo* add_input();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aicpu::FWKAdapter::TensorDataInfo >&
      input() const;

  // repeated .aicpu.FWKAdapter.TensorDataInfo output = 2;
  int output_size() const;
  private:
  int _internal_output_size() const;
  public:
  void clear_output();
  ::aicpu::FWKAdapter::TensorDataInfo* mutable_output(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aicpu::FWKAdapter::TensorDataInfo >*
      mutable_output();
  private:
  const ::aicpu::FWKAdapter::TensorDataInfo& _internal_output(int index) const;
  ::aicpu::FWKAdapter::TensorDataInfo* _internal_add_output();
  public:
  const ::aicpu::FWKAdapter::TensorDataInfo& output(int index) const;
  ::aicpu::FWKAdapter::TensorDataInfo* add_output();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aicpu::FWKAdapter::TensorDataInfo >&
      output() const;

  // @@protoc_insertion_point(class_scope:aicpu.FWKAdapter.KernelRunParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aicpu::FWKAdapter::TensorDataInfo > input_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aicpu::FWKAdapter::TensorDataInfo > output_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fwk_5fadapter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TensorDataInfo

// uint32 dtype = 1;
inline void TensorDataInfo::clear_dtype() {
  dtype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TensorDataInfo::_internal_dtype() const {
  return dtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TensorDataInfo::dtype() const {
  // @@protoc_insertion_point(field_get:aicpu.FWKAdapter.TensorDataInfo.dtype)
  return _internal_dtype();
}
inline void TensorDataInfo::_internal_set_dtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dtype_ = value;
}
inline void TensorDataInfo::set_dtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dtype(value);
  // @@protoc_insertion_point(field_set:aicpu.FWKAdapter.TensorDataInfo.dtype)
}

// repeated int64 dim = 2;
inline int TensorDataInfo::_internal_dim_size() const {
  return dim_.size();
}
inline int TensorDataInfo::dim_size() const {
  return _internal_dim_size();
}
inline void TensorDataInfo::clear_dim() {
  dim_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorDataInfo::_internal_dim(int index) const {
  return dim_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorDataInfo::dim(int index) const {
  // @@protoc_insertion_point(field_get:aicpu.FWKAdapter.TensorDataInfo.dim)
  return _internal_dim(index);
}
inline void TensorDataInfo::set_dim(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:aicpu.FWKAdapter.TensorDataInfo.dim)
}
inline void TensorDataInfo::_internal_add_dim(::PROTOBUF_NAMESPACE_ID::int64 value) {
  dim_.Add(value);
}
inline void TensorDataInfo::add_dim(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_dim(value);
  // @@protoc_insertion_point(field_add:aicpu.FWKAdapter.TensorDataInfo.dim)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TensorDataInfo::_internal_dim() const {
  return dim_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TensorDataInfo::dim() const {
  // @@protoc_insertion_point(field_list:aicpu.FWKAdapter.TensorDataInfo.dim)
  return _internal_dim();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TensorDataInfo::_internal_mutable_dim() {
  return &dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TensorDataInfo::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:aicpu.FWKAdapter.TensorDataInfo.dim)
  return _internal_mutable_dim();
}

// int64 data_addr = 3;
inline void TensorDataInfo::clear_data_addr() {
  data_addr_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorDataInfo::_internal_data_addr() const {
  return data_addr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorDataInfo::data_addr() const {
  // @@protoc_insertion_point(field_get:aicpu.FWKAdapter.TensorDataInfo.data_addr)
  return _internal_data_addr();
}
inline void TensorDataInfo::_internal_set_data_addr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  data_addr_ = value;
}
inline void TensorDataInfo::set_data_addr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_data_addr(value);
  // @@protoc_insertion_point(field_set:aicpu.FWKAdapter.TensorDataInfo.data_addr)
}

// -------------------------------------------------------------------

// KernelRunParam

// repeated .aicpu.FWKAdapter.TensorDataInfo input = 1;
inline int KernelRunParam::_internal_input_size() const {
  return input_.size();
}
inline int KernelRunParam::input_size() const {
  return _internal_input_size();
}
inline void KernelRunParam::clear_input() {
  input_.Clear();
}
inline ::aicpu::FWKAdapter::TensorDataInfo* KernelRunParam::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:aicpu.FWKAdapter.KernelRunParam.input)
  return input_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aicpu::FWKAdapter::TensorDataInfo >*
KernelRunParam::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:aicpu.FWKAdapter.KernelRunParam.input)
  return &input_;
}
inline const ::aicpu::FWKAdapter::TensorDataInfo& KernelRunParam::_internal_input(int index) const {
  return input_.Get(index);
}
inline const ::aicpu::FWKAdapter::TensorDataInfo& KernelRunParam::input(int index) const {
  // @@protoc_insertion_point(field_get:aicpu.FWKAdapter.KernelRunParam.input)
  return _internal_input(index);
}
inline ::aicpu::FWKAdapter::TensorDataInfo* KernelRunParam::_internal_add_input() {
  return input_.Add();
}
inline ::aicpu::FWKAdapter::TensorDataInfo* KernelRunParam::add_input() {
  // @@protoc_insertion_point(field_add:aicpu.FWKAdapter.KernelRunParam.input)
  return _internal_add_input();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aicpu::FWKAdapter::TensorDataInfo >&
KernelRunParam::input() const {
  // @@protoc_insertion_point(field_list:aicpu.FWKAdapter.KernelRunParam.input)
  return input_;
}

// repeated .aicpu.FWKAdapter.TensorDataInfo output = 2;
inline int KernelRunParam::_internal_output_size() const {
  return output_.size();
}
inline int KernelRunParam::output_size() const {
  return _internal_output_size();
}
inline void KernelRunParam::clear_output() {
  output_.Clear();
}
inline ::aicpu::FWKAdapter::TensorDataInfo* KernelRunParam::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:aicpu.FWKAdapter.KernelRunParam.output)
  return output_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aicpu::FWKAdapter::TensorDataInfo >*
KernelRunParam::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:aicpu.FWKAdapter.KernelRunParam.output)
  return &output_;
}
inline const ::aicpu::FWKAdapter::TensorDataInfo& KernelRunParam::_internal_output(int index) const {
  return output_.Get(index);
}
inline const ::aicpu::FWKAdapter::TensorDataInfo& KernelRunParam::output(int index) const {
  // @@protoc_insertion_point(field_get:aicpu.FWKAdapter.KernelRunParam.output)
  return _internal_output(index);
}
inline ::aicpu::FWKAdapter::TensorDataInfo* KernelRunParam::_internal_add_output() {
  return output_.Add();
}
inline ::aicpu::FWKAdapter::TensorDataInfo* KernelRunParam::add_output() {
  // @@protoc_insertion_point(field_add:aicpu.FWKAdapter.KernelRunParam.output)
  return _internal_add_output();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aicpu::FWKAdapter::TensorDataInfo >&
KernelRunParam::output() const {
  // @@protoc_insertion_point(field_list:aicpu.FWKAdapter.KernelRunParam.output)
  return output_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace FWKAdapter
}  // namespace aicpu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fwk_5fadapter_2eproto
