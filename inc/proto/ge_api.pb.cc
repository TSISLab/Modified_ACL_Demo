// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ge_api.proto

#include "ge_api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ge_5fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateSession_OptionsEntry_DoNotUse_ge_5fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ge_5fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GEInitialize_OptionsEntry_DoNotUse_ge_5fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ge_5fir_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AttrDef_ge_5fir_2eproto;
namespace ge {
namespace api_pb {
class GEInitialize_OptionsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GEInitialize_OptionsEntry_DoNotUse> _instance;
} _GEInitialize_OptionsEntry_DoNotUse_default_instance_;
class GEInitializeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GEInitialize> _instance;
} _GEInitialize_default_instance_;
class GEInitializeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GEInitializeResponse> _instance;
} _GEInitializeResponse_default_instance_;
class GEFinalizeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GEFinalize> _instance;
} _GEFinalize_default_instance_;
class GEFinalizeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GEFinalizeResponse> _instance;
} _GEFinalizeResponse_default_instance_;
class CreateSession_OptionsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateSession_OptionsEntry_DoNotUse> _instance;
} _CreateSession_OptionsEntry_DoNotUse_default_instance_;
class CreateSessionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateSession> _instance;
} _CreateSession_default_instance_;
class CreateSessionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateSessionResponse> _instance;
} _CreateSessionResponse_default_instance_;
class SessionAddGraphDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionAddGraph> _instance;
} _SessionAddGraph_default_instance_;
class SessionAddGraphResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionAddGraphResponse> _instance;
} _SessionAddGraphResponse_default_instance_;
class SessionRemoveGraphDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionRemoveGraph> _instance;
} _SessionRemoveGraph_default_instance_;
class SessionRemoveGraphResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionRemoveGraphResponse> _instance;
} _SessionRemoveGraphResponse_default_instance_;
class SessionRunGraphDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionRunGraph> _instance;
} _SessionRunGraph_default_instance_;
class SessionBuildGraphDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionBuildGraph> _instance;
} _SessionBuildGraph_default_instance_;
class SessionRunGraphResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionRunGraphResponse> _instance;
} _SessionRunGraphResponse_default_instance_;
class SessionBuildGraphResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionBuildGraphResponse> _instance;
} _SessionBuildGraphResponse_default_instance_;
class DestroySessionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DestroySession> _instance;
} _DestroySession_default_instance_;
class DestroySessionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DestroySessionResponse> _instance;
} _DestroySessionResponse_default_instance_;
}  // namespace api_pb
}  // namespace ge
static void InitDefaultsscc_info_CreateSession_ge_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::api_pb::_CreateSession_default_instance_;
    new (ptr) ::ge::api_pb::CreateSession();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::api_pb::CreateSession::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateSession_ge_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateSession_ge_5fapi_2eproto}, {
      &scc_info_CreateSession_OptionsEntry_DoNotUse_ge_5fapi_2eproto.base,}};

static void InitDefaultsscc_info_CreateSession_OptionsEntry_DoNotUse_ge_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::api_pb::_CreateSession_OptionsEntry_DoNotUse_default_instance_;
    new (ptr) ::ge::api_pb::CreateSession_OptionsEntry_DoNotUse();
  }
  ::ge::api_pb::CreateSession_OptionsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateSession_OptionsEntry_DoNotUse_ge_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateSession_OptionsEntry_DoNotUse_ge_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_CreateSessionResponse_ge_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::api_pb::_CreateSessionResponse_default_instance_;
    new (ptr) ::ge::api_pb::CreateSessionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::api_pb::CreateSessionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateSessionResponse_ge_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateSessionResponse_ge_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_DestroySession_ge_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::api_pb::_DestroySession_default_instance_;
    new (ptr) ::ge::api_pb::DestroySession();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::api_pb::DestroySession::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DestroySession_ge_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DestroySession_ge_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_DestroySessionResponse_ge_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::api_pb::_DestroySessionResponse_default_instance_;
    new (ptr) ::ge::api_pb::DestroySessionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::api_pb::DestroySessionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DestroySessionResponse_ge_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DestroySessionResponse_ge_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_GEFinalize_ge_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::api_pb::_GEFinalize_default_instance_;
    new (ptr) ::ge::api_pb::GEFinalize();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::api_pb::GEFinalize::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GEFinalize_ge_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GEFinalize_ge_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_GEFinalizeResponse_ge_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::api_pb::_GEFinalizeResponse_default_instance_;
    new (ptr) ::ge::api_pb::GEFinalizeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::api_pb::GEFinalizeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GEFinalizeResponse_ge_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GEFinalizeResponse_ge_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_GEInitialize_ge_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::api_pb::_GEInitialize_default_instance_;
    new (ptr) ::ge::api_pb::GEInitialize();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::api_pb::GEInitialize::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GEInitialize_ge_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GEInitialize_ge_5fapi_2eproto}, {
      &scc_info_GEInitialize_OptionsEntry_DoNotUse_ge_5fapi_2eproto.base,}};

static void InitDefaultsscc_info_GEInitialize_OptionsEntry_DoNotUse_ge_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::api_pb::_GEInitialize_OptionsEntry_DoNotUse_default_instance_;
    new (ptr) ::ge::api_pb::GEInitialize_OptionsEntry_DoNotUse();
  }
  ::ge::api_pb::GEInitialize_OptionsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GEInitialize_OptionsEntry_DoNotUse_ge_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GEInitialize_OptionsEntry_DoNotUse_ge_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_GEInitializeResponse_ge_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::api_pb::_GEInitializeResponse_default_instance_;
    new (ptr) ::ge::api_pb::GEInitializeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::api_pb::GEInitializeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GEInitializeResponse_ge_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GEInitializeResponse_ge_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_SessionAddGraph_ge_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::api_pb::_SessionAddGraph_default_instance_;
    new (ptr) ::ge::api_pb::SessionAddGraph();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::api_pb::SessionAddGraph::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SessionAddGraph_ge_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SessionAddGraph_ge_5fapi_2eproto}, {
      &scc_info_AttrDef_ge_5fir_2eproto.base,}};

static void InitDefaultsscc_info_SessionAddGraphResponse_ge_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::api_pb::_SessionAddGraphResponse_default_instance_;
    new (ptr) ::ge::api_pb::SessionAddGraphResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::api_pb::SessionAddGraphResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionAddGraphResponse_ge_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SessionAddGraphResponse_ge_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_SessionBuildGraph_ge_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::api_pb::_SessionBuildGraph_default_instance_;
    new (ptr) ::ge::api_pb::SessionBuildGraph();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::api_pb::SessionBuildGraph::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SessionBuildGraph_ge_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SessionBuildGraph_ge_5fapi_2eproto}, {
      &scc_info_AttrDef_ge_5fir_2eproto.base,}};

static void InitDefaultsscc_info_SessionBuildGraphResponse_ge_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::api_pb::_SessionBuildGraphResponse_default_instance_;
    new (ptr) ::ge::api_pb::SessionBuildGraphResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::api_pb::SessionBuildGraphResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionBuildGraphResponse_ge_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SessionBuildGraphResponse_ge_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_SessionRemoveGraph_ge_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::api_pb::_SessionRemoveGraph_default_instance_;
    new (ptr) ::ge::api_pb::SessionRemoveGraph();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::api_pb::SessionRemoveGraph::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionRemoveGraph_ge_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SessionRemoveGraph_ge_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_SessionRemoveGraphResponse_ge_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::api_pb::_SessionRemoveGraphResponse_default_instance_;
    new (ptr) ::ge::api_pb::SessionRemoveGraphResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::api_pb::SessionRemoveGraphResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionRemoveGraphResponse_ge_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SessionRemoveGraphResponse_ge_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_SessionRunGraph_ge_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::api_pb::_SessionRunGraph_default_instance_;
    new (ptr) ::ge::api_pb::SessionRunGraph();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::api_pb::SessionRunGraph::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SessionRunGraph_ge_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SessionRunGraph_ge_5fapi_2eproto}, {
      &scc_info_AttrDef_ge_5fir_2eproto.base,}};

static void InitDefaultsscc_info_SessionRunGraphResponse_ge_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::api_pb::_SessionRunGraphResponse_default_instance_;
    new (ptr) ::ge::api_pb::SessionRunGraphResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::api_pb::SessionRunGraphResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SessionRunGraphResponse_ge_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SessionRunGraphResponse_ge_5fapi_2eproto}, {
      &scc_info_AttrDef_ge_5fir_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ge_5fapi_2eproto[18];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ge_5fapi_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ge_5fapi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ge_5fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::GEInitialize_OptionsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::GEInitialize_OptionsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::GEInitialize_OptionsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::GEInitialize_OptionsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::GEInitialize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::GEInitialize, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::GEInitializeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::GEInitializeResponse, status_),
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::GEInitializeResponse, clientid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::GEFinalize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::GEFinalize, final_),
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::GEFinalize, clientid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::GEFinalizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::GEFinalizeResponse, status_),
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::CreateSession_OptionsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::CreateSession_OptionsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::CreateSession_OptionsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::CreateSession_OptionsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::CreateSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::CreateSession, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::CreateSessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::CreateSessionResponse, status_),
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::CreateSessionResponse, sessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::SessionAddGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::SessionAddGraph, graphid_),
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::SessionAddGraph, sessionid_),
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::SessionAddGraph, graph_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::SessionAddGraphResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::SessionAddGraphResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::SessionRemoveGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::SessionRemoveGraph, graphid_),
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::SessionRemoveGraph, sessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::SessionRemoveGraphResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::SessionRemoveGraphResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::SessionRunGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::SessionRunGraph, graphid_),
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::SessionRunGraph, sessionid_),
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::SessionRunGraph, tensor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::SessionBuildGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::SessionBuildGraph, graphid_),
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::SessionBuildGraph, sessionid_),
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::SessionBuildGraph, tensor_),
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::SessionBuildGraph, savepath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::SessionRunGraphResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::SessionRunGraphResponse, status_),
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::SessionRunGraphResponse, tensor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::SessionBuildGraphResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::SessionBuildGraphResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::DestroySession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::DestroySession, final_),
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::DestroySession, sessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::DestroySessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::api_pb::DestroySessionResponse, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::ge::api_pb::GEInitialize_OptionsEntry_DoNotUse)},
  { 9, -1, sizeof(::ge::api_pb::GEInitialize)},
  { 15, -1, sizeof(::ge::api_pb::GEInitializeResponse)},
  { 22, -1, sizeof(::ge::api_pb::GEFinalize)},
  { 29, -1, sizeof(::ge::api_pb::GEFinalizeResponse)},
  { 35, 42, sizeof(::ge::api_pb::CreateSession_OptionsEntry_DoNotUse)},
  { 44, -1, sizeof(::ge::api_pb::CreateSession)},
  { 50, -1, sizeof(::ge::api_pb::CreateSessionResponse)},
  { 57, -1, sizeof(::ge::api_pb::SessionAddGraph)},
  { 65, -1, sizeof(::ge::api_pb::SessionAddGraphResponse)},
  { 71, -1, sizeof(::ge::api_pb::SessionRemoveGraph)},
  { 78, -1, sizeof(::ge::api_pb::SessionRemoveGraphResponse)},
  { 84, -1, sizeof(::ge::api_pb::SessionRunGraph)},
  { 92, -1, sizeof(::ge::api_pb::SessionBuildGraph)},
  { 101, -1, sizeof(::ge::api_pb::SessionRunGraphResponse)},
  { 108, -1, sizeof(::ge::api_pb::SessionBuildGraphResponse)},
  { 114, -1, sizeof(::ge::api_pb::DestroySession)},
  { 121, -1, sizeof(::ge::api_pb::DestroySessionResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::api_pb::_GEInitialize_OptionsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::api_pb::_GEInitialize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::api_pb::_GEInitializeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::api_pb::_GEFinalize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::api_pb::_GEFinalizeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::api_pb::_CreateSession_OptionsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::api_pb::_CreateSession_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::api_pb::_CreateSessionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::api_pb::_SessionAddGraph_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::api_pb::_SessionAddGraphResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::api_pb::_SessionRemoveGraph_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::api_pb::_SessionRemoveGraphResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::api_pb::_SessionRunGraph_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::api_pb::_SessionBuildGraph_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::api_pb::_SessionRunGraphResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::api_pb::_SessionBuildGraphResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::api_pb::_DestroySession_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::api_pb::_DestroySessionResponse_default_instance_),
};

const char descriptor_table_protodef_ge_5fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014ge_api.proto\022\tge.api_pb\032\013ge_ir.proto\"u"
  "\n\014GEInitialize\0225\n\007options\030\001 \003(\0132$.ge.api"
  "_pb.GEInitialize.OptionsEntry\032.\n\014Options"
  "Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"8\n"
  "\024GEInitializeResponse\022\016\n\006status\030\001 \001(\r\022\020\n"
  "\010clientId\030\002 \001(\r\"-\n\nGEFinalize\022\r\n\005final\030\001"
  " \001(\010\022\020\n\010clientId\030\002 \001(\r\"$\n\022GEFinalizeResp"
  "onse\022\016\n\006status\030\001 \001(\r\"w\n\rCreateSession\0226\n"
  "\007options\030\001 \003(\0132%.ge.api_pb.CreateSession"
  ".OptionsEntry\032.\n\014OptionsEntry\022\013\n\003key\030\001 \001"
  "(\t\022\r\n\005value\030\002 \001(\t:\0028\001\":\n\025CreateSessionRe"
  "sponse\022\016\n\006status\030\001 \001(\r\022\021\n\tsessionId\030\002 \001("
  "\004\"X\n\017SessionAddGraph\022\017\n\007graphId\030\001 \001(\r\022\021\n"
  "\tsessionId\030\002 \001(\004\022!\n\005graph\030\003 \001(\0132\022.ge.pro"
  "to.GraphDef\")\n\027SessionAddGraphResponse\022\016"
  "\n\006status\030\001 \001(\r\"8\n\022SessionRemoveGraph\022\017\n\007"
  "graphId\030\001 \001(\r\022\021\n\tsessionId\030\002 \001(\004\",\n\032Sess"
  "ionRemoveGraphResponse\022\016\n\006status\030\001 \001(\r\"Z"
  "\n\017SessionRunGraph\022\017\n\007graphId\030\001 \001(\r\022\021\n\tse"
  "ssionId\030\002 \001(\004\022#\n\006tensor\030\003 \003(\0132\023.ge.proto"
  ".TensorDef\"n\n\021SessionBuildGraph\022\017\n\007graph"
  "Id\030\001 \001(\r\022\021\n\tsessionId\030\002 \001(\004\022#\n\006tensor\030\003 "
  "\003(\0132\023.ge.proto.TensorDef\022\020\n\010savePath\030\004 \001"
  "(\t\"N\n\027SessionRunGraphResponse\022\016\n\006status\030"
  "\001 \001(\r\022#\n\006tensor\030\002 \003(\0132\023.ge.proto.TensorD"
  "ef\"+\n\031SessionBuildGraphResponse\022\016\n\006statu"
  "s\030\001 \001(\r\"2\n\016DestroySession\022\r\n\005final\030\001 \001(\010"
  "\022\021\n\tsessionId\030\002 \001(\004\"(\n\026DestroySessionRes"
  "ponse\022\016\n\006status\030\001 \001(\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ge_5fapi_2eproto_deps[1] = {
  &::descriptor_table_ge_5fir_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ge_5fapi_2eproto_sccs[18] = {
  &scc_info_CreateSession_ge_5fapi_2eproto.base,
  &scc_info_CreateSession_OptionsEntry_DoNotUse_ge_5fapi_2eproto.base,
  &scc_info_CreateSessionResponse_ge_5fapi_2eproto.base,
  &scc_info_DestroySession_ge_5fapi_2eproto.base,
  &scc_info_DestroySessionResponse_ge_5fapi_2eproto.base,
  &scc_info_GEFinalize_ge_5fapi_2eproto.base,
  &scc_info_GEFinalizeResponse_ge_5fapi_2eproto.base,
  &scc_info_GEInitialize_ge_5fapi_2eproto.base,
  &scc_info_GEInitialize_OptionsEntry_DoNotUse_ge_5fapi_2eproto.base,
  &scc_info_GEInitializeResponse_ge_5fapi_2eproto.base,
  &scc_info_SessionAddGraph_ge_5fapi_2eproto.base,
  &scc_info_SessionAddGraphResponse_ge_5fapi_2eproto.base,
  &scc_info_SessionBuildGraph_ge_5fapi_2eproto.base,
  &scc_info_SessionBuildGraphResponse_ge_5fapi_2eproto.base,
  &scc_info_SessionRemoveGraph_ge_5fapi_2eproto.base,
  &scc_info_SessionRemoveGraphResponse_ge_5fapi_2eproto.base,
  &scc_info_SessionRunGraph_ge_5fapi_2eproto.base,
  &scc_info_SessionRunGraphResponse_ge_5fapi_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ge_5fapi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ge_5fapi_2eproto = {
  false, false, descriptor_table_protodef_ge_5fapi_2eproto, "ge_api.proto", 1149,
  &descriptor_table_ge_5fapi_2eproto_once, descriptor_table_ge_5fapi_2eproto_sccs, descriptor_table_ge_5fapi_2eproto_deps, 18, 1,
  schemas, file_default_instances, TableStruct_ge_5fapi_2eproto::offsets,
  file_level_metadata_ge_5fapi_2eproto, 18, file_level_enum_descriptors_ge_5fapi_2eproto, file_level_service_descriptors_ge_5fapi_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ge_5fapi_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ge_5fapi_2eproto)), true);
namespace ge {
namespace api_pb {

// ===================================================================

GEInitialize_OptionsEntry_DoNotUse::GEInitialize_OptionsEntry_DoNotUse() {}
GEInitialize_OptionsEntry_DoNotUse::GEInitialize_OptionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GEInitialize_OptionsEntry_DoNotUse::MergeFrom(const GEInitialize_OptionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GEInitialize_OptionsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GEInitialize_OptionsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void GEInitialize::InitAsDefaultInstance() {
}
class GEInitialize::_Internal {
 public:
};

GEInitialize::GEInitialize(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  options_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.api_pb.GEInitialize)
}
GEInitialize::GEInitialize(const GEInitialize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  options_.MergeFrom(from.options_);
  // @@protoc_insertion_point(copy_constructor:ge.api_pb.GEInitialize)
}

void GEInitialize::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GEInitialize_ge_5fapi_2eproto.base);
}

GEInitialize::~GEInitialize() {
  // @@protoc_insertion_point(destructor:ge.api_pb.GEInitialize)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GEInitialize::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GEInitialize::ArenaDtor(void* object) {
  GEInitialize* _this = reinterpret_cast< GEInitialize* >(object);
  (void)_this;
}
void GEInitialize::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GEInitialize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GEInitialize& GEInitialize::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GEInitialize_ge_5fapi_2eproto.base);
  return *internal_default_instance();
}


void GEInitialize::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.api_pb.GEInitialize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  options_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GEInitialize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, string> options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&options_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GEInitialize::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.api_pb.GEInitialize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> options = 1;
  if (!this->_internal_options().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ge.api_pb.GEInitialize.OptionsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ge.api_pb.GEInitialize.OptionsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_options().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_options().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_options().begin();
          it != this->_internal_options().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GEInitialize_OptionsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_options().begin();
          it != this->_internal_options().end(); ++it) {
        target = GEInitialize_OptionsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.api_pb.GEInitialize)
  return target;
}

size_t GEInitialize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.api_pb.GEInitialize)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> options = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_options_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_options().begin();
      it != this->_internal_options().end(); ++it) {
    total_size += GEInitialize_OptionsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GEInitialize::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.api_pb.GEInitialize)
  GOOGLE_DCHECK_NE(&from, this);
  const GEInitialize* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GEInitialize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.api_pb.GEInitialize)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.api_pb.GEInitialize)
    MergeFrom(*source);
  }
}

void GEInitialize::MergeFrom(const GEInitialize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.api_pb.GEInitialize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  options_.MergeFrom(from.options_);
}

void GEInitialize::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.api_pb.GEInitialize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GEInitialize::CopyFrom(const GEInitialize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.api_pb.GEInitialize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GEInitialize::IsInitialized() const {
  return true;
}

void GEInitialize::InternalSwap(GEInitialize* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  options_.Swap(&other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GEInitialize::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GEInitializeResponse::InitAsDefaultInstance() {
}
class GEInitializeResponse::_Internal {
 public:
};

GEInitializeResponse::GEInitializeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.api_pb.GEInitializeResponse)
}
GEInitializeResponse::GEInitializeResponse(const GEInitializeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&clientid_) -
    reinterpret_cast<char*>(&status_)) + sizeof(clientid_));
  // @@protoc_insertion_point(copy_constructor:ge.api_pb.GEInitializeResponse)
}

void GEInitializeResponse::SharedCtor() {
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clientid_) -
      reinterpret_cast<char*>(&status_)) + sizeof(clientid_));
}

GEInitializeResponse::~GEInitializeResponse() {
  // @@protoc_insertion_point(destructor:ge.api_pb.GEInitializeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GEInitializeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GEInitializeResponse::ArenaDtor(void* object) {
  GEInitializeResponse* _this = reinterpret_cast< GEInitializeResponse* >(object);
  (void)_this;
}
void GEInitializeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GEInitializeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GEInitializeResponse& GEInitializeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GEInitializeResponse_ge_5fapi_2eproto.base);
  return *internal_default_instance();
}


void GEInitializeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.api_pb.GEInitializeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clientid_) -
      reinterpret_cast<char*>(&status_)) + sizeof(clientid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GEInitializeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 clientId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          clientid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GEInitializeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.api_pb.GEInitializeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_status(), target);
  }

  // uint32 clientId = 2;
  if (this->clientid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_clientid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.api_pb.GEInitializeResponse)
  return target;
}

size_t GEInitializeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.api_pb.GEInitializeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  // uint32 clientId = 2;
  if (this->clientid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_clientid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GEInitializeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.api_pb.GEInitializeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GEInitializeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GEInitializeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.api_pb.GEInitializeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.api_pb.GEInitializeResponse)
    MergeFrom(*source);
  }
}

void GEInitializeResponse::MergeFrom(const GEInitializeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.api_pb.GEInitializeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.clientid() != 0) {
    _internal_set_clientid(from._internal_clientid());
  }
}

void GEInitializeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.api_pb.GEInitializeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GEInitializeResponse::CopyFrom(const GEInitializeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.api_pb.GEInitializeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GEInitializeResponse::IsInitialized() const {
  return true;
}

void GEInitializeResponse::InternalSwap(GEInitializeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GEInitializeResponse, clientid_)
      + sizeof(GEInitializeResponse::clientid_)
      - PROTOBUF_FIELD_OFFSET(GEInitializeResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GEInitializeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GEFinalize::InitAsDefaultInstance() {
}
class GEFinalize::_Internal {
 public:
};

GEFinalize::GEFinalize(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.api_pb.GEFinalize)
}
GEFinalize::GEFinalize(const GEFinalize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&final_, &from.final_,
    static_cast<size_t>(reinterpret_cast<char*>(&clientid_) -
    reinterpret_cast<char*>(&final_)) + sizeof(clientid_));
  // @@protoc_insertion_point(copy_constructor:ge.api_pb.GEFinalize)
}

void GEFinalize::SharedCtor() {
  ::memset(&final_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clientid_) -
      reinterpret_cast<char*>(&final_)) + sizeof(clientid_));
}

GEFinalize::~GEFinalize() {
  // @@protoc_insertion_point(destructor:ge.api_pb.GEFinalize)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GEFinalize::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GEFinalize::ArenaDtor(void* object) {
  GEFinalize* _this = reinterpret_cast< GEFinalize* >(object);
  (void)_this;
}
void GEFinalize::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GEFinalize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GEFinalize& GEFinalize::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GEFinalize_ge_5fapi_2eproto.base);
  return *internal_default_instance();
}


void GEFinalize::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.api_pb.GEFinalize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&final_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clientid_) -
      reinterpret_cast<char*>(&final_)) + sizeof(clientid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GEFinalize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool final = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          final_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 clientId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          clientid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GEFinalize::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.api_pb.GEFinalize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool final = 1;
  if (this->final() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_final(), target);
  }

  // uint32 clientId = 2;
  if (this->clientid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_clientid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.api_pb.GEFinalize)
  return target;
}

size_t GEFinalize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.api_pb.GEFinalize)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool final = 1;
  if (this->final() != 0) {
    total_size += 1 + 1;
  }

  // uint32 clientId = 2;
  if (this->clientid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_clientid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GEFinalize::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.api_pb.GEFinalize)
  GOOGLE_DCHECK_NE(&from, this);
  const GEFinalize* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GEFinalize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.api_pb.GEFinalize)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.api_pb.GEFinalize)
    MergeFrom(*source);
  }
}

void GEFinalize::MergeFrom(const GEFinalize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.api_pb.GEFinalize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.final() != 0) {
    _internal_set_final(from._internal_final());
  }
  if (from.clientid() != 0) {
    _internal_set_clientid(from._internal_clientid());
  }
}

void GEFinalize::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.api_pb.GEFinalize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GEFinalize::CopyFrom(const GEFinalize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.api_pb.GEFinalize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GEFinalize::IsInitialized() const {
  return true;
}

void GEFinalize::InternalSwap(GEFinalize* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GEFinalize, clientid_)
      + sizeof(GEFinalize::clientid_)
      - PROTOBUF_FIELD_OFFSET(GEFinalize, final_)>(
          reinterpret_cast<char*>(&final_),
          reinterpret_cast<char*>(&other->final_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GEFinalize::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GEFinalizeResponse::InitAsDefaultInstance() {
}
class GEFinalizeResponse::_Internal {
 public:
};

GEFinalizeResponse::GEFinalizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.api_pb.GEFinalizeResponse)
}
GEFinalizeResponse::GEFinalizeResponse(const GEFinalizeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ge.api_pb.GEFinalizeResponse)
}

void GEFinalizeResponse::SharedCtor() {
  status_ = 0u;
}

GEFinalizeResponse::~GEFinalizeResponse() {
  // @@protoc_insertion_point(destructor:ge.api_pb.GEFinalizeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GEFinalizeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GEFinalizeResponse::ArenaDtor(void* object) {
  GEFinalizeResponse* _this = reinterpret_cast< GEFinalizeResponse* >(object);
  (void)_this;
}
void GEFinalizeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GEFinalizeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GEFinalizeResponse& GEFinalizeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GEFinalizeResponse_ge_5fapi_2eproto.base);
  return *internal_default_instance();
}


void GEFinalizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.api_pb.GEFinalizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GEFinalizeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GEFinalizeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.api_pb.GEFinalizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.api_pb.GEFinalizeResponse)
  return target;
}

size_t GEFinalizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.api_pb.GEFinalizeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GEFinalizeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.api_pb.GEFinalizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GEFinalizeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GEFinalizeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.api_pb.GEFinalizeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.api_pb.GEFinalizeResponse)
    MergeFrom(*source);
  }
}

void GEFinalizeResponse::MergeFrom(const GEFinalizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.api_pb.GEFinalizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void GEFinalizeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.api_pb.GEFinalizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GEFinalizeResponse::CopyFrom(const GEFinalizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.api_pb.GEFinalizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GEFinalizeResponse::IsInitialized() const {
  return true;
}

void GEFinalizeResponse::InternalSwap(GEFinalizeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GEFinalizeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

CreateSession_OptionsEntry_DoNotUse::CreateSession_OptionsEntry_DoNotUse() {}
CreateSession_OptionsEntry_DoNotUse::CreateSession_OptionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CreateSession_OptionsEntry_DoNotUse::MergeFrom(const CreateSession_OptionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CreateSession_OptionsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void CreateSession_OptionsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void CreateSession::InitAsDefaultInstance() {
}
class CreateSession::_Internal {
 public:
};

CreateSession::CreateSession(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  options_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.api_pb.CreateSession)
}
CreateSession::CreateSession(const CreateSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  options_.MergeFrom(from.options_);
  // @@protoc_insertion_point(copy_constructor:ge.api_pb.CreateSession)
}

void CreateSession::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateSession_ge_5fapi_2eproto.base);
}

CreateSession::~CreateSession() {
  // @@protoc_insertion_point(destructor:ge.api_pb.CreateSession)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateSession::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CreateSession::ArenaDtor(void* object) {
  CreateSession* _this = reinterpret_cast< CreateSession* >(object);
  (void)_this;
}
void CreateSession::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateSession& CreateSession::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateSession_ge_5fapi_2eproto.base);
  return *internal_default_instance();
}


void CreateSession::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.api_pb.CreateSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  options_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, string> options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&options_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateSession::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.api_pb.CreateSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> options = 1;
  if (!this->_internal_options().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ge.api_pb.CreateSession.OptionsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ge.api_pb.CreateSession.OptionsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_options().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_options().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_options().begin();
          it != this->_internal_options().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CreateSession_OptionsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_options().begin();
          it != this->_internal_options().end(); ++it) {
        target = CreateSession_OptionsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.api_pb.CreateSession)
  return target;
}

size_t CreateSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.api_pb.CreateSession)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> options = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_options_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_options().begin();
      it != this->_internal_options().end(); ++it) {
    total_size += CreateSession_OptionsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateSession::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.api_pb.CreateSession)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateSession* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateSession>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.api_pb.CreateSession)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.api_pb.CreateSession)
    MergeFrom(*source);
  }
}

void CreateSession::MergeFrom(const CreateSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.api_pb.CreateSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  options_.MergeFrom(from.options_);
}

void CreateSession::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.api_pb.CreateSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSession::CopyFrom(const CreateSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.api_pb.CreateSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSession::IsInitialized() const {
  return true;
}

void CreateSession::InternalSwap(CreateSession* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  options_.Swap(&other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSession::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateSessionResponse::InitAsDefaultInstance() {
}
class CreateSessionResponse::_Internal {
 public:
};

CreateSessionResponse::CreateSessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.api_pb.CreateSessionResponse)
}
CreateSessionResponse::CreateSessionResponse(const CreateSessionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sessionid_, &from.sessionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&sessionid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:ge.api_pb.CreateSessionResponse)
}

void CreateSessionResponse::SharedCtor() {
  ::memset(&sessionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&sessionid_)) + sizeof(status_));
}

CreateSessionResponse::~CreateSessionResponse() {
  // @@protoc_insertion_point(destructor:ge.api_pb.CreateSessionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateSessionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CreateSessionResponse::ArenaDtor(void* object) {
  CreateSessionResponse* _this = reinterpret_cast< CreateSessionResponse* >(object);
  (void)_this;
}
void CreateSessionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateSessionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateSessionResponse& CreateSessionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateSessionResponse_ge_5fapi_2eproto.base);
  return *internal_default_instance();
}


void CreateSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.api_pb.CreateSessionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sessionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&sessionid_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateSessionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sessionId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateSessionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.api_pb.CreateSessionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_status(), target);
  }

  // uint64 sessionId = 2;
  if (this->sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.api_pb.CreateSessionResponse)
  return target;
}

size_t CreateSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.api_pb.CreateSessionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 sessionId = 2;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sessionid());
  }

  // uint32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateSessionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.api_pb.CreateSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateSessionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateSessionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.api_pb.CreateSessionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.api_pb.CreateSessionResponse)
    MergeFrom(*source);
  }
}

void CreateSessionResponse::MergeFrom(const CreateSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.api_pb.CreateSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sessionid() != 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void CreateSessionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.api_pb.CreateSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSessionResponse::CopyFrom(const CreateSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.api_pb.CreateSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSessionResponse::IsInitialized() const {
  return true;
}

void CreateSessionResponse::InternalSwap(CreateSessionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateSessionResponse, status_)
      + sizeof(CreateSessionResponse::status_)
      - PROTOBUF_FIELD_OFFSET(CreateSessionResponse, sessionid_)>(
          reinterpret_cast<char*>(&sessionid_),
          reinterpret_cast<char*>(&other->sessionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSessionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SessionAddGraph::InitAsDefaultInstance() {
  ::ge::api_pb::_SessionAddGraph_default_instance_._instance.get_mutable()->graph_ = const_cast< ::ge::proto::GraphDef*>(
      ::ge::proto::GraphDef::internal_default_instance());
}
class SessionAddGraph::_Internal {
 public:
  static const ::ge::proto::GraphDef& graph(const SessionAddGraph* msg);
};

const ::ge::proto::GraphDef&
SessionAddGraph::_Internal::graph(const SessionAddGraph* msg) {
  return *msg->graph_;
}
void SessionAddGraph::clear_graph() {
  if (GetArena() == nullptr && graph_ != nullptr) {
    delete graph_;
  }
  graph_ = nullptr;
}
SessionAddGraph::SessionAddGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.api_pb.SessionAddGraph)
}
SessionAddGraph::SessionAddGraph(const SessionAddGraph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_graph()) {
    graph_ = new ::ge::proto::GraphDef(*from.graph_);
  } else {
    graph_ = nullptr;
  }
  ::memcpy(&sessionid_, &from.sessionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&graphid_) -
    reinterpret_cast<char*>(&sessionid_)) + sizeof(graphid_));
  // @@protoc_insertion_point(copy_constructor:ge.api_pb.SessionAddGraph)
}

void SessionAddGraph::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SessionAddGraph_ge_5fapi_2eproto.base);
  ::memset(&graph_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&graphid_) -
      reinterpret_cast<char*>(&graph_)) + sizeof(graphid_));
}

SessionAddGraph::~SessionAddGraph() {
  // @@protoc_insertion_point(destructor:ge.api_pb.SessionAddGraph)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionAddGraph::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete graph_;
}

void SessionAddGraph::ArenaDtor(void* object) {
  SessionAddGraph* _this = reinterpret_cast< SessionAddGraph* >(object);
  (void)_this;
}
void SessionAddGraph::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionAddGraph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionAddGraph& SessionAddGraph::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionAddGraph_ge_5fapi_2eproto.base);
  return *internal_default_instance();
}


void SessionAddGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.api_pb.SessionAddGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && graph_ != nullptr) {
    delete graph_;
  }
  graph_ = nullptr;
  ::memset(&sessionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&graphid_) -
      reinterpret_cast<char*>(&sessionid_)) + sizeof(graphid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionAddGraph::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 graphId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          graphid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sessionId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ge.proto.GraphDef graph = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionAddGraph::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.api_pb.SessionAddGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 graphId = 1;
  if (this->graphid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_graphid(), target);
  }

  // uint64 sessionId = 2;
  if (this->sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_sessionid(), target);
  }

  // .ge.proto.GraphDef graph = 3;
  if (this->has_graph()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::graph(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.api_pb.SessionAddGraph)
  return target;
}

size_t SessionAddGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.api_pb.SessionAddGraph)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ge.proto.GraphDef graph = 3;
  if (this->has_graph()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *graph_);
  }

  // uint64 sessionId = 2;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sessionid());
  }

  // uint32 graphId = 1;
  if (this->graphid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_graphid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionAddGraph::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.api_pb.SessionAddGraph)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionAddGraph* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionAddGraph>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.api_pb.SessionAddGraph)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.api_pb.SessionAddGraph)
    MergeFrom(*source);
  }
}

void SessionAddGraph::MergeFrom(const SessionAddGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.api_pb.SessionAddGraph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_graph()) {
    _internal_mutable_graph()->::ge::proto::GraphDef::MergeFrom(from._internal_graph());
  }
  if (from.sessionid() != 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  if (from.graphid() != 0) {
    _internal_set_graphid(from._internal_graphid());
  }
}

void SessionAddGraph::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.api_pb.SessionAddGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionAddGraph::CopyFrom(const SessionAddGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.api_pb.SessionAddGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionAddGraph::IsInitialized() const {
  return true;
}

void SessionAddGraph::InternalSwap(SessionAddGraph* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionAddGraph, graphid_)
      + sizeof(SessionAddGraph::graphid_)
      - PROTOBUF_FIELD_OFFSET(SessionAddGraph, graph_)>(
          reinterpret_cast<char*>(&graph_),
          reinterpret_cast<char*>(&other->graph_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionAddGraph::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SessionAddGraphResponse::InitAsDefaultInstance() {
}
class SessionAddGraphResponse::_Internal {
 public:
};

SessionAddGraphResponse::SessionAddGraphResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.api_pb.SessionAddGraphResponse)
}
SessionAddGraphResponse::SessionAddGraphResponse(const SessionAddGraphResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ge.api_pb.SessionAddGraphResponse)
}

void SessionAddGraphResponse::SharedCtor() {
  status_ = 0u;
}

SessionAddGraphResponse::~SessionAddGraphResponse() {
  // @@protoc_insertion_point(destructor:ge.api_pb.SessionAddGraphResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionAddGraphResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SessionAddGraphResponse::ArenaDtor(void* object) {
  SessionAddGraphResponse* _this = reinterpret_cast< SessionAddGraphResponse* >(object);
  (void)_this;
}
void SessionAddGraphResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionAddGraphResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionAddGraphResponse& SessionAddGraphResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionAddGraphResponse_ge_5fapi_2eproto.base);
  return *internal_default_instance();
}


void SessionAddGraphResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.api_pb.SessionAddGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionAddGraphResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionAddGraphResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.api_pb.SessionAddGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.api_pb.SessionAddGraphResponse)
  return target;
}

size_t SessionAddGraphResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.api_pb.SessionAddGraphResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionAddGraphResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.api_pb.SessionAddGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionAddGraphResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionAddGraphResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.api_pb.SessionAddGraphResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.api_pb.SessionAddGraphResponse)
    MergeFrom(*source);
  }
}

void SessionAddGraphResponse::MergeFrom(const SessionAddGraphResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.api_pb.SessionAddGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SessionAddGraphResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.api_pb.SessionAddGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionAddGraphResponse::CopyFrom(const SessionAddGraphResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.api_pb.SessionAddGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionAddGraphResponse::IsInitialized() const {
  return true;
}

void SessionAddGraphResponse::InternalSwap(SessionAddGraphResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionAddGraphResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SessionRemoveGraph::InitAsDefaultInstance() {
}
class SessionRemoveGraph::_Internal {
 public:
};

SessionRemoveGraph::SessionRemoveGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.api_pb.SessionRemoveGraph)
}
SessionRemoveGraph::SessionRemoveGraph(const SessionRemoveGraph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sessionid_, &from.sessionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&graphid_) -
    reinterpret_cast<char*>(&sessionid_)) + sizeof(graphid_));
  // @@protoc_insertion_point(copy_constructor:ge.api_pb.SessionRemoveGraph)
}

void SessionRemoveGraph::SharedCtor() {
  ::memset(&sessionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&graphid_) -
      reinterpret_cast<char*>(&sessionid_)) + sizeof(graphid_));
}

SessionRemoveGraph::~SessionRemoveGraph() {
  // @@protoc_insertion_point(destructor:ge.api_pb.SessionRemoveGraph)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionRemoveGraph::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SessionRemoveGraph::ArenaDtor(void* object) {
  SessionRemoveGraph* _this = reinterpret_cast< SessionRemoveGraph* >(object);
  (void)_this;
}
void SessionRemoveGraph::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionRemoveGraph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionRemoveGraph& SessionRemoveGraph::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionRemoveGraph_ge_5fapi_2eproto.base);
  return *internal_default_instance();
}


void SessionRemoveGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.api_pb.SessionRemoveGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sessionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&graphid_) -
      reinterpret_cast<char*>(&sessionid_)) + sizeof(graphid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionRemoveGraph::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 graphId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          graphid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sessionId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionRemoveGraph::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.api_pb.SessionRemoveGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 graphId = 1;
  if (this->graphid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_graphid(), target);
  }

  // uint64 sessionId = 2;
  if (this->sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.api_pb.SessionRemoveGraph)
  return target;
}

size_t SessionRemoveGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.api_pb.SessionRemoveGraph)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 sessionId = 2;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sessionid());
  }

  // uint32 graphId = 1;
  if (this->graphid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_graphid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionRemoveGraph::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.api_pb.SessionRemoveGraph)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionRemoveGraph* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionRemoveGraph>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.api_pb.SessionRemoveGraph)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.api_pb.SessionRemoveGraph)
    MergeFrom(*source);
  }
}

void SessionRemoveGraph::MergeFrom(const SessionRemoveGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.api_pb.SessionRemoveGraph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sessionid() != 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  if (from.graphid() != 0) {
    _internal_set_graphid(from._internal_graphid());
  }
}

void SessionRemoveGraph::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.api_pb.SessionRemoveGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionRemoveGraph::CopyFrom(const SessionRemoveGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.api_pb.SessionRemoveGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionRemoveGraph::IsInitialized() const {
  return true;
}

void SessionRemoveGraph::InternalSwap(SessionRemoveGraph* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionRemoveGraph, graphid_)
      + sizeof(SessionRemoveGraph::graphid_)
      - PROTOBUF_FIELD_OFFSET(SessionRemoveGraph, sessionid_)>(
          reinterpret_cast<char*>(&sessionid_),
          reinterpret_cast<char*>(&other->sessionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionRemoveGraph::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SessionRemoveGraphResponse::InitAsDefaultInstance() {
}
class SessionRemoveGraphResponse::_Internal {
 public:
};

SessionRemoveGraphResponse::SessionRemoveGraphResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.api_pb.SessionRemoveGraphResponse)
}
SessionRemoveGraphResponse::SessionRemoveGraphResponse(const SessionRemoveGraphResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ge.api_pb.SessionRemoveGraphResponse)
}

void SessionRemoveGraphResponse::SharedCtor() {
  status_ = 0u;
}

SessionRemoveGraphResponse::~SessionRemoveGraphResponse() {
  // @@protoc_insertion_point(destructor:ge.api_pb.SessionRemoveGraphResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionRemoveGraphResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SessionRemoveGraphResponse::ArenaDtor(void* object) {
  SessionRemoveGraphResponse* _this = reinterpret_cast< SessionRemoveGraphResponse* >(object);
  (void)_this;
}
void SessionRemoveGraphResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionRemoveGraphResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionRemoveGraphResponse& SessionRemoveGraphResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionRemoveGraphResponse_ge_5fapi_2eproto.base);
  return *internal_default_instance();
}


void SessionRemoveGraphResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.api_pb.SessionRemoveGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionRemoveGraphResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionRemoveGraphResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.api_pb.SessionRemoveGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.api_pb.SessionRemoveGraphResponse)
  return target;
}

size_t SessionRemoveGraphResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.api_pb.SessionRemoveGraphResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionRemoveGraphResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.api_pb.SessionRemoveGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionRemoveGraphResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionRemoveGraphResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.api_pb.SessionRemoveGraphResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.api_pb.SessionRemoveGraphResponse)
    MergeFrom(*source);
  }
}

void SessionRemoveGraphResponse::MergeFrom(const SessionRemoveGraphResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.api_pb.SessionRemoveGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SessionRemoveGraphResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.api_pb.SessionRemoveGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionRemoveGraphResponse::CopyFrom(const SessionRemoveGraphResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.api_pb.SessionRemoveGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionRemoveGraphResponse::IsInitialized() const {
  return true;
}

void SessionRemoveGraphResponse::InternalSwap(SessionRemoveGraphResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionRemoveGraphResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SessionRunGraph::InitAsDefaultInstance() {
}
class SessionRunGraph::_Internal {
 public:
};

void SessionRunGraph::clear_tensor() {
  tensor_.Clear();
}
SessionRunGraph::SessionRunGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tensor_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.api_pb.SessionRunGraph)
}
SessionRunGraph::SessionRunGraph(const SessionRunGraph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tensor_(from.tensor_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sessionid_, &from.sessionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&graphid_) -
    reinterpret_cast<char*>(&sessionid_)) + sizeof(graphid_));
  // @@protoc_insertion_point(copy_constructor:ge.api_pb.SessionRunGraph)
}

void SessionRunGraph::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SessionRunGraph_ge_5fapi_2eproto.base);
  ::memset(&sessionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&graphid_) -
      reinterpret_cast<char*>(&sessionid_)) + sizeof(graphid_));
}

SessionRunGraph::~SessionRunGraph() {
  // @@protoc_insertion_point(destructor:ge.api_pb.SessionRunGraph)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionRunGraph::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SessionRunGraph::ArenaDtor(void* object) {
  SessionRunGraph* _this = reinterpret_cast< SessionRunGraph* >(object);
  (void)_this;
}
void SessionRunGraph::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionRunGraph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionRunGraph& SessionRunGraph::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionRunGraph_ge_5fapi_2eproto.base);
  return *internal_default_instance();
}


void SessionRunGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.api_pb.SessionRunGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tensor_.Clear();
  ::memset(&sessionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&graphid_) -
      reinterpret_cast<char*>(&sessionid_)) + sizeof(graphid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionRunGraph::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 graphId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          graphid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sessionId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ge.proto.TensorDef tensor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tensor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionRunGraph::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.api_pb.SessionRunGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 graphId = 1;
  if (this->graphid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_graphid(), target);
  }

  // uint64 sessionId = 2;
  if (this->sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_sessionid(), target);
  }

  // repeated .ge.proto.TensorDef tensor = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tensor_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_tensor(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.api_pb.SessionRunGraph)
  return target;
}

size_t SessionRunGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.api_pb.SessionRunGraph)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ge.proto.TensorDef tensor = 3;
  total_size += 1UL * this->_internal_tensor_size();
  for (const auto& msg : this->tensor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 sessionId = 2;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sessionid());
  }

  // uint32 graphId = 1;
  if (this->graphid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_graphid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionRunGraph::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.api_pb.SessionRunGraph)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionRunGraph* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionRunGraph>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.api_pb.SessionRunGraph)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.api_pb.SessionRunGraph)
    MergeFrom(*source);
  }
}

void SessionRunGraph::MergeFrom(const SessionRunGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.api_pb.SessionRunGraph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tensor_.MergeFrom(from.tensor_);
  if (from.sessionid() != 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  if (from.graphid() != 0) {
    _internal_set_graphid(from._internal_graphid());
  }
}

void SessionRunGraph::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.api_pb.SessionRunGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionRunGraph::CopyFrom(const SessionRunGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.api_pb.SessionRunGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionRunGraph::IsInitialized() const {
  return true;
}

void SessionRunGraph::InternalSwap(SessionRunGraph* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tensor_.InternalSwap(&other->tensor_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionRunGraph, graphid_)
      + sizeof(SessionRunGraph::graphid_)
      - PROTOBUF_FIELD_OFFSET(SessionRunGraph, sessionid_)>(
          reinterpret_cast<char*>(&sessionid_),
          reinterpret_cast<char*>(&other->sessionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionRunGraph::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SessionBuildGraph::InitAsDefaultInstance() {
}
class SessionBuildGraph::_Internal {
 public:
};

void SessionBuildGraph::clear_tensor() {
  tensor_.Clear();
}
SessionBuildGraph::SessionBuildGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tensor_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.api_pb.SessionBuildGraph)
}
SessionBuildGraph::SessionBuildGraph(const SessionBuildGraph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tensor_(from.tensor_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  savepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_savepath().empty()) {
    savepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_savepath(),
      GetArena());
  }
  ::memcpy(&sessionid_, &from.sessionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&graphid_) -
    reinterpret_cast<char*>(&sessionid_)) + sizeof(graphid_));
  // @@protoc_insertion_point(copy_constructor:ge.api_pb.SessionBuildGraph)
}

void SessionBuildGraph::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SessionBuildGraph_ge_5fapi_2eproto.base);
  savepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sessionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&graphid_) -
      reinterpret_cast<char*>(&sessionid_)) + sizeof(graphid_));
}

SessionBuildGraph::~SessionBuildGraph() {
  // @@protoc_insertion_point(destructor:ge.api_pb.SessionBuildGraph)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionBuildGraph::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  savepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SessionBuildGraph::ArenaDtor(void* object) {
  SessionBuildGraph* _this = reinterpret_cast< SessionBuildGraph* >(object);
  (void)_this;
}
void SessionBuildGraph::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionBuildGraph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionBuildGraph& SessionBuildGraph::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionBuildGraph_ge_5fapi_2eproto.base);
  return *internal_default_instance();
}


void SessionBuildGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.api_pb.SessionBuildGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tensor_.Clear();
  savepath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&sessionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&graphid_) -
      reinterpret_cast<char*>(&sessionid_)) + sizeof(graphid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionBuildGraph::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 graphId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          graphid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sessionId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ge.proto.TensorDef tensor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tensor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string savePath = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_savepath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.api_pb.SessionBuildGraph.savePath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionBuildGraph::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.api_pb.SessionBuildGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 graphId = 1;
  if (this->graphid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_graphid(), target);
  }

  // uint64 sessionId = 2;
  if (this->sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_sessionid(), target);
  }

  // repeated .ge.proto.TensorDef tensor = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tensor_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_tensor(i), target, stream);
  }

  // string savePath = 4;
  if (this->savepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_savepath().data(), static_cast<int>(this->_internal_savepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.api_pb.SessionBuildGraph.savePath");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_savepath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.api_pb.SessionBuildGraph)
  return target;
}

size_t SessionBuildGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.api_pb.SessionBuildGraph)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ge.proto.TensorDef tensor = 3;
  total_size += 1UL * this->_internal_tensor_size();
  for (const auto& msg : this->tensor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string savePath = 4;
  if (this->savepath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_savepath());
  }

  // uint64 sessionId = 2;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sessionid());
  }

  // uint32 graphId = 1;
  if (this->graphid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_graphid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionBuildGraph::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.api_pb.SessionBuildGraph)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionBuildGraph* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionBuildGraph>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.api_pb.SessionBuildGraph)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.api_pb.SessionBuildGraph)
    MergeFrom(*source);
  }
}

void SessionBuildGraph::MergeFrom(const SessionBuildGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.api_pb.SessionBuildGraph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tensor_.MergeFrom(from.tensor_);
  if (from.savepath().size() > 0) {
    _internal_set_savepath(from._internal_savepath());
  }
  if (from.sessionid() != 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  if (from.graphid() != 0) {
    _internal_set_graphid(from._internal_graphid());
  }
}

void SessionBuildGraph::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.api_pb.SessionBuildGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionBuildGraph::CopyFrom(const SessionBuildGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.api_pb.SessionBuildGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionBuildGraph::IsInitialized() const {
  return true;
}

void SessionBuildGraph::InternalSwap(SessionBuildGraph* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tensor_.InternalSwap(&other->tensor_);
  savepath_.Swap(&other->savepath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionBuildGraph, graphid_)
      + sizeof(SessionBuildGraph::graphid_)
      - PROTOBUF_FIELD_OFFSET(SessionBuildGraph, sessionid_)>(
          reinterpret_cast<char*>(&sessionid_),
          reinterpret_cast<char*>(&other->sessionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionBuildGraph::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SessionRunGraphResponse::InitAsDefaultInstance() {
}
class SessionRunGraphResponse::_Internal {
 public:
};

void SessionRunGraphResponse::clear_tensor() {
  tensor_.Clear();
}
SessionRunGraphResponse::SessionRunGraphResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tensor_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.api_pb.SessionRunGraphResponse)
}
SessionRunGraphResponse::SessionRunGraphResponse(const SessionRunGraphResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tensor_(from.tensor_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ge.api_pb.SessionRunGraphResponse)
}

void SessionRunGraphResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SessionRunGraphResponse_ge_5fapi_2eproto.base);
  status_ = 0u;
}

SessionRunGraphResponse::~SessionRunGraphResponse() {
  // @@protoc_insertion_point(destructor:ge.api_pb.SessionRunGraphResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionRunGraphResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SessionRunGraphResponse::ArenaDtor(void* object) {
  SessionRunGraphResponse* _this = reinterpret_cast< SessionRunGraphResponse* >(object);
  (void)_this;
}
void SessionRunGraphResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionRunGraphResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionRunGraphResponse& SessionRunGraphResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionRunGraphResponse_ge_5fapi_2eproto.base);
  return *internal_default_instance();
}


void SessionRunGraphResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.api_pb.SessionRunGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tensor_.Clear();
  status_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionRunGraphResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ge.proto.TensorDef tensor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tensor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionRunGraphResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.api_pb.SessionRunGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_status(), target);
  }

  // repeated .ge.proto.TensorDef tensor = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tensor_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tensor(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.api_pb.SessionRunGraphResponse)
  return target;
}

size_t SessionRunGraphResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.api_pb.SessionRunGraphResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ge.proto.TensorDef tensor = 2;
  total_size += 1UL * this->_internal_tensor_size();
  for (const auto& msg : this->tensor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionRunGraphResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.api_pb.SessionRunGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionRunGraphResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionRunGraphResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.api_pb.SessionRunGraphResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.api_pb.SessionRunGraphResponse)
    MergeFrom(*source);
  }
}

void SessionRunGraphResponse::MergeFrom(const SessionRunGraphResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.api_pb.SessionRunGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tensor_.MergeFrom(from.tensor_);
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SessionRunGraphResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.api_pb.SessionRunGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionRunGraphResponse::CopyFrom(const SessionRunGraphResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.api_pb.SessionRunGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionRunGraphResponse::IsInitialized() const {
  return true;
}

void SessionRunGraphResponse::InternalSwap(SessionRunGraphResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tensor_.InternalSwap(&other->tensor_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionRunGraphResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SessionBuildGraphResponse::InitAsDefaultInstance() {
}
class SessionBuildGraphResponse::_Internal {
 public:
};

SessionBuildGraphResponse::SessionBuildGraphResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.api_pb.SessionBuildGraphResponse)
}
SessionBuildGraphResponse::SessionBuildGraphResponse(const SessionBuildGraphResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ge.api_pb.SessionBuildGraphResponse)
}

void SessionBuildGraphResponse::SharedCtor() {
  status_ = 0u;
}

SessionBuildGraphResponse::~SessionBuildGraphResponse() {
  // @@protoc_insertion_point(destructor:ge.api_pb.SessionBuildGraphResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionBuildGraphResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SessionBuildGraphResponse::ArenaDtor(void* object) {
  SessionBuildGraphResponse* _this = reinterpret_cast< SessionBuildGraphResponse* >(object);
  (void)_this;
}
void SessionBuildGraphResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionBuildGraphResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionBuildGraphResponse& SessionBuildGraphResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionBuildGraphResponse_ge_5fapi_2eproto.base);
  return *internal_default_instance();
}


void SessionBuildGraphResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.api_pb.SessionBuildGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionBuildGraphResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionBuildGraphResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.api_pb.SessionBuildGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.api_pb.SessionBuildGraphResponse)
  return target;
}

size_t SessionBuildGraphResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.api_pb.SessionBuildGraphResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionBuildGraphResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.api_pb.SessionBuildGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionBuildGraphResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionBuildGraphResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.api_pb.SessionBuildGraphResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.api_pb.SessionBuildGraphResponse)
    MergeFrom(*source);
  }
}

void SessionBuildGraphResponse::MergeFrom(const SessionBuildGraphResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.api_pb.SessionBuildGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SessionBuildGraphResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.api_pb.SessionBuildGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionBuildGraphResponse::CopyFrom(const SessionBuildGraphResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.api_pb.SessionBuildGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionBuildGraphResponse::IsInitialized() const {
  return true;
}

void SessionBuildGraphResponse::InternalSwap(SessionBuildGraphResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionBuildGraphResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DestroySession::InitAsDefaultInstance() {
}
class DestroySession::_Internal {
 public:
};

DestroySession::DestroySession(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.api_pb.DestroySession)
}
DestroySession::DestroySession(const DestroySession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sessionid_, &from.sessionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&final_) -
    reinterpret_cast<char*>(&sessionid_)) + sizeof(final_));
  // @@protoc_insertion_point(copy_constructor:ge.api_pb.DestroySession)
}

void DestroySession::SharedCtor() {
  ::memset(&sessionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&final_) -
      reinterpret_cast<char*>(&sessionid_)) + sizeof(final_));
}

DestroySession::~DestroySession() {
  // @@protoc_insertion_point(destructor:ge.api_pb.DestroySession)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DestroySession::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DestroySession::ArenaDtor(void* object) {
  DestroySession* _this = reinterpret_cast< DestroySession* >(object);
  (void)_this;
}
void DestroySession::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DestroySession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DestroySession& DestroySession::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DestroySession_ge_5fapi_2eproto.base);
  return *internal_default_instance();
}


void DestroySession::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.api_pb.DestroySession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sessionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&final_) -
      reinterpret_cast<char*>(&sessionid_)) + sizeof(final_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DestroySession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool final = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          final_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sessionId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DestroySession::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.api_pb.DestroySession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool final = 1;
  if (this->final() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_final(), target);
  }

  // uint64 sessionId = 2;
  if (this->sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.api_pb.DestroySession)
  return target;
}

size_t DestroySession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.api_pb.DestroySession)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 sessionId = 2;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sessionid());
  }

  // bool final = 1;
  if (this->final() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DestroySession::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.api_pb.DestroySession)
  GOOGLE_DCHECK_NE(&from, this);
  const DestroySession* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DestroySession>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.api_pb.DestroySession)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.api_pb.DestroySession)
    MergeFrom(*source);
  }
}

void DestroySession::MergeFrom(const DestroySession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.api_pb.DestroySession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sessionid() != 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  if (from.final() != 0) {
    _internal_set_final(from._internal_final());
  }
}

void DestroySession::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.api_pb.DestroySession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestroySession::CopyFrom(const DestroySession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.api_pb.DestroySession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroySession::IsInitialized() const {
  return true;
}

void DestroySession::InternalSwap(DestroySession* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DestroySession, final_)
      + sizeof(DestroySession::final_)
      - PROTOBUF_FIELD_OFFSET(DestroySession, sessionid_)>(
          reinterpret_cast<char*>(&sessionid_),
          reinterpret_cast<char*>(&other->sessionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DestroySession::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DestroySessionResponse::InitAsDefaultInstance() {
}
class DestroySessionResponse::_Internal {
 public:
};

DestroySessionResponse::DestroySessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.api_pb.DestroySessionResponse)
}
DestroySessionResponse::DestroySessionResponse(const DestroySessionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ge.api_pb.DestroySessionResponse)
}

void DestroySessionResponse::SharedCtor() {
  status_ = 0u;
}

DestroySessionResponse::~DestroySessionResponse() {
  // @@protoc_insertion_point(destructor:ge.api_pb.DestroySessionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DestroySessionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DestroySessionResponse::ArenaDtor(void* object) {
  DestroySessionResponse* _this = reinterpret_cast< DestroySessionResponse* >(object);
  (void)_this;
}
void DestroySessionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DestroySessionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DestroySessionResponse& DestroySessionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DestroySessionResponse_ge_5fapi_2eproto.base);
  return *internal_default_instance();
}


void DestroySessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.api_pb.DestroySessionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DestroySessionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DestroySessionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.api_pb.DestroySessionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.api_pb.DestroySessionResponse)
  return target;
}

size_t DestroySessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.api_pb.DestroySessionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DestroySessionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.api_pb.DestroySessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DestroySessionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DestroySessionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.api_pb.DestroySessionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.api_pb.DestroySessionResponse)
    MergeFrom(*source);
  }
}

void DestroySessionResponse::MergeFrom(const DestroySessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.api_pb.DestroySessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void DestroySessionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.api_pb.DestroySessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestroySessionResponse::CopyFrom(const DestroySessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.api_pb.DestroySessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroySessionResponse::IsInitialized() const {
  return true;
}

void DestroySessionResponse::InternalSwap(DestroySessionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DestroySessionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api_pb
}  // namespace ge
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ge::api_pb::GEInitialize_OptionsEntry_DoNotUse* Arena::CreateMaybeMessage< ::ge::api_pb::GEInitialize_OptionsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::api_pb::GEInitialize_OptionsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::api_pb::GEInitialize* Arena::CreateMaybeMessage< ::ge::api_pb::GEInitialize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::api_pb::GEInitialize >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::api_pb::GEInitializeResponse* Arena::CreateMaybeMessage< ::ge::api_pb::GEInitializeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::api_pb::GEInitializeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::api_pb::GEFinalize* Arena::CreateMaybeMessage< ::ge::api_pb::GEFinalize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::api_pb::GEFinalize >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::api_pb::GEFinalizeResponse* Arena::CreateMaybeMessage< ::ge::api_pb::GEFinalizeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::api_pb::GEFinalizeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::api_pb::CreateSession_OptionsEntry_DoNotUse* Arena::CreateMaybeMessage< ::ge::api_pb::CreateSession_OptionsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::api_pb::CreateSession_OptionsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::api_pb::CreateSession* Arena::CreateMaybeMessage< ::ge::api_pb::CreateSession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::api_pb::CreateSession >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::api_pb::CreateSessionResponse* Arena::CreateMaybeMessage< ::ge::api_pb::CreateSessionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::api_pb::CreateSessionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::api_pb::SessionAddGraph* Arena::CreateMaybeMessage< ::ge::api_pb::SessionAddGraph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::api_pb::SessionAddGraph >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::api_pb::SessionAddGraphResponse* Arena::CreateMaybeMessage< ::ge::api_pb::SessionAddGraphResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::api_pb::SessionAddGraphResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::api_pb::SessionRemoveGraph* Arena::CreateMaybeMessage< ::ge::api_pb::SessionRemoveGraph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::api_pb::SessionRemoveGraph >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::api_pb::SessionRemoveGraphResponse* Arena::CreateMaybeMessage< ::ge::api_pb::SessionRemoveGraphResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::api_pb::SessionRemoveGraphResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::api_pb::SessionRunGraph* Arena::CreateMaybeMessage< ::ge::api_pb::SessionRunGraph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::api_pb::SessionRunGraph >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::api_pb::SessionBuildGraph* Arena::CreateMaybeMessage< ::ge::api_pb::SessionBuildGraph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::api_pb::SessionBuildGraph >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::api_pb::SessionRunGraphResponse* Arena::CreateMaybeMessage< ::ge::api_pb::SessionRunGraphResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::api_pb::SessionRunGraphResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::api_pb::SessionBuildGraphResponse* Arena::CreateMaybeMessage< ::ge::api_pb::SessionBuildGraphResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::api_pb::SessionBuildGraphResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::api_pb::DestroySession* Arena::CreateMaybeMessage< ::ge::api_pb::DestroySession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::api_pb::DestroySession >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::api_pb::DestroySessionResponse* Arena::CreateMaybeMessage< ::ge::api_pb::DestroySessionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::api_pb::DestroySessionResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
