// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ge_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ge_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ge_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "ge_ir.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ge_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ge_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ge_5fapi_2eproto;
namespace ge {
namespace api_pb {
class CreateSession;
class CreateSessionDefaultTypeInternal;
extern CreateSessionDefaultTypeInternal _CreateSession_default_instance_;
class CreateSessionResponse;
class CreateSessionResponseDefaultTypeInternal;
extern CreateSessionResponseDefaultTypeInternal _CreateSessionResponse_default_instance_;
class CreateSession_OptionsEntry_DoNotUse;
class CreateSession_OptionsEntry_DoNotUseDefaultTypeInternal;
extern CreateSession_OptionsEntry_DoNotUseDefaultTypeInternal _CreateSession_OptionsEntry_DoNotUse_default_instance_;
class DestroySession;
class DestroySessionDefaultTypeInternal;
extern DestroySessionDefaultTypeInternal _DestroySession_default_instance_;
class DestroySessionResponse;
class DestroySessionResponseDefaultTypeInternal;
extern DestroySessionResponseDefaultTypeInternal _DestroySessionResponse_default_instance_;
class GEFinalize;
class GEFinalizeDefaultTypeInternal;
extern GEFinalizeDefaultTypeInternal _GEFinalize_default_instance_;
class GEFinalizeResponse;
class GEFinalizeResponseDefaultTypeInternal;
extern GEFinalizeResponseDefaultTypeInternal _GEFinalizeResponse_default_instance_;
class GEInitialize;
class GEInitializeDefaultTypeInternal;
extern GEInitializeDefaultTypeInternal _GEInitialize_default_instance_;
class GEInitializeResponse;
class GEInitializeResponseDefaultTypeInternal;
extern GEInitializeResponseDefaultTypeInternal _GEInitializeResponse_default_instance_;
class GEInitialize_OptionsEntry_DoNotUse;
class GEInitialize_OptionsEntry_DoNotUseDefaultTypeInternal;
extern GEInitialize_OptionsEntry_DoNotUseDefaultTypeInternal _GEInitialize_OptionsEntry_DoNotUse_default_instance_;
class SessionAddGraph;
class SessionAddGraphDefaultTypeInternal;
extern SessionAddGraphDefaultTypeInternal _SessionAddGraph_default_instance_;
class SessionAddGraphResponse;
class SessionAddGraphResponseDefaultTypeInternal;
extern SessionAddGraphResponseDefaultTypeInternal _SessionAddGraphResponse_default_instance_;
class SessionBuildGraph;
class SessionBuildGraphDefaultTypeInternal;
extern SessionBuildGraphDefaultTypeInternal _SessionBuildGraph_default_instance_;
class SessionBuildGraphResponse;
class SessionBuildGraphResponseDefaultTypeInternal;
extern SessionBuildGraphResponseDefaultTypeInternal _SessionBuildGraphResponse_default_instance_;
class SessionRemoveGraph;
class SessionRemoveGraphDefaultTypeInternal;
extern SessionRemoveGraphDefaultTypeInternal _SessionRemoveGraph_default_instance_;
class SessionRemoveGraphResponse;
class SessionRemoveGraphResponseDefaultTypeInternal;
extern SessionRemoveGraphResponseDefaultTypeInternal _SessionRemoveGraphResponse_default_instance_;
class SessionRunGraph;
class SessionRunGraphDefaultTypeInternal;
extern SessionRunGraphDefaultTypeInternal _SessionRunGraph_default_instance_;
class SessionRunGraphResponse;
class SessionRunGraphResponseDefaultTypeInternal;
extern SessionRunGraphResponseDefaultTypeInternal _SessionRunGraphResponse_default_instance_;
}  // namespace api_pb
}  // namespace ge
PROTOBUF_NAMESPACE_OPEN
template<> ::ge::api_pb::CreateSession* Arena::CreateMaybeMessage<::ge::api_pb::CreateSession>(Arena*);
template<> ::ge::api_pb::CreateSessionResponse* Arena::CreateMaybeMessage<::ge::api_pb::CreateSessionResponse>(Arena*);
template<> ::ge::api_pb::CreateSession_OptionsEntry_DoNotUse* Arena::CreateMaybeMessage<::ge::api_pb::CreateSession_OptionsEntry_DoNotUse>(Arena*);
template<> ::ge::api_pb::DestroySession* Arena::CreateMaybeMessage<::ge::api_pb::DestroySession>(Arena*);
template<> ::ge::api_pb::DestroySessionResponse* Arena::CreateMaybeMessage<::ge::api_pb::DestroySessionResponse>(Arena*);
template<> ::ge::api_pb::GEFinalize* Arena::CreateMaybeMessage<::ge::api_pb::GEFinalize>(Arena*);
template<> ::ge::api_pb::GEFinalizeResponse* Arena::CreateMaybeMessage<::ge::api_pb::GEFinalizeResponse>(Arena*);
template<> ::ge::api_pb::GEInitialize* Arena::CreateMaybeMessage<::ge::api_pb::GEInitialize>(Arena*);
template<> ::ge::api_pb::GEInitializeResponse* Arena::CreateMaybeMessage<::ge::api_pb::GEInitializeResponse>(Arena*);
template<> ::ge::api_pb::GEInitialize_OptionsEntry_DoNotUse* Arena::CreateMaybeMessage<::ge::api_pb::GEInitialize_OptionsEntry_DoNotUse>(Arena*);
template<> ::ge::api_pb::SessionAddGraph* Arena::CreateMaybeMessage<::ge::api_pb::SessionAddGraph>(Arena*);
template<> ::ge::api_pb::SessionAddGraphResponse* Arena::CreateMaybeMessage<::ge::api_pb::SessionAddGraphResponse>(Arena*);
template<> ::ge::api_pb::SessionBuildGraph* Arena::CreateMaybeMessage<::ge::api_pb::SessionBuildGraph>(Arena*);
template<> ::ge::api_pb::SessionBuildGraphResponse* Arena::CreateMaybeMessage<::ge::api_pb::SessionBuildGraphResponse>(Arena*);
template<> ::ge::api_pb::SessionRemoveGraph* Arena::CreateMaybeMessage<::ge::api_pb::SessionRemoveGraph>(Arena*);
template<> ::ge::api_pb::SessionRemoveGraphResponse* Arena::CreateMaybeMessage<::ge::api_pb::SessionRemoveGraphResponse>(Arena*);
template<> ::ge::api_pb::SessionRunGraph* Arena::CreateMaybeMessage<::ge::api_pb::SessionRunGraph>(Arena*);
template<> ::ge::api_pb::SessionRunGraphResponse* Arena::CreateMaybeMessage<::ge::api_pb::SessionRunGraphResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ge {
namespace api_pb {

// ===================================================================

class GEInitialize_OptionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GEInitialize_OptionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GEInitialize_OptionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  GEInitialize_OptionsEntry_DoNotUse();
  explicit GEInitialize_OptionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GEInitialize_OptionsEntry_DoNotUse& other);
  static const GEInitialize_OptionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GEInitialize_OptionsEntry_DoNotUse*>(&_GEInitialize_OptionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ge.api_pb.GEInitialize.OptionsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ge.api_pb.GEInitialize.OptionsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fapi_2eproto);
    return ::descriptor_table_ge_5fapi_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class GEInitialize PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.api_pb.GEInitialize) */ {
 public:
  inline GEInitialize() : GEInitialize(nullptr) {}
  virtual ~GEInitialize();

  GEInitialize(const GEInitialize& from);
  GEInitialize(GEInitialize&& from) noexcept
    : GEInitialize() {
    *this = ::std::move(from);
  }

  inline GEInitialize& operator=(const GEInitialize& from) {
    CopyFrom(from);
    return *this;
  }
  inline GEInitialize& operator=(GEInitialize&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GEInitialize& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GEInitialize* internal_default_instance() {
    return reinterpret_cast<const GEInitialize*>(
               &_GEInitialize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GEInitialize& a, GEInitialize& b) {
    a.Swap(&b);
  }
  inline void Swap(GEInitialize* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GEInitialize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GEInitialize* New() const final {
    return CreateMaybeMessage<GEInitialize>(nullptr);
  }

  GEInitialize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GEInitialize>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GEInitialize& from);
  void MergeFrom(const GEInitialize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GEInitialize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.api_pb.GEInitialize";
  }
  protected:
  explicit GEInitialize(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fapi_2eproto);
    return ::descriptor_table_ge_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // map<string, string> options = 1;
  int options_size() const;
  private:
  int _internal_options_size() const;
  public:
  void clear_options();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_options() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_options();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      options() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_options();

  // @@protoc_insertion_point(class_scope:ge.api_pb.GEInitialize)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GEInitialize_OptionsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ge_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GEInitializeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.api_pb.GEInitializeResponse) */ {
 public:
  inline GEInitializeResponse() : GEInitializeResponse(nullptr) {}
  virtual ~GEInitializeResponse();

  GEInitializeResponse(const GEInitializeResponse& from);
  GEInitializeResponse(GEInitializeResponse&& from) noexcept
    : GEInitializeResponse() {
    *this = ::std::move(from);
  }

  inline GEInitializeResponse& operator=(const GEInitializeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GEInitializeResponse& operator=(GEInitializeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GEInitializeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GEInitializeResponse* internal_default_instance() {
    return reinterpret_cast<const GEInitializeResponse*>(
               &_GEInitializeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GEInitializeResponse& a, GEInitializeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GEInitializeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GEInitializeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GEInitializeResponse* New() const final {
    return CreateMaybeMessage<GEInitializeResponse>(nullptr);
  }

  GEInitializeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GEInitializeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GEInitializeResponse& from);
  void MergeFrom(const GEInitializeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GEInitializeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.api_pb.GEInitializeResponse";
  }
  protected:
  explicit GEInitializeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fapi_2eproto);
    return ::descriptor_table_ge_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kClientIdFieldNumber = 2,
  };
  // uint32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 clientId = 2;
  void clear_clientid();
  ::PROTOBUF_NAMESPACE_ID::uint32 clientid() const;
  void set_clientid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_clientid() const;
  void _internal_set_clientid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ge.api_pb.GEInitializeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 clientid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ge_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GEFinalize PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.api_pb.GEFinalize) */ {
 public:
  inline GEFinalize() : GEFinalize(nullptr) {}
  virtual ~GEFinalize();

  GEFinalize(const GEFinalize& from);
  GEFinalize(GEFinalize&& from) noexcept
    : GEFinalize() {
    *this = ::std::move(from);
  }

  inline GEFinalize& operator=(const GEFinalize& from) {
    CopyFrom(from);
    return *this;
  }
  inline GEFinalize& operator=(GEFinalize&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GEFinalize& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GEFinalize* internal_default_instance() {
    return reinterpret_cast<const GEFinalize*>(
               &_GEFinalize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GEFinalize& a, GEFinalize& b) {
    a.Swap(&b);
  }
  inline void Swap(GEFinalize* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GEFinalize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GEFinalize* New() const final {
    return CreateMaybeMessage<GEFinalize>(nullptr);
  }

  GEFinalize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GEFinalize>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GEFinalize& from);
  void MergeFrom(const GEFinalize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GEFinalize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.api_pb.GEFinalize";
  }
  protected:
  explicit GEFinalize(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fapi_2eproto);
    return ::descriptor_table_ge_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFinalFieldNumber = 1,
    kClientIdFieldNumber = 2,
  };
  // bool final = 1;
  void clear_final();
  bool final() const;
  void set_final(bool value);
  private:
  bool _internal_final() const;
  void _internal_set_final(bool value);
  public:

  // uint32 clientId = 2;
  void clear_clientid();
  ::PROTOBUF_NAMESPACE_ID::uint32 clientid() const;
  void set_clientid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_clientid() const;
  void _internal_set_clientid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ge.api_pb.GEFinalize)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool final_;
  ::PROTOBUF_NAMESPACE_ID::uint32 clientid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ge_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GEFinalizeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.api_pb.GEFinalizeResponse) */ {
 public:
  inline GEFinalizeResponse() : GEFinalizeResponse(nullptr) {}
  virtual ~GEFinalizeResponse();

  GEFinalizeResponse(const GEFinalizeResponse& from);
  GEFinalizeResponse(GEFinalizeResponse&& from) noexcept
    : GEFinalizeResponse() {
    *this = ::std::move(from);
  }

  inline GEFinalizeResponse& operator=(const GEFinalizeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GEFinalizeResponse& operator=(GEFinalizeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GEFinalizeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GEFinalizeResponse* internal_default_instance() {
    return reinterpret_cast<const GEFinalizeResponse*>(
               &_GEFinalizeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GEFinalizeResponse& a, GEFinalizeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GEFinalizeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GEFinalizeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GEFinalizeResponse* New() const final {
    return CreateMaybeMessage<GEFinalizeResponse>(nullptr);
  }

  GEFinalizeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GEFinalizeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GEFinalizeResponse& from);
  void MergeFrom(const GEFinalizeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GEFinalizeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.api_pb.GEFinalizeResponse";
  }
  protected:
  explicit GEFinalizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fapi_2eproto);
    return ::descriptor_table_ge_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // uint32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ge.api_pb.GEFinalizeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ge_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateSession_OptionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateSession_OptionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateSession_OptionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  CreateSession_OptionsEntry_DoNotUse();
  explicit CreateSession_OptionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CreateSession_OptionsEntry_DoNotUse& other);
  static const CreateSession_OptionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CreateSession_OptionsEntry_DoNotUse*>(&_CreateSession_OptionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ge.api_pb.CreateSession.OptionsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ge.api_pb.CreateSession.OptionsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fapi_2eproto);
    return ::descriptor_table_ge_5fapi_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class CreateSession PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.api_pb.CreateSession) */ {
 public:
  inline CreateSession() : CreateSession(nullptr) {}
  virtual ~CreateSession();

  CreateSession(const CreateSession& from);
  CreateSession(CreateSession&& from) noexcept
    : CreateSession() {
    *this = ::std::move(from);
  }

  inline CreateSession& operator=(const CreateSession& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSession& operator=(CreateSession&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateSession& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateSession* internal_default_instance() {
    return reinterpret_cast<const CreateSession*>(
               &_CreateSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CreateSession& a, CreateSession& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSession* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSession* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateSession* New() const final {
    return CreateMaybeMessage<CreateSession>(nullptr);
  }

  CreateSession* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateSession>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateSession& from);
  void MergeFrom(const CreateSession& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSession* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.api_pb.CreateSession";
  }
  protected:
  explicit CreateSession(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fapi_2eproto);
    return ::descriptor_table_ge_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // map<string, string> options = 1;
  int options_size() const;
  private:
  int _internal_options_size() const;
  public:
  void clear_options();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_options() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_options();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      options() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_options();

  // @@protoc_insertion_point(class_scope:ge.api_pb.CreateSession)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      CreateSession_OptionsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ge_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateSessionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.api_pb.CreateSessionResponse) */ {
 public:
  inline CreateSessionResponse() : CreateSessionResponse(nullptr) {}
  virtual ~CreateSessionResponse();

  CreateSessionResponse(const CreateSessionResponse& from);
  CreateSessionResponse(CreateSessionResponse&& from) noexcept
    : CreateSessionResponse() {
    *this = ::std::move(from);
  }

  inline CreateSessionResponse& operator=(const CreateSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSessionResponse& operator=(CreateSessionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateSessionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateSessionResponse* internal_default_instance() {
    return reinterpret_cast<const CreateSessionResponse*>(
               &_CreateSessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CreateSessionResponse& a, CreateSessionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSessionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSessionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateSessionResponse* New() const final {
    return CreateMaybeMessage<CreateSessionResponse>(nullptr);
  }

  CreateSessionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateSessionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateSessionResponse& from);
  void MergeFrom(const CreateSessionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSessionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.api_pb.CreateSessionResponse";
  }
  protected:
  explicit CreateSessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fapi_2eproto);
    return ::descriptor_table_ge_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // uint64 sessionId = 2;
  void clear_sessionid();
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionid() const;
  void set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sessionid() const;
  void _internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ge.api_pb.CreateSessionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ge_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SessionAddGraph PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.api_pb.SessionAddGraph) */ {
 public:
  inline SessionAddGraph() : SessionAddGraph(nullptr) {}
  virtual ~SessionAddGraph();

  SessionAddGraph(const SessionAddGraph& from);
  SessionAddGraph(SessionAddGraph&& from) noexcept
    : SessionAddGraph() {
    *this = ::std::move(from);
  }

  inline SessionAddGraph& operator=(const SessionAddGraph& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionAddGraph& operator=(SessionAddGraph&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionAddGraph& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionAddGraph* internal_default_instance() {
    return reinterpret_cast<const SessionAddGraph*>(
               &_SessionAddGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SessionAddGraph& a, SessionAddGraph& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionAddGraph* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionAddGraph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionAddGraph* New() const final {
    return CreateMaybeMessage<SessionAddGraph>(nullptr);
  }

  SessionAddGraph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionAddGraph>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionAddGraph& from);
  void MergeFrom(const SessionAddGraph& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionAddGraph* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.api_pb.SessionAddGraph";
  }
  protected:
  explicit SessionAddGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fapi_2eproto);
    return ::descriptor_table_ge_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGraphFieldNumber = 3,
    kSessionIdFieldNumber = 2,
    kGraphIdFieldNumber = 1,
  };
  // .ge.proto.GraphDef graph = 3;
  bool has_graph() const;
  private:
  bool _internal_has_graph() const;
  public:
  void clear_graph();
  const ::ge::proto::GraphDef& graph() const;
  ::ge::proto::GraphDef* release_graph();
  ::ge::proto::GraphDef* mutable_graph();
  void set_allocated_graph(::ge::proto::GraphDef* graph);
  private:
  const ::ge::proto::GraphDef& _internal_graph() const;
  ::ge::proto::GraphDef* _internal_mutable_graph();
  public:
  void unsafe_arena_set_allocated_graph(
      ::ge::proto::GraphDef* graph);
  ::ge::proto::GraphDef* unsafe_arena_release_graph();

  // uint64 sessionId = 2;
  void clear_sessionid();
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionid() const;
  void set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sessionid() const;
  void _internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 graphId = 1;
  void clear_graphid();
  ::PROTOBUF_NAMESPACE_ID::uint32 graphid() const;
  void set_graphid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_graphid() const;
  void _internal_set_graphid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ge.api_pb.SessionAddGraph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ge::proto::GraphDef* graph_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 graphid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ge_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SessionAddGraphResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.api_pb.SessionAddGraphResponse) */ {
 public:
  inline SessionAddGraphResponse() : SessionAddGraphResponse(nullptr) {}
  virtual ~SessionAddGraphResponse();

  SessionAddGraphResponse(const SessionAddGraphResponse& from);
  SessionAddGraphResponse(SessionAddGraphResponse&& from) noexcept
    : SessionAddGraphResponse() {
    *this = ::std::move(from);
  }

  inline SessionAddGraphResponse& operator=(const SessionAddGraphResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionAddGraphResponse& operator=(SessionAddGraphResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionAddGraphResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionAddGraphResponse* internal_default_instance() {
    return reinterpret_cast<const SessionAddGraphResponse*>(
               &_SessionAddGraphResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SessionAddGraphResponse& a, SessionAddGraphResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionAddGraphResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionAddGraphResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionAddGraphResponse* New() const final {
    return CreateMaybeMessage<SessionAddGraphResponse>(nullptr);
  }

  SessionAddGraphResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionAddGraphResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionAddGraphResponse& from);
  void MergeFrom(const SessionAddGraphResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionAddGraphResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.api_pb.SessionAddGraphResponse";
  }
  protected:
  explicit SessionAddGraphResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fapi_2eproto);
    return ::descriptor_table_ge_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // uint32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ge.api_pb.SessionAddGraphResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ge_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SessionRemoveGraph PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.api_pb.SessionRemoveGraph) */ {
 public:
  inline SessionRemoveGraph() : SessionRemoveGraph(nullptr) {}
  virtual ~SessionRemoveGraph();

  SessionRemoveGraph(const SessionRemoveGraph& from);
  SessionRemoveGraph(SessionRemoveGraph&& from) noexcept
    : SessionRemoveGraph() {
    *this = ::std::move(from);
  }

  inline SessionRemoveGraph& operator=(const SessionRemoveGraph& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionRemoveGraph& operator=(SessionRemoveGraph&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionRemoveGraph& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionRemoveGraph* internal_default_instance() {
    return reinterpret_cast<const SessionRemoveGraph*>(
               &_SessionRemoveGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SessionRemoveGraph& a, SessionRemoveGraph& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionRemoveGraph* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionRemoveGraph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionRemoveGraph* New() const final {
    return CreateMaybeMessage<SessionRemoveGraph>(nullptr);
  }

  SessionRemoveGraph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionRemoveGraph>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionRemoveGraph& from);
  void MergeFrom(const SessionRemoveGraph& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionRemoveGraph* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.api_pb.SessionRemoveGraph";
  }
  protected:
  explicit SessionRemoveGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fapi_2eproto);
    return ::descriptor_table_ge_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 2,
    kGraphIdFieldNumber = 1,
  };
  // uint64 sessionId = 2;
  void clear_sessionid();
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionid() const;
  void set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sessionid() const;
  void _internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 graphId = 1;
  void clear_graphid();
  ::PROTOBUF_NAMESPACE_ID::uint32 graphid() const;
  void set_graphid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_graphid() const;
  void _internal_set_graphid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ge.api_pb.SessionRemoveGraph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 graphid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ge_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SessionRemoveGraphResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.api_pb.SessionRemoveGraphResponse) */ {
 public:
  inline SessionRemoveGraphResponse() : SessionRemoveGraphResponse(nullptr) {}
  virtual ~SessionRemoveGraphResponse();

  SessionRemoveGraphResponse(const SessionRemoveGraphResponse& from);
  SessionRemoveGraphResponse(SessionRemoveGraphResponse&& from) noexcept
    : SessionRemoveGraphResponse() {
    *this = ::std::move(from);
  }

  inline SessionRemoveGraphResponse& operator=(const SessionRemoveGraphResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionRemoveGraphResponse& operator=(SessionRemoveGraphResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionRemoveGraphResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionRemoveGraphResponse* internal_default_instance() {
    return reinterpret_cast<const SessionRemoveGraphResponse*>(
               &_SessionRemoveGraphResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SessionRemoveGraphResponse& a, SessionRemoveGraphResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionRemoveGraphResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionRemoveGraphResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionRemoveGraphResponse* New() const final {
    return CreateMaybeMessage<SessionRemoveGraphResponse>(nullptr);
  }

  SessionRemoveGraphResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionRemoveGraphResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionRemoveGraphResponse& from);
  void MergeFrom(const SessionRemoveGraphResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionRemoveGraphResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.api_pb.SessionRemoveGraphResponse";
  }
  protected:
  explicit SessionRemoveGraphResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fapi_2eproto);
    return ::descriptor_table_ge_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // uint32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ge.api_pb.SessionRemoveGraphResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ge_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SessionRunGraph PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.api_pb.SessionRunGraph) */ {
 public:
  inline SessionRunGraph() : SessionRunGraph(nullptr) {}
  virtual ~SessionRunGraph();

  SessionRunGraph(const SessionRunGraph& from);
  SessionRunGraph(SessionRunGraph&& from) noexcept
    : SessionRunGraph() {
    *this = ::std::move(from);
  }

  inline SessionRunGraph& operator=(const SessionRunGraph& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionRunGraph& operator=(SessionRunGraph&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionRunGraph& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionRunGraph* internal_default_instance() {
    return reinterpret_cast<const SessionRunGraph*>(
               &_SessionRunGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SessionRunGraph& a, SessionRunGraph& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionRunGraph* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionRunGraph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionRunGraph* New() const final {
    return CreateMaybeMessage<SessionRunGraph>(nullptr);
  }

  SessionRunGraph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionRunGraph>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionRunGraph& from);
  void MergeFrom(const SessionRunGraph& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionRunGraph* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.api_pb.SessionRunGraph";
  }
  protected:
  explicit SessionRunGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fapi_2eproto);
    return ::descriptor_table_ge_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTensorFieldNumber = 3,
    kSessionIdFieldNumber = 2,
    kGraphIdFieldNumber = 1,
  };
  // repeated .ge.proto.TensorDef tensor = 3;
  int tensor_size() const;
  private:
  int _internal_tensor_size() const;
  public:
  void clear_tensor();
  ::ge::proto::TensorDef* mutable_tensor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDef >*
      mutable_tensor();
  private:
  const ::ge::proto::TensorDef& _internal_tensor(int index) const;
  ::ge::proto::TensorDef* _internal_add_tensor();
  public:
  const ::ge::proto::TensorDef& tensor(int index) const;
  ::ge::proto::TensorDef* add_tensor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDef >&
      tensor() const;

  // uint64 sessionId = 2;
  void clear_sessionid();
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionid() const;
  void set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sessionid() const;
  void _internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 graphId = 1;
  void clear_graphid();
  ::PROTOBUF_NAMESPACE_ID::uint32 graphid() const;
  void set_graphid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_graphid() const;
  void _internal_set_graphid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ge.api_pb.SessionRunGraph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDef > tensor_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 graphid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ge_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SessionBuildGraph PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.api_pb.SessionBuildGraph) */ {
 public:
  inline SessionBuildGraph() : SessionBuildGraph(nullptr) {}
  virtual ~SessionBuildGraph();

  SessionBuildGraph(const SessionBuildGraph& from);
  SessionBuildGraph(SessionBuildGraph&& from) noexcept
    : SessionBuildGraph() {
    *this = ::std::move(from);
  }

  inline SessionBuildGraph& operator=(const SessionBuildGraph& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionBuildGraph& operator=(SessionBuildGraph&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionBuildGraph& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionBuildGraph* internal_default_instance() {
    return reinterpret_cast<const SessionBuildGraph*>(
               &_SessionBuildGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SessionBuildGraph& a, SessionBuildGraph& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionBuildGraph* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionBuildGraph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionBuildGraph* New() const final {
    return CreateMaybeMessage<SessionBuildGraph>(nullptr);
  }

  SessionBuildGraph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionBuildGraph>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionBuildGraph& from);
  void MergeFrom(const SessionBuildGraph& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionBuildGraph* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.api_pb.SessionBuildGraph";
  }
  protected:
  explicit SessionBuildGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fapi_2eproto);
    return ::descriptor_table_ge_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTensorFieldNumber = 3,
    kSavePathFieldNumber = 4,
    kSessionIdFieldNumber = 2,
    kGraphIdFieldNumber = 1,
  };
  // repeated .ge.proto.TensorDef tensor = 3;
  int tensor_size() const;
  private:
  int _internal_tensor_size() const;
  public:
  void clear_tensor();
  ::ge::proto::TensorDef* mutable_tensor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDef >*
      mutable_tensor();
  private:
  const ::ge::proto::TensorDef& _internal_tensor(int index) const;
  ::ge::proto::TensorDef* _internal_add_tensor();
  public:
  const ::ge::proto::TensorDef& tensor(int index) const;
  ::ge::proto::TensorDef* add_tensor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDef >&
      tensor() const;

  // string savePath = 4;
  void clear_savepath();
  const std::string& savepath() const;
  void set_savepath(const std::string& value);
  void set_savepath(std::string&& value);
  void set_savepath(const char* value);
  void set_savepath(const char* value, size_t size);
  std::string* mutable_savepath();
  std::string* release_savepath();
  void set_allocated_savepath(std::string* savepath);
  private:
  const std::string& _internal_savepath() const;
  void _internal_set_savepath(const std::string& value);
  std::string* _internal_mutable_savepath();
  public:

  // uint64 sessionId = 2;
  void clear_sessionid();
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionid() const;
  void set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sessionid() const;
  void _internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 graphId = 1;
  void clear_graphid();
  ::PROTOBUF_NAMESPACE_ID::uint32 graphid() const;
  void set_graphid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_graphid() const;
  void _internal_set_graphid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ge.api_pb.SessionBuildGraph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDef > tensor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr savepath_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 graphid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ge_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SessionRunGraphResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.api_pb.SessionRunGraphResponse) */ {
 public:
  inline SessionRunGraphResponse() : SessionRunGraphResponse(nullptr) {}
  virtual ~SessionRunGraphResponse();

  SessionRunGraphResponse(const SessionRunGraphResponse& from);
  SessionRunGraphResponse(SessionRunGraphResponse&& from) noexcept
    : SessionRunGraphResponse() {
    *this = ::std::move(from);
  }

  inline SessionRunGraphResponse& operator=(const SessionRunGraphResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionRunGraphResponse& operator=(SessionRunGraphResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionRunGraphResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionRunGraphResponse* internal_default_instance() {
    return reinterpret_cast<const SessionRunGraphResponse*>(
               &_SessionRunGraphResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SessionRunGraphResponse& a, SessionRunGraphResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionRunGraphResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionRunGraphResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionRunGraphResponse* New() const final {
    return CreateMaybeMessage<SessionRunGraphResponse>(nullptr);
  }

  SessionRunGraphResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionRunGraphResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionRunGraphResponse& from);
  void MergeFrom(const SessionRunGraphResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionRunGraphResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.api_pb.SessionRunGraphResponse";
  }
  protected:
  explicit SessionRunGraphResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fapi_2eproto);
    return ::descriptor_table_ge_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTensorFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .ge.proto.TensorDef tensor = 2;
  int tensor_size() const;
  private:
  int _internal_tensor_size() const;
  public:
  void clear_tensor();
  ::ge::proto::TensorDef* mutable_tensor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDef >*
      mutable_tensor();
  private:
  const ::ge::proto::TensorDef& _internal_tensor(int index) const;
  ::ge::proto::TensorDef* _internal_add_tensor();
  public:
  const ::ge::proto::TensorDef& tensor(int index) const;
  ::ge::proto::TensorDef* add_tensor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDef >&
      tensor() const;

  // uint32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ge.api_pb.SessionRunGraphResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDef > tensor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ge_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SessionBuildGraphResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.api_pb.SessionBuildGraphResponse) */ {
 public:
  inline SessionBuildGraphResponse() : SessionBuildGraphResponse(nullptr) {}
  virtual ~SessionBuildGraphResponse();

  SessionBuildGraphResponse(const SessionBuildGraphResponse& from);
  SessionBuildGraphResponse(SessionBuildGraphResponse&& from) noexcept
    : SessionBuildGraphResponse() {
    *this = ::std::move(from);
  }

  inline SessionBuildGraphResponse& operator=(const SessionBuildGraphResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionBuildGraphResponse& operator=(SessionBuildGraphResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionBuildGraphResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionBuildGraphResponse* internal_default_instance() {
    return reinterpret_cast<const SessionBuildGraphResponse*>(
               &_SessionBuildGraphResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SessionBuildGraphResponse& a, SessionBuildGraphResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionBuildGraphResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionBuildGraphResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionBuildGraphResponse* New() const final {
    return CreateMaybeMessage<SessionBuildGraphResponse>(nullptr);
  }

  SessionBuildGraphResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionBuildGraphResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionBuildGraphResponse& from);
  void MergeFrom(const SessionBuildGraphResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionBuildGraphResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.api_pb.SessionBuildGraphResponse";
  }
  protected:
  explicit SessionBuildGraphResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fapi_2eproto);
    return ::descriptor_table_ge_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // uint32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ge.api_pb.SessionBuildGraphResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ge_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DestroySession PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.api_pb.DestroySession) */ {
 public:
  inline DestroySession() : DestroySession(nullptr) {}
  virtual ~DestroySession();

  DestroySession(const DestroySession& from);
  DestroySession(DestroySession&& from) noexcept
    : DestroySession() {
    *this = ::std::move(from);
  }

  inline DestroySession& operator=(const DestroySession& from) {
    CopyFrom(from);
    return *this;
  }
  inline DestroySession& operator=(DestroySession&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DestroySession& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DestroySession* internal_default_instance() {
    return reinterpret_cast<const DestroySession*>(
               &_DestroySession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DestroySession& a, DestroySession& b) {
    a.Swap(&b);
  }
  inline void Swap(DestroySession* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DestroySession* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DestroySession* New() const final {
    return CreateMaybeMessage<DestroySession>(nullptr);
  }

  DestroySession* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DestroySession>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DestroySession& from);
  void MergeFrom(const DestroySession& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DestroySession* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.api_pb.DestroySession";
  }
  protected:
  explicit DestroySession(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fapi_2eproto);
    return ::descriptor_table_ge_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 2,
    kFinalFieldNumber = 1,
  };
  // uint64 sessionId = 2;
  void clear_sessionid();
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionid() const;
  void set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sessionid() const;
  void _internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool final = 1;
  void clear_final();
  bool final() const;
  void set_final(bool value);
  private:
  bool _internal_final() const;
  void _internal_set_final(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ge.api_pb.DestroySession)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionid_;
  bool final_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ge_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DestroySessionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.api_pb.DestroySessionResponse) */ {
 public:
  inline DestroySessionResponse() : DestroySessionResponse(nullptr) {}
  virtual ~DestroySessionResponse();

  DestroySessionResponse(const DestroySessionResponse& from);
  DestroySessionResponse(DestroySessionResponse&& from) noexcept
    : DestroySessionResponse() {
    *this = ::std::move(from);
  }

  inline DestroySessionResponse& operator=(const DestroySessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DestroySessionResponse& operator=(DestroySessionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DestroySessionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DestroySessionResponse* internal_default_instance() {
    return reinterpret_cast<const DestroySessionResponse*>(
               &_DestroySessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DestroySessionResponse& a, DestroySessionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DestroySessionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DestroySessionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DestroySessionResponse* New() const final {
    return CreateMaybeMessage<DestroySessionResponse>(nullptr);
  }

  DestroySessionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DestroySessionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DestroySessionResponse& from);
  void MergeFrom(const DestroySessionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DestroySessionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.api_pb.DestroySessionResponse";
  }
  protected:
  explicit DestroySessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fapi_2eproto);
    return ::descriptor_table_ge_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // uint32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ge.api_pb.DestroySessionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ge_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GEInitialize

// map<string, string> options = 1;
inline int GEInitialize::_internal_options_size() const {
  return options_.size();
}
inline int GEInitialize::options_size() const {
  return _internal_options_size();
}
inline void GEInitialize::clear_options() {
  options_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GEInitialize::_internal_options() const {
  return options_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GEInitialize::options() const {
  // @@protoc_insertion_point(field_map:ge.api_pb.GEInitialize.options)
  return _internal_options();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GEInitialize::_internal_mutable_options() {
  return options_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GEInitialize::mutable_options() {
  // @@protoc_insertion_point(field_mutable_map:ge.api_pb.GEInitialize.options)
  return _internal_mutable_options();
}

// -------------------------------------------------------------------

// GEInitializeResponse

// uint32 status = 1;
inline void GEInitializeResponse::clear_status() {
  status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GEInitializeResponse::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GEInitializeResponse::status() const {
  // @@protoc_insertion_point(field_get:ge.api_pb.GEInitializeResponse.status)
  return _internal_status();
}
inline void GEInitializeResponse::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_ = value;
}
inline void GEInitializeResponse::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ge.api_pb.GEInitializeResponse.status)
}

// uint32 clientId = 2;
inline void GEInitializeResponse::clear_clientid() {
  clientid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GEInitializeResponse::_internal_clientid() const {
  return clientid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GEInitializeResponse::clientid() const {
  // @@protoc_insertion_point(field_get:ge.api_pb.GEInitializeResponse.clientId)
  return _internal_clientid();
}
inline void GEInitializeResponse::_internal_set_clientid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  clientid_ = value;
}
inline void GEInitializeResponse::set_clientid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:ge.api_pb.GEInitializeResponse.clientId)
}

// -------------------------------------------------------------------

// GEFinalize

// bool final = 1;
inline void GEFinalize::clear_final() {
  final_ = false;
}
inline bool GEFinalize::_internal_final() const {
  return final_;
}
inline bool GEFinalize::final() const {
  // @@protoc_insertion_point(field_get:ge.api_pb.GEFinalize.final)
  return _internal_final();
}
inline void GEFinalize::_internal_set_final(bool value) {
  
  final_ = value;
}
inline void GEFinalize::set_final(bool value) {
  _internal_set_final(value);
  // @@protoc_insertion_point(field_set:ge.api_pb.GEFinalize.final)
}

// uint32 clientId = 2;
inline void GEFinalize::clear_clientid() {
  clientid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GEFinalize::_internal_clientid() const {
  return clientid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GEFinalize::clientid() const {
  // @@protoc_insertion_point(field_get:ge.api_pb.GEFinalize.clientId)
  return _internal_clientid();
}
inline void GEFinalize::_internal_set_clientid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  clientid_ = value;
}
inline void GEFinalize::set_clientid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:ge.api_pb.GEFinalize.clientId)
}

// -------------------------------------------------------------------

// GEFinalizeResponse

// uint32 status = 1;
inline void GEFinalizeResponse::clear_status() {
  status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GEFinalizeResponse::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GEFinalizeResponse::status() const {
  // @@protoc_insertion_point(field_get:ge.api_pb.GEFinalizeResponse.status)
  return _internal_status();
}
inline void GEFinalizeResponse::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_ = value;
}
inline void GEFinalizeResponse::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ge.api_pb.GEFinalizeResponse.status)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CreateSession

// map<string, string> options = 1;
inline int CreateSession::_internal_options_size() const {
  return options_.size();
}
inline int CreateSession::options_size() const {
  return _internal_options_size();
}
inline void CreateSession::clear_options() {
  options_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CreateSession::_internal_options() const {
  return options_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CreateSession::options() const {
  // @@protoc_insertion_point(field_map:ge.api_pb.CreateSession.options)
  return _internal_options();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CreateSession::_internal_mutable_options() {
  return options_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CreateSession::mutable_options() {
  // @@protoc_insertion_point(field_mutable_map:ge.api_pb.CreateSession.options)
  return _internal_mutable_options();
}

// -------------------------------------------------------------------

// CreateSessionResponse

// uint32 status = 1;
inline void CreateSessionResponse::clear_status() {
  status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateSessionResponse::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateSessionResponse::status() const {
  // @@protoc_insertion_point(field_get:ge.api_pb.CreateSessionResponse.status)
  return _internal_status();
}
inline void CreateSessionResponse::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_ = value;
}
inline void CreateSessionResponse::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ge.api_pb.CreateSessionResponse.status)
}

// uint64 sessionId = 2;
inline void CreateSessionResponse::clear_sessionid() {
  sessionid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateSessionResponse::_internal_sessionid() const {
  return sessionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateSessionResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:ge.api_pb.CreateSessionResponse.sessionId)
  return _internal_sessionid();
}
inline void CreateSessionResponse::_internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sessionid_ = value;
}
inline void CreateSessionResponse::set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:ge.api_pb.CreateSessionResponse.sessionId)
}

// -------------------------------------------------------------------

// SessionAddGraph

// uint32 graphId = 1;
inline void SessionAddGraph::clear_graphid() {
  graphid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionAddGraph::_internal_graphid() const {
  return graphid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionAddGraph::graphid() const {
  // @@protoc_insertion_point(field_get:ge.api_pb.SessionAddGraph.graphId)
  return _internal_graphid();
}
inline void SessionAddGraph::_internal_set_graphid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  graphid_ = value;
}
inline void SessionAddGraph::set_graphid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_graphid(value);
  // @@protoc_insertion_point(field_set:ge.api_pb.SessionAddGraph.graphId)
}

// uint64 sessionId = 2;
inline void SessionAddGraph::clear_sessionid() {
  sessionid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionAddGraph::_internal_sessionid() const {
  return sessionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionAddGraph::sessionid() const {
  // @@protoc_insertion_point(field_get:ge.api_pb.SessionAddGraph.sessionId)
  return _internal_sessionid();
}
inline void SessionAddGraph::_internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sessionid_ = value;
}
inline void SessionAddGraph::set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:ge.api_pb.SessionAddGraph.sessionId)
}

// .ge.proto.GraphDef graph = 3;
inline bool SessionAddGraph::_internal_has_graph() const {
  return this != internal_default_instance() && graph_ != nullptr;
}
inline bool SessionAddGraph::has_graph() const {
  return _internal_has_graph();
}
inline const ::ge::proto::GraphDef& SessionAddGraph::_internal_graph() const {
  const ::ge::proto::GraphDef* p = graph_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ge::proto::GraphDef*>(
      &::ge::proto::_GraphDef_default_instance_);
}
inline const ::ge::proto::GraphDef& SessionAddGraph::graph() const {
  // @@protoc_insertion_point(field_get:ge.api_pb.SessionAddGraph.graph)
  return _internal_graph();
}
inline void SessionAddGraph::unsafe_arena_set_allocated_graph(
    ::ge::proto::GraphDef* graph) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_);
  }
  graph_ = graph;
  if (graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ge.api_pb.SessionAddGraph.graph)
}
inline ::ge::proto::GraphDef* SessionAddGraph::release_graph() {
  
  ::ge::proto::GraphDef* temp = graph_;
  graph_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ge::proto::GraphDef* SessionAddGraph::unsafe_arena_release_graph() {
  // @@protoc_insertion_point(field_release:ge.api_pb.SessionAddGraph.graph)
  
  ::ge::proto::GraphDef* temp = graph_;
  graph_ = nullptr;
  return temp;
}
inline ::ge::proto::GraphDef* SessionAddGraph::_internal_mutable_graph() {
  
  if (graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::ge::proto::GraphDef>(GetArena());
    graph_ = p;
  }
  return graph_;
}
inline ::ge::proto::GraphDef* SessionAddGraph::mutable_graph() {
  // @@protoc_insertion_point(field_mutable:ge.api_pb.SessionAddGraph.graph)
  return _internal_mutable_graph();
}
inline void SessionAddGraph::set_allocated_graph(::ge::proto::GraphDef* graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_);
  }
  if (graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph)->GetArena();
    if (message_arena != submessage_arena) {
      graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph, submessage_arena);
    }
    
  } else {
    
  }
  graph_ = graph;
  // @@protoc_insertion_point(field_set_allocated:ge.api_pb.SessionAddGraph.graph)
}

// -------------------------------------------------------------------

// SessionAddGraphResponse

// uint32 status = 1;
inline void SessionAddGraphResponse::clear_status() {
  status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionAddGraphResponse::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionAddGraphResponse::status() const {
  // @@protoc_insertion_point(field_get:ge.api_pb.SessionAddGraphResponse.status)
  return _internal_status();
}
inline void SessionAddGraphResponse::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_ = value;
}
inline void SessionAddGraphResponse::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ge.api_pb.SessionAddGraphResponse.status)
}

// -------------------------------------------------------------------

// SessionRemoveGraph

// uint32 graphId = 1;
inline void SessionRemoveGraph::clear_graphid() {
  graphid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionRemoveGraph::_internal_graphid() const {
  return graphid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionRemoveGraph::graphid() const {
  // @@protoc_insertion_point(field_get:ge.api_pb.SessionRemoveGraph.graphId)
  return _internal_graphid();
}
inline void SessionRemoveGraph::_internal_set_graphid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  graphid_ = value;
}
inline void SessionRemoveGraph::set_graphid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_graphid(value);
  // @@protoc_insertion_point(field_set:ge.api_pb.SessionRemoveGraph.graphId)
}

// uint64 sessionId = 2;
inline void SessionRemoveGraph::clear_sessionid() {
  sessionid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionRemoveGraph::_internal_sessionid() const {
  return sessionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionRemoveGraph::sessionid() const {
  // @@protoc_insertion_point(field_get:ge.api_pb.SessionRemoveGraph.sessionId)
  return _internal_sessionid();
}
inline void SessionRemoveGraph::_internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sessionid_ = value;
}
inline void SessionRemoveGraph::set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:ge.api_pb.SessionRemoveGraph.sessionId)
}

// -------------------------------------------------------------------

// SessionRemoveGraphResponse

// uint32 status = 1;
inline void SessionRemoveGraphResponse::clear_status() {
  status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionRemoveGraphResponse::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionRemoveGraphResponse::status() const {
  // @@protoc_insertion_point(field_get:ge.api_pb.SessionRemoveGraphResponse.status)
  return _internal_status();
}
inline void SessionRemoveGraphResponse::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_ = value;
}
inline void SessionRemoveGraphResponse::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ge.api_pb.SessionRemoveGraphResponse.status)
}

// -------------------------------------------------------------------

// SessionRunGraph

// uint32 graphId = 1;
inline void SessionRunGraph::clear_graphid() {
  graphid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionRunGraph::_internal_graphid() const {
  return graphid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionRunGraph::graphid() const {
  // @@protoc_insertion_point(field_get:ge.api_pb.SessionRunGraph.graphId)
  return _internal_graphid();
}
inline void SessionRunGraph::_internal_set_graphid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  graphid_ = value;
}
inline void SessionRunGraph::set_graphid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_graphid(value);
  // @@protoc_insertion_point(field_set:ge.api_pb.SessionRunGraph.graphId)
}

// uint64 sessionId = 2;
inline void SessionRunGraph::clear_sessionid() {
  sessionid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionRunGraph::_internal_sessionid() const {
  return sessionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionRunGraph::sessionid() const {
  // @@protoc_insertion_point(field_get:ge.api_pb.SessionRunGraph.sessionId)
  return _internal_sessionid();
}
inline void SessionRunGraph::_internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sessionid_ = value;
}
inline void SessionRunGraph::set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:ge.api_pb.SessionRunGraph.sessionId)
}

// repeated .ge.proto.TensorDef tensor = 3;
inline int SessionRunGraph::_internal_tensor_size() const {
  return tensor_.size();
}
inline int SessionRunGraph::tensor_size() const {
  return _internal_tensor_size();
}
inline ::ge::proto::TensorDef* SessionRunGraph::mutable_tensor(int index) {
  // @@protoc_insertion_point(field_mutable:ge.api_pb.SessionRunGraph.tensor)
  return tensor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDef >*
SessionRunGraph::mutable_tensor() {
  // @@protoc_insertion_point(field_mutable_list:ge.api_pb.SessionRunGraph.tensor)
  return &tensor_;
}
inline const ::ge::proto::TensorDef& SessionRunGraph::_internal_tensor(int index) const {
  return tensor_.Get(index);
}
inline const ::ge::proto::TensorDef& SessionRunGraph::tensor(int index) const {
  // @@protoc_insertion_point(field_get:ge.api_pb.SessionRunGraph.tensor)
  return _internal_tensor(index);
}
inline ::ge::proto::TensorDef* SessionRunGraph::_internal_add_tensor() {
  return tensor_.Add();
}
inline ::ge::proto::TensorDef* SessionRunGraph::add_tensor() {
  // @@protoc_insertion_point(field_add:ge.api_pb.SessionRunGraph.tensor)
  return _internal_add_tensor();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDef >&
SessionRunGraph::tensor() const {
  // @@protoc_insertion_point(field_list:ge.api_pb.SessionRunGraph.tensor)
  return tensor_;
}

// -------------------------------------------------------------------

// SessionBuildGraph

// uint32 graphId = 1;
inline void SessionBuildGraph::clear_graphid() {
  graphid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionBuildGraph::_internal_graphid() const {
  return graphid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionBuildGraph::graphid() const {
  // @@protoc_insertion_point(field_get:ge.api_pb.SessionBuildGraph.graphId)
  return _internal_graphid();
}
inline void SessionBuildGraph::_internal_set_graphid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  graphid_ = value;
}
inline void SessionBuildGraph::set_graphid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_graphid(value);
  // @@protoc_insertion_point(field_set:ge.api_pb.SessionBuildGraph.graphId)
}

// uint64 sessionId = 2;
inline void SessionBuildGraph::clear_sessionid() {
  sessionid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionBuildGraph::_internal_sessionid() const {
  return sessionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionBuildGraph::sessionid() const {
  // @@protoc_insertion_point(field_get:ge.api_pb.SessionBuildGraph.sessionId)
  return _internal_sessionid();
}
inline void SessionBuildGraph::_internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sessionid_ = value;
}
inline void SessionBuildGraph::set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:ge.api_pb.SessionBuildGraph.sessionId)
}

// repeated .ge.proto.TensorDef tensor = 3;
inline int SessionBuildGraph::_internal_tensor_size() const {
  return tensor_.size();
}
inline int SessionBuildGraph::tensor_size() const {
  return _internal_tensor_size();
}
inline ::ge::proto::TensorDef* SessionBuildGraph::mutable_tensor(int index) {
  // @@protoc_insertion_point(field_mutable:ge.api_pb.SessionBuildGraph.tensor)
  return tensor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDef >*
SessionBuildGraph::mutable_tensor() {
  // @@protoc_insertion_point(field_mutable_list:ge.api_pb.SessionBuildGraph.tensor)
  return &tensor_;
}
inline const ::ge::proto::TensorDef& SessionBuildGraph::_internal_tensor(int index) const {
  return tensor_.Get(index);
}
inline const ::ge::proto::TensorDef& SessionBuildGraph::tensor(int index) const {
  // @@protoc_insertion_point(field_get:ge.api_pb.SessionBuildGraph.tensor)
  return _internal_tensor(index);
}
inline ::ge::proto::TensorDef* SessionBuildGraph::_internal_add_tensor() {
  return tensor_.Add();
}
inline ::ge::proto::TensorDef* SessionBuildGraph::add_tensor() {
  // @@protoc_insertion_point(field_add:ge.api_pb.SessionBuildGraph.tensor)
  return _internal_add_tensor();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDef >&
SessionBuildGraph::tensor() const {
  // @@protoc_insertion_point(field_list:ge.api_pb.SessionBuildGraph.tensor)
  return tensor_;
}

// string savePath = 4;
inline void SessionBuildGraph::clear_savepath() {
  savepath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SessionBuildGraph::savepath() const {
  // @@protoc_insertion_point(field_get:ge.api_pb.SessionBuildGraph.savePath)
  return _internal_savepath();
}
inline void SessionBuildGraph::set_savepath(const std::string& value) {
  _internal_set_savepath(value);
  // @@protoc_insertion_point(field_set:ge.api_pb.SessionBuildGraph.savePath)
}
inline std::string* SessionBuildGraph::mutable_savepath() {
  // @@protoc_insertion_point(field_mutable:ge.api_pb.SessionBuildGraph.savePath)
  return _internal_mutable_savepath();
}
inline const std::string& SessionBuildGraph::_internal_savepath() const {
  return savepath_.Get();
}
inline void SessionBuildGraph::_internal_set_savepath(const std::string& value) {
  
  savepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SessionBuildGraph::set_savepath(std::string&& value) {
  
  savepath_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ge.api_pb.SessionBuildGraph.savePath)
}
inline void SessionBuildGraph::set_savepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  savepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ge.api_pb.SessionBuildGraph.savePath)
}
inline void SessionBuildGraph::set_savepath(const char* value,
    size_t size) {
  
  savepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ge.api_pb.SessionBuildGraph.savePath)
}
inline std::string* SessionBuildGraph::_internal_mutable_savepath() {
  
  return savepath_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SessionBuildGraph::release_savepath() {
  // @@protoc_insertion_point(field_release:ge.api_pb.SessionBuildGraph.savePath)
  return savepath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionBuildGraph::set_allocated_savepath(std::string* savepath) {
  if (savepath != nullptr) {
    
  } else {
    
  }
  savepath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), savepath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ge.api_pb.SessionBuildGraph.savePath)
}

// -------------------------------------------------------------------

// SessionRunGraphResponse

// uint32 status = 1;
inline void SessionRunGraphResponse::clear_status() {
  status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionRunGraphResponse::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionRunGraphResponse::status() const {
  // @@protoc_insertion_point(field_get:ge.api_pb.SessionRunGraphResponse.status)
  return _internal_status();
}
inline void SessionRunGraphResponse::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_ = value;
}
inline void SessionRunGraphResponse::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ge.api_pb.SessionRunGraphResponse.status)
}

// repeated .ge.proto.TensorDef tensor = 2;
inline int SessionRunGraphResponse::_internal_tensor_size() const {
  return tensor_.size();
}
inline int SessionRunGraphResponse::tensor_size() const {
  return _internal_tensor_size();
}
inline ::ge::proto::TensorDef* SessionRunGraphResponse::mutable_tensor(int index) {
  // @@protoc_insertion_point(field_mutable:ge.api_pb.SessionRunGraphResponse.tensor)
  return tensor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDef >*
SessionRunGraphResponse::mutable_tensor() {
  // @@protoc_insertion_point(field_mutable_list:ge.api_pb.SessionRunGraphResponse.tensor)
  return &tensor_;
}
inline const ::ge::proto::TensorDef& SessionRunGraphResponse::_internal_tensor(int index) const {
  return tensor_.Get(index);
}
inline const ::ge::proto::TensorDef& SessionRunGraphResponse::tensor(int index) const {
  // @@protoc_insertion_point(field_get:ge.api_pb.SessionRunGraphResponse.tensor)
  return _internal_tensor(index);
}
inline ::ge::proto::TensorDef* SessionRunGraphResponse::_internal_add_tensor() {
  return tensor_.Add();
}
inline ::ge::proto::TensorDef* SessionRunGraphResponse::add_tensor() {
  // @@protoc_insertion_point(field_add:ge.api_pb.SessionRunGraphResponse.tensor)
  return _internal_add_tensor();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDef >&
SessionRunGraphResponse::tensor() const {
  // @@protoc_insertion_point(field_list:ge.api_pb.SessionRunGraphResponse.tensor)
  return tensor_;
}

// -------------------------------------------------------------------

// SessionBuildGraphResponse

// uint32 status = 1;
inline void SessionBuildGraphResponse::clear_status() {
  status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionBuildGraphResponse::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionBuildGraphResponse::status() const {
  // @@protoc_insertion_point(field_get:ge.api_pb.SessionBuildGraphResponse.status)
  return _internal_status();
}
inline void SessionBuildGraphResponse::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_ = value;
}
inline void SessionBuildGraphResponse::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ge.api_pb.SessionBuildGraphResponse.status)
}

// -------------------------------------------------------------------

// DestroySession

// bool final = 1;
inline void DestroySession::clear_final() {
  final_ = false;
}
inline bool DestroySession::_internal_final() const {
  return final_;
}
inline bool DestroySession::final() const {
  // @@protoc_insertion_point(field_get:ge.api_pb.DestroySession.final)
  return _internal_final();
}
inline void DestroySession::_internal_set_final(bool value) {
  
  final_ = value;
}
inline void DestroySession::set_final(bool value) {
  _internal_set_final(value);
  // @@protoc_insertion_point(field_set:ge.api_pb.DestroySession.final)
}

// uint64 sessionId = 2;
inline void DestroySession::clear_sessionid() {
  sessionid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DestroySession::_internal_sessionid() const {
  return sessionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DestroySession::sessionid() const {
  // @@protoc_insertion_point(field_get:ge.api_pb.DestroySession.sessionId)
  return _internal_sessionid();
}
inline void DestroySession::_internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sessionid_ = value;
}
inline void DestroySession::set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:ge.api_pb.DestroySession.sessionId)
}

// -------------------------------------------------------------------

// DestroySessionResponse

// uint32 status = 1;
inline void DestroySessionResponse::clear_status() {
  status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DestroySessionResponse::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DestroySessionResponse::status() const {
  // @@protoc_insertion_point(field_get:ge.api_pb.DestroySessionResponse.status)
  return _internal_status();
}
inline void DestroySessionResponse::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_ = value;
}
inline void DestroySessionResponse::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ge.api_pb.DestroySessionResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api_pb
}  // namespace ge

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ge_5fapi_2eproto
