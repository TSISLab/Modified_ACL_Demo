// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ge_ir.proto

#include "ge_ir.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ge_5fir_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AttrDef_ge_5fir_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ge_5fir_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AttrDef_ListListFloat_ge_5fir_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ge_5fir_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AttrDef_ListListFloat_ListFloat_ge_5fir_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ge_5fir_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AttrDef_ListListInt_ge_5fir_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ge_5fir_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AttrDef_ListListInt_ListInt_ge_5fir_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ge_5fir_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelDef_AttrEntry_DoNotUse_ge_5fir_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ge_5fir_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShapeDef_ge_5fir_2eproto;
namespace ge {
namespace proto {
class AttrDef_ListValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AttrDef_ListValue> _instance;
} _AttrDef_ListValue_default_instance_;
class AttrDef_ListListInt_ListIntDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AttrDef_ListListInt_ListInt> _instance;
} _AttrDef_ListListInt_ListInt_default_instance_;
class AttrDef_ListListIntDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AttrDef_ListListInt> _instance;
} _AttrDef_ListListInt_default_instance_;
class AttrDef_ListListFloat_ListFloatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AttrDef_ListListFloat_ListFloat> _instance;
} _AttrDef_ListListFloat_ListFloat_default_instance_;
class AttrDef_ListListFloatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AttrDef_ListListFloat> _instance;
} _AttrDef_ListListFloat_default_instance_;
class AttrDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AttrDef> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_;
  ::PROTOBUF_NAMESPACE_ID::int64 i_;
  float f_;
  bool b_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bt_;
  const ::ge::proto::AttrDef_ListValue* list_;
  const ::ge::proto::NamedAttrs* func_;
  const ::ge::proto::TensorDescriptor* td_;
  const ::ge::proto::TensorDef* t_;
  const ::ge::proto::GraphDef* g_;
  const ::ge::proto::AttrDef_ListListInt* list_list_int_;
  ::PROTOBUF_NAMESPACE_ID::int64 dt_;
  const ::ge::proto::AttrDef_ListListFloat* list_list_float_;
} _AttrDef_default_instance_;
class NamedAttrs_AttrEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NamedAttrs_AttrEntry_DoNotUse> _instance;
} _NamedAttrs_AttrEntry_DoNotUse_default_instance_;
class NamedAttrsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NamedAttrs> _instance;
} _NamedAttrs_default_instance_;
class ShapeDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShapeDef> _instance;
} _ShapeDef_default_instance_;
class TensorDescriptor_AttrEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TensorDescriptor_AttrEntry_DoNotUse> _instance;
} _TensorDescriptor_AttrEntry_DoNotUse_default_instance_;
class TensorDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TensorDescriptor> _instance;
} _TensorDescriptor_default_instance_;
class TensorDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TensorDef> _instance;
} _TensorDef_default_instance_;
class OpDef_AttrEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpDef_AttrEntry_DoNotUse> _instance;
} _OpDef_AttrEntry_DoNotUse_default_instance_;
class OpDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpDef> _instance;
} _OpDef_default_instance_;
class GraphDef_AttrEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphDef_AttrEntry_DoNotUse> _instance;
} _GraphDef_AttrEntry_DoNotUse_default_instance_;
class GraphDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphDef> _instance;
} _GraphDef_default_instance_;
class ModelDef_AttrEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelDef_AttrEntry_DoNotUse> _instance;
} _ModelDef_AttrEntry_DoNotUse_default_instance_;
class ModelDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelDef> _instance;
} _ModelDef_default_instance_;
}  // namespace proto
}  // namespace ge
static void InitDefaultsscc_info_AttrDef_ge_5fir_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::proto::_AttrDef_ListValue_default_instance_;
    new (ptr) ::ge::proto::AttrDef_ListValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::ge::proto::_AttrDef_default_instance_;
    new (ptr) ::ge::proto::AttrDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::ge::proto::_NamedAttrs_AttrEntry_DoNotUse_default_instance_;
    new (ptr) ::ge::proto::NamedAttrs_AttrEntry_DoNotUse();
  }
  {
    void* ptr = &::ge::proto::_NamedAttrs_default_instance_;
    new (ptr) ::ge::proto::NamedAttrs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::ge::proto::_TensorDescriptor_AttrEntry_DoNotUse_default_instance_;
    new (ptr) ::ge::proto::TensorDescriptor_AttrEntry_DoNotUse();
  }
  {
    void* ptr = &::ge::proto::_TensorDescriptor_default_instance_;
    new (ptr) ::ge::proto::TensorDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::ge::proto::_TensorDef_default_instance_;
    new (ptr) ::ge::proto::TensorDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::ge::proto::_OpDef_AttrEntry_DoNotUse_default_instance_;
    new (ptr) ::ge::proto::OpDef_AttrEntry_DoNotUse();
  }
  {
    void* ptr = &::ge::proto::_OpDef_default_instance_;
    new (ptr) ::ge::proto::OpDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::ge::proto::_GraphDef_AttrEntry_DoNotUse_default_instance_;
    new (ptr) ::ge::proto::GraphDef_AttrEntry_DoNotUse();
  }
  {
    void* ptr = &::ge::proto::_GraphDef_default_instance_;
    new (ptr) ::ge::proto::GraphDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::proto::AttrDef_ListValue::InitAsDefaultInstance();
  ::ge::proto::AttrDef::InitAsDefaultInstance();
  ::ge::proto::NamedAttrs_AttrEntry_DoNotUse::InitAsDefaultInstance();
  ::ge::proto::NamedAttrs::InitAsDefaultInstance();
  ::ge::proto::TensorDescriptor_AttrEntry_DoNotUse::InitAsDefaultInstance();
  ::ge::proto::TensorDescriptor::InitAsDefaultInstance();
  ::ge::proto::TensorDef::InitAsDefaultInstance();
  ::ge::proto::OpDef_AttrEntry_DoNotUse::InitAsDefaultInstance();
  ::ge::proto::OpDef::InitAsDefaultInstance();
  ::ge::proto::GraphDef_AttrEntry_DoNotUse::InitAsDefaultInstance();
  ::ge::proto::GraphDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AttrDef_ge_5fir_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_AttrDef_ge_5fir_2eproto}, {
      &scc_info_AttrDef_ListListInt_ge_5fir_2eproto.base,
      &scc_info_AttrDef_ListListFloat_ge_5fir_2eproto.base,
      &scc_info_ShapeDef_ge_5fir_2eproto.base,}};

static void InitDefaultsscc_info_AttrDef_ListListFloat_ge_5fir_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::proto::_AttrDef_ListListFloat_default_instance_;
    new (ptr) ::ge::proto::AttrDef_ListListFloat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::proto::AttrDef_ListListFloat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AttrDef_ListListFloat_ge_5fir_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AttrDef_ListListFloat_ge_5fir_2eproto}, {
      &scc_info_AttrDef_ListListFloat_ListFloat_ge_5fir_2eproto.base,}};

static void InitDefaultsscc_info_AttrDef_ListListFloat_ListFloat_ge_5fir_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::proto::_AttrDef_ListListFloat_ListFloat_default_instance_;
    new (ptr) ::ge::proto::AttrDef_ListListFloat_ListFloat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::proto::AttrDef_ListListFloat_ListFloat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AttrDef_ListListFloat_ListFloat_ge_5fir_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AttrDef_ListListFloat_ListFloat_ge_5fir_2eproto}, {}};

static void InitDefaultsscc_info_AttrDef_ListListInt_ge_5fir_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::proto::_AttrDef_ListListInt_default_instance_;
    new (ptr) ::ge::proto::AttrDef_ListListInt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::proto::AttrDef_ListListInt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AttrDef_ListListInt_ge_5fir_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AttrDef_ListListInt_ge_5fir_2eproto}, {
      &scc_info_AttrDef_ListListInt_ListInt_ge_5fir_2eproto.base,}};

static void InitDefaultsscc_info_AttrDef_ListListInt_ListInt_ge_5fir_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::proto::_AttrDef_ListListInt_ListInt_default_instance_;
    new (ptr) ::ge::proto::AttrDef_ListListInt_ListInt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::proto::AttrDef_ListListInt_ListInt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AttrDef_ListListInt_ListInt_ge_5fir_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AttrDef_ListListInt_ListInt_ge_5fir_2eproto}, {}};

static void InitDefaultsscc_info_ModelDef_ge_5fir_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::proto::_ModelDef_default_instance_;
    new (ptr) ::ge::proto::ModelDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::proto::ModelDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ModelDef_ge_5fir_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ModelDef_ge_5fir_2eproto}, {
      &scc_info_AttrDef_ge_5fir_2eproto.base,
      &scc_info_ModelDef_AttrEntry_DoNotUse_ge_5fir_2eproto.base,}};

static void InitDefaultsscc_info_ModelDef_AttrEntry_DoNotUse_ge_5fir_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::proto::_ModelDef_AttrEntry_DoNotUse_default_instance_;
    new (ptr) ::ge::proto::ModelDef_AttrEntry_DoNotUse();
  }
  ::ge::proto::ModelDef_AttrEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelDef_AttrEntry_DoNotUse_ge_5fir_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModelDef_AttrEntry_DoNotUse_ge_5fir_2eproto}, {
      &scc_info_AttrDef_ge_5fir_2eproto.base,}};

static void InitDefaultsscc_info_ShapeDef_ge_5fir_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ge::proto::_ShapeDef_default_instance_;
    new (ptr) ::ge::proto::ShapeDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ge::proto::ShapeDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShapeDef_ge_5fir_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShapeDef_ge_5fir_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ge_5fir_2eproto[18];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ge_5fir_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ge_5fir_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ge_5fir_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::proto::AttrDef_ListValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::proto::AttrDef_ListValue, s_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::AttrDef_ListValue, i_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::AttrDef_ListValue, f_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::AttrDef_ListValue, b_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::AttrDef_ListValue, bt_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::AttrDef_ListValue, td_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::AttrDef_ListValue, t_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::AttrDef_ListValue, g_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::AttrDef_ListValue, na_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::AttrDef_ListValue, dt_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::AttrDef_ListValue, val_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::proto::AttrDef_ListListInt_ListInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::proto::AttrDef_ListListInt_ListInt, list_i_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::proto::AttrDef_ListListInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::proto::AttrDef_ListListInt, list_list_i_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::proto::AttrDef_ListListFloat_ListFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::proto::AttrDef_ListListFloat_ListFloat, list_f_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::proto::AttrDef_ListListFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::proto::AttrDef_ListListFloat, list_list_f_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::proto::AttrDef, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ge::proto::AttrDef, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ge::proto::AttrDefDefaultTypeInternal, s_),
  offsetof(::ge::proto::AttrDefDefaultTypeInternal, i_),
  offsetof(::ge::proto::AttrDefDefaultTypeInternal, f_),
  offsetof(::ge::proto::AttrDefDefaultTypeInternal, b_),
  offsetof(::ge::proto::AttrDefDefaultTypeInternal, bt_),
  offsetof(::ge::proto::AttrDefDefaultTypeInternal, list_),
  offsetof(::ge::proto::AttrDefDefaultTypeInternal, func_),
  offsetof(::ge::proto::AttrDefDefaultTypeInternal, td_),
  offsetof(::ge::proto::AttrDefDefaultTypeInternal, t_),
  offsetof(::ge::proto::AttrDefDefaultTypeInternal, g_),
  offsetof(::ge::proto::AttrDefDefaultTypeInternal, list_list_int_),
  offsetof(::ge::proto::AttrDefDefaultTypeInternal, dt_),
  offsetof(::ge::proto::AttrDefDefaultTypeInternal, list_list_float_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::AttrDef, value_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::NamedAttrs_AttrEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::NamedAttrs_AttrEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::proto::NamedAttrs_AttrEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::NamedAttrs_AttrEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::proto::NamedAttrs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::proto::NamedAttrs, name_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::NamedAttrs, attr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::proto::ShapeDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::proto::ShapeDef, dim_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::TensorDescriptor_AttrEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::TensorDescriptor_AttrEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::proto::TensorDescriptor_AttrEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::TensorDescriptor_AttrEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::proto::TensorDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::proto::TensorDescriptor, name_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::TensorDescriptor, dtype_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::TensorDescriptor, shape_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::TensorDescriptor, layout_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::TensorDescriptor, has_out_attr_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::TensorDescriptor, size_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::TensorDescriptor, weight_size_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::TensorDescriptor, reuse_input_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::TensorDescriptor, output_tensor_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::TensorDescriptor, device_type_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::TensorDescriptor, input_tensor_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::TensorDescriptor, real_dim_cnt_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::TensorDescriptor, reuse_input_index_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::TensorDescriptor, data_offset_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::TensorDescriptor, cmps_size_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::TensorDescriptor, cmps_tab_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::TensorDescriptor, cmps_tab_offset_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::TensorDescriptor, attr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::proto::TensorDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::proto::TensorDef, desc_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::TensorDef, data_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::OpDef_AttrEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::OpDef_AttrEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::proto::OpDef_AttrEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::OpDef_AttrEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::proto::OpDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::proto::OpDef, name_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::OpDef, type_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::OpDef, input_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::OpDef, attr_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::OpDef, has_out_attr_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::OpDef, id_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::OpDef, stream_id_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::OpDef, input_name_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::OpDef, src_name_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::OpDef, src_index_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::OpDef, dst_name_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::OpDef, dst_index_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::OpDef, input_i_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::OpDef, output_i_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::OpDef, workspace_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::OpDef, workspace_bytes_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::OpDef, is_input_const_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::OpDef, input_desc_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::OpDef, output_desc_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::OpDef, subgraph_name_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::GraphDef_AttrEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::GraphDef_AttrEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::proto::GraphDef_AttrEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::GraphDef_AttrEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::proto::GraphDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::proto::GraphDef, name_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::GraphDef, input_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::GraphDef, output_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::GraphDef, op_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::GraphDef, attr_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::ModelDef_AttrEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::ModelDef_AttrEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::proto::ModelDef_AttrEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::ModelDef_AttrEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ge::proto::ModelDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ge::proto::ModelDef, name_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::ModelDef, version_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::ModelDef, custom_version_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::ModelDef, graph_),
  PROTOBUF_FIELD_OFFSET(::ge::proto::ModelDef, attr_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ge::proto::AttrDef_ListValue)},
  { 16, -1, sizeof(::ge::proto::AttrDef_ListListInt_ListInt)},
  { 22, -1, sizeof(::ge::proto::AttrDef_ListListInt)},
  { 28, -1, sizeof(::ge::proto::AttrDef_ListListFloat_ListFloat)},
  { 34, -1, sizeof(::ge::proto::AttrDef_ListListFloat)},
  { 40, -1, sizeof(::ge::proto::AttrDef)},
  { 59, 66, sizeof(::ge::proto::NamedAttrs_AttrEntry_DoNotUse)},
  { 68, -1, sizeof(::ge::proto::NamedAttrs)},
  { 75, -1, sizeof(::ge::proto::ShapeDef)},
  { 81, 88, sizeof(::ge::proto::TensorDescriptor_AttrEntry_DoNotUse)},
  { 90, -1, sizeof(::ge::proto::TensorDescriptor)},
  { 113, -1, sizeof(::ge::proto::TensorDef)},
  { 120, 127, sizeof(::ge::proto::OpDef_AttrEntry_DoNotUse)},
  { 129, -1, sizeof(::ge::proto::OpDef)},
  { 154, 161, sizeof(::ge::proto::GraphDef_AttrEntry_DoNotUse)},
  { 163, -1, sizeof(::ge::proto::GraphDef)},
  { 173, 180, sizeof(::ge::proto::ModelDef_AttrEntry_DoNotUse)},
  { 182, -1, sizeof(::ge::proto::ModelDef)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::proto::_AttrDef_ListValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::proto::_AttrDef_ListListInt_ListInt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::proto::_AttrDef_ListListInt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::proto::_AttrDef_ListListFloat_ListFloat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::proto::_AttrDef_ListListFloat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::proto::_AttrDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::proto::_NamedAttrs_AttrEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::proto::_NamedAttrs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::proto::_ShapeDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::proto::_TensorDescriptor_AttrEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::proto::_TensorDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::proto::_TensorDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::proto::_OpDef_AttrEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::proto::_OpDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::proto::_GraphDef_AttrEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::proto::_GraphDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::proto::_ModelDef_AttrEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ge::proto::_ModelDef_default_instance_),
};

const char descriptor_table_protodef_ge_5fir_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013ge_ir.proto\022\010ge.proto\"\363\010\n\007AttrDef\022\013\n\001s"
  "\030\002 \001(\014H\000\022\013\n\001i\030\003 \001(\003H\000\022\013\n\001f\030\004 \001(\002H\000\022\013\n\001b\030"
  "\005 \001(\010H\000\022\014\n\002bt\030\007 \001(\014H\000\022+\n\004list\030\001 \001(\0132\033.ge"
  ".proto.AttrDef.ListValueH\000\022$\n\004func\030\n \001(\013"
  "2\024.ge.proto.NamedAttrsH\000\022(\n\002td\030\013 \001(\0132\032.g"
  "e.proto.TensorDescriptorH\000\022 \n\001t\030\014 \001(\0132\023."
  "ge.proto.TensorDefH\000\022\037\n\001g\030\r \001(\0132\022.ge.pro"
  "to.GraphDefH\000\0226\n\rlist_list_int\030\016 \001(\0132\035.g"
  "e.proto.AttrDef.ListListIntH\000\022\014\n\002dt\030\017 \001("
  "\003H\000\022:\n\017list_list_float\030\020 \001(\0132\037.ge.proto."
  "AttrDef.ListListFloatH\000\032\206\004\n\tListValue\022\t\n"
  "\001s\030\002 \003(\014\022\t\n\001i\030\003 \003(\003\022\t\n\001f\030\004 \003(\002\022\t\n\001b\030\005 \003("
  "\010\022\n\n\002bt\030\007 \003(\014\022&\n\002td\030\010 \003(\0132\032.ge.proto.Ten"
  "sorDescriptor\022\036\n\001t\030\t \003(\0132\023.ge.proto.Tens"
  "orDef\022\035\n\001g\030\n \003(\0132\022.ge.proto.GraphDef\022 \n\002"
  "na\030\013 \003(\0132\024.ge.proto.NamedAttrs\022\n\n\002dt\030\014 \003"
  "(\003\022;\n\010val_type\030\024 \001(\0162).ge.proto.AttrDef."
  "ListValue.ListValueType\"\356\001\n\rListValueTyp"
  "e\022\020\n\014VT_LIST_NONE\020\000\022\022\n\016VT_LIST_STRING\020\001\022"
  "\017\n\013VT_LIST_INT\020\002\022\021\n\rVT_LIST_FLOAT\020\003\022\020\n\014V"
  "T_LIST_BOOL\020\004\022\021\n\rVT_LIST_BYTES\020\005\022\027\n\023VT_L"
  "IST_TENSOR_DESC\020\006\022\022\n\016VT_LIST_TENSOR\020\007\022\021\n"
  "\rVT_LIST_GRAPH\020\010\022\027\n\023VT_LIST_NAMED_ATTRS\020"
  "\t\022\025\n\021VT_LIST_DATA_TYPE\020\n\032d\n\013ListListInt\022"
  ":\n\013list_list_i\030\001 \003(\0132%.ge.proto.AttrDef."
  "ListListInt.ListInt\032\031\n\007ListInt\022\016\n\006list_i"
  "\030\001 \003(\003\032l\n\rListListFloat\022>\n\013list_list_f\030\001"
  " \003(\0132).ge.proto.AttrDef.ListListFloat.Li"
  "stFloat\032\033\n\tListFloat\022\016\n\006list_f\030\001 \003(\002B\007\n\005"
  "value\"\210\001\n\nNamedAttrs\022\014\n\004name\030\001 \001(\t\022,\n\004at"
  "tr\030\002 \003(\0132\036.ge.proto.NamedAttrs.AttrEntry"
  "\032>\n\tAttrEntry\022\013\n\003key\030\001 \001(\t\022 \n\005value\030\002 \001("
  "\0132\021.ge.proto.AttrDef:\0028\001\"\027\n\010ShapeDef\022\013\n\003"
  "dim\030\001 \003(\003\"\376\003\n\020TensorDescriptor\022\014\n\004name\030\001"
  " \001(\t\022!\n\005dtype\030\002 \001(\0162\022.ge.proto.DataType\022"
  "!\n\005shape\030\003 \001(\0132\022.ge.proto.ShapeDef\022\016\n\006la"
  "yout\030\004 \001(\t\022\024\n\014has_out_attr\030\t \001(\010\022\014\n\004size"
  "\030\n \001(\003\022\023\n\013weight_size\030\013 \001(\003\022\023\n\013reuse_inp"
  "ut\030\014 \001(\010\022\025\n\routput_tensor\030\r \001(\010\022\023\n\013devic"
  "e_type\030\016 \001(\t\022\024\n\014input_tensor\030\017 \001(\010\022\024\n\014re"
  "al_dim_cnt\030\020 \001(\003\022\031\n\021reuse_input_index\030\021 "
  "\001(\003\022\023\n\013data_offset\030\022 \001(\003\022\021\n\tcmps_size\030\023 "
  "\001(\003\022\020\n\010cmps_tab\030\024 \001(\t\022\027\n\017cmps_tab_offset"
  "\030\025 \001(\003\0222\n\004attr\030\005 \003(\0132$.ge.proto.TensorDe"
  "scriptor.AttrEntry\032>\n\tAttrEntry\022\013\n\003key\030\001"
  " \001(\t\022 \n\005value\030\002 \001(\0132\021.ge.proto.AttrDef:\002"
  "8\001\"C\n\tTensorDef\022(\n\004desc\030\001 \001(\0132\032.ge.proto"
  ".TensorDescriptor\022\014\n\004data\030\002 \001(\014\"\215\004\n\005OpDe"
  "f\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\r\n\005input\030\005"
  " \003(\t\022\'\n\004attr\030\n \003(\0132\031.ge.proto.OpDef.Attr"
  "Entry\022\024\n\014has_out_attr\030\024 \001(\010\022\n\n\002id\030\025 \001(\003\022"
  "\021\n\tstream_id\030\026 \001(\003\022\022\n\ninput_name\030\027 \003(\t\022\020"
  "\n\010src_name\030\030 \003(\t\022\021\n\tsrc_index\030\031 \003(\003\022\020\n\010d"
  "st_name\030\032 \003(\t\022\021\n\tdst_index\030\033 \003(\003\022\017\n\007inpu"
  "t_i\030\034 \003(\003\022\020\n\010output_i\030\035 \003(\003\022\021\n\tworkspace"
  "\030\036 \003(\003\022\027\n\017workspace_bytes\030\037 \003(\003\022\026\n\016is_in"
  "put_const\030  \003(\010\022.\n\ninput_desc\030! \003(\0132\032.ge"
  ".proto.TensorDescriptor\022/\n\013output_desc\030\""
  " \003(\0132\032.ge.proto.TensorDescriptor\022\025\n\rsubg"
  "raph_name\030# \003(\t\032>\n\tAttrEntry\022\013\n\003key\030\001 \001("
  "\t\022 \n\005value\030\002 \001(\0132\021.ge.proto.AttrDef:\0028\001\""
  "\300\001\n\010GraphDef\022\014\n\004name\030\001 \001(\t\022\r\n\005input\030\004 \003("
  "\t\022\016\n\006output\030\005 \003(\t\022\033\n\002op\030\006 \003(\0132\017.ge.proto"
  ".OpDef\022*\n\004attr\030\013 \003(\0132\034.ge.proto.GraphDef"
  ".AttrEntry\032>\n\tAttrEntry\022\013\n\003key\030\001 \001(\t\022 \n\005"
  "value\030\002 \001(\0132\021.ge.proto.AttrDef:\0028\001\"\320\001\n\010M"
  "odelDef\022\014\n\004name\030\001 \001(\t\022\017\n\007version\030\002 \001(\r\022\026"
  "\n\016custom_version\030\003 \001(\t\022!\n\005graph\030\007 \003(\0132\022."
  "ge.proto.GraphDef\022*\n\004attr\030\013 \003(\0132\034.ge.pro"
  "to.ModelDef.AttrEntry\032>\n\tAttrEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022 \n\005value\030\002 \001(\0132\021.ge.proto.AttrDe"
  "f:\0028\001*\370\003\n\010DataType\022\020\n\014DT_UNDEFINED\020\000\022\014\n\010"
  "DT_FLOAT\020\001\022\016\n\nDT_FLOAT16\020\002\022\013\n\007DT_INT8\020\003\022"
  "\014\n\010DT_UINT8\020\004\022\014\n\010DT_INT16\020\005\022\r\n\tDT_UINT16"
  "\020\006\022\014\n\010DT_INT32\020\007\022\014\n\010DT_INT64\020\010\022\r\n\tDT_UIN"
  "T32\020\t\022\r\n\tDT_UINT64\020\n\022\013\n\007DT_BOOL\020\013\022\r\n\tDT_"
  "DOUBLE\020\014\022\r\n\tDT_STRING\020\r\022\024\n\020DT_DUAL_SUB_I"
  "NT8\020\016\022\025\n\021DT_DUAL_SUB_UINT8\020\017\022\020\n\014DT_COMPL"
  "EX64\020\020\022\021\n\rDT_COMPLEX128\020\021\022\014\n\010DT_QINT8\020\022\022"
  "\r\n\tDT_QINT16\020\023\022\r\n\tDT_QINT32\020\024\022\r\n\tDT_QUIN"
  "T8\020\025\022\016\n\nDT_QUINT16\020\026\022\017\n\013DT_RESOURCE\020\027\022\021\n"
  "\rDT_STRING_REF\020\030\022\013\n\007DT_DUAL\020\031\022\016\n\nDT_VARI"
  "ANT\020\032\022\013\n\007DT_BF16\020\033\022\013\n\007DT_INT4\020\034\022\014\n\010DT_UI"
  "NT1\020\035\022\013\n\007DT_INT2\020\036\022\014\n\010DT_UINT2\020\037b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ge_5fir_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ge_5fir_2eproto_sccs[8] = {
  &scc_info_AttrDef_ge_5fir_2eproto.base,
  &scc_info_AttrDef_ListListFloat_ge_5fir_2eproto.base,
  &scc_info_AttrDef_ListListFloat_ListFloat_ge_5fir_2eproto.base,
  &scc_info_AttrDef_ListListInt_ge_5fir_2eproto.base,
  &scc_info_AttrDef_ListListInt_ListInt_ge_5fir_2eproto.base,
  &scc_info_ModelDef_ge_5fir_2eproto.base,
  &scc_info_ModelDef_AttrEntry_DoNotUse_ge_5fir_2eproto.base,
  &scc_info_ShapeDef_ge_5fir_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ge_5fir_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ge_5fir_2eproto = {
  false, false, descriptor_table_protodef_ge_5fir_2eproto, "ge_ir.proto", 3360,
  &descriptor_table_ge_5fir_2eproto_once, descriptor_table_ge_5fir_2eproto_sccs, descriptor_table_ge_5fir_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_ge_5fir_2eproto::offsets,
  file_level_metadata_ge_5fir_2eproto, 18, file_level_enum_descriptors_ge_5fir_2eproto, file_level_service_descriptors_ge_5fir_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ge_5fir_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ge_5fir_2eproto)), true);
namespace ge {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AttrDef_ListValue_ListValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ge_5fir_2eproto);
  return file_level_enum_descriptors_ge_5fir_2eproto[0];
}
bool AttrDef_ListValue_ListValueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AttrDef_ListValue_ListValueType AttrDef_ListValue::VT_LIST_NONE;
constexpr AttrDef_ListValue_ListValueType AttrDef_ListValue::VT_LIST_STRING;
constexpr AttrDef_ListValue_ListValueType AttrDef_ListValue::VT_LIST_INT;
constexpr AttrDef_ListValue_ListValueType AttrDef_ListValue::VT_LIST_FLOAT;
constexpr AttrDef_ListValue_ListValueType AttrDef_ListValue::VT_LIST_BOOL;
constexpr AttrDef_ListValue_ListValueType AttrDef_ListValue::VT_LIST_BYTES;
constexpr AttrDef_ListValue_ListValueType AttrDef_ListValue::VT_LIST_TENSOR_DESC;
constexpr AttrDef_ListValue_ListValueType AttrDef_ListValue::VT_LIST_TENSOR;
constexpr AttrDef_ListValue_ListValueType AttrDef_ListValue::VT_LIST_GRAPH;
constexpr AttrDef_ListValue_ListValueType AttrDef_ListValue::VT_LIST_NAMED_ATTRS;
constexpr AttrDef_ListValue_ListValueType AttrDef_ListValue::VT_LIST_DATA_TYPE;
constexpr AttrDef_ListValue_ListValueType AttrDef_ListValue::ListValueType_MIN;
constexpr AttrDef_ListValue_ListValueType AttrDef_ListValue::ListValueType_MAX;
constexpr int AttrDef_ListValue::ListValueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ge_5fir_2eproto);
  return file_level_enum_descriptors_ge_5fir_2eproto[1];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void AttrDef_ListValue::InitAsDefaultInstance() {
}
class AttrDef_ListValue::_Internal {
 public:
};

AttrDef_ListValue::AttrDef_ListValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  s_(arena),
  i_(arena),
  f_(arena),
  b_(arena),
  bt_(arena),
  td_(arena),
  t_(arena),
  g_(arena),
  na_(arena),
  dt_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.proto.AttrDef.ListValue)
}
AttrDef_ListValue::AttrDef_ListValue(const AttrDef_ListValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      s_(from.s_),
      i_(from.i_),
      f_(from.f_),
      b_(from.b_),
      bt_(from.bt_),
      td_(from.td_),
      t_(from.t_),
      g_(from.g_),
      na_(from.na_),
      dt_(from.dt_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  val_type_ = from.val_type_;
  // @@protoc_insertion_point(copy_constructor:ge.proto.AttrDef.ListValue)
}

void AttrDef_ListValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AttrDef_ge_5fir_2eproto.base);
  val_type_ = 0;
}

AttrDef_ListValue::~AttrDef_ListValue() {
  // @@protoc_insertion_point(destructor:ge.proto.AttrDef.ListValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AttrDef_ListValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AttrDef_ListValue::ArenaDtor(void* object) {
  AttrDef_ListValue* _this = reinterpret_cast< AttrDef_ListValue* >(object);
  (void)_this;
}
void AttrDef_ListValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AttrDef_ListValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AttrDef_ListValue& AttrDef_ListValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AttrDef_ge_5fir_2eproto.base);
  return *internal_default_instance();
}


void AttrDef_ListValue::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.proto.AttrDef.ListValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  s_.Clear();
  i_.Clear();
  f_.Clear();
  b_.Clear();
  bt_.Clear();
  td_.Clear();
  t_.Clear();
  g_.Clear();
  na_.Clear();
  dt_.Clear();
  val_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttrDef_ListValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_s();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int64 i = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_i(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_i(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float f = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_f(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_f(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated bool b = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_b(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_b(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes bt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bt();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ge.proto.TensorDescriptor td = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_td(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ge.proto.TensorDef t = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_t(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ge.proto.GraphDef g = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_g(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ge.proto.NamedAttrs na = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_na(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int64 dt = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_dt(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96) {
          _internal_add_dt(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ge.proto.AttrDef.ListValue.ListValueType val_type = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_val_type(static_cast<::ge::proto::AttrDef_ListValue_ListValueType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AttrDef_ListValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.proto.AttrDef.ListValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes s = 2;
  for (int i = 0, n = this->_internal_s_size(); i < n; i++) {
    const auto& s = this->_internal_s(i);
    target = stream->WriteBytes(2, s, target);
  }

  // repeated int64 i = 3;
  {
    int byte_size = _i_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_i(), byte_size, target);
    }
  }

  // repeated float f = 4;
  if (this->_internal_f_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_f(), target);
  }

  // repeated bool b = 5;
  if (this->_internal_b_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_b(), target);
  }

  // repeated bytes bt = 7;
  for (int i = 0, n = this->_internal_bt_size(); i < n; i++) {
    const auto& s = this->_internal_bt(i);
    target = stream->WriteBytes(7, s, target);
  }

  // repeated .ge.proto.TensorDescriptor td = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_td_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_td(i), target, stream);
  }

  // repeated .ge.proto.TensorDef t = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_t_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_t(i), target, stream);
  }

  // repeated .ge.proto.GraphDef g = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_g_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_g(i), target, stream);
  }

  // repeated .ge.proto.NamedAttrs na = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_na_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_na(i), target, stream);
  }

  // repeated int64 dt = 12;
  {
    int byte_size = _dt_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          12, _internal_dt(), byte_size, target);
    }
  }

  // .ge.proto.AttrDef.ListValue.ListValueType val_type = 20;
  if (this->val_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      20, this->_internal_val_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.proto.AttrDef.ListValue)
  return target;
}

size_t AttrDef_ListValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.proto.AttrDef.ListValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes s = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(s_.size());
  for (int i = 0, n = s_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      s_.Get(i));
  }

  // repeated int64 i = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->i_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _i_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float f = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_f_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _f_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool b = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_b_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _b_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bytes bt = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(bt_.size());
  for (int i = 0, n = bt_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      bt_.Get(i));
  }

  // repeated .ge.proto.TensorDescriptor td = 8;
  total_size += 1UL * this->_internal_td_size();
  for (const auto& msg : this->td_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ge.proto.TensorDef t = 9;
  total_size += 1UL * this->_internal_t_size();
  for (const auto& msg : this->t_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ge.proto.GraphDef g = 10;
  total_size += 1UL * this->_internal_g_size();
  for (const auto& msg : this->g_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ge.proto.NamedAttrs na = 11;
  total_size += 1UL * this->_internal_na_size();
  for (const auto& msg : this->na_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 dt = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->dt_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dt_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .ge.proto.AttrDef.ListValue.ListValueType val_type = 20;
  if (this->val_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_val_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttrDef_ListValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.proto.AttrDef.ListValue)
  GOOGLE_DCHECK_NE(&from, this);
  const AttrDef_ListValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AttrDef_ListValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.proto.AttrDef.ListValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.proto.AttrDef.ListValue)
    MergeFrom(*source);
  }
}

void AttrDef_ListValue::MergeFrom(const AttrDef_ListValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.proto.AttrDef.ListValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  s_.MergeFrom(from.s_);
  i_.MergeFrom(from.i_);
  f_.MergeFrom(from.f_);
  b_.MergeFrom(from.b_);
  bt_.MergeFrom(from.bt_);
  td_.MergeFrom(from.td_);
  t_.MergeFrom(from.t_);
  g_.MergeFrom(from.g_);
  na_.MergeFrom(from.na_);
  dt_.MergeFrom(from.dt_);
  if (from.val_type() != 0) {
    _internal_set_val_type(from._internal_val_type());
  }
}

void AttrDef_ListValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.proto.AttrDef.ListValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttrDef_ListValue::CopyFrom(const AttrDef_ListValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.proto.AttrDef.ListValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttrDef_ListValue::IsInitialized() const {
  return true;
}

void AttrDef_ListValue::InternalSwap(AttrDef_ListValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  s_.InternalSwap(&other->s_);
  i_.InternalSwap(&other->i_);
  f_.InternalSwap(&other->f_);
  b_.InternalSwap(&other->b_);
  bt_.InternalSwap(&other->bt_);
  td_.InternalSwap(&other->td_);
  t_.InternalSwap(&other->t_);
  g_.InternalSwap(&other->g_);
  na_.InternalSwap(&other->na_);
  dt_.InternalSwap(&other->dt_);
  swap(val_type_, other->val_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttrDef_ListValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AttrDef_ListListInt_ListInt::InitAsDefaultInstance() {
}
class AttrDef_ListListInt_ListInt::_Internal {
 public:
};

AttrDef_ListListInt_ListInt::AttrDef_ListListInt_ListInt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  list_i_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.proto.AttrDef.ListListInt.ListInt)
}
AttrDef_ListListInt_ListInt::AttrDef_ListListInt_ListInt(const AttrDef_ListListInt_ListInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      list_i_(from.list_i_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ge.proto.AttrDef.ListListInt.ListInt)
}

void AttrDef_ListListInt_ListInt::SharedCtor() {
}

AttrDef_ListListInt_ListInt::~AttrDef_ListListInt_ListInt() {
  // @@protoc_insertion_point(destructor:ge.proto.AttrDef.ListListInt.ListInt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AttrDef_ListListInt_ListInt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AttrDef_ListListInt_ListInt::ArenaDtor(void* object) {
  AttrDef_ListListInt_ListInt* _this = reinterpret_cast< AttrDef_ListListInt_ListInt* >(object);
  (void)_this;
}
void AttrDef_ListListInt_ListInt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AttrDef_ListListInt_ListInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AttrDef_ListListInt_ListInt& AttrDef_ListListInt_ListInt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AttrDef_ListListInt_ListInt_ge_5fir_2eproto.base);
  return *internal_default_instance();
}


void AttrDef_ListListInt_ListInt::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.proto.AttrDef.ListListInt.ListInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_i_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttrDef_ListListInt_ListInt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 list_i = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_list_i(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_list_i(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AttrDef_ListListInt_ListInt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.proto.AttrDef.ListListInt.ListInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 list_i = 1;
  {
    int byte_size = _list_i_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_list_i(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.proto.AttrDef.ListListInt.ListInt)
  return target;
}

size_t AttrDef_ListListInt_ListInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.proto.AttrDef.ListListInt.ListInt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 list_i = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->list_i_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _list_i_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttrDef_ListListInt_ListInt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.proto.AttrDef.ListListInt.ListInt)
  GOOGLE_DCHECK_NE(&from, this);
  const AttrDef_ListListInt_ListInt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AttrDef_ListListInt_ListInt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.proto.AttrDef.ListListInt.ListInt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.proto.AttrDef.ListListInt.ListInt)
    MergeFrom(*source);
  }
}

void AttrDef_ListListInt_ListInt::MergeFrom(const AttrDef_ListListInt_ListInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.proto.AttrDef.ListListInt.ListInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_i_.MergeFrom(from.list_i_);
}

void AttrDef_ListListInt_ListInt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.proto.AttrDef.ListListInt.ListInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttrDef_ListListInt_ListInt::CopyFrom(const AttrDef_ListListInt_ListInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.proto.AttrDef.ListListInt.ListInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttrDef_ListListInt_ListInt::IsInitialized() const {
  return true;
}

void AttrDef_ListListInt_ListInt::InternalSwap(AttrDef_ListListInt_ListInt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  list_i_.InternalSwap(&other->list_i_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttrDef_ListListInt_ListInt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AttrDef_ListListInt::InitAsDefaultInstance() {
}
class AttrDef_ListListInt::_Internal {
 public:
};

AttrDef_ListListInt::AttrDef_ListListInt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  list_list_i_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.proto.AttrDef.ListListInt)
}
AttrDef_ListListInt::AttrDef_ListListInt(const AttrDef_ListListInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      list_list_i_(from.list_list_i_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ge.proto.AttrDef.ListListInt)
}

void AttrDef_ListListInt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AttrDef_ListListInt_ge_5fir_2eproto.base);
}

AttrDef_ListListInt::~AttrDef_ListListInt() {
  // @@protoc_insertion_point(destructor:ge.proto.AttrDef.ListListInt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AttrDef_ListListInt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AttrDef_ListListInt::ArenaDtor(void* object) {
  AttrDef_ListListInt* _this = reinterpret_cast< AttrDef_ListListInt* >(object);
  (void)_this;
}
void AttrDef_ListListInt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AttrDef_ListListInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AttrDef_ListListInt& AttrDef_ListListInt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AttrDef_ListListInt_ge_5fir_2eproto.base);
  return *internal_default_instance();
}


void AttrDef_ListListInt::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.proto.AttrDef.ListListInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_list_i_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttrDef_ListListInt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ge.proto.AttrDef.ListListInt.ListInt list_list_i = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list_list_i(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AttrDef_ListListInt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.proto.AttrDef.ListListInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ge.proto.AttrDef.ListListInt.ListInt list_list_i = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_list_i_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list_list_i(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.proto.AttrDef.ListListInt)
  return target;
}

size_t AttrDef_ListListInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.proto.AttrDef.ListListInt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ge.proto.AttrDef.ListListInt.ListInt list_list_i = 1;
  total_size += 1UL * this->_internal_list_list_i_size();
  for (const auto& msg : this->list_list_i_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttrDef_ListListInt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.proto.AttrDef.ListListInt)
  GOOGLE_DCHECK_NE(&from, this);
  const AttrDef_ListListInt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AttrDef_ListListInt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.proto.AttrDef.ListListInt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.proto.AttrDef.ListListInt)
    MergeFrom(*source);
  }
}

void AttrDef_ListListInt::MergeFrom(const AttrDef_ListListInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.proto.AttrDef.ListListInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_list_i_.MergeFrom(from.list_list_i_);
}

void AttrDef_ListListInt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.proto.AttrDef.ListListInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttrDef_ListListInt::CopyFrom(const AttrDef_ListListInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.proto.AttrDef.ListListInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttrDef_ListListInt::IsInitialized() const {
  return true;
}

void AttrDef_ListListInt::InternalSwap(AttrDef_ListListInt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  list_list_i_.InternalSwap(&other->list_list_i_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttrDef_ListListInt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AttrDef_ListListFloat_ListFloat::InitAsDefaultInstance() {
}
class AttrDef_ListListFloat_ListFloat::_Internal {
 public:
};

AttrDef_ListListFloat_ListFloat::AttrDef_ListListFloat_ListFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  list_f_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.proto.AttrDef.ListListFloat.ListFloat)
}
AttrDef_ListListFloat_ListFloat::AttrDef_ListListFloat_ListFloat(const AttrDef_ListListFloat_ListFloat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      list_f_(from.list_f_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ge.proto.AttrDef.ListListFloat.ListFloat)
}

void AttrDef_ListListFloat_ListFloat::SharedCtor() {
}

AttrDef_ListListFloat_ListFloat::~AttrDef_ListListFloat_ListFloat() {
  // @@protoc_insertion_point(destructor:ge.proto.AttrDef.ListListFloat.ListFloat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AttrDef_ListListFloat_ListFloat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AttrDef_ListListFloat_ListFloat::ArenaDtor(void* object) {
  AttrDef_ListListFloat_ListFloat* _this = reinterpret_cast< AttrDef_ListListFloat_ListFloat* >(object);
  (void)_this;
}
void AttrDef_ListListFloat_ListFloat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AttrDef_ListListFloat_ListFloat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AttrDef_ListListFloat_ListFloat& AttrDef_ListListFloat_ListFloat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AttrDef_ListListFloat_ListFloat_ge_5fir_2eproto.base);
  return *internal_default_instance();
}


void AttrDef_ListListFloat_ListFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.proto.AttrDef.ListListFloat.ListFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_f_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttrDef_ListListFloat_ListFloat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float list_f = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_list_f(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_list_f(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AttrDef_ListListFloat_ListFloat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.proto.AttrDef.ListListFloat.ListFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float list_f = 1;
  if (this->_internal_list_f_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_list_f(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.proto.AttrDef.ListListFloat.ListFloat)
  return target;
}

size_t AttrDef_ListListFloat_ListFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.proto.AttrDef.ListListFloat.ListFloat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float list_f = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_list_f_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _list_f_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttrDef_ListListFloat_ListFloat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.proto.AttrDef.ListListFloat.ListFloat)
  GOOGLE_DCHECK_NE(&from, this);
  const AttrDef_ListListFloat_ListFloat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AttrDef_ListListFloat_ListFloat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.proto.AttrDef.ListListFloat.ListFloat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.proto.AttrDef.ListListFloat.ListFloat)
    MergeFrom(*source);
  }
}

void AttrDef_ListListFloat_ListFloat::MergeFrom(const AttrDef_ListListFloat_ListFloat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.proto.AttrDef.ListListFloat.ListFloat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_f_.MergeFrom(from.list_f_);
}

void AttrDef_ListListFloat_ListFloat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.proto.AttrDef.ListListFloat.ListFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttrDef_ListListFloat_ListFloat::CopyFrom(const AttrDef_ListListFloat_ListFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.proto.AttrDef.ListListFloat.ListFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttrDef_ListListFloat_ListFloat::IsInitialized() const {
  return true;
}

void AttrDef_ListListFloat_ListFloat::InternalSwap(AttrDef_ListListFloat_ListFloat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  list_f_.InternalSwap(&other->list_f_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttrDef_ListListFloat_ListFloat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AttrDef_ListListFloat::InitAsDefaultInstance() {
}
class AttrDef_ListListFloat::_Internal {
 public:
};

AttrDef_ListListFloat::AttrDef_ListListFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  list_list_f_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.proto.AttrDef.ListListFloat)
}
AttrDef_ListListFloat::AttrDef_ListListFloat(const AttrDef_ListListFloat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      list_list_f_(from.list_list_f_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ge.proto.AttrDef.ListListFloat)
}

void AttrDef_ListListFloat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AttrDef_ListListFloat_ge_5fir_2eproto.base);
}

AttrDef_ListListFloat::~AttrDef_ListListFloat() {
  // @@protoc_insertion_point(destructor:ge.proto.AttrDef.ListListFloat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AttrDef_ListListFloat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AttrDef_ListListFloat::ArenaDtor(void* object) {
  AttrDef_ListListFloat* _this = reinterpret_cast< AttrDef_ListListFloat* >(object);
  (void)_this;
}
void AttrDef_ListListFloat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AttrDef_ListListFloat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AttrDef_ListListFloat& AttrDef_ListListFloat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AttrDef_ListListFloat_ge_5fir_2eproto.base);
  return *internal_default_instance();
}


void AttrDef_ListListFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.proto.AttrDef.ListListFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_list_f_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttrDef_ListListFloat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ge.proto.AttrDef.ListListFloat.ListFloat list_list_f = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list_list_f(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AttrDef_ListListFloat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.proto.AttrDef.ListListFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ge.proto.AttrDef.ListListFloat.ListFloat list_list_f = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_list_f_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list_list_f(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.proto.AttrDef.ListListFloat)
  return target;
}

size_t AttrDef_ListListFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.proto.AttrDef.ListListFloat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ge.proto.AttrDef.ListListFloat.ListFloat list_list_f = 1;
  total_size += 1UL * this->_internal_list_list_f_size();
  for (const auto& msg : this->list_list_f_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttrDef_ListListFloat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.proto.AttrDef.ListListFloat)
  GOOGLE_DCHECK_NE(&from, this);
  const AttrDef_ListListFloat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AttrDef_ListListFloat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.proto.AttrDef.ListListFloat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.proto.AttrDef.ListListFloat)
    MergeFrom(*source);
  }
}

void AttrDef_ListListFloat::MergeFrom(const AttrDef_ListListFloat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.proto.AttrDef.ListListFloat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_list_f_.MergeFrom(from.list_list_f_);
}

void AttrDef_ListListFloat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.proto.AttrDef.ListListFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttrDef_ListListFloat::CopyFrom(const AttrDef_ListListFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.proto.AttrDef.ListListFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttrDef_ListListFloat::IsInitialized() const {
  return true;
}

void AttrDef_ListListFloat::InternalSwap(AttrDef_ListListFloat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  list_list_f_.InternalSwap(&other->list_list_f_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttrDef_ListListFloat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AttrDef::InitAsDefaultInstance() {
  ::ge::proto::_AttrDef_default_instance_.s_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::ge::proto::_AttrDef_default_instance_.i_ = PROTOBUF_LONGLONG(0);
  ::ge::proto::_AttrDef_default_instance_.f_ = 0;
  ::ge::proto::_AttrDef_default_instance_.b_ = false;
  ::ge::proto::_AttrDef_default_instance_.bt_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::ge::proto::_AttrDef_default_instance_.list_ = const_cast< ::ge::proto::AttrDef_ListValue*>(
      ::ge::proto::AttrDef_ListValue::internal_default_instance());
  ::ge::proto::_AttrDef_default_instance_.func_ = const_cast< ::ge::proto::NamedAttrs*>(
      ::ge::proto::NamedAttrs::internal_default_instance());
  ::ge::proto::_AttrDef_default_instance_.td_ = const_cast< ::ge::proto::TensorDescriptor*>(
      ::ge::proto::TensorDescriptor::internal_default_instance());
  ::ge::proto::_AttrDef_default_instance_.t_ = const_cast< ::ge::proto::TensorDef*>(
      ::ge::proto::TensorDef::internal_default_instance());
  ::ge::proto::_AttrDef_default_instance_.g_ = const_cast< ::ge::proto::GraphDef*>(
      ::ge::proto::GraphDef::internal_default_instance());
  ::ge::proto::_AttrDef_default_instance_.list_list_int_ = const_cast< ::ge::proto::AttrDef_ListListInt*>(
      ::ge::proto::AttrDef_ListListInt::internal_default_instance());
  ::ge::proto::_AttrDef_default_instance_.dt_ = PROTOBUF_LONGLONG(0);
  ::ge::proto::_AttrDef_default_instance_.list_list_float_ = const_cast< ::ge::proto::AttrDef_ListListFloat*>(
      ::ge::proto::AttrDef_ListListFloat::internal_default_instance());
}
class AttrDef::_Internal {
 public:
  static const ::ge::proto::AttrDef_ListValue& list(const AttrDef* msg);
  static const ::ge::proto::NamedAttrs& func(const AttrDef* msg);
  static const ::ge::proto::TensorDescriptor& td(const AttrDef* msg);
  static const ::ge::proto::TensorDef& t(const AttrDef* msg);
  static const ::ge::proto::GraphDef& g(const AttrDef* msg);
  static const ::ge::proto::AttrDef_ListListInt& list_list_int(const AttrDef* msg);
  static const ::ge::proto::AttrDef_ListListFloat& list_list_float(const AttrDef* msg);
};

const ::ge::proto::AttrDef_ListValue&
AttrDef::_Internal::list(const AttrDef* msg) {
  return *msg->value_.list_;
}
const ::ge::proto::NamedAttrs&
AttrDef::_Internal::func(const AttrDef* msg) {
  return *msg->value_.func_;
}
const ::ge::proto::TensorDescriptor&
AttrDef::_Internal::td(const AttrDef* msg) {
  return *msg->value_.td_;
}
const ::ge::proto::TensorDef&
AttrDef::_Internal::t(const AttrDef* msg) {
  return *msg->value_.t_;
}
const ::ge::proto::GraphDef&
AttrDef::_Internal::g(const AttrDef* msg) {
  return *msg->value_.g_;
}
const ::ge::proto::AttrDef_ListListInt&
AttrDef::_Internal::list_list_int(const AttrDef* msg) {
  return *msg->value_.list_list_int_;
}
const ::ge::proto::AttrDef_ListListFloat&
AttrDef::_Internal::list_list_float(const AttrDef* msg) {
  return *msg->value_.list_list_float_;
}
void AttrDef::set_allocated_list(::ge::proto::AttrDef_ListValue* list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(list);
    if (message_arena != submessage_arena) {
      list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list, submessage_arena);
    }
    set_has_list();
    value_.list_ = list;
  }
  // @@protoc_insertion_point(field_set_allocated:ge.proto.AttrDef.list)
}
void AttrDef::set_allocated_func(::ge::proto::NamedAttrs* func) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (func) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(func);
    if (message_arena != submessage_arena) {
      func = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, func, submessage_arena);
    }
    set_has_func();
    value_.func_ = func;
  }
  // @@protoc_insertion_point(field_set_allocated:ge.proto.AttrDef.func)
}
void AttrDef::set_allocated_td(::ge::proto::TensorDescriptor* td) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (td) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(td);
    if (message_arena != submessage_arena) {
      td = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, td, submessage_arena);
    }
    set_has_td();
    value_.td_ = td;
  }
  // @@protoc_insertion_point(field_set_allocated:ge.proto.AttrDef.td)
}
void AttrDef::set_allocated_t(::ge::proto::TensorDef* t) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (t) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(t);
    if (message_arena != submessage_arena) {
      t = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t, submessage_arena);
    }
    set_has_t();
    value_.t_ = t;
  }
  // @@protoc_insertion_point(field_set_allocated:ge.proto.AttrDef.t)
}
void AttrDef::set_allocated_g(::ge::proto::GraphDef* g) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (g) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(g);
    if (message_arena != submessage_arena) {
      g = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, g, submessage_arena);
    }
    set_has_g();
    value_.g_ = g;
  }
  // @@protoc_insertion_point(field_set_allocated:ge.proto.AttrDef.g)
}
void AttrDef::set_allocated_list_list_int(::ge::proto::AttrDef_ListListInt* list_list_int) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (list_list_int) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(list_list_int);
    if (message_arena != submessage_arena) {
      list_list_int = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_list_int, submessage_arena);
    }
    set_has_list_list_int();
    value_.list_list_int_ = list_list_int;
  }
  // @@protoc_insertion_point(field_set_allocated:ge.proto.AttrDef.list_list_int)
}
void AttrDef::set_allocated_list_list_float(::ge::proto::AttrDef_ListListFloat* list_list_float) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (list_list_float) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(list_list_float);
    if (message_arena != submessage_arena) {
      list_list_float = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_list_float, submessage_arena);
    }
    set_has_list_list_float();
    value_.list_list_float_ = list_list_float;
  }
  // @@protoc_insertion_point(field_set_allocated:ge.proto.AttrDef.list_list_float)
}
AttrDef::AttrDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.proto.AttrDef)
}
AttrDef::AttrDef(const AttrDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kS: {
      _internal_set_s(from._internal_s());
      break;
    }
    case kI: {
      _internal_set_i(from._internal_i());
      break;
    }
    case kF: {
      _internal_set_f(from._internal_f());
      break;
    }
    case kB: {
      _internal_set_b(from._internal_b());
      break;
    }
    case kBt: {
      _internal_set_bt(from._internal_bt());
      break;
    }
    case kList: {
      _internal_mutable_list()->::ge::proto::AttrDef_ListValue::MergeFrom(from._internal_list());
      break;
    }
    case kFunc: {
      _internal_mutable_func()->::ge::proto::NamedAttrs::MergeFrom(from._internal_func());
      break;
    }
    case kTd: {
      _internal_mutable_td()->::ge::proto::TensorDescriptor::MergeFrom(from._internal_td());
      break;
    }
    case kT: {
      _internal_mutable_t()->::ge::proto::TensorDef::MergeFrom(from._internal_t());
      break;
    }
    case kG: {
      _internal_mutable_g()->::ge::proto::GraphDef::MergeFrom(from._internal_g());
      break;
    }
    case kListListInt: {
      _internal_mutable_list_list_int()->::ge::proto::AttrDef_ListListInt::MergeFrom(from._internal_list_list_int());
      break;
    }
    case kDt: {
      _internal_set_dt(from._internal_dt());
      break;
    }
    case kListListFloat: {
      _internal_mutable_list_list_float()->::ge::proto::AttrDef_ListListFloat::MergeFrom(from._internal_list_list_float());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ge.proto.AttrDef)
}

void AttrDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AttrDef_ge_5fir_2eproto.base);
  clear_has_value();
}

AttrDef::~AttrDef() {
  // @@protoc_insertion_point(destructor:ge.proto.AttrDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AttrDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void AttrDef::ArenaDtor(void* object) {
  AttrDef* _this = reinterpret_cast< AttrDef* >(object);
  (void)_this;
}
void AttrDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AttrDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AttrDef& AttrDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AttrDef_ge_5fir_2eproto.base);
  return *internal_default_instance();
}


void AttrDef::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:ge.proto.AttrDef)
  switch (value_case()) {
    case kS: {
      value_.s_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kI: {
      // No need to clear
      break;
    }
    case kF: {
      // No need to clear
      break;
    }
    case kB: {
      // No need to clear
      break;
    }
    case kBt: {
      value_.bt_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kList: {
      if (GetArena() == nullptr) {
        delete value_.list_;
      }
      break;
    }
    case kFunc: {
      if (GetArena() == nullptr) {
        delete value_.func_;
      }
      break;
    }
    case kTd: {
      if (GetArena() == nullptr) {
        delete value_.td_;
      }
      break;
    }
    case kT: {
      if (GetArena() == nullptr) {
        delete value_.t_;
      }
      break;
    }
    case kG: {
      if (GetArena() == nullptr) {
        delete value_.g_;
      }
      break;
    }
    case kListListInt: {
      if (GetArena() == nullptr) {
        delete value_.list_list_int_;
      }
      break;
    }
    case kDt: {
      // No need to clear
      break;
    }
    case kListListFloat: {
      if (GetArena() == nullptr) {
        delete value_.list_list_float_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void AttrDef::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.proto.AttrDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttrDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ge.proto.AttrDef.ListValue list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_s();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 i = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_i(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float f = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _internal_set_f(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool b = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_b(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes bt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_bt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ge.proto.NamedAttrs func = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_func(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ge.proto.TensorDescriptor td = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_td(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ge.proto.TensorDef t = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_t(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ge.proto.GraphDef g = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_g(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ge.proto.AttrDef.ListListInt list_list_int = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_list_int(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 dt = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _internal_set_dt(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ge.proto.AttrDef.ListListFloat list_list_float = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_list_float(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AttrDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.proto.AttrDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ge.proto.AttrDef.ListValue list = 1;
  if (_internal_has_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::list(this), target, stream);
  }

  // bytes s = 2;
  if (_internal_has_s()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_s(), target);
  }

  // int64 i = 3;
  if (_internal_has_i()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_i(), target);
  }

  // float f = 4;
  if (_internal_has_f()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_f(), target);
  }

  // bool b = 5;
  if (_internal_has_b()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_b(), target);
  }

  // bytes bt = 7;
  if (_internal_has_bt()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_bt(), target);
  }

  // .ge.proto.NamedAttrs func = 10;
  if (_internal_has_func()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::func(this), target, stream);
  }

  // .ge.proto.TensorDescriptor td = 11;
  if (_internal_has_td()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::td(this), target, stream);
  }

  // .ge.proto.TensorDef t = 12;
  if (_internal_has_t()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::t(this), target, stream);
  }

  // .ge.proto.GraphDef g = 13;
  if (_internal_has_g()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::g(this), target, stream);
  }

  // .ge.proto.AttrDef.ListListInt list_list_int = 14;
  if (_internal_has_list_list_int()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::list_list_int(this), target, stream);
  }

  // int64 dt = 15;
  if (_internal_has_dt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_dt(), target);
  }

  // .ge.proto.AttrDef.ListListFloat list_list_float = 16;
  if (_internal_has_list_list_float()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::list_list_float(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.proto.AttrDef)
  return target;
}

size_t AttrDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.proto.AttrDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // bytes s = 2;
    case kS: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_s());
      break;
    }
    // int64 i = 3;
    case kI: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_i());
      break;
    }
    // float f = 4;
    case kF: {
      total_size += 1 + 4;
      break;
    }
    // bool b = 5;
    case kB: {
      total_size += 1 + 1;
      break;
    }
    // bytes bt = 7;
    case kBt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bt());
      break;
    }
    // .ge.proto.AttrDef.ListValue list = 1;
    case kList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.list_);
      break;
    }
    // .ge.proto.NamedAttrs func = 10;
    case kFunc: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.func_);
      break;
    }
    // .ge.proto.TensorDescriptor td = 11;
    case kTd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.td_);
      break;
    }
    // .ge.proto.TensorDef t = 12;
    case kT: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.t_);
      break;
    }
    // .ge.proto.GraphDef g = 13;
    case kG: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.g_);
      break;
    }
    // .ge.proto.AttrDef.ListListInt list_list_int = 14;
    case kListListInt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.list_list_int_);
      break;
    }
    // int64 dt = 15;
    case kDt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_dt());
      break;
    }
    // .ge.proto.AttrDef.ListListFloat list_list_float = 16;
    case kListListFloat: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.list_list_float_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttrDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.proto.AttrDef)
  GOOGLE_DCHECK_NE(&from, this);
  const AttrDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AttrDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.proto.AttrDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.proto.AttrDef)
    MergeFrom(*source);
  }
}

void AttrDef::MergeFrom(const AttrDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.proto.AttrDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kS: {
      _internal_set_s(from._internal_s());
      break;
    }
    case kI: {
      _internal_set_i(from._internal_i());
      break;
    }
    case kF: {
      _internal_set_f(from._internal_f());
      break;
    }
    case kB: {
      _internal_set_b(from._internal_b());
      break;
    }
    case kBt: {
      _internal_set_bt(from._internal_bt());
      break;
    }
    case kList: {
      _internal_mutable_list()->::ge::proto::AttrDef_ListValue::MergeFrom(from._internal_list());
      break;
    }
    case kFunc: {
      _internal_mutable_func()->::ge::proto::NamedAttrs::MergeFrom(from._internal_func());
      break;
    }
    case kTd: {
      _internal_mutable_td()->::ge::proto::TensorDescriptor::MergeFrom(from._internal_td());
      break;
    }
    case kT: {
      _internal_mutable_t()->::ge::proto::TensorDef::MergeFrom(from._internal_t());
      break;
    }
    case kG: {
      _internal_mutable_g()->::ge::proto::GraphDef::MergeFrom(from._internal_g());
      break;
    }
    case kListListInt: {
      _internal_mutable_list_list_int()->::ge::proto::AttrDef_ListListInt::MergeFrom(from._internal_list_list_int());
      break;
    }
    case kDt: {
      _internal_set_dt(from._internal_dt());
      break;
    }
    case kListListFloat: {
      _internal_mutable_list_list_float()->::ge::proto::AttrDef_ListListFloat::MergeFrom(from._internal_list_list_float());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void AttrDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.proto.AttrDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttrDef::CopyFrom(const AttrDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.proto.AttrDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttrDef::IsInitialized() const {
  return true;
}

void AttrDef::InternalSwap(AttrDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttrDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

NamedAttrs_AttrEntry_DoNotUse::NamedAttrs_AttrEntry_DoNotUse() {}
NamedAttrs_AttrEntry_DoNotUse::NamedAttrs_AttrEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void NamedAttrs_AttrEntry_DoNotUse::MergeFrom(const NamedAttrs_AttrEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata NamedAttrs_AttrEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void NamedAttrs_AttrEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void NamedAttrs::InitAsDefaultInstance() {
}
class NamedAttrs::_Internal {
 public:
};

NamedAttrs::NamedAttrs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attr_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.proto.NamedAttrs)
}
NamedAttrs::NamedAttrs(const NamedAttrs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attr_.MergeFrom(from.attr_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ge.proto.NamedAttrs)
}

void NamedAttrs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AttrDef_ge_5fir_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NamedAttrs::~NamedAttrs() {
  // @@protoc_insertion_point(destructor:ge.proto.NamedAttrs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NamedAttrs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NamedAttrs::ArenaDtor(void* object) {
  NamedAttrs* _this = reinterpret_cast< NamedAttrs* >(object);
  (void)_this;
}
void NamedAttrs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NamedAttrs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NamedAttrs& NamedAttrs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AttrDef_ge_5fir_2eproto.base);
  return *internal_default_instance();
}


void NamedAttrs::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.proto.NamedAttrs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attr_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamedAttrs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.proto.NamedAttrs.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .ge.proto.AttrDef> attr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&attr_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedAttrs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.proto.NamedAttrs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.proto.NamedAttrs.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // map<string, .ge.proto.AttrDef> attr = 2;
  if (!this->_internal_attr().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ge.proto.NamedAttrs.AttrEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_attr().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_attr().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >::const_iterator
          it = this->_internal_attr().begin();
          it != this->_internal_attr().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = NamedAttrs_AttrEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >::const_iterator
          it = this->_internal_attr().begin();
          it != this->_internal_attr().end(); ++it) {
        target = NamedAttrs_AttrEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.proto.NamedAttrs)
  return target;
}

size_t NamedAttrs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.proto.NamedAttrs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .ge.proto.AttrDef> attr = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attr_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >::const_iterator
      it = this->_internal_attr().begin();
      it != this->_internal_attr().end(); ++it) {
    total_size += NamedAttrs_AttrEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NamedAttrs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.proto.NamedAttrs)
  GOOGLE_DCHECK_NE(&from, this);
  const NamedAttrs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NamedAttrs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.proto.NamedAttrs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.proto.NamedAttrs)
    MergeFrom(*source);
  }
}

void NamedAttrs::MergeFrom(const NamedAttrs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.proto.NamedAttrs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attr_.MergeFrom(from.attr_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void NamedAttrs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.proto.NamedAttrs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamedAttrs::CopyFrom(const NamedAttrs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.proto.NamedAttrs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedAttrs::IsInitialized() const {
  return true;
}

void NamedAttrs::InternalSwap(NamedAttrs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attr_.Swap(&other->attr_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedAttrs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShapeDef::InitAsDefaultInstance() {
}
class ShapeDef::_Internal {
 public:
};

ShapeDef::ShapeDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dim_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.proto.ShapeDef)
}
ShapeDef::ShapeDef(const ShapeDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dim_(from.dim_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ge.proto.ShapeDef)
}

void ShapeDef::SharedCtor() {
}

ShapeDef::~ShapeDef() {
  // @@protoc_insertion_point(destructor:ge.proto.ShapeDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShapeDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShapeDef::ArenaDtor(void* object) {
  ShapeDef* _this = reinterpret_cast< ShapeDef* >(object);
  (void)_this;
}
void ShapeDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShapeDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShapeDef& ShapeDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShapeDef_ge_5fir_2eproto.base);
  return *internal_default_instance();
}


void ShapeDef::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.proto.ShapeDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dim_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShapeDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 dim = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_dim(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_dim(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShapeDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.proto.ShapeDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 dim = 1;
  {
    int byte_size = _dim_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_dim(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.proto.ShapeDef)
  return target;
}

size_t ShapeDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.proto.ShapeDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 dim = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->dim_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dim_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShapeDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.proto.ShapeDef)
  GOOGLE_DCHECK_NE(&from, this);
  const ShapeDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShapeDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.proto.ShapeDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.proto.ShapeDef)
    MergeFrom(*source);
  }
}

void ShapeDef::MergeFrom(const ShapeDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.proto.ShapeDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dim_.MergeFrom(from.dim_);
}

void ShapeDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.proto.ShapeDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeDef::CopyFrom(const ShapeDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.proto.ShapeDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeDef::IsInitialized() const {
  return true;
}

void ShapeDef::InternalSwap(ShapeDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dim_.InternalSwap(&other->dim_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShapeDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

TensorDescriptor_AttrEntry_DoNotUse::TensorDescriptor_AttrEntry_DoNotUse() {}
TensorDescriptor_AttrEntry_DoNotUse::TensorDescriptor_AttrEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TensorDescriptor_AttrEntry_DoNotUse::MergeFrom(const TensorDescriptor_AttrEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TensorDescriptor_AttrEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TensorDescriptor_AttrEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void TensorDescriptor::InitAsDefaultInstance() {
  ::ge::proto::_TensorDescriptor_default_instance_._instance.get_mutable()->shape_ = const_cast< ::ge::proto::ShapeDef*>(
      ::ge::proto::ShapeDef::internal_default_instance());
}
class TensorDescriptor::_Internal {
 public:
  static const ::ge::proto::ShapeDef& shape(const TensorDescriptor* msg);
};

const ::ge::proto::ShapeDef&
TensorDescriptor::_Internal::shape(const TensorDescriptor* msg) {
  return *msg->shape_;
}
TensorDescriptor::TensorDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attr_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.proto.TensorDescriptor)
}
TensorDescriptor::TensorDescriptor(const TensorDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attr_.MergeFrom(from.attr_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  layout_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_layout().empty()) {
    layout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_layout(),
      GetArena());
  }
  device_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_type().empty()) {
    device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_type(),
      GetArena());
  }
  cmps_tab_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cmps_tab().empty()) {
    cmps_tab_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cmps_tab(),
      GetArena());
  }
  if (from._internal_has_shape()) {
    shape_ = new ::ge::proto::ShapeDef(*from.shape_);
  } else {
    shape_ = nullptr;
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmps_tab_offset_) -
    reinterpret_cast<char*>(&size_)) + sizeof(cmps_tab_offset_));
  // @@protoc_insertion_point(copy_constructor:ge.proto.TensorDescriptor)
}

void TensorDescriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AttrDef_ge_5fir_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  layout_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cmps_tab_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmps_tab_offset_) -
      reinterpret_cast<char*>(&shape_)) + sizeof(cmps_tab_offset_));
}

TensorDescriptor::~TensorDescriptor() {
  // @@protoc_insertion_point(destructor:ge.proto.TensorDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TensorDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  layout_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cmps_tab_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete shape_;
}

void TensorDescriptor::ArenaDtor(void* object) {
  TensorDescriptor* _this = reinterpret_cast< TensorDescriptor* >(object);
  (void)_this;
}
void TensorDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TensorDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TensorDescriptor& TensorDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AttrDef_ge_5fir_2eproto.base);
  return *internal_default_instance();
}


void TensorDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.proto.TensorDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attr_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  layout_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cmps_tab_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmps_tab_offset_) -
      reinterpret_cast<char*>(&size_)) + sizeof(cmps_tab_offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TensorDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.proto.TensorDescriptor.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ge.proto.DataType dtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dtype(static_cast<::ge::proto::DataType>(val));
        } else goto handle_unusual;
        continue;
      // .ge.proto.ShapeDef shape = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string layout = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_layout();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.proto.TensorDescriptor.layout"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .ge.proto.AttrDef> attr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&attr_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // bool has_out_attr = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          has_out_attr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 weight_size = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          weight_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool reuse_input = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          reuse_input_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool output_tensor = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          output_tensor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_type = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_device_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.proto.TensorDescriptor.device_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool input_tensor = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          input_tensor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 real_dim_cnt = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          real_dim_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 reuse_input_index = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          reuse_input_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 data_offset = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          data_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cmps_size = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          cmps_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cmps_tab = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_cmps_tab();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.proto.TensorDescriptor.cmps_tab"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cmps_tab_offset = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          cmps_tab_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TensorDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.proto.TensorDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.proto.TensorDescriptor.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .ge.proto.DataType dtype = 2;
  if (this->dtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_dtype(), target);
  }

  // .ge.proto.ShapeDef shape = 3;
  if (this->has_shape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::shape(this), target, stream);
  }

  // string layout = 4;
  if (this->layout().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_layout().data(), static_cast<int>(this->_internal_layout().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.proto.TensorDescriptor.layout");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_layout(), target);
  }

  // map<string, .ge.proto.AttrDef> attr = 5;
  if (!this->_internal_attr().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ge.proto.TensorDescriptor.AttrEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_attr().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_attr().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >::const_iterator
          it = this->_internal_attr().begin();
          it != this->_internal_attr().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TensorDescriptor_AttrEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >::const_iterator
          it = this->_internal_attr().begin();
          it != this->_internal_attr().end(); ++it) {
        target = TensorDescriptor_AttrEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bool has_out_attr = 9;
  if (this->has_out_attr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_has_out_attr(), target);
  }

  // int64 size = 10;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_size(), target);
  }

  // int64 weight_size = 11;
  if (this->weight_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_weight_size(), target);
  }

  // bool reuse_input = 12;
  if (this->reuse_input() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_reuse_input(), target);
  }

  // bool output_tensor = 13;
  if (this->output_tensor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_output_tensor(), target);
  }

  // string device_type = 14;
  if (this->device_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_type().data(), static_cast<int>(this->_internal_device_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.proto.TensorDescriptor.device_type");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_device_type(), target);
  }

  // bool input_tensor = 15;
  if (this->input_tensor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_input_tensor(), target);
  }

  // int64 real_dim_cnt = 16;
  if (this->real_dim_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->_internal_real_dim_cnt(), target);
  }

  // int64 reuse_input_index = 17;
  if (this->reuse_input_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->_internal_reuse_input_index(), target);
  }

  // int64 data_offset = 18;
  if (this->data_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->_internal_data_offset(), target);
  }

  // int64 cmps_size = 19;
  if (this->cmps_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->_internal_cmps_size(), target);
  }

  // string cmps_tab = 20;
  if (this->cmps_tab().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cmps_tab().data(), static_cast<int>(this->_internal_cmps_tab().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.proto.TensorDescriptor.cmps_tab");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_cmps_tab(), target);
  }

  // int64 cmps_tab_offset = 21;
  if (this->cmps_tab_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->_internal_cmps_tab_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.proto.TensorDescriptor)
  return target;
}

size_t TensorDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.proto.TensorDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .ge.proto.AttrDef> attr = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attr_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >::const_iterator
      it = this->_internal_attr().begin();
      it != this->_internal_attr().end(); ++it) {
    total_size += TensorDescriptor_AttrEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string layout = 4;
  if (this->layout().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_layout());
  }

  // string device_type = 14;
  if (this->device_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_type());
  }

  // string cmps_tab = 20;
  if (this->cmps_tab().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cmps_tab());
  }

  // .ge.proto.ShapeDef shape = 3;
  if (this->has_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  // int64 size = 10;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_size());
  }

  // .ge.proto.DataType dtype = 2;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dtype());
  }

  // bool has_out_attr = 9;
  if (this->has_out_attr() != 0) {
    total_size += 1 + 1;
  }

  // bool reuse_input = 12;
  if (this->reuse_input() != 0) {
    total_size += 1 + 1;
  }

  // bool output_tensor = 13;
  if (this->output_tensor() != 0) {
    total_size += 1 + 1;
  }

  // bool input_tensor = 15;
  if (this->input_tensor() != 0) {
    total_size += 1 + 1;
  }

  // int64 weight_size = 11;
  if (this->weight_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_weight_size());
  }

  // int64 real_dim_cnt = 16;
  if (this->real_dim_cnt() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_real_dim_cnt());
  }

  // int64 reuse_input_index = 17;
  if (this->reuse_input_index() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_reuse_input_index());
  }

  // int64 data_offset = 18;
  if (this->data_offset() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_data_offset());
  }

  // int64 cmps_size = 19;
  if (this->cmps_size() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cmps_size());
  }

  // int64 cmps_tab_offset = 21;
  if (this->cmps_tab_offset() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cmps_tab_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TensorDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.proto.TensorDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TensorDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.proto.TensorDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.proto.TensorDescriptor)
    MergeFrom(*source);
  }
}

void TensorDescriptor::MergeFrom(const TensorDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.proto.TensorDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attr_.MergeFrom(from.attr_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.layout().size() > 0) {
    _internal_set_layout(from._internal_layout());
  }
  if (from.device_type().size() > 0) {
    _internal_set_device_type(from._internal_device_type());
  }
  if (from.cmps_tab().size() > 0) {
    _internal_set_cmps_tab(from._internal_cmps_tab());
  }
  if (from.has_shape()) {
    _internal_mutable_shape()->::ge::proto::ShapeDef::MergeFrom(from._internal_shape());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.dtype() != 0) {
    _internal_set_dtype(from._internal_dtype());
  }
  if (from.has_out_attr() != 0) {
    _internal_set_has_out_attr(from._internal_has_out_attr());
  }
  if (from.reuse_input() != 0) {
    _internal_set_reuse_input(from._internal_reuse_input());
  }
  if (from.output_tensor() != 0) {
    _internal_set_output_tensor(from._internal_output_tensor());
  }
  if (from.input_tensor() != 0) {
    _internal_set_input_tensor(from._internal_input_tensor());
  }
  if (from.weight_size() != 0) {
    _internal_set_weight_size(from._internal_weight_size());
  }
  if (from.real_dim_cnt() != 0) {
    _internal_set_real_dim_cnt(from._internal_real_dim_cnt());
  }
  if (from.reuse_input_index() != 0) {
    _internal_set_reuse_input_index(from._internal_reuse_input_index());
  }
  if (from.data_offset() != 0) {
    _internal_set_data_offset(from._internal_data_offset());
  }
  if (from.cmps_size() != 0) {
    _internal_set_cmps_size(from._internal_cmps_size());
  }
  if (from.cmps_tab_offset() != 0) {
    _internal_set_cmps_tab_offset(from._internal_cmps_tab_offset());
  }
}

void TensorDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.proto.TensorDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorDescriptor::CopyFrom(const TensorDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.proto.TensorDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorDescriptor::IsInitialized() const {
  return true;
}

void TensorDescriptor::InternalSwap(TensorDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attr_.Swap(&other->attr_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  layout_.Swap(&other->layout_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_type_.Swap(&other->device_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cmps_tab_.Swap(&other->cmps_tab_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TensorDescriptor, cmps_tab_offset_)
      + sizeof(TensorDescriptor::cmps_tab_offset_)
      - PROTOBUF_FIELD_OFFSET(TensorDescriptor, shape_)>(
          reinterpret_cast<char*>(&shape_),
          reinterpret_cast<char*>(&other->shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TensorDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TensorDef::InitAsDefaultInstance() {
  ::ge::proto::_TensorDef_default_instance_._instance.get_mutable()->desc_ = const_cast< ::ge::proto::TensorDescriptor*>(
      ::ge::proto::TensorDescriptor::internal_default_instance());
}
class TensorDef::_Internal {
 public:
  static const ::ge::proto::TensorDescriptor& desc(const TensorDef* msg);
};

const ::ge::proto::TensorDescriptor&
TensorDef::_Internal::desc(const TensorDef* msg) {
  return *msg->desc_;
}
TensorDef::TensorDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.proto.TensorDef)
}
TensorDef::TensorDef(const TensorDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  if (from._internal_has_desc()) {
    desc_ = new ::ge::proto::TensorDescriptor(*from.desc_);
  } else {
    desc_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ge.proto.TensorDef)
}

void TensorDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AttrDef_ge_5fir_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_ = nullptr;
}

TensorDef::~TensorDef() {
  // @@protoc_insertion_point(destructor:ge.proto.TensorDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TensorDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete desc_;
}

void TensorDef::ArenaDtor(void* object) {
  TensorDef* _this = reinterpret_cast< TensorDef* >(object);
  (void)_this;
}
void TensorDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TensorDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TensorDef& TensorDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AttrDef_ge_5fir_2eproto.base);
  return *internal_default_instance();
}


void TensorDef::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.proto.TensorDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && desc_ != nullptr) {
    delete desc_;
  }
  desc_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TensorDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ge.proto.TensorDescriptor desc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_desc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TensorDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.proto.TensorDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ge.proto.TensorDescriptor desc = 1;
  if (this->has_desc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::desc(this), target, stream);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.proto.TensorDef)
  return target;
}

size_t TensorDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.proto.TensorDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .ge.proto.TensorDescriptor desc = 1;
  if (this->has_desc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *desc_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TensorDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.proto.TensorDef)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TensorDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.proto.TensorDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.proto.TensorDef)
    MergeFrom(*source);
  }
}

void TensorDef::MergeFrom(const TensorDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.proto.TensorDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.has_desc()) {
    _internal_mutable_desc()->::ge::proto::TensorDescriptor::MergeFrom(from._internal_desc());
  }
}

void TensorDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.proto.TensorDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorDef::CopyFrom(const TensorDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.proto.TensorDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorDef::IsInitialized() const {
  return true;
}

void TensorDef::InternalSwap(TensorDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(desc_, other->desc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TensorDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

OpDef_AttrEntry_DoNotUse::OpDef_AttrEntry_DoNotUse() {}
OpDef_AttrEntry_DoNotUse::OpDef_AttrEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void OpDef_AttrEntry_DoNotUse::MergeFrom(const OpDef_AttrEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata OpDef_AttrEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void OpDef_AttrEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void OpDef::InitAsDefaultInstance() {
}
class OpDef::_Internal {
 public:
};

OpDef::OpDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  input_(arena),
  attr_(arena),
  input_name_(arena),
  src_name_(arena),
  src_index_(arena),
  dst_name_(arena),
  dst_index_(arena),
  input_i_(arena),
  output_i_(arena),
  workspace_(arena),
  workspace_bytes_(arena),
  is_input_const_(arena),
  input_desc_(arena),
  output_desc_(arena),
  subgraph_name_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.proto.OpDef)
}
OpDef::OpDef(const OpDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      input_(from.input_),
      input_name_(from.input_name_),
      src_name_(from.src_name_),
      src_index_(from.src_index_),
      dst_name_(from.dst_name_),
      dst_index_(from.dst_index_),
      input_i_(from.input_i_),
      output_i_(from.output_i_),
      workspace_(from.workspace_),
      workspace_bytes_(from.workspace_bytes_),
      is_input_const_(from.is_input_const_),
      input_desc_(from.input_desc_),
      output_desc_(from.output_desc_),
      subgraph_name_(from.subgraph_name_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attr_.MergeFrom(from.attr_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(stream_id_));
  // @@protoc_insertion_point(copy_constructor:ge.proto.OpDef)
}

void OpDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AttrDef_ge_5fir_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(stream_id_));
}

OpDef::~OpDef() {
  // @@protoc_insertion_point(destructor:ge.proto.OpDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OpDef::ArenaDtor(void* object) {
  OpDef* _this = reinterpret_cast< OpDef* >(object);
  (void)_this;
}
void OpDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpDef& OpDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AttrDef_ge_5fir_2eproto.base);
  return *internal_default_instance();
}


void OpDef::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.proto.OpDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_.Clear();
  attr_.Clear();
  input_name_.Clear();
  src_name_.Clear();
  src_index_.Clear();
  dst_name_.Clear();
  dst_index_.Clear();
  input_i_.Clear();
  output_i_.Clear();
  workspace_.Clear();
  workspace_bytes_.Clear();
  is_input_const_.Clear();
  input_desc_.Clear();
  output_desc_.Clear();
  subgraph_name_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(stream_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.proto.OpDef.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.proto.OpDef.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string input = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.proto.OpDef.input"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .ge.proto.AttrDef> attr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&attr_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // bool has_out_attr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          has_out_attr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 stream_id = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string input_name = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_input_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.proto.OpDef.input_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string src_name = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_src_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.proto.OpDef.src_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int64 src_index = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_src_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200) {
          _internal_add_src_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string dst_name = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_dst_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.proto.OpDef.dst_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int64 dst_index = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_dst_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216) {
          _internal_add_dst_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 input_i = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_input_i(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224) {
          _internal_add_input_i(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 output_i = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_output_i(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232) {
          _internal_add_output_i(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 workspace = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_workspace(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240) {
          _internal_add_workspace(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 workspace_bytes = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_workspace_bytes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248) {
          _internal_add_workspace_bytes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool is_input_const = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_is_input_const(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0) {
          _internal_add_is_input_const(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ge.proto.TensorDescriptor input_desc = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_input_desc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ge.proto.TensorDescriptor output_desc = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_output_desc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<274>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string subgraph_name = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_subgraph_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.proto.OpDef.subgraph_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<282>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.proto.OpDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.proto.OpDef.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.proto.OpDef.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // repeated string input = 5;
  for (int i = 0, n = this->_internal_input_size(); i < n; i++) {
    const auto& s = this->_internal_input(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.proto.OpDef.input");
    target = stream->WriteString(5, s, target);
  }

  // map<string, .ge.proto.AttrDef> attr = 10;
  if (!this->_internal_attr().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ge.proto.OpDef.AttrEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_attr().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_attr().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >::const_iterator
          it = this->_internal_attr().begin();
          it != this->_internal_attr().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = OpDef_AttrEntry_DoNotUse::Funcs::InternalSerialize(10, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >::const_iterator
          it = this->_internal_attr().begin();
          it != this->_internal_attr().end(); ++it) {
        target = OpDef_AttrEntry_DoNotUse::Funcs::InternalSerialize(10, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bool has_out_attr = 20;
  if (this->has_out_attr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_has_out_attr(), target);
  }

  // int64 id = 21;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->_internal_id(), target);
  }

  // int64 stream_id = 22;
  if (this->stream_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(22, this->_internal_stream_id(), target);
  }

  // repeated string input_name = 23;
  for (int i = 0, n = this->_internal_input_name_size(); i < n; i++) {
    const auto& s = this->_internal_input_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.proto.OpDef.input_name");
    target = stream->WriteString(23, s, target);
  }

  // repeated string src_name = 24;
  for (int i = 0, n = this->_internal_src_name_size(); i < n; i++) {
    const auto& s = this->_internal_src_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.proto.OpDef.src_name");
    target = stream->WriteString(24, s, target);
  }

  // repeated int64 src_index = 25;
  {
    int byte_size = _src_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          25, _internal_src_index(), byte_size, target);
    }
  }

  // repeated string dst_name = 26;
  for (int i = 0, n = this->_internal_dst_name_size(); i < n; i++) {
    const auto& s = this->_internal_dst_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.proto.OpDef.dst_name");
    target = stream->WriteString(26, s, target);
  }

  // repeated int64 dst_index = 27;
  {
    int byte_size = _dst_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          27, _internal_dst_index(), byte_size, target);
    }
  }

  // repeated int64 input_i = 28;
  {
    int byte_size = _input_i_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          28, _internal_input_i(), byte_size, target);
    }
  }

  // repeated int64 output_i = 29;
  {
    int byte_size = _output_i_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          29, _internal_output_i(), byte_size, target);
    }
  }

  // repeated int64 workspace = 30;
  {
    int byte_size = _workspace_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          30, _internal_workspace(), byte_size, target);
    }
  }

  // repeated int64 workspace_bytes = 31;
  {
    int byte_size = _workspace_bytes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          31, _internal_workspace_bytes(), byte_size, target);
    }
  }

  // repeated bool is_input_const = 32;
  if (this->_internal_is_input_const_size() > 0) {
    target = stream->WriteFixedPacked(32, _internal_is_input_const(), target);
  }

  // repeated .ge.proto.TensorDescriptor input_desc = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_input_desc_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, this->_internal_input_desc(i), target, stream);
  }

  // repeated .ge.proto.TensorDescriptor output_desc = 34;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_output_desc_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, this->_internal_output_desc(i), target, stream);
  }

  // repeated string subgraph_name = 35;
  for (int i = 0, n = this->_internal_subgraph_name_size(); i < n; i++) {
    const auto& s = this->_internal_subgraph_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.proto.OpDef.subgraph_name");
    target = stream->WriteString(35, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.proto.OpDef)
  return target;
}

size_t OpDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.proto.OpDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string input = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(input_.size());
  for (int i = 0, n = input_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      input_.Get(i));
  }

  // map<string, .ge.proto.AttrDef> attr = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attr_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >::const_iterator
      it = this->_internal_attr().begin();
      it != this->_internal_attr().end(); ++it) {
    total_size += OpDef_AttrEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string input_name = 23;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(input_name_.size());
  for (int i = 0, n = input_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      input_name_.Get(i));
  }

  // repeated string src_name = 24;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(src_name_.size());
  for (int i = 0, n = src_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      src_name_.Get(i));
  }

  // repeated int64 src_index = 25;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->src_index_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _src_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string dst_name = 26;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(dst_name_.size());
  for (int i = 0, n = dst_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      dst_name_.Get(i));
  }

  // repeated int64 dst_index = 27;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->dst_index_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dst_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 input_i = 28;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->input_i_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _input_i_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 output_i = 29;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->output_i_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _output_i_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 workspace = 30;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->workspace_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _workspace_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 workspace_bytes = 31;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->workspace_bytes_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _workspace_bytes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool is_input_const = 32;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_is_input_const_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _is_input_const_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .ge.proto.TensorDescriptor input_desc = 33;
  total_size += 2UL * this->_internal_input_desc_size();
  for (const auto& msg : this->input_desc_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ge.proto.TensorDescriptor output_desc = 34;
  total_size += 2UL * this->_internal_output_desc_size();
  for (const auto& msg : this->output_desc_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string subgraph_name = 35;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(subgraph_name_.size());
  for (int i = 0, n = subgraph_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      subgraph_name_.Get(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // int64 id = 21;
  if (this->id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // bool has_out_attr = 20;
  if (this->has_out_attr() != 0) {
    total_size += 2 + 1;
  }

  // int64 stream_id = 22;
  if (this->stream_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_stream_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.proto.OpDef)
  GOOGLE_DCHECK_NE(&from, this);
  const OpDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.proto.OpDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.proto.OpDef)
    MergeFrom(*source);
  }
}

void OpDef::MergeFrom(const OpDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.proto.OpDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_.MergeFrom(from.input_);
  attr_.MergeFrom(from.attr_);
  input_name_.MergeFrom(from.input_name_);
  src_name_.MergeFrom(from.src_name_);
  src_index_.MergeFrom(from.src_index_);
  dst_name_.MergeFrom(from.dst_name_);
  dst_index_.MergeFrom(from.dst_index_);
  input_i_.MergeFrom(from.input_i_);
  output_i_.MergeFrom(from.output_i_);
  workspace_.MergeFrom(from.workspace_);
  workspace_bytes_.MergeFrom(from.workspace_bytes_);
  is_input_const_.MergeFrom(from.is_input_const_);
  input_desc_.MergeFrom(from.input_desc_);
  output_desc_.MergeFrom(from.output_desc_);
  subgraph_name_.MergeFrom(from.subgraph_name_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.has_out_attr() != 0) {
    _internal_set_has_out_attr(from._internal_has_out_attr());
  }
  if (from.stream_id() != 0) {
    _internal_set_stream_id(from._internal_stream_id());
  }
}

void OpDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.proto.OpDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpDef::CopyFrom(const OpDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.proto.OpDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpDef::IsInitialized() const {
  return true;
}

void OpDef::InternalSwap(OpDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  input_.InternalSwap(&other->input_);
  attr_.Swap(&other->attr_);
  input_name_.InternalSwap(&other->input_name_);
  src_name_.InternalSwap(&other->src_name_);
  src_index_.InternalSwap(&other->src_index_);
  dst_name_.InternalSwap(&other->dst_name_);
  dst_index_.InternalSwap(&other->dst_index_);
  input_i_.InternalSwap(&other->input_i_);
  output_i_.InternalSwap(&other->output_i_);
  workspace_.InternalSwap(&other->workspace_);
  workspace_bytes_.InternalSwap(&other->workspace_bytes_);
  is_input_const_.InternalSwap(&other->is_input_const_);
  input_desc_.InternalSwap(&other->input_desc_);
  output_desc_.InternalSwap(&other->output_desc_);
  subgraph_name_.InternalSwap(&other->subgraph_name_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpDef, stream_id_)
      + sizeof(OpDef::stream_id_)
      - PROTOBUF_FIELD_OFFSET(OpDef, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

GraphDef_AttrEntry_DoNotUse::GraphDef_AttrEntry_DoNotUse() {}
GraphDef_AttrEntry_DoNotUse::GraphDef_AttrEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GraphDef_AttrEntry_DoNotUse::MergeFrom(const GraphDef_AttrEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GraphDef_AttrEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GraphDef_AttrEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void GraphDef::InitAsDefaultInstance() {
}
class GraphDef::_Internal {
 public:
};

GraphDef::GraphDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  input_(arena),
  output_(arena),
  op_(arena),
  attr_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.proto.GraphDef)
}
GraphDef::GraphDef(const GraphDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      input_(from.input_),
      output_(from.output_),
      op_(from.op_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attr_.MergeFrom(from.attr_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ge.proto.GraphDef)
}

void GraphDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AttrDef_ge_5fir_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GraphDef::~GraphDef() {
  // @@protoc_insertion_point(destructor:ge.proto.GraphDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GraphDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GraphDef::ArenaDtor(void* object) {
  GraphDef* _this = reinterpret_cast< GraphDef* >(object);
  (void)_this;
}
void GraphDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphDef& GraphDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AttrDef_ge_5fir_2eproto.base);
  return *internal_default_instance();
}


void GraphDef::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.proto.GraphDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_.Clear();
  output_.Clear();
  op_.Clear();
  attr_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.proto.GraphDef.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string input = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.proto.GraphDef.input"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string output = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_output();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.proto.GraphDef.output"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ge.proto.OpDef op = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_op(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .ge.proto.AttrDef> attr = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&attr_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.proto.GraphDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.proto.GraphDef.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string input = 4;
  for (int i = 0, n = this->_internal_input_size(); i < n; i++) {
    const auto& s = this->_internal_input(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.proto.GraphDef.input");
    target = stream->WriteString(4, s, target);
  }

  // repeated string output = 5;
  for (int i = 0, n = this->_internal_output_size(); i < n; i++) {
    const auto& s = this->_internal_output(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.proto.GraphDef.output");
    target = stream->WriteString(5, s, target);
  }

  // repeated .ge.proto.OpDef op = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_op_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_op(i), target, stream);
  }

  // map<string, .ge.proto.AttrDef> attr = 11;
  if (!this->_internal_attr().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ge.proto.GraphDef.AttrEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_attr().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_attr().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >::const_iterator
          it = this->_internal_attr().begin();
          it != this->_internal_attr().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GraphDef_AttrEntry_DoNotUse::Funcs::InternalSerialize(11, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >::const_iterator
          it = this->_internal_attr().begin();
          it != this->_internal_attr().end(); ++it) {
        target = GraphDef_AttrEntry_DoNotUse::Funcs::InternalSerialize(11, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.proto.GraphDef)
  return target;
}

size_t GraphDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.proto.GraphDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string input = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(input_.size());
  for (int i = 0, n = input_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      input_.Get(i));
  }

  // repeated string output = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(output_.size());
  for (int i = 0, n = output_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      output_.Get(i));
  }

  // repeated .ge.proto.OpDef op = 6;
  total_size += 1UL * this->_internal_op_size();
  for (const auto& msg : this->op_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .ge.proto.AttrDef> attr = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attr_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >::const_iterator
      it = this->_internal_attr().begin();
      it != this->_internal_attr().end(); ++it) {
    total_size += GraphDef_AttrEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.proto.GraphDef)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GraphDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.proto.GraphDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.proto.GraphDef)
    MergeFrom(*source);
  }
}

void GraphDef::MergeFrom(const GraphDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.proto.GraphDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_.MergeFrom(from.input_);
  output_.MergeFrom(from.output_);
  op_.MergeFrom(from.op_);
  attr_.MergeFrom(from.attr_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void GraphDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.proto.GraphDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphDef::CopyFrom(const GraphDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.proto.GraphDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphDef::IsInitialized() const {
  return true;
}

void GraphDef::InternalSwap(GraphDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  input_.InternalSwap(&other->input_);
  output_.InternalSwap(&other->output_);
  op_.InternalSwap(&other->op_);
  attr_.Swap(&other->attr_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ModelDef_AttrEntry_DoNotUse::ModelDef_AttrEntry_DoNotUse() {}
ModelDef_AttrEntry_DoNotUse::ModelDef_AttrEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ModelDef_AttrEntry_DoNotUse::MergeFrom(const ModelDef_AttrEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ModelDef_AttrEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ModelDef_AttrEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ModelDef::InitAsDefaultInstance() {
}
class ModelDef::_Internal {
 public:
};

ModelDef::ModelDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  graph_(arena),
  attr_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ge.proto.ModelDef)
}
ModelDef::ModelDef(const ModelDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      graph_(from.graph_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attr_.MergeFrom(from.attr_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  custom_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_custom_version().empty()) {
    custom_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_custom_version(),
      GetArena());
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:ge.proto.ModelDef)
}

void ModelDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelDef_ge_5fir_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
}

ModelDef::~ModelDef() {
  // @@protoc_insertion_point(destructor:ge.proto.ModelDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelDef::ArenaDtor(void* object) {
  ModelDef* _this = reinterpret_cast< ModelDef* >(object);
  (void)_this;
}
void ModelDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelDef& ModelDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelDef_ge_5fir_2eproto.base);
  return *internal_default_instance();
}


void ModelDef::Clear() {
// @@protoc_insertion_point(message_clear_start:ge.proto.ModelDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  graph_.Clear();
  attr_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  custom_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.proto.ModelDef.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string custom_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_custom_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ge.proto.ModelDef.custom_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ge.proto.GraphDef graph = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_graph(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .ge.proto.AttrDef> attr = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&attr_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ge.proto.ModelDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.proto.ModelDef.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_version(), target);
  }

  // string custom_version = 3;
  if (this->custom_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_custom_version().data(), static_cast<int>(this->_internal_custom_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ge.proto.ModelDef.custom_version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_custom_version(), target);
  }

  // repeated .ge.proto.GraphDef graph = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_graph_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_graph(i), target, stream);
  }

  // map<string, .ge.proto.AttrDef> attr = 11;
  if (!this->_internal_attr().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ge.proto.ModelDef.AttrEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_attr().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_attr().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >::const_iterator
          it = this->_internal_attr().begin();
          it != this->_internal_attr().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ModelDef_AttrEntry_DoNotUse::Funcs::InternalSerialize(11, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >::const_iterator
          it = this->_internal_attr().begin();
          it != this->_internal_attr().end(); ++it) {
        target = ModelDef_AttrEntry_DoNotUse::Funcs::InternalSerialize(11, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ge.proto.ModelDef)
  return target;
}

size_t ModelDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ge.proto.ModelDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ge.proto.GraphDef graph = 7;
  total_size += 1UL * this->_internal_graph_size();
  for (const auto& msg : this->graph_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .ge.proto.AttrDef> attr = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attr_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >::const_iterator
      it = this->_internal_attr().begin();
      it != this->_internal_attr().end(); ++it) {
    total_size += ModelDef_AttrEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string custom_version = 3;
  if (this->custom_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_custom_version());
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ge.proto.ModelDef)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ge.proto.ModelDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ge.proto.ModelDef)
    MergeFrom(*source);
  }
}

void ModelDef::MergeFrom(const ModelDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ge.proto.ModelDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  graph_.MergeFrom(from.graph_);
  attr_.MergeFrom(from.attr_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.custom_version().size() > 0) {
    _internal_set_custom_version(from._internal_custom_version());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void ModelDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ge.proto.ModelDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelDef::CopyFrom(const ModelDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ge.proto.ModelDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelDef::IsInitialized() const {
  return true;
}

void ModelDef::InternalSwap(ModelDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  graph_.InternalSwap(&other->graph_);
  attr_.Swap(&other->attr_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  custom_version_.Swap(&other->custom_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelDef::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace ge
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ge::proto::AttrDef_ListValue* Arena::CreateMaybeMessage< ::ge::proto::AttrDef_ListValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::proto::AttrDef_ListValue >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::proto::AttrDef_ListListInt_ListInt* Arena::CreateMaybeMessage< ::ge::proto::AttrDef_ListListInt_ListInt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::proto::AttrDef_ListListInt_ListInt >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::proto::AttrDef_ListListInt* Arena::CreateMaybeMessage< ::ge::proto::AttrDef_ListListInt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::proto::AttrDef_ListListInt >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::proto::AttrDef_ListListFloat_ListFloat* Arena::CreateMaybeMessage< ::ge::proto::AttrDef_ListListFloat_ListFloat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::proto::AttrDef_ListListFloat_ListFloat >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::proto::AttrDef_ListListFloat* Arena::CreateMaybeMessage< ::ge::proto::AttrDef_ListListFloat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::proto::AttrDef_ListListFloat >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::proto::AttrDef* Arena::CreateMaybeMessage< ::ge::proto::AttrDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::proto::AttrDef >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::proto::NamedAttrs_AttrEntry_DoNotUse* Arena::CreateMaybeMessage< ::ge::proto::NamedAttrs_AttrEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::proto::NamedAttrs_AttrEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::proto::NamedAttrs* Arena::CreateMaybeMessage< ::ge::proto::NamedAttrs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::proto::NamedAttrs >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::proto::ShapeDef* Arena::CreateMaybeMessage< ::ge::proto::ShapeDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::proto::ShapeDef >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::proto::TensorDescriptor_AttrEntry_DoNotUse* Arena::CreateMaybeMessage< ::ge::proto::TensorDescriptor_AttrEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::proto::TensorDescriptor_AttrEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::proto::TensorDescriptor* Arena::CreateMaybeMessage< ::ge::proto::TensorDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::proto::TensorDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::proto::TensorDef* Arena::CreateMaybeMessage< ::ge::proto::TensorDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::proto::TensorDef >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::proto::OpDef_AttrEntry_DoNotUse* Arena::CreateMaybeMessage< ::ge::proto::OpDef_AttrEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::proto::OpDef_AttrEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::proto::OpDef* Arena::CreateMaybeMessage< ::ge::proto::OpDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::proto::OpDef >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::proto::GraphDef_AttrEntry_DoNotUse* Arena::CreateMaybeMessage< ::ge::proto::GraphDef_AttrEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::proto::GraphDef_AttrEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::proto::GraphDef* Arena::CreateMaybeMessage< ::ge::proto::GraphDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::proto::GraphDef >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::proto::ModelDef_AttrEntry_DoNotUse* Arena::CreateMaybeMessage< ::ge::proto::ModelDef_AttrEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::proto::ModelDef_AttrEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ge::proto::ModelDef* Arena::CreateMaybeMessage< ::ge::proto::ModelDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ge::proto::ModelDef >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
