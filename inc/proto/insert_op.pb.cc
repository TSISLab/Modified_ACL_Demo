// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: insert_op.proto

#include "insert_op.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_insert_5fop_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AippOpParams_insert_5fop_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_insert_5fop_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MultiShapeOpParams_insert_5fop_2eproto;
namespace domi {
class InsertNewOpsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertNewOps> _instance;
} _InsertNewOps_default_instance_;
class AippOpParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AippOpParams> _instance;
} _AippOpParams_default_instance_;
class MultiShapeOpParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiShapeOpParams> _instance;
} _MultiShapeOpParams_default_instance_;
}  // namespace domi
static void InitDefaultsscc_info_AippOpParams_insert_5fop_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_AippOpParams_default_instance_;
    new (ptr) ::domi::AippOpParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::AippOpParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AippOpParams_insert_5fop_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AippOpParams_insert_5fop_2eproto}, {}};

static void InitDefaultsscc_info_InsertNewOps_insert_5fop_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_InsertNewOps_default_instance_;
    new (ptr) ::domi::InsertNewOps();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::InsertNewOps::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InsertNewOps_insert_5fop_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InsertNewOps_insert_5fop_2eproto}, {
      &scc_info_AippOpParams_insert_5fop_2eproto.base,
      &scc_info_MultiShapeOpParams_insert_5fop_2eproto.base,}};

static void InitDefaultsscc_info_MultiShapeOpParams_insert_5fop_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_MultiShapeOpParams_default_instance_;
    new (ptr) ::domi::MultiShapeOpParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::MultiShapeOpParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MultiShapeOpParams_insert_5fop_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MultiShapeOpParams_insert_5fop_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_insert_5fop_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_insert_5fop_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_insert_5fop_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_insert_5fop_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::InsertNewOps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::InsertNewOps, aipp_op_),
  PROTOBUF_FIELD_OFFSET(::domi::InsertNewOps, multi_shape_op_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, aipp_mode_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, related_input_rank_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, related_input_name_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, input_edge_idx_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, max_src_image_size_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, support_rotation_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, input_format_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, csc_switch_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, cpadding_value_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, rbuv_swap_switch_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, ax_swap_switch_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, single_line_mode_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, src_image_size_w_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, src_image_size_h_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, crop_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, load_start_pos_w_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, load_start_pos_h_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, crop_size_w_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, crop_size_h_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, resize_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, resize_output_w_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, resize_output_h_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, padding_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, left_padding_size_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, right_padding_size_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, top_padding_size_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, bottom_padding_size_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, padding_value_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, mean_chn_0_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, mean_chn_1_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, mean_chn_2_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, mean_chn_3_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, min_chn_0_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, min_chn_1_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, min_chn_2_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, min_chn_3_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, var_reci_chn_0_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, var_reci_chn_1_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, var_reci_chn_2_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, var_reci_chn_3_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, matrix_r0c0_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, matrix_r0c1_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, matrix_r0c2_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, matrix_r1c0_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, matrix_r1c1_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, matrix_r1c2_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, matrix_r2c0_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, matrix_r2c1_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, matrix_r2c2_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, output_bias_0_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, output_bias_1_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, output_bias_2_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, input_bias_0_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, input_bias_1_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, input_bias_2_),
  PROTOBUF_FIELD_OFFSET(::domi::AippOpParams, raw_rgbir_to_f16_n_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::MultiShapeOpParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::MultiShapeOpParams, mode_),
  PROTOBUF_FIELD_OFFSET(::domi::MultiShapeOpParams, related_input_rank_),
  PROTOBUF_FIELD_OFFSET(::domi::MultiShapeOpParams, batch_list_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::domi::InsertNewOps)},
  { 7, -1, sizeof(::domi::AippOpParams)},
  { 68, -1, sizeof(::domi::MultiShapeOpParams)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_InsertNewOps_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_AippOpParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_MultiShapeOpParams_default_instance_),
};

const char descriptor_table_protodef_insert_5fop_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017insert_op.proto\022\004domi\"e\n\014InsertNewOps\022"
  "#\n\007aipp_op\030\001 \003(\0132\022.domi.AippOpParams\0220\n\016"
  "multi_shape_op\030\002 \003(\0132\030.domi.MultiShapeOp"
  "Params\"\264\r\n\014AippOpParams\022.\n\taipp_mode\030\001 \001"
  "(\0162\033.domi.AippOpParams.AippMode\022\032\n\022relat"
  "ed_input_rank\030\002 \001(\r\022\032\n\022related_input_nam"
  "e\030\006 \001(\t\022\026\n\016input_edge_idx\030\003 \003(\r\022\032\n\022max_s"
  "rc_image_size\030\004 \001(\r\022\030\n\020support_rotation\030"
  "\005 \001(\010\0224\n\014input_format\0303 \001(\0162\036.domi.AippO"
  "pParams.InputFormat\022\022\n\ncsc_switch\0304 \001(\010\022"
  "\026\n\016cpadding_value\0305 \001(\002\022\030\n\020rbuv_swap_swi"
  "tch\0306 \001(\010\022\026\n\016ax_swap_switch\0307 \001(\010\022\030\n\020sin"
  "gle_line_mode\0308 \001(\010\022\030\n\020src_image_size_w\030"
  "9 \001(\005\022\030\n\020src_image_size_h\030: \001(\005\022\014\n\004crop\030"
  "; \001(\010\022\030\n\020load_start_pos_w\030< \001(\005\022\030\n\020load_"
  "start_pos_h\030= \001(\005\022\023\n\013crop_size_w\030> \001(\005\022\023"
  "\n\013crop_size_h\030\? \001(\005\022\016\n\006resize\030@ \001(\010\022\027\n\017r"
  "esize_output_w\030A \001(\005\022\027\n\017resize_output_h\030"
  "B \001(\005\022\017\n\007padding\030C \001(\010\022\031\n\021left_padding_s"
  "ize\030D \001(\005\022\032\n\022right_padding_size\030E \001(\005\022\030\n"
  "\020top_padding_size\030F \001(\005\022\033\n\023bottom_paddin"
  "g_size\030G \001(\005\022\025\n\rpadding_value\030H \001(\002\022\022\n\nm"
  "ean_chn_0\030\n \001(\005\022\022\n\nmean_chn_1\030\013 \001(\005\022\022\n\nm"
  "ean_chn_2\030\014 \001(\005\022\022\n\nmean_chn_3\030\023 \001(\005\022\021\n\tm"
  "in_chn_0\030\r \001(\002\022\021\n\tmin_chn_1\030\016 \001(\002\022\021\n\tmin"
  "_chn_2\030\017 \001(\002\022\021\n\tmin_chn_3\030\024 \001(\002\022\026\n\016var_r"
  "eci_chn_0\030\020 \003(\002\022\026\n\016var_reci_chn_1\030\021 \003(\002\022"
  "\026\n\016var_reci_chn_2\030\022 \003(\002\022\026\n\016var_reci_chn_"
  "3\030\025 \003(\002\022\023\n\013matrix_r0c0\030\036 \003(\005\022\023\n\013matrix_r"
  "0c1\030\037 \003(\005\022\023\n\013matrix_r0c2\030  \003(\005\022\023\n\013matrix"
  "_r1c0\030! \003(\005\022\023\n\013matrix_r1c1\030\" \003(\005\022\023\n\013matr"
  "ix_r1c2\030# \003(\005\022\023\n\013matrix_r2c0\030$ \003(\005\022\023\n\013ma"
  "trix_r2c1\030% \003(\005\022\023\n\013matrix_r2c2\030& \003(\005\022\025\n\r"
  "output_bias_0\030\' \003(\005\022\025\n\routput_bias_1\030( \003"
  "(\005\022\025\n\routput_bias_2\030) \003(\005\022\024\n\014input_bias_"
  "0\030* \003(\005\022\024\n\014input_bias_1\030+ \003(\005\022\024\n\014input_b"
  "ias_2\030, \003(\005\022\032\n\022raw_rgbir_to_f16_n\030- \001(\r\""
  "\267\002\n\013InputFormat\022\r\n\tUNDEFINED\020\000\022\017\n\013YUV420"
  "SP_U8\020\001\022\017\n\013XRGB8888_U8\020\002\022\r\n\tRGB888_U8\020\003\022"
  "\r\n\tYUV400_U8\020\004\022\022\n\016NC1HWC0DI_FP16\020\005\022\020\n\014NC"
  "1HWC0DI_S8\020\006\022\017\n\013ARGB8888_U8\020\007\022\013\n\007YUYV_U8"
  "\020\010\022\017\n\013YUV422SP_U8\020\t\022\016\n\nAYUV444_U8\020\n\022\t\n\005R"
  "AW10\020\013\022\t\n\005RAW12\020\014\022\t\n\005RAW16\020\r\022\t\n\005RAW24\020\016\022"
  "\t\n\005RGB16\020\017\022\t\n\005RGB20\020\020\022\t\n\005RGB24\020\021\022\013\n\007RGB8"
  "_IR\020\022\022\014\n\010RGB16_IR\020\023\022\014\n\010RGB24_IR\020\024\"2\n\010Aip"
  "pMode\022\r\n\tundefined\020\000\022\n\n\006static\020\001\022\013\n\007dyna"
  "mic\020\002\"\250\001\n\022MultiShapeOpParams\0225\n\004mode\030\001 \001"
  "(\0162\'.domi.MultiShapeOpParams.MultiShapeM"
  "ode\022\032\n\022related_input_rank\030\002 \001(\r\022\022\n\nbatch"
  "_list\030\013 \003(\r\"+\n\016MultiShapeMode\022\t\n\005batch\020\000"
  "\022\016\n\nresolution\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_insert_5fop_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_insert_5fop_2eproto_sccs[3] = {
  &scc_info_AippOpParams_insert_5fop_2eproto.base,
  &scc_info_InsertNewOps_insert_5fop_2eproto.base,
  &scc_info_MultiShapeOpParams_insert_5fop_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_insert_5fop_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_insert_5fop_2eproto = {
  false, false, descriptor_table_protodef_insert_5fop_2eproto, "insert_op.proto", 2024,
  &descriptor_table_insert_5fop_2eproto_once, descriptor_table_insert_5fop_2eproto_sccs, descriptor_table_insert_5fop_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_insert_5fop_2eproto::offsets,
  file_level_metadata_insert_5fop_2eproto, 3, file_level_enum_descriptors_insert_5fop_2eproto, file_level_service_descriptors_insert_5fop_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_insert_5fop_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_insert_5fop_2eproto)), true);
namespace domi {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AippOpParams_InputFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_insert_5fop_2eproto);
  return file_level_enum_descriptors_insert_5fop_2eproto[0];
}
bool AippOpParams_InputFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AippOpParams_InputFormat AippOpParams::UNDEFINED;
constexpr AippOpParams_InputFormat AippOpParams::YUV420SP_U8;
constexpr AippOpParams_InputFormat AippOpParams::XRGB8888_U8;
constexpr AippOpParams_InputFormat AippOpParams::RGB888_U8;
constexpr AippOpParams_InputFormat AippOpParams::YUV400_U8;
constexpr AippOpParams_InputFormat AippOpParams::NC1HWC0DI_FP16;
constexpr AippOpParams_InputFormat AippOpParams::NC1HWC0DI_S8;
constexpr AippOpParams_InputFormat AippOpParams::ARGB8888_U8;
constexpr AippOpParams_InputFormat AippOpParams::YUYV_U8;
constexpr AippOpParams_InputFormat AippOpParams::YUV422SP_U8;
constexpr AippOpParams_InputFormat AippOpParams::AYUV444_U8;
constexpr AippOpParams_InputFormat AippOpParams::RAW10;
constexpr AippOpParams_InputFormat AippOpParams::RAW12;
constexpr AippOpParams_InputFormat AippOpParams::RAW16;
constexpr AippOpParams_InputFormat AippOpParams::RAW24;
constexpr AippOpParams_InputFormat AippOpParams::RGB16;
constexpr AippOpParams_InputFormat AippOpParams::RGB20;
constexpr AippOpParams_InputFormat AippOpParams::RGB24;
constexpr AippOpParams_InputFormat AippOpParams::RGB8_IR;
constexpr AippOpParams_InputFormat AippOpParams::RGB16_IR;
constexpr AippOpParams_InputFormat AippOpParams::RGB24_IR;
constexpr AippOpParams_InputFormat AippOpParams::InputFormat_MIN;
constexpr AippOpParams_InputFormat AippOpParams::InputFormat_MAX;
constexpr int AippOpParams::InputFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AippOpParams_AippMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_insert_5fop_2eproto);
  return file_level_enum_descriptors_insert_5fop_2eproto[1];
}
bool AippOpParams_AippMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AippOpParams_AippMode AippOpParams::undefined;
constexpr AippOpParams_AippMode AippOpParams::static_;
constexpr AippOpParams_AippMode AippOpParams::dynamic;
constexpr AippOpParams_AippMode AippOpParams::AippMode_MIN;
constexpr AippOpParams_AippMode AippOpParams::AippMode_MAX;
constexpr int AippOpParams::AippMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MultiShapeOpParams_MultiShapeMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_insert_5fop_2eproto);
  return file_level_enum_descriptors_insert_5fop_2eproto[2];
}
bool MultiShapeOpParams_MultiShapeMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MultiShapeOpParams_MultiShapeMode MultiShapeOpParams::batch;
constexpr MultiShapeOpParams_MultiShapeMode MultiShapeOpParams::resolution;
constexpr MultiShapeOpParams_MultiShapeMode MultiShapeOpParams::MultiShapeMode_MIN;
constexpr MultiShapeOpParams_MultiShapeMode MultiShapeOpParams::MultiShapeMode_MAX;
constexpr int MultiShapeOpParams::MultiShapeMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void InsertNewOps::InitAsDefaultInstance() {
}
class InsertNewOps::_Internal {
 public:
};

InsertNewOps::InsertNewOps(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  aipp_op_(arena),
  multi_shape_op_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.InsertNewOps)
}
InsertNewOps::InsertNewOps(const InsertNewOps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      aipp_op_(from.aipp_op_),
      multi_shape_op_(from.multi_shape_op_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:domi.InsertNewOps)
}

void InsertNewOps::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertNewOps_insert_5fop_2eproto.base);
}

InsertNewOps::~InsertNewOps() {
  // @@protoc_insertion_point(destructor:domi.InsertNewOps)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertNewOps::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InsertNewOps::ArenaDtor(void* object) {
  InsertNewOps* _this = reinterpret_cast< InsertNewOps* >(object);
  (void)_this;
}
void InsertNewOps::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertNewOps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertNewOps& InsertNewOps::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertNewOps_insert_5fop_2eproto.base);
  return *internal_default_instance();
}


void InsertNewOps::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.InsertNewOps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aipp_op_.Clear();
  multi_shape_op_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertNewOps::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .domi.AippOpParams aipp_op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_aipp_op(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .domi.MultiShapeOpParams multi_shape_op = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_multi_shape_op(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertNewOps::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.InsertNewOps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .domi.AippOpParams aipp_op = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_aipp_op_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_aipp_op(i), target, stream);
  }

  // repeated .domi.MultiShapeOpParams multi_shape_op = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_multi_shape_op_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_multi_shape_op(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.InsertNewOps)
  return target;
}

size_t InsertNewOps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.InsertNewOps)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .domi.AippOpParams aipp_op = 1;
  total_size += 1UL * this->_internal_aipp_op_size();
  for (const auto& msg : this->aipp_op_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .domi.MultiShapeOpParams multi_shape_op = 2;
  total_size += 1UL * this->_internal_multi_shape_op_size();
  for (const auto& msg : this->multi_shape_op_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertNewOps::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.InsertNewOps)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertNewOps* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertNewOps>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.InsertNewOps)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.InsertNewOps)
    MergeFrom(*source);
  }
}

void InsertNewOps::MergeFrom(const InsertNewOps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.InsertNewOps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  aipp_op_.MergeFrom(from.aipp_op_);
  multi_shape_op_.MergeFrom(from.multi_shape_op_);
}

void InsertNewOps::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.InsertNewOps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertNewOps::CopyFrom(const InsertNewOps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.InsertNewOps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertNewOps::IsInitialized() const {
  return true;
}

void InsertNewOps::InternalSwap(InsertNewOps* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  aipp_op_.InternalSwap(&other->aipp_op_);
  multi_shape_op_.InternalSwap(&other->multi_shape_op_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertNewOps::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AippOpParams::InitAsDefaultInstance() {
}
class AippOpParams::_Internal {
 public:
};

AippOpParams::AippOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  input_edge_idx_(arena),
  var_reci_chn_0_(arena),
  var_reci_chn_1_(arena),
  var_reci_chn_2_(arena),
  var_reci_chn_3_(arena),
  matrix_r0c0_(arena),
  matrix_r0c1_(arena),
  matrix_r0c2_(arena),
  matrix_r1c0_(arena),
  matrix_r1c1_(arena),
  matrix_r1c2_(arena),
  matrix_r2c0_(arena),
  matrix_r2c1_(arena),
  matrix_r2c2_(arena),
  output_bias_0_(arena),
  output_bias_1_(arena),
  output_bias_2_(arena),
  input_bias_0_(arena),
  input_bias_1_(arena),
  input_bias_2_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.AippOpParams)
}
AippOpParams::AippOpParams(const AippOpParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      input_edge_idx_(from.input_edge_idx_),
      var_reci_chn_0_(from.var_reci_chn_0_),
      var_reci_chn_1_(from.var_reci_chn_1_),
      var_reci_chn_2_(from.var_reci_chn_2_),
      var_reci_chn_3_(from.var_reci_chn_3_),
      matrix_r0c0_(from.matrix_r0c0_),
      matrix_r0c1_(from.matrix_r0c1_),
      matrix_r0c2_(from.matrix_r0c2_),
      matrix_r1c0_(from.matrix_r1c0_),
      matrix_r1c1_(from.matrix_r1c1_),
      matrix_r1c2_(from.matrix_r1c2_),
      matrix_r2c0_(from.matrix_r2c0_),
      matrix_r2c1_(from.matrix_r2c1_),
      matrix_r2c2_(from.matrix_r2c2_),
      output_bias_0_(from.output_bias_0_),
      output_bias_1_(from.output_bias_1_),
      output_bias_2_(from.output_bias_2_),
      input_bias_0_(from.input_bias_0_),
      input_bias_1_(from.input_bias_1_),
      input_bias_2_(from.input_bias_2_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  related_input_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_related_input_name().empty()) {
    related_input_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_related_input_name(),
      GetArena());
  }
  ::memcpy(&aipp_mode_, &from.aipp_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&bottom_padding_size_) -
    reinterpret_cast<char*>(&aipp_mode_)) + sizeof(bottom_padding_size_));
  // @@protoc_insertion_point(copy_constructor:domi.AippOpParams)
}

void AippOpParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AippOpParams_insert_5fop_2eproto.base);
  related_input_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&aipp_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bottom_padding_size_) -
      reinterpret_cast<char*>(&aipp_mode_)) + sizeof(bottom_padding_size_));
}

AippOpParams::~AippOpParams() {
  // @@protoc_insertion_point(destructor:domi.AippOpParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AippOpParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  related_input_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AippOpParams::ArenaDtor(void* object) {
  AippOpParams* _this = reinterpret_cast< AippOpParams* >(object);
  (void)_this;
}
void AippOpParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AippOpParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AippOpParams& AippOpParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AippOpParams_insert_5fop_2eproto.base);
  return *internal_default_instance();
}


void AippOpParams::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.AippOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_edge_idx_.Clear();
  var_reci_chn_0_.Clear();
  var_reci_chn_1_.Clear();
  var_reci_chn_2_.Clear();
  var_reci_chn_3_.Clear();
  matrix_r0c0_.Clear();
  matrix_r0c1_.Clear();
  matrix_r0c2_.Clear();
  matrix_r1c0_.Clear();
  matrix_r1c1_.Clear();
  matrix_r1c2_.Clear();
  matrix_r2c0_.Clear();
  matrix_r2c1_.Clear();
  matrix_r2c2_.Clear();
  output_bias_0_.Clear();
  output_bias_1_.Clear();
  output_bias_2_.Clear();
  input_bias_0_.Clear();
  input_bias_1_.Clear();
  input_bias_2_.Clear();
  related_input_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&aipp_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bottom_padding_size_) -
      reinterpret_cast<char*>(&aipp_mode_)) + sizeof(bottom_padding_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AippOpParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .domi.AippOpParams.AippMode aipp_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_aipp_mode(static_cast<::domi::AippOpParams_AippMode>(val));
        } else goto handle_unusual;
        continue;
      // uint32 related_input_rank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          related_input_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 input_edge_idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_input_edge_idx(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_input_edge_idx(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_src_image_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_src_image_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool support_rotation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          support_rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string related_input_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_related_input_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "domi.AippOpParams.related_input_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mean_chn_0 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          mean_chn_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mean_chn_1 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          mean_chn_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mean_chn_2 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          mean_chn_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float min_chn_0 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          min_chn_0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float min_chn_1 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          min_chn_1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float min_chn_2 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          min_chn_2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float var_reci_chn_0 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_var_reci_chn_0(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133) {
          _internal_add_var_reci_chn_0(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float var_reci_chn_1 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_var_reci_chn_1(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141) {
          _internal_add_var_reci_chn_1(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float var_reci_chn_2 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_var_reci_chn_2(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149) {
          _internal_add_var_reci_chn_2(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 mean_chn_3 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          mean_chn_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float min_chn_3 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          min_chn_3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float var_reci_chn_3 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_var_reci_chn_3(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173) {
          _internal_add_var_reci_chn_3(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated int32 matrix_r0c0 = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_matrix_r0c0(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240) {
          _internal_add_matrix_r0c0(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 matrix_r0c1 = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_matrix_r0c1(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248) {
          _internal_add_matrix_r0c1(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 matrix_r0c2 = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_matrix_r0c2(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0) {
          _internal_add_matrix_r0c2(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 matrix_r1c0 = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_matrix_r1c0(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_matrix_r1c0(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 matrix_r1c1 = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_matrix_r1c1(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_matrix_r1c1(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 matrix_r1c2 = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_matrix_r1c2(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_matrix_r1c2(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 matrix_r2c0 = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_matrix_r2c0(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_matrix_r2c0(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 matrix_r2c1 = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_matrix_r2c1(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_matrix_r2c1(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 matrix_r2c2 = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_matrix_r2c2(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_matrix_r2c2(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 output_bias_0 = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_output_bias_0(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_output_bias_0(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 output_bias_1 = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_output_bias_1(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_output_bias_1(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 output_bias_2 = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_output_bias_2(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_output_bias_2(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 input_bias_0 = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_input_bias_0(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_input_bias_0(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 input_bias_1 = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_input_bias_1(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88) {
          _internal_add_input_bias_1(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 input_bias_2 = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_input_bias_2(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96) {
          _internal_add_input_bias_2(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 raw_rgbir_to_f16_n = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          raw_rgbir_to_f16_n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.AippOpParams.InputFormat input_format = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_input_format(static_cast<::domi::AippOpParams_InputFormat>(val));
        } else goto handle_unusual;
        continue;
      // bool csc_switch = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          csc_switch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float cpadding_value = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          cpadding_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool rbuv_swap_switch = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          rbuv_swap_switch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ax_swap_switch = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ax_swap_switch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool single_line_mode = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          single_line_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 src_image_size_w = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          src_image_size_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 src_image_size_h = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          src_image_size_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool crop = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          crop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 load_start_pos_w = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          load_start_pos_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 load_start_pos_h = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          load_start_pos_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 crop_size_w = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          crop_size_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 crop_size_h = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          crop_size_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool resize = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          resize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 resize_output_w = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          resize_output_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 resize_output_h = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          resize_output_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool padding = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          padding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 left_padding_size = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          left_padding_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 right_padding_size = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          right_padding_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 top_padding_size = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          top_padding_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bottom_padding_size = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          bottom_padding_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float padding_value = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          padding_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AippOpParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.AippOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .domi.AippOpParams.AippMode aipp_mode = 1;
  if (this->aipp_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_aipp_mode(), target);
  }

  // uint32 related_input_rank = 2;
  if (this->related_input_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_related_input_rank(), target);
  }

  // repeated uint32 input_edge_idx = 3;
  {
    int byte_size = _input_edge_idx_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_input_edge_idx(), byte_size, target);
    }
  }

  // uint32 max_src_image_size = 4;
  if (this->max_src_image_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_src_image_size(), target);
  }

  // bool support_rotation = 5;
  if (this->support_rotation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_support_rotation(), target);
  }

  // string related_input_name = 6;
  if (this->related_input_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_related_input_name().data(), static_cast<int>(this->_internal_related_input_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "domi.AippOpParams.related_input_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_related_input_name(), target);
  }

  // int32 mean_chn_0 = 10;
  if (this->mean_chn_0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_mean_chn_0(), target);
  }

  // int32 mean_chn_1 = 11;
  if (this->mean_chn_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_mean_chn_1(), target);
  }

  // int32 mean_chn_2 = 12;
  if (this->mean_chn_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_mean_chn_2(), target);
  }

  // float min_chn_0 = 13;
  if (!(this->min_chn_0() <= 0 && this->min_chn_0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_min_chn_0(), target);
  }

  // float min_chn_1 = 14;
  if (!(this->min_chn_1() <= 0 && this->min_chn_1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_min_chn_1(), target);
  }

  // float min_chn_2 = 15;
  if (!(this->min_chn_2() <= 0 && this->min_chn_2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_min_chn_2(), target);
  }

  // repeated float var_reci_chn_0 = 16;
  if (this->_internal_var_reci_chn_0_size() > 0) {
    target = stream->WriteFixedPacked(16, _internal_var_reci_chn_0(), target);
  }

  // repeated float var_reci_chn_1 = 17;
  if (this->_internal_var_reci_chn_1_size() > 0) {
    target = stream->WriteFixedPacked(17, _internal_var_reci_chn_1(), target);
  }

  // repeated float var_reci_chn_2 = 18;
  if (this->_internal_var_reci_chn_2_size() > 0) {
    target = stream->WriteFixedPacked(18, _internal_var_reci_chn_2(), target);
  }

  // int32 mean_chn_3 = 19;
  if (this->mean_chn_3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_mean_chn_3(), target);
  }

  // float min_chn_3 = 20;
  if (!(this->min_chn_3() <= 0 && this->min_chn_3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_min_chn_3(), target);
  }

  // repeated float var_reci_chn_3 = 21;
  if (this->_internal_var_reci_chn_3_size() > 0) {
    target = stream->WriteFixedPacked(21, _internal_var_reci_chn_3(), target);
  }

  // repeated int32 matrix_r0c0 = 30;
  {
    int byte_size = _matrix_r0c0_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          30, _internal_matrix_r0c0(), byte_size, target);
    }
  }

  // repeated int32 matrix_r0c1 = 31;
  {
    int byte_size = _matrix_r0c1_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          31, _internal_matrix_r0c1(), byte_size, target);
    }
  }

  // repeated int32 matrix_r0c2 = 32;
  {
    int byte_size = _matrix_r0c2_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          32, _internal_matrix_r0c2(), byte_size, target);
    }
  }

  // repeated int32 matrix_r1c0 = 33;
  {
    int byte_size = _matrix_r1c0_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          33, _internal_matrix_r1c0(), byte_size, target);
    }
  }

  // repeated int32 matrix_r1c1 = 34;
  {
    int byte_size = _matrix_r1c1_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          34, _internal_matrix_r1c1(), byte_size, target);
    }
  }

  // repeated int32 matrix_r1c2 = 35;
  {
    int byte_size = _matrix_r1c2_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          35, _internal_matrix_r1c2(), byte_size, target);
    }
  }

  // repeated int32 matrix_r2c0 = 36;
  {
    int byte_size = _matrix_r2c0_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          36, _internal_matrix_r2c0(), byte_size, target);
    }
  }

  // repeated int32 matrix_r2c1 = 37;
  {
    int byte_size = _matrix_r2c1_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          37, _internal_matrix_r2c1(), byte_size, target);
    }
  }

  // repeated int32 matrix_r2c2 = 38;
  {
    int byte_size = _matrix_r2c2_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          38, _internal_matrix_r2c2(), byte_size, target);
    }
  }

  // repeated int32 output_bias_0 = 39;
  {
    int byte_size = _output_bias_0_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          39, _internal_output_bias_0(), byte_size, target);
    }
  }

  // repeated int32 output_bias_1 = 40;
  {
    int byte_size = _output_bias_1_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          40, _internal_output_bias_1(), byte_size, target);
    }
  }

  // repeated int32 output_bias_2 = 41;
  {
    int byte_size = _output_bias_2_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          41, _internal_output_bias_2(), byte_size, target);
    }
  }

  // repeated int32 input_bias_0 = 42;
  {
    int byte_size = _input_bias_0_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          42, _internal_input_bias_0(), byte_size, target);
    }
  }

  // repeated int32 input_bias_1 = 43;
  {
    int byte_size = _input_bias_1_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          43, _internal_input_bias_1(), byte_size, target);
    }
  }

  // repeated int32 input_bias_2 = 44;
  {
    int byte_size = _input_bias_2_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          44, _internal_input_bias_2(), byte_size, target);
    }
  }

  // uint32 raw_rgbir_to_f16_n = 45;
  if (this->raw_rgbir_to_f16_n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(45, this->_internal_raw_rgbir_to_f16_n(), target);
  }

  // .domi.AippOpParams.InputFormat input_format = 51;
  if (this->input_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      51, this->_internal_input_format(), target);
  }

  // bool csc_switch = 52;
  if (this->csc_switch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(52, this->_internal_csc_switch(), target);
  }

  // float cpadding_value = 53;
  if (!(this->cpadding_value() <= 0 && this->cpadding_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(53, this->_internal_cpadding_value(), target);
  }

  // bool rbuv_swap_switch = 54;
  if (this->rbuv_swap_switch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(54, this->_internal_rbuv_swap_switch(), target);
  }

  // bool ax_swap_switch = 55;
  if (this->ax_swap_switch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(55, this->_internal_ax_swap_switch(), target);
  }

  // bool single_line_mode = 56;
  if (this->single_line_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(56, this->_internal_single_line_mode(), target);
  }

  // int32 src_image_size_w = 57;
  if (this->src_image_size_w() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(57, this->_internal_src_image_size_w(), target);
  }

  // int32 src_image_size_h = 58;
  if (this->src_image_size_h() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(58, this->_internal_src_image_size_h(), target);
  }

  // bool crop = 59;
  if (this->crop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(59, this->_internal_crop(), target);
  }

  // int32 load_start_pos_w = 60;
  if (this->load_start_pos_w() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(60, this->_internal_load_start_pos_w(), target);
  }

  // int32 load_start_pos_h = 61;
  if (this->load_start_pos_h() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(61, this->_internal_load_start_pos_h(), target);
  }

  // int32 crop_size_w = 62;
  if (this->crop_size_w() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(62, this->_internal_crop_size_w(), target);
  }

  // int32 crop_size_h = 63;
  if (this->crop_size_h() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(63, this->_internal_crop_size_h(), target);
  }

  // bool resize = 64;
  if (this->resize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(64, this->_internal_resize(), target);
  }

  // int32 resize_output_w = 65;
  if (this->resize_output_w() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(65, this->_internal_resize_output_w(), target);
  }

  // int32 resize_output_h = 66;
  if (this->resize_output_h() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(66, this->_internal_resize_output_h(), target);
  }

  // bool padding = 67;
  if (this->padding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(67, this->_internal_padding(), target);
  }

  // int32 left_padding_size = 68;
  if (this->left_padding_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(68, this->_internal_left_padding_size(), target);
  }

  // int32 right_padding_size = 69;
  if (this->right_padding_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(69, this->_internal_right_padding_size(), target);
  }

  // int32 top_padding_size = 70;
  if (this->top_padding_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(70, this->_internal_top_padding_size(), target);
  }

  // int32 bottom_padding_size = 71;
  if (this->bottom_padding_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(71, this->_internal_bottom_padding_size(), target);
  }

  // float padding_value = 72;
  if (!(this->padding_value() <= 0 && this->padding_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(72, this->_internal_padding_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.AippOpParams)
  return target;
}

size_t AippOpParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.AippOpParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 input_edge_idx = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->input_edge_idx_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _input_edge_idx_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float var_reci_chn_0 = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_var_reci_chn_0_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _var_reci_chn_0_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float var_reci_chn_1 = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_var_reci_chn_1_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _var_reci_chn_1_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float var_reci_chn_2 = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_var_reci_chn_2_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _var_reci_chn_2_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float var_reci_chn_3 = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_var_reci_chn_3_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _var_reci_chn_3_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 matrix_r0c0 = 30;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->matrix_r0c0_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _matrix_r0c0_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 matrix_r0c1 = 31;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->matrix_r0c1_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _matrix_r0c1_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 matrix_r0c2 = 32;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->matrix_r0c2_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _matrix_r0c2_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 matrix_r1c0 = 33;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->matrix_r1c0_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _matrix_r1c0_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 matrix_r1c1 = 34;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->matrix_r1c1_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _matrix_r1c1_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 matrix_r1c2 = 35;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->matrix_r1c2_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _matrix_r1c2_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 matrix_r2c0 = 36;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->matrix_r2c0_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _matrix_r2c0_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 matrix_r2c1 = 37;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->matrix_r2c1_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _matrix_r2c1_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 matrix_r2c2 = 38;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->matrix_r2c2_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _matrix_r2c2_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 output_bias_0 = 39;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->output_bias_0_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _output_bias_0_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 output_bias_1 = 40;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->output_bias_1_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _output_bias_1_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 output_bias_2 = 41;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->output_bias_2_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _output_bias_2_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 input_bias_0 = 42;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->input_bias_0_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _input_bias_0_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 input_bias_1 = 43;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->input_bias_1_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _input_bias_1_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 input_bias_2 = 44;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->input_bias_2_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _input_bias_2_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string related_input_name = 6;
  if (this->related_input_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_related_input_name());
  }

  // .domi.AippOpParams.AippMode aipp_mode = 1;
  if (this->aipp_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_aipp_mode());
  }

  // uint32 related_input_rank = 2;
  if (this->related_input_rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_related_input_rank());
  }

  // uint32 max_src_image_size = 4;
  if (this->max_src_image_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_src_image_size());
  }

  // int32 mean_chn_0 = 10;
  if (this->mean_chn_0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mean_chn_0());
  }

  // int32 mean_chn_1 = 11;
  if (this->mean_chn_1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mean_chn_1());
  }

  // int32 mean_chn_2 = 12;
  if (this->mean_chn_2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mean_chn_2());
  }

  // float min_chn_0 = 13;
  if (!(this->min_chn_0() <= 0 && this->min_chn_0() >= 0)) {
    total_size += 1 + 4;
  }

  // float min_chn_1 = 14;
  if (!(this->min_chn_1() <= 0 && this->min_chn_1() >= 0)) {
    total_size += 1 + 4;
  }

  // float min_chn_2 = 15;
  if (!(this->min_chn_2() <= 0 && this->min_chn_2() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 mean_chn_3 = 19;
  if (this->mean_chn_3() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mean_chn_3());
  }

  // float min_chn_3 = 20;
  if (!(this->min_chn_3() <= 0 && this->min_chn_3() >= 0)) {
    total_size += 2 + 4;
  }

  // bool support_rotation = 5;
  if (this->support_rotation() != 0) {
    total_size += 1 + 1;
  }

  // bool csc_switch = 52;
  if (this->csc_switch() != 0) {
    total_size += 2 + 1;
  }

  // bool rbuv_swap_switch = 54;
  if (this->rbuv_swap_switch() != 0) {
    total_size += 2 + 1;
  }

  // bool ax_swap_switch = 55;
  if (this->ax_swap_switch() != 0) {
    total_size += 2 + 1;
  }

  // uint32 raw_rgbir_to_f16_n = 45;
  if (this->raw_rgbir_to_f16_n() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_raw_rgbir_to_f16_n());
  }

  // .domi.AippOpParams.InputFormat input_format = 51;
  if (this->input_format() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_input_format());
  }

  // float cpadding_value = 53;
  if (!(this->cpadding_value() <= 0 && this->cpadding_value() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 src_image_size_w = 57;
  if (this->src_image_size_w() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_src_image_size_w());
  }

  // float padding_value = 72;
  if (!(this->padding_value() <= 0 && this->padding_value() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 src_image_size_h = 58;
  if (this->src_image_size_h() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_src_image_size_h());
  }

  // int32 load_start_pos_w = 60;
  if (this->load_start_pos_w() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_load_start_pos_w());
  }

  // int32 load_start_pos_h = 61;
  if (this->load_start_pos_h() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_load_start_pos_h());
  }

  // bool single_line_mode = 56;
  if (this->single_line_mode() != 0) {
    total_size += 2 + 1;
  }

  // bool crop = 59;
  if (this->crop() != 0) {
    total_size += 2 + 1;
  }

  // bool resize = 64;
  if (this->resize() != 0) {
    total_size += 2 + 1;
  }

  // bool padding = 67;
  if (this->padding() != 0) {
    total_size += 2 + 1;
  }

  // int32 crop_size_w = 62;
  if (this->crop_size_w() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_crop_size_w());
  }

  // int32 crop_size_h = 63;
  if (this->crop_size_h() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_crop_size_h());
  }

  // int32 resize_output_w = 65;
  if (this->resize_output_w() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_resize_output_w());
  }

  // int32 resize_output_h = 66;
  if (this->resize_output_h() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_resize_output_h());
  }

  // int32 left_padding_size = 68;
  if (this->left_padding_size() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_left_padding_size());
  }

  // int32 right_padding_size = 69;
  if (this->right_padding_size() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_right_padding_size());
  }

  // int32 top_padding_size = 70;
  if (this->top_padding_size() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_top_padding_size());
  }

  // int32 bottom_padding_size = 71;
  if (this->bottom_padding_size() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bottom_padding_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AippOpParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.AippOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  const AippOpParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AippOpParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.AippOpParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.AippOpParams)
    MergeFrom(*source);
  }
}

void AippOpParams::MergeFrom(const AippOpParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.AippOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_edge_idx_.MergeFrom(from.input_edge_idx_);
  var_reci_chn_0_.MergeFrom(from.var_reci_chn_0_);
  var_reci_chn_1_.MergeFrom(from.var_reci_chn_1_);
  var_reci_chn_2_.MergeFrom(from.var_reci_chn_2_);
  var_reci_chn_3_.MergeFrom(from.var_reci_chn_3_);
  matrix_r0c0_.MergeFrom(from.matrix_r0c0_);
  matrix_r0c1_.MergeFrom(from.matrix_r0c1_);
  matrix_r0c2_.MergeFrom(from.matrix_r0c2_);
  matrix_r1c0_.MergeFrom(from.matrix_r1c0_);
  matrix_r1c1_.MergeFrom(from.matrix_r1c1_);
  matrix_r1c2_.MergeFrom(from.matrix_r1c2_);
  matrix_r2c0_.MergeFrom(from.matrix_r2c0_);
  matrix_r2c1_.MergeFrom(from.matrix_r2c1_);
  matrix_r2c2_.MergeFrom(from.matrix_r2c2_);
  output_bias_0_.MergeFrom(from.output_bias_0_);
  output_bias_1_.MergeFrom(from.output_bias_1_);
  output_bias_2_.MergeFrom(from.output_bias_2_);
  input_bias_0_.MergeFrom(from.input_bias_0_);
  input_bias_1_.MergeFrom(from.input_bias_1_);
  input_bias_2_.MergeFrom(from.input_bias_2_);
  if (from.related_input_name().size() > 0) {
    _internal_set_related_input_name(from._internal_related_input_name());
  }
  if (from.aipp_mode() != 0) {
    _internal_set_aipp_mode(from._internal_aipp_mode());
  }
  if (from.related_input_rank() != 0) {
    _internal_set_related_input_rank(from._internal_related_input_rank());
  }
  if (from.max_src_image_size() != 0) {
    _internal_set_max_src_image_size(from._internal_max_src_image_size());
  }
  if (from.mean_chn_0() != 0) {
    _internal_set_mean_chn_0(from._internal_mean_chn_0());
  }
  if (from.mean_chn_1() != 0) {
    _internal_set_mean_chn_1(from._internal_mean_chn_1());
  }
  if (from.mean_chn_2() != 0) {
    _internal_set_mean_chn_2(from._internal_mean_chn_2());
  }
  if (!(from.min_chn_0() <= 0 && from.min_chn_0() >= 0)) {
    _internal_set_min_chn_0(from._internal_min_chn_0());
  }
  if (!(from.min_chn_1() <= 0 && from.min_chn_1() >= 0)) {
    _internal_set_min_chn_1(from._internal_min_chn_1());
  }
  if (!(from.min_chn_2() <= 0 && from.min_chn_2() >= 0)) {
    _internal_set_min_chn_2(from._internal_min_chn_2());
  }
  if (from.mean_chn_3() != 0) {
    _internal_set_mean_chn_3(from._internal_mean_chn_3());
  }
  if (!(from.min_chn_3() <= 0 && from.min_chn_3() >= 0)) {
    _internal_set_min_chn_3(from._internal_min_chn_3());
  }
  if (from.support_rotation() != 0) {
    _internal_set_support_rotation(from._internal_support_rotation());
  }
  if (from.csc_switch() != 0) {
    _internal_set_csc_switch(from._internal_csc_switch());
  }
  if (from.rbuv_swap_switch() != 0) {
    _internal_set_rbuv_swap_switch(from._internal_rbuv_swap_switch());
  }
  if (from.ax_swap_switch() != 0) {
    _internal_set_ax_swap_switch(from._internal_ax_swap_switch());
  }
  if (from.raw_rgbir_to_f16_n() != 0) {
    _internal_set_raw_rgbir_to_f16_n(from._internal_raw_rgbir_to_f16_n());
  }
  if (from.input_format() != 0) {
    _internal_set_input_format(from._internal_input_format());
  }
  if (!(from.cpadding_value() <= 0 && from.cpadding_value() >= 0)) {
    _internal_set_cpadding_value(from._internal_cpadding_value());
  }
  if (from.src_image_size_w() != 0) {
    _internal_set_src_image_size_w(from._internal_src_image_size_w());
  }
  if (!(from.padding_value() <= 0 && from.padding_value() >= 0)) {
    _internal_set_padding_value(from._internal_padding_value());
  }
  if (from.src_image_size_h() != 0) {
    _internal_set_src_image_size_h(from._internal_src_image_size_h());
  }
  if (from.load_start_pos_w() != 0) {
    _internal_set_load_start_pos_w(from._internal_load_start_pos_w());
  }
  if (from.load_start_pos_h() != 0) {
    _internal_set_load_start_pos_h(from._internal_load_start_pos_h());
  }
  if (from.single_line_mode() != 0) {
    _internal_set_single_line_mode(from._internal_single_line_mode());
  }
  if (from.crop() != 0) {
    _internal_set_crop(from._internal_crop());
  }
  if (from.resize() != 0) {
    _internal_set_resize(from._internal_resize());
  }
  if (from.padding() != 0) {
    _internal_set_padding(from._internal_padding());
  }
  if (from.crop_size_w() != 0) {
    _internal_set_crop_size_w(from._internal_crop_size_w());
  }
  if (from.crop_size_h() != 0) {
    _internal_set_crop_size_h(from._internal_crop_size_h());
  }
  if (from.resize_output_w() != 0) {
    _internal_set_resize_output_w(from._internal_resize_output_w());
  }
  if (from.resize_output_h() != 0) {
    _internal_set_resize_output_h(from._internal_resize_output_h());
  }
  if (from.left_padding_size() != 0) {
    _internal_set_left_padding_size(from._internal_left_padding_size());
  }
  if (from.right_padding_size() != 0) {
    _internal_set_right_padding_size(from._internal_right_padding_size());
  }
  if (from.top_padding_size() != 0) {
    _internal_set_top_padding_size(from._internal_top_padding_size());
  }
  if (from.bottom_padding_size() != 0) {
    _internal_set_bottom_padding_size(from._internal_bottom_padding_size());
  }
}

void AippOpParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.AippOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AippOpParams::CopyFrom(const AippOpParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.AippOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AippOpParams::IsInitialized() const {
  return true;
}

void AippOpParams::InternalSwap(AippOpParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  input_edge_idx_.InternalSwap(&other->input_edge_idx_);
  var_reci_chn_0_.InternalSwap(&other->var_reci_chn_0_);
  var_reci_chn_1_.InternalSwap(&other->var_reci_chn_1_);
  var_reci_chn_2_.InternalSwap(&other->var_reci_chn_2_);
  var_reci_chn_3_.InternalSwap(&other->var_reci_chn_3_);
  matrix_r0c0_.InternalSwap(&other->matrix_r0c0_);
  matrix_r0c1_.InternalSwap(&other->matrix_r0c1_);
  matrix_r0c2_.InternalSwap(&other->matrix_r0c2_);
  matrix_r1c0_.InternalSwap(&other->matrix_r1c0_);
  matrix_r1c1_.InternalSwap(&other->matrix_r1c1_);
  matrix_r1c2_.InternalSwap(&other->matrix_r1c2_);
  matrix_r2c0_.InternalSwap(&other->matrix_r2c0_);
  matrix_r2c1_.InternalSwap(&other->matrix_r2c1_);
  matrix_r2c2_.InternalSwap(&other->matrix_r2c2_);
  output_bias_0_.InternalSwap(&other->output_bias_0_);
  output_bias_1_.InternalSwap(&other->output_bias_1_);
  output_bias_2_.InternalSwap(&other->output_bias_2_);
  input_bias_0_.InternalSwap(&other->input_bias_0_);
  input_bias_1_.InternalSwap(&other->input_bias_1_);
  input_bias_2_.InternalSwap(&other->input_bias_2_);
  related_input_name_.Swap(&other->related_input_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AippOpParams, bottom_padding_size_)
      + sizeof(AippOpParams::bottom_padding_size_)
      - PROTOBUF_FIELD_OFFSET(AippOpParams, aipp_mode_)>(
          reinterpret_cast<char*>(&aipp_mode_),
          reinterpret_cast<char*>(&other->aipp_mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AippOpParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiShapeOpParams::InitAsDefaultInstance() {
}
class MultiShapeOpParams::_Internal {
 public:
};

MultiShapeOpParams::MultiShapeOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  batch_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.MultiShapeOpParams)
}
MultiShapeOpParams::MultiShapeOpParams(const MultiShapeOpParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      batch_list_(from.batch_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&related_input_rank_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(related_input_rank_));
  // @@protoc_insertion_point(copy_constructor:domi.MultiShapeOpParams)
}

void MultiShapeOpParams::SharedCtor() {
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&related_input_rank_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(related_input_rank_));
}

MultiShapeOpParams::~MultiShapeOpParams() {
  // @@protoc_insertion_point(destructor:domi.MultiShapeOpParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiShapeOpParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MultiShapeOpParams::ArenaDtor(void* object) {
  MultiShapeOpParams* _this = reinterpret_cast< MultiShapeOpParams* >(object);
  (void)_this;
}
void MultiShapeOpParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiShapeOpParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiShapeOpParams& MultiShapeOpParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiShapeOpParams_insert_5fop_2eproto.base);
  return *internal_default_instance();
}


void MultiShapeOpParams::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.MultiShapeOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  batch_list_.Clear();
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&related_input_rank_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(related_input_rank_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiShapeOpParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .domi.MultiShapeOpParams.MultiShapeMode mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::domi::MultiShapeOpParams_MultiShapeMode>(val));
        } else goto handle_unusual;
        continue;
      // uint32 related_input_rank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          related_input_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 batch_list = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_batch_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88) {
          _internal_add_batch_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiShapeOpParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.MultiShapeOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .domi.MultiShapeOpParams.MultiShapeMode mode = 1;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  // uint32 related_input_rank = 2;
  if (this->related_input_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_related_input_rank(), target);
  }

  // repeated uint32 batch_list = 11;
  {
    int byte_size = _batch_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          11, _internal_batch_list(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.MultiShapeOpParams)
  return target;
}

size_t MultiShapeOpParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.MultiShapeOpParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 batch_list = 11;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->batch_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _batch_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .domi.MultiShapeOpParams.MultiShapeMode mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // uint32 related_input_rank = 2;
  if (this->related_input_rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_related_input_rank());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiShapeOpParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.MultiShapeOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiShapeOpParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiShapeOpParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.MultiShapeOpParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.MultiShapeOpParams)
    MergeFrom(*source);
  }
}

void MultiShapeOpParams::MergeFrom(const MultiShapeOpParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.MultiShapeOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  batch_list_.MergeFrom(from.batch_list_);
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.related_input_rank() != 0) {
    _internal_set_related_input_rank(from._internal_related_input_rank());
  }
}

void MultiShapeOpParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.MultiShapeOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiShapeOpParams::CopyFrom(const MultiShapeOpParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.MultiShapeOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiShapeOpParams::IsInitialized() const {
  return true;
}

void MultiShapeOpParams::InternalSwap(MultiShapeOpParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  batch_list_.InternalSwap(&other->batch_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MultiShapeOpParams, related_input_rank_)
      + sizeof(MultiShapeOpParams::related_input_rank_)
      - PROTOBUF_FIELD_OFFSET(MultiShapeOpParams, mode_)>(
          reinterpret_cast<char*>(&mode_),
          reinterpret_cast<char*>(&other->mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiShapeOpParams::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace domi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::domi::InsertNewOps* Arena::CreateMaybeMessage< ::domi::InsertNewOps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::InsertNewOps >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::AippOpParams* Arena::CreateMaybeMessage< ::domi::AippOpParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::AippOpParams >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::MultiShapeOpParams* Arena::CreateMaybeMessage< ::domi::MultiShapeOpParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::MultiShapeOpParams >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
