// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: om.proto

#include "om.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_om_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivationOpParams_om_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_om_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AllOffsetQuantizeInfo_om_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_om_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AttrDef_om_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_om_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AttrDef_ListValue_om_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_om_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BatchNormOpParams_om_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_om_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompressInfo_om_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_om_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConvolutionOpParams_om_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_om_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EltwiseOpParams_om_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_om_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FullConnectionOpParams_om_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_om_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelDef_AttrEntry_DoNotUse_om_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_om_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<15> scc_info_OpDef_om_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_om_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpDef_AttrEntry_DoNotUse_om_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_om_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PoolingOpParams_om_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_om_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuantizeCalcFactor_om_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_om_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuantizeFactor_om_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_om_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_QuantizeFactorParams_om_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_om_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecvOpParams_om_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_om_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReshapeOpParams_om_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_om_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScaleOpParams_om_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_om_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendOpParams_om_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_om_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShapeDef_om_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_om_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SoftmaxOpParams_om_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_om_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TensorDescriptor_om_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_om_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_WeightDef_om_2eproto;
namespace domi {
class ModelDef_AttrEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelDef_AttrEntry_DoNotUse> _instance;
} _ModelDef_AttrEntry_DoNotUse_default_instance_;
class ModelDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelDef> _instance;
} _ModelDef_default_instance_;
class OpDef_AttrEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpDef_AttrEntry_DoNotUse> _instance;
} _OpDef_AttrEntry_DoNotUse_default_instance_;
class OpDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpDef> _instance;
  const ::domi::SendOpParams* sender_param_;
  const ::domi::RecvOpParams* receiver_param_;
  const ::domi::ConvolutionOpParams* convolution_param_;
  const ::domi::PoolingOpParams* pooling_param_;
  const ::domi::EltwiseOpParams* eltwise_param_;
  const ::domi::BatchNormOpParams* batchnorm_param_;
  const ::domi::ScaleOpParams* scale_param_;
  const ::domi::FullConnectionOpParams* full_connection_param_;
  const ::domi::SoftmaxOpParams* softmax_param_;
  const ::domi::ActivationOpParams* activation_param_;
  const ::domi::ReshapeOpParams* reshape_param_;
} _OpDef_default_instance_;
class SendOpParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendOpParams> _instance;
} _SendOpParams_default_instance_;
class RecvOpParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecvOpParams> _instance;
} _RecvOpParams_default_instance_;
class QuantizeFactorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuantizeFactor> _instance;
} _QuantizeFactor_default_instance_;
class QuantizeCalcFactorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuantizeCalcFactor> _instance;
} _QuantizeCalcFactor_default_instance_;
class QuantizeFactorParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuantizeFactorParams> _instance;
} _QuantizeFactorParams_default_instance_;
class ConvolutionOpParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConvolutionOpParams> _instance;
} _ConvolutionOpParams_default_instance_;
class PoolingOpParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PoolingOpParams> _instance;
} _PoolingOpParams_default_instance_;
class EltwiseOpParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EltwiseOpParams> _instance;
} _EltwiseOpParams_default_instance_;
class ActivationOpParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivationOpParams> _instance;
} _ActivationOpParams_default_instance_;
class BatchNormOpParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatchNormOpParams> _instance;
} _BatchNormOpParams_default_instance_;
class ScaleOpParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScaleOpParams> _instance;
} _ScaleOpParams_default_instance_;
class ReshapeOpParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReshapeOpParams> _instance;
} _ReshapeOpParams_default_instance_;
class SoftmaxOpParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SoftmaxOpParams> _instance;
} _SoftmaxOpParams_default_instance_;
class FullConnectionOpParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FullConnectionOpParams> _instance;
} _FullConnectionOpParams_default_instance_;
class FlattenOpParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlattenOpParams> _instance;
} _FlattenOpParams_default_instance_;
class AddLimitedOpParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddLimitedOpParams> _instance;
} _AddLimitedOpParams_default_instance_;
class MulLimitedOpParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MulLimitedOpParams> _instance;
} _MulLimitedOpParams_default_instance_;
class AddOpParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddOpParams> _instance;
} _AddOpParams_default_instance_;
class MulOpParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MulOpParams> _instance;
} _MulOpParams_default_instance_;
class SubOpParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubOpParams> _instance;
} _SubOpParams_default_instance_;
class BiasAddOpParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BiasAddOpParams> _instance;
} _BiasAddOpParams_default_instance_;
class MatMulOpParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatMulOpParams> _instance;
} _MatMulOpParams_default_instance_;
class RsqrtOpParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RsqrtOpParams> _instance;
} _RsqrtOpParams_default_instance_;
class WeightDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WeightDef> _instance;
} _WeightDef_default_instance_;
class ShapeDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShapeDef> _instance;
} _ShapeDef_default_instance_;
class AllOffsetQuantizeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllOffsetQuantizeInfo> _instance;
} _AllOffsetQuantizeInfo_default_instance_;
class TensorDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TensorDescriptor> _instance;
} _TensorDescriptor_default_instance_;
class CompressInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompressInfo> _instance;
} _CompressInfo_default_instance_;
class AttrDef_ListValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AttrDef_ListValue> _instance;
} _AttrDef_ListValue_default_instance_;
class AttrDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AttrDef> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_;
  ::PROTOBUF_NAMESPACE_ID::int64 i_;
  float f_;
  bool b_;
  ::PROTOBUF_NAMESPACE_ID::uint32 u_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bt_;
  const ::domi::AttrDef_ListValue* list_;
  const ::domi::NamedAttrs* func_;
} _AttrDef_default_instance_;
class NamedAttrs_AttrEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NamedAttrs_AttrEntry_DoNotUse> _instance;
} _NamedAttrs_AttrEntry_DoNotUse_default_instance_;
class NamedAttrsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NamedAttrs> _instance;
} _NamedAttrs_default_instance_;
}  // namespace domi
static void InitDefaultsscc_info_ActivationOpParams_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_ActivationOpParams_default_instance_;
    new (ptr) ::domi::ActivationOpParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::ActivationOpParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivationOpParams_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActivationOpParams_om_2eproto}, {}};

static void InitDefaultsscc_info_AddLimitedOpParams_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_AddLimitedOpParams_default_instance_;
    new (ptr) ::domi::AddLimitedOpParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::AddLimitedOpParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddLimitedOpParams_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddLimitedOpParams_om_2eproto}, {
      &scc_info_WeightDef_om_2eproto.base,}};

static void InitDefaultsscc_info_AddOpParams_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_AddOpParams_default_instance_;
    new (ptr) ::domi::AddOpParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::AddOpParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddOpParams_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddOpParams_om_2eproto}, {
      &scc_info_WeightDef_om_2eproto.base,}};

static void InitDefaultsscc_info_AllOffsetQuantizeInfo_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_AllOffsetQuantizeInfo_default_instance_;
    new (ptr) ::domi::AllOffsetQuantizeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::AllOffsetQuantizeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AllOffsetQuantizeInfo_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AllOffsetQuantizeInfo_om_2eproto}, {}};

static void InitDefaultsscc_info_AttrDef_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_AttrDef_default_instance_;
    new (ptr) ::domi::AttrDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::domi::_NamedAttrs_AttrEntry_DoNotUse_default_instance_;
    new (ptr) ::domi::NamedAttrs_AttrEntry_DoNotUse();
  }
  {
    void* ptr = &::domi::_NamedAttrs_default_instance_;
    new (ptr) ::domi::NamedAttrs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::AttrDef::InitAsDefaultInstance();
  ::domi::NamedAttrs_AttrEntry_DoNotUse::InitAsDefaultInstance();
  ::domi::NamedAttrs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AttrDef_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AttrDef_om_2eproto}, {
      &scc_info_AttrDef_ListValue_om_2eproto.base,}};

static void InitDefaultsscc_info_AttrDef_ListValue_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_AttrDef_ListValue_default_instance_;
    new (ptr) ::domi::AttrDef_ListValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::AttrDef_ListValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AttrDef_ListValue_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AttrDef_ListValue_om_2eproto}, {}};

static void InitDefaultsscc_info_BatchNormOpParams_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_BatchNormOpParams_default_instance_;
    new (ptr) ::domi::BatchNormOpParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::BatchNormOpParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BatchNormOpParams_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BatchNormOpParams_om_2eproto}, {
      &scc_info_WeightDef_om_2eproto.base,}};

static void InitDefaultsscc_info_BiasAddOpParams_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_BiasAddOpParams_default_instance_;
    new (ptr) ::domi::BiasAddOpParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::BiasAddOpParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BiasAddOpParams_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BiasAddOpParams_om_2eproto}, {
      &scc_info_WeightDef_om_2eproto.base,}};

static void InitDefaultsscc_info_CompressInfo_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_CompressInfo_default_instance_;
    new (ptr) ::domi::CompressInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::CompressInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompressInfo_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CompressInfo_om_2eproto}, {}};

static void InitDefaultsscc_info_ConvolutionOpParams_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_ConvolutionOpParams_default_instance_;
    new (ptr) ::domi::ConvolutionOpParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::ConvolutionOpParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConvolutionOpParams_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ConvolutionOpParams_om_2eproto}, {
      &scc_info_WeightDef_om_2eproto.base,}};

static void InitDefaultsscc_info_EltwiseOpParams_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_EltwiseOpParams_default_instance_;
    new (ptr) ::domi::EltwiseOpParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::EltwiseOpParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EltwiseOpParams_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EltwiseOpParams_om_2eproto}, {
      &scc_info_WeightDef_om_2eproto.base,}};

static void InitDefaultsscc_info_FlattenOpParams_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_FlattenOpParams_default_instance_;
    new (ptr) ::domi::FlattenOpParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::FlattenOpParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlattenOpParams_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FlattenOpParams_om_2eproto}, {}};

static void InitDefaultsscc_info_FullConnectionOpParams_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_FullConnectionOpParams_default_instance_;
    new (ptr) ::domi::FullConnectionOpParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::FullConnectionOpParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FullConnectionOpParams_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FullConnectionOpParams_om_2eproto}, {
      &scc_info_WeightDef_om_2eproto.base,}};

static void InitDefaultsscc_info_MatMulOpParams_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_MatMulOpParams_default_instance_;
    new (ptr) ::domi::MatMulOpParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::MatMulOpParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MatMulOpParams_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MatMulOpParams_om_2eproto}, {
      &scc_info_WeightDef_om_2eproto.base,}};

static void InitDefaultsscc_info_ModelDef_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_ModelDef_default_instance_;
    new (ptr) ::domi::ModelDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::ModelDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ModelDef_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ModelDef_om_2eproto}, {
      &scc_info_OpDef_om_2eproto.base,
      &scc_info_ModelDef_AttrEntry_DoNotUse_om_2eproto.base,}};

static void InitDefaultsscc_info_ModelDef_AttrEntry_DoNotUse_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_ModelDef_AttrEntry_DoNotUse_default_instance_;
    new (ptr) ::domi::ModelDef_AttrEntry_DoNotUse();
  }
  ::domi::ModelDef_AttrEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelDef_AttrEntry_DoNotUse_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModelDef_AttrEntry_DoNotUse_om_2eproto}, {
      &scc_info_AttrDef_om_2eproto.base,}};

static void InitDefaultsscc_info_MulLimitedOpParams_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_MulLimitedOpParams_default_instance_;
    new (ptr) ::domi::MulLimitedOpParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::MulLimitedOpParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MulLimitedOpParams_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MulLimitedOpParams_om_2eproto}, {
      &scc_info_WeightDef_om_2eproto.base,}};

static void InitDefaultsscc_info_MulOpParams_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_MulOpParams_default_instance_;
    new (ptr) ::domi::MulOpParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::MulOpParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MulOpParams_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MulOpParams_om_2eproto}, {
      &scc_info_WeightDef_om_2eproto.base,}};

static void InitDefaultsscc_info_OpDef_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_OpDef_default_instance_;
    new (ptr) ::domi::OpDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::OpDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<15> scc_info_OpDef_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 15, 0, InitDefaultsscc_info_OpDef_om_2eproto}, {
      &scc_info_TensorDescriptor_om_2eproto.base,
      &scc_info_WeightDef_om_2eproto.base,
      &scc_info_OpDef_AttrEntry_DoNotUse_om_2eproto.base,
      &scc_info_QuantizeFactorParams_om_2eproto.base,
      &scc_info_SendOpParams_om_2eproto.base,
      &scc_info_RecvOpParams_om_2eproto.base,
      &scc_info_ConvolutionOpParams_om_2eproto.base,
      &scc_info_PoolingOpParams_om_2eproto.base,
      &scc_info_EltwiseOpParams_om_2eproto.base,
      &scc_info_BatchNormOpParams_om_2eproto.base,
      &scc_info_ScaleOpParams_om_2eproto.base,
      &scc_info_FullConnectionOpParams_om_2eproto.base,
      &scc_info_SoftmaxOpParams_om_2eproto.base,
      &scc_info_ActivationOpParams_om_2eproto.base,
      &scc_info_ReshapeOpParams_om_2eproto.base,}};

static void InitDefaultsscc_info_OpDef_AttrEntry_DoNotUse_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_OpDef_AttrEntry_DoNotUse_default_instance_;
    new (ptr) ::domi::OpDef_AttrEntry_DoNotUse();
  }
  ::domi::OpDef_AttrEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpDef_AttrEntry_DoNotUse_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OpDef_AttrEntry_DoNotUse_om_2eproto}, {
      &scc_info_AttrDef_om_2eproto.base,}};

static void InitDefaultsscc_info_PoolingOpParams_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_PoolingOpParams_default_instance_;
    new (ptr) ::domi::PoolingOpParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::PoolingOpParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PoolingOpParams_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PoolingOpParams_om_2eproto}, {}};

static void InitDefaultsscc_info_QuantizeCalcFactor_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_QuantizeCalcFactor_default_instance_;
    new (ptr) ::domi::QuantizeCalcFactor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::QuantizeCalcFactor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuantizeCalcFactor_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QuantizeCalcFactor_om_2eproto}, {}};

static void InitDefaultsscc_info_QuantizeFactor_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_QuantizeFactor_default_instance_;
    new (ptr) ::domi::QuantizeFactor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::QuantizeFactor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuantizeFactor_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QuantizeFactor_om_2eproto}, {}};

static void InitDefaultsscc_info_QuantizeFactorParams_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_QuantizeFactorParams_default_instance_;
    new (ptr) ::domi::QuantizeFactorParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::QuantizeFactorParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_QuantizeFactorParams_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_QuantizeFactorParams_om_2eproto}, {
      &scc_info_QuantizeFactor_om_2eproto.base,
      &scc_info_QuantizeCalcFactor_om_2eproto.base,}};

static void InitDefaultsscc_info_RecvOpParams_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_RecvOpParams_default_instance_;
    new (ptr) ::domi::RecvOpParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::RecvOpParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecvOpParams_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RecvOpParams_om_2eproto}, {}};

static void InitDefaultsscc_info_ReshapeOpParams_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_ReshapeOpParams_default_instance_;
    new (ptr) ::domi::ReshapeOpParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::ReshapeOpParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReshapeOpParams_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReshapeOpParams_om_2eproto}, {
      &scc_info_ShapeDef_om_2eproto.base,}};

static void InitDefaultsscc_info_RsqrtOpParams_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_RsqrtOpParams_default_instance_;
    new (ptr) ::domi::RsqrtOpParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::RsqrtOpParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RsqrtOpParams_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RsqrtOpParams_om_2eproto}, {}};

static void InitDefaultsscc_info_ScaleOpParams_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_ScaleOpParams_default_instance_;
    new (ptr) ::domi::ScaleOpParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::ScaleOpParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScaleOpParams_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScaleOpParams_om_2eproto}, {
      &scc_info_WeightDef_om_2eproto.base,}};

static void InitDefaultsscc_info_SendOpParams_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_SendOpParams_default_instance_;
    new (ptr) ::domi::SendOpParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::SendOpParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendOpParams_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SendOpParams_om_2eproto}, {}};

static void InitDefaultsscc_info_ShapeDef_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_ShapeDef_default_instance_;
    new (ptr) ::domi::ShapeDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::ShapeDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShapeDef_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShapeDef_om_2eproto}, {}};

static void InitDefaultsscc_info_SoftmaxOpParams_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_SoftmaxOpParams_default_instance_;
    new (ptr) ::domi::SoftmaxOpParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::SoftmaxOpParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SoftmaxOpParams_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SoftmaxOpParams_om_2eproto}, {}};

static void InitDefaultsscc_info_SubOpParams_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_SubOpParams_default_instance_;
    new (ptr) ::domi::SubOpParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::SubOpParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubOpParams_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubOpParams_om_2eproto}, {
      &scc_info_WeightDef_om_2eproto.base,}};

static void InitDefaultsscc_info_TensorDescriptor_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_TensorDescriptor_default_instance_;
    new (ptr) ::domi::TensorDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::TensorDescriptor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TensorDescriptor_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TensorDescriptor_om_2eproto}, {
      &scc_info_AllOffsetQuantizeInfo_om_2eproto.base,}};

static void InitDefaultsscc_info_WeightDef_om_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_WeightDef_default_instance_;
    new (ptr) ::domi::WeightDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::WeightDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_WeightDef_om_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_WeightDef_om_2eproto}, {
      &scc_info_ShapeDef_om_2eproto.base,
      &scc_info_CompressInfo_om_2eproto.base,
      &scc_info_AllOffsetQuantizeInfo_om_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_om_2eproto[36];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_om_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_om_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_om_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::domi::ModelDef_AttrEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::domi::ModelDef_AttrEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::ModelDef_AttrEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::domi::ModelDef_AttrEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::ModelDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::ModelDef, name_),
  PROTOBUF_FIELD_OFFSET(::domi::ModelDef, version_),
  PROTOBUF_FIELD_OFFSET(::domi::ModelDef, memory_size_),
  PROTOBUF_FIELD_OFFSET(::domi::ModelDef, stream_num_),
  PROTOBUF_FIELD_OFFSET(::domi::ModelDef, event_num_),
  PROTOBUF_FIELD_OFFSET(::domi::ModelDef, weight_size_),
  PROTOBUF_FIELD_OFFSET(::domi::ModelDef, label_num_),
  PROTOBUF_FIELD_OFFSET(::domi::ModelDef, op_),
  PROTOBUF_FIELD_OFFSET(::domi::ModelDef, target_type_),
  PROTOBUF_FIELD_OFFSET(::domi::ModelDef, attr_),
  PROTOBUF_FIELD_OFFSET(::domi::OpDef_AttrEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::domi::OpDef_AttrEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::OpDef_AttrEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::domi::OpDef_AttrEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::OpDef, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::domi::OpDef, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::OpDef, name_),
  PROTOBUF_FIELD_OFFSET(::domi::OpDef, type_),
  PROTOBUF_FIELD_OFFSET(::domi::OpDef, id_),
  PROTOBUF_FIELD_OFFSET(::domi::OpDef, stream_id_),
  PROTOBUF_FIELD_OFFSET(::domi::OpDef, input_name_),
  PROTOBUF_FIELD_OFFSET(::domi::OpDef, src_name_),
  PROTOBUF_FIELD_OFFSET(::domi::OpDef, src_index_),
  PROTOBUF_FIELD_OFFSET(::domi::OpDef, input_),
  PROTOBUF_FIELD_OFFSET(::domi::OpDef, output_),
  PROTOBUF_FIELD_OFFSET(::domi::OpDef, input_desc_),
  PROTOBUF_FIELD_OFFSET(::domi::OpDef, output_desc_),
  PROTOBUF_FIELD_OFFSET(::domi::OpDef, weights_),
  PROTOBUF_FIELD_OFFSET(::domi::OpDef, dst_name_),
  PROTOBUF_FIELD_OFFSET(::domi::OpDef, dst_index_),
  PROTOBUF_FIELD_OFFSET(::domi::OpDef, workspace_),
  PROTOBUF_FIELD_OFFSET(::domi::OpDef, workspace_bytes_),
  PROTOBUF_FIELD_OFFSET(::domi::OpDef, weight_name_),
  PROTOBUF_FIELD_OFFSET(::domi::OpDef, is_input_const_),
  PROTOBUF_FIELD_OFFSET(::domi::OpDef, attr_),
  PROTOBUF_FIELD_OFFSET(::domi::OpDef, quantize_factor_),
  offsetof(::domi::OpDefDefaultTypeInternal, sender_param_),
  offsetof(::domi::OpDefDefaultTypeInternal, receiver_param_),
  offsetof(::domi::OpDefDefaultTypeInternal, convolution_param_),
  offsetof(::domi::OpDefDefaultTypeInternal, pooling_param_),
  offsetof(::domi::OpDefDefaultTypeInternal, eltwise_param_),
  offsetof(::domi::OpDefDefaultTypeInternal, batchnorm_param_),
  offsetof(::domi::OpDefDefaultTypeInternal, scale_param_),
  offsetof(::domi::OpDefDefaultTypeInternal, full_connection_param_),
  offsetof(::domi::OpDefDefaultTypeInternal, softmax_param_),
  offsetof(::domi::OpDefDefaultTypeInternal, activation_param_),
  offsetof(::domi::OpDefDefaultTypeInternal, reshape_param_),
  PROTOBUF_FIELD_OFFSET(::domi::OpDef, op_params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::SendOpParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::SendOpParams, event_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::RecvOpParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::RecvOpParams, event_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::QuantizeFactor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::QuantizeFactor, scale_mode_),
  PROTOBUF_FIELD_OFFSET(::domi::QuantizeFactor, scale_value_),
  PROTOBUF_FIELD_OFFSET(::domi::QuantizeFactor, scale_offset_),
  PROTOBUF_FIELD_OFFSET(::domi::QuantizeFactor, offset_data_value_),
  PROTOBUF_FIELD_OFFSET(::domi::QuantizeFactor, offset_data_offset_),
  PROTOBUF_FIELD_OFFSET(::domi::QuantizeFactor, offset_weight_value_),
  PROTOBUF_FIELD_OFFSET(::domi::QuantizeFactor, offset_weight_offset_),
  PROTOBUF_FIELD_OFFSET(::domi::QuantizeFactor, offset_pad_value_),
  PROTOBUF_FIELD_OFFSET(::domi::QuantizeFactor, offset_pad_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::QuantizeCalcFactor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::QuantizeCalcFactor, offsetw_),
  PROTOBUF_FIELD_OFFSET(::domi::QuantizeCalcFactor, offsetw_offset_),
  PROTOBUF_FIELD_OFFSET(::domi::QuantizeCalcFactor, offsetd_),
  PROTOBUF_FIELD_OFFSET(::domi::QuantizeCalcFactor, offsetd_offset_),
  PROTOBUF_FIELD_OFFSET(::domi::QuantizeCalcFactor, scalereq_),
  PROTOBUF_FIELD_OFFSET(::domi::QuantizeCalcFactor, scaledreq_offset_),
  PROTOBUF_FIELD_OFFSET(::domi::QuantizeCalcFactor, offsetdnext_),
  PROTOBUF_FIELD_OFFSET(::domi::QuantizeCalcFactor, offsetdnext_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::QuantizeFactorParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::QuantizeFactorParams, quantize_algo_),
  PROTOBUF_FIELD_OFFSET(::domi::QuantizeFactorParams, scale_type_),
  PROTOBUF_FIELD_OFFSET(::domi::QuantizeFactorParams, quantize_param_),
  PROTOBUF_FIELD_OFFSET(::domi::QuantizeFactorParams, dequantize_param_),
  PROTOBUF_FIELD_OFFSET(::domi::QuantizeFactorParams, requantize_param_),
  PROTOBUF_FIELD_OFFSET(::domi::QuantizeFactorParams, quantizecalc_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::ConvolutionOpParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::ConvolutionOpParams, mode_),
  PROTOBUF_FIELD_OFFSET(::domi::ConvolutionOpParams, algo_),
  PROTOBUF_FIELD_OFFSET(::domi::ConvolutionOpParams, pad_mode_),
  PROTOBUF_FIELD_OFFSET(::domi::ConvolutionOpParams, group_),
  PROTOBUF_FIELD_OFFSET(::domi::ConvolutionOpParams, num_output_),
  PROTOBUF_FIELD_OFFSET(::domi::ConvolutionOpParams, pad_),
  PROTOBUF_FIELD_OFFSET(::domi::ConvolutionOpParams, stride_),
  PROTOBUF_FIELD_OFFSET(::domi::ConvolutionOpParams, dilation_),
  PROTOBUF_FIELD_OFFSET(::domi::ConvolutionOpParams, kernel_),
  PROTOBUF_FIELD_OFFSET(::domi::ConvolutionOpParams, alpha_),
  PROTOBUF_FIELD_OFFSET(::domi::ConvolutionOpParams, beta_),
  PROTOBUF_FIELD_OFFSET(::domi::ConvolutionOpParams, filter_),
  PROTOBUF_FIELD_OFFSET(::domi::ConvolutionOpParams, bias_),
  PROTOBUF_FIELD_OFFSET(::domi::ConvolutionOpParams, relu_flag_),
  PROTOBUF_FIELD_OFFSET(::domi::ConvolutionOpParams, adj_),
  PROTOBUF_FIELD_OFFSET(::domi::ConvolutionOpParams, target_shape_),
  PROTOBUF_FIELD_OFFSET(::domi::ConvolutionOpParams, before_pad_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::PoolingOpParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::PoolingOpParams, mode_),
  PROTOBUF_FIELD_OFFSET(::domi::PoolingOpParams, nan_opt_),
  PROTOBUF_FIELD_OFFSET(::domi::PoolingOpParams, pad_mode_),
  PROTOBUF_FIELD_OFFSET(::domi::PoolingOpParams, global_pooling_),
  PROTOBUF_FIELD_OFFSET(::domi::PoolingOpParams, window_),
  PROTOBUF_FIELD_OFFSET(::domi::PoolingOpParams, pad_),
  PROTOBUF_FIELD_OFFSET(::domi::PoolingOpParams, stride_),
  PROTOBUF_FIELD_OFFSET(::domi::PoolingOpParams, ceil_mode_),
  PROTOBUF_FIELD_OFFSET(::domi::PoolingOpParams, data_mode_),
  PROTOBUF_FIELD_OFFSET(::domi::PoolingOpParams, alpha_),
  PROTOBUF_FIELD_OFFSET(::domi::PoolingOpParams, beta_),
  PROTOBUF_FIELD_OFFSET(::domi::PoolingOpParams, before_pad_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::EltwiseOpParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::EltwiseOpParams, mode_),
  PROTOBUF_FIELD_OFFSET(::domi::EltwiseOpParams, coeff_),
  PROTOBUF_FIELD_OFFSET(::domi::EltwiseOpParams, alpha_),
  PROTOBUF_FIELD_OFFSET(::domi::EltwiseOpParams, beta_),
  PROTOBUF_FIELD_OFFSET(::domi::EltwiseOpParams, weight_),
  PROTOBUF_FIELD_OFFSET(::domi::EltwiseOpParams, relu_flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::ActivationOpParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::ActivationOpParams, mode_),
  PROTOBUF_FIELD_OFFSET(::domi::ActivationOpParams, coef_),
  PROTOBUF_FIELD_OFFSET(::domi::ActivationOpParams, alpha_),
  PROTOBUF_FIELD_OFFSET(::domi::ActivationOpParams, beta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::BatchNormOpParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::BatchNormOpParams, mode_),
  PROTOBUF_FIELD_OFFSET(::domi::BatchNormOpParams, alpha_),
  PROTOBUF_FIELD_OFFSET(::domi::BatchNormOpParams, beta_),
  PROTOBUF_FIELD_OFFSET(::domi::BatchNormOpParams, epsilon_),
  PROTOBUF_FIELD_OFFSET(::domi::BatchNormOpParams, use_global_stats_),
  PROTOBUF_FIELD_OFFSET(::domi::BatchNormOpParams, moving_average_fraction_),
  PROTOBUF_FIELD_OFFSET(::domi::BatchNormOpParams, estimated_mean_),
  PROTOBUF_FIELD_OFFSET(::domi::BatchNormOpParams, estimated_variance_),
  PROTOBUF_FIELD_OFFSET(::domi::BatchNormOpParams, scale_),
  PROTOBUF_FIELD_OFFSET(::domi::BatchNormOpParams, bias_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::ScaleOpParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::ScaleOpParams, scale_),
  PROTOBUF_FIELD_OFFSET(::domi::ScaleOpParams, bias_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::ReshapeOpParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::ReshapeOpParams, alpha_),
  PROTOBUF_FIELD_OFFSET(::domi::ReshapeOpParams, beta_),
  PROTOBUF_FIELD_OFFSET(::domi::ReshapeOpParams, shape_),
  PROTOBUF_FIELD_OFFSET(::domi::ReshapeOpParams, axis_),
  PROTOBUF_FIELD_OFFSET(::domi::ReshapeOpParams, num_axes_),
  PROTOBUF_FIELD_OFFSET(::domi::ReshapeOpParams, format_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::SoftmaxOpParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::SoftmaxOpParams, algo_),
  PROTOBUF_FIELD_OFFSET(::domi::SoftmaxOpParams, mode_),
  PROTOBUF_FIELD_OFFSET(::domi::SoftmaxOpParams, alpha_),
  PROTOBUF_FIELD_OFFSET(::domi::SoftmaxOpParams, beta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::FullConnectionOpParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::FullConnectionOpParams, filter_),
  PROTOBUF_FIELD_OFFSET(::domi::FullConnectionOpParams, bias_),
  PROTOBUF_FIELD_OFFSET(::domi::FullConnectionOpParams, num_output_),
  PROTOBUF_FIELD_OFFSET(::domi::FullConnectionOpParams, relu_flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::FlattenOpParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::FlattenOpParams, alpha_),
  PROTOBUF_FIELD_OFFSET(::domi::FlattenOpParams, beta_),
  PROTOBUF_FIELD_OFFSET(::domi::FlattenOpParams, start_axis_),
  PROTOBUF_FIELD_OFFSET(::domi::FlattenOpParams, end_axis_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::AddLimitedOpParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::AddLimitedOpParams, alpha_),
  PROTOBUF_FIELD_OFFSET(::domi::AddLimitedOpParams, beta_),
  PROTOBUF_FIELD_OFFSET(::domi::AddLimitedOpParams, axis_),
  PROTOBUF_FIELD_OFFSET(::domi::AddLimitedOpParams, broadcast_),
  PROTOBUF_FIELD_OFFSET(::domi::AddLimitedOpParams, weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::MulLimitedOpParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::MulLimitedOpParams, alpha_),
  PROTOBUF_FIELD_OFFSET(::domi::MulLimitedOpParams, beta_),
  PROTOBUF_FIELD_OFFSET(::domi::MulLimitedOpParams, axis_),
  PROTOBUF_FIELD_OFFSET(::domi::MulLimitedOpParams, broadcast_),
  PROTOBUF_FIELD_OFFSET(::domi::MulLimitedOpParams, weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::AddOpParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::AddOpParams, alpha_),
  PROTOBUF_FIELD_OFFSET(::domi::AddOpParams, beta_),
  PROTOBUF_FIELD_OFFSET(::domi::AddOpParams, weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::MulOpParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::MulOpParams, alpha_),
  PROTOBUF_FIELD_OFFSET(::domi::MulOpParams, beta_),
  PROTOBUF_FIELD_OFFSET(::domi::MulOpParams, weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::SubOpParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::SubOpParams, alpha_),
  PROTOBUF_FIELD_OFFSET(::domi::SubOpParams, beta_),
  PROTOBUF_FIELD_OFFSET(::domi::SubOpParams, weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::BiasAddOpParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::BiasAddOpParams, alpha_),
  PROTOBUF_FIELD_OFFSET(::domi::BiasAddOpParams, beta_),
  PROTOBUF_FIELD_OFFSET(::domi::BiasAddOpParams, bias_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::MatMulOpParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::MatMulOpParams, alpha_),
  PROTOBUF_FIELD_OFFSET(::domi::MatMulOpParams, beta_),
  PROTOBUF_FIELD_OFFSET(::domi::MatMulOpParams, transposex_),
  PROTOBUF_FIELD_OFFSET(::domi::MatMulOpParams, transposew_),
  PROTOBUF_FIELD_OFFSET(::domi::MatMulOpParams, filter_),
  PROTOBUF_FIELD_OFFSET(::domi::MatMulOpParams, bias_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::RsqrtOpParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::RsqrtOpParams, alpha_),
  PROTOBUF_FIELD_OFFSET(::domi::RsqrtOpParams, beta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::WeightDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::WeightDef, format_),
  PROTOBUF_FIELD_OFFSET(::domi::WeightDef, data_type_),
  PROTOBUF_FIELD_OFFSET(::domi::WeightDef, shape_),
  PROTOBUF_FIELD_OFFSET(::domi::WeightDef, data_),
  PROTOBUF_FIELD_OFFSET(::domi::WeightDef, data_offset_),
  PROTOBUF_FIELD_OFFSET(::domi::WeightDef, cmps_size_),
  PROTOBUF_FIELD_OFFSET(::domi::WeightDef, cmps_tab_),
  PROTOBUF_FIELD_OFFSET(::domi::WeightDef, cmps_tab_offset_),
  PROTOBUF_FIELD_OFFSET(::domi::WeightDef, cmps_info_),
  PROTOBUF_FIELD_OFFSET(::domi::WeightDef, alloffset_quantize_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::ShapeDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::ShapeDef, dim_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::AllOffsetQuantizeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::AllOffsetQuantizeInfo, scale_),
  PROTOBUF_FIELD_OFFSET(::domi::AllOffsetQuantizeInfo, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::TensorDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::TensorDescriptor, format_),
  PROTOBUF_FIELD_OFFSET(::domi::TensorDescriptor, data_type_),
  PROTOBUF_FIELD_OFFSET(::domi::TensorDescriptor, dim_),
  PROTOBUF_FIELD_OFFSET(::domi::TensorDescriptor, size_),
  PROTOBUF_FIELD_OFFSET(::domi::TensorDescriptor, reuse_input_),
  PROTOBUF_FIELD_OFFSET(::domi::TensorDescriptor, output_tensor_),
  PROTOBUF_FIELD_OFFSET(::domi::TensorDescriptor, device_type_),
  PROTOBUF_FIELD_OFFSET(::domi::TensorDescriptor, input_tensor_),
  PROTOBUF_FIELD_OFFSET(::domi::TensorDescriptor, real_dim_cnt_),
  PROTOBUF_FIELD_OFFSET(::domi::TensorDescriptor, reuse_input_index_),
  PROTOBUF_FIELD_OFFSET(::domi::TensorDescriptor, alloffset_quantize_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::CompressInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::CompressInfo, blockrow_),
  PROTOBUF_FIELD_OFFSET(::domi::CompressInfo, blockcol_),
  PROTOBUF_FIELD_OFFSET(::domi::CompressInfo, fractalk_),
  PROTOBUF_FIELD_OFFSET(::domi::CompressInfo, fractaln_),
  PROTOBUF_FIELD_OFFSET(::domi::CompressInfo, lastfractalk_),
  PROTOBUF_FIELD_OFFSET(::domi::CompressInfo, lastfractaln_),
  PROTOBUF_FIELD_OFFSET(::domi::CompressInfo, cubesize_),
  PROTOBUF_FIELD_OFFSET(::domi::CompressInfo, loaddir_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::AttrDef_ListValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::AttrDef_ListValue, s_),
  PROTOBUF_FIELD_OFFSET(::domi::AttrDef_ListValue, i_),
  PROTOBUF_FIELD_OFFSET(::domi::AttrDef_ListValue, f_),
  PROTOBUF_FIELD_OFFSET(::domi::AttrDef_ListValue, b_),
  PROTOBUF_FIELD_OFFSET(::domi::AttrDef_ListValue, u_),
  PROTOBUF_FIELD_OFFSET(::domi::AttrDef_ListValue, bt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::AttrDef, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::domi::AttrDef, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::domi::AttrDefDefaultTypeInternal, s_),
  offsetof(::domi::AttrDefDefaultTypeInternal, i_),
  offsetof(::domi::AttrDefDefaultTypeInternal, f_),
  offsetof(::domi::AttrDefDefaultTypeInternal, b_),
  offsetof(::domi::AttrDefDefaultTypeInternal, u_),
  offsetof(::domi::AttrDefDefaultTypeInternal, bt_),
  offsetof(::domi::AttrDefDefaultTypeInternal, list_),
  offsetof(::domi::AttrDefDefaultTypeInternal, func_),
  PROTOBUF_FIELD_OFFSET(::domi::AttrDef, value_),
  PROTOBUF_FIELD_OFFSET(::domi::NamedAttrs_AttrEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::domi::NamedAttrs_AttrEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::NamedAttrs_AttrEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::domi::NamedAttrs_AttrEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::NamedAttrs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::NamedAttrs, name_),
  PROTOBUF_FIELD_OFFSET(::domi::NamedAttrs, attr_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::domi::ModelDef_AttrEntry_DoNotUse)},
  { 9, -1, sizeof(::domi::ModelDef)},
  { 24, 31, sizeof(::domi::OpDef_AttrEntry_DoNotUse)},
  { 33, -1, sizeof(::domi::OpDef)},
  { 70, -1, sizeof(::domi::SendOpParams)},
  { 76, -1, sizeof(::domi::RecvOpParams)},
  { 82, -1, sizeof(::domi::QuantizeFactor)},
  { 96, -1, sizeof(::domi::QuantizeCalcFactor)},
  { 109, -1, sizeof(::domi::QuantizeFactorParams)},
  { 120, -1, sizeof(::domi::ConvolutionOpParams)},
  { 142, -1, sizeof(::domi::PoolingOpParams)},
  { 159, -1, sizeof(::domi::EltwiseOpParams)},
  { 170, -1, sizeof(::domi::ActivationOpParams)},
  { 179, -1, sizeof(::domi::BatchNormOpParams)},
  { 194, -1, sizeof(::domi::ScaleOpParams)},
  { 201, -1, sizeof(::domi::ReshapeOpParams)},
  { 212, -1, sizeof(::domi::SoftmaxOpParams)},
  { 221, -1, sizeof(::domi::FullConnectionOpParams)},
  { 230, -1, sizeof(::domi::FlattenOpParams)},
  { 239, -1, sizeof(::domi::AddLimitedOpParams)},
  { 249, -1, sizeof(::domi::MulLimitedOpParams)},
  { 259, -1, sizeof(::domi::AddOpParams)},
  { 267, -1, sizeof(::domi::MulOpParams)},
  { 275, -1, sizeof(::domi::SubOpParams)},
  { 283, -1, sizeof(::domi::BiasAddOpParams)},
  { 291, -1, sizeof(::domi::MatMulOpParams)},
  { 302, -1, sizeof(::domi::RsqrtOpParams)},
  { 309, -1, sizeof(::domi::WeightDef)},
  { 324, -1, sizeof(::domi::ShapeDef)},
  { 330, -1, sizeof(::domi::AllOffsetQuantizeInfo)},
  { 337, -1, sizeof(::domi::TensorDescriptor)},
  { 353, -1, sizeof(::domi::CompressInfo)},
  { 366, -1, sizeof(::domi::AttrDef_ListValue)},
  { 377, -1, sizeof(::domi::AttrDef)},
  { 391, 398, sizeof(::domi::NamedAttrs_AttrEntry_DoNotUse)},
  { 400, -1, sizeof(::domi::NamedAttrs)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_ModelDef_AttrEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_ModelDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_OpDef_AttrEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_OpDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_SendOpParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_RecvOpParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_QuantizeFactor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_QuantizeCalcFactor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_QuantizeFactorParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_ConvolutionOpParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_PoolingOpParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_EltwiseOpParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_ActivationOpParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_BatchNormOpParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_ScaleOpParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_ReshapeOpParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_SoftmaxOpParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_FullConnectionOpParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_FlattenOpParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_AddLimitedOpParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_MulLimitedOpParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_AddOpParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_MulOpParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_SubOpParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_BiasAddOpParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_MatMulOpParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_RsqrtOpParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_WeightDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_ShapeDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_AllOffsetQuantizeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_TensorDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_CompressInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_AttrDef_ListValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_AttrDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_NamedAttrs_AttrEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_NamedAttrs_default_instance_),
};

const char descriptor_table_protodef_om_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010om.proto\022\004domi\"\261\002\n\010ModelDef\022\014\n\004name\030\001 "
  "\001(\t\022\017\n\007version\030\002 \001(\r\022\023\n\013memory_size\030\n \001("
  "\004\022\022\n\nstream_num\030\013 \001(\r\022\021\n\tevent_num\030\014 \001(\r"
  "\022\023\n\013weight_size\030\r \001(\004\022\021\n\tlabel_num\030\017 \001(\r"
  "\022\027\n\002op\030\024 \003(\0132\013.domi.OpDef\022%\n\013target_type"
  "\030\027 \001(\0162\020.domi.TargetType\022&\n\004attr\030\036 \003(\0132\030"
  ".domi.ModelDef.AttrEntry\032:\n\tAttrEntry\022\013\n"
  "\003key\030\001 \001(\t\022\034\n\005value\030\002 \001(\0132\r.domi.AttrDef"
  ":\0028\001\"\347\010\n\005OpDef\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 \001"
  "(\t\022\n\n\002id\030\003 \001(\r\022\021\n\tstream_id\030\004 \001(\r\022\022\n\ninp"
  "ut_name\030\005 \003(\t\022\020\n\010src_name\030\010 \003(\t\022\021\n\tsrc_i"
  "ndex\030\t \003(\005\022\r\n\005input\030\n \003(\003\022\016\n\006output\030\013 \003("
  "\003\022*\n\ninput_desc\030\014 \003(\0132\026.domi.TensorDescr"
  "iptor\022+\n\013output_desc\030\r \003(\0132\026.domi.Tensor"
  "Descriptor\022 \n\007weights\030\016 \003(\0132\017.domi.Weigh"
  "tDef\022\020\n\010dst_name\030\017 \003(\t\022\021\n\tdst_index\030\020 \003("
  "\005\022\021\n\tworkspace\030\024 \003(\003\022\027\n\017workspace_bytes\030"
  "\025 \003(\r\022\023\n\013weight_name\030\026 \003(\t\022\026\n\016is_input_c"
  "onst\030\027 \003(\010\022#\n\004attr\030\036 \003(\0132\025.domi.OpDef.At"
  "trEntry\0223\n\017quantize_factor\030\037 \001(\0132\032.domi."
  "QuantizeFactorParams\022*\n\014sender_param\030d \001"
  "(\0132\022.domi.SendOpParamsH\000\022-\n\016receiver_par"
  "am\030\310\001 \001(\0132\022.domi.RecvOpParamsH\000\0227\n\021convo"
  "lution_param\030\254\002 \001(\0132\031.domi.ConvolutionOp"
  "ParamsH\000\022/\n\rpooling_param\030\220\003 \001(\0132\025.domi."
  "PoolingOpParamsH\000\022/\n\reltwise_param\030\364\003 \001("
  "\0132\025.domi.EltwiseOpParamsH\000\0223\n\017batchnorm_"
  "param\030\330\004 \001(\0132\027.domi.BatchNormOpParamsH\000\022"
  "+\n\013scale_param\030\274\005 \001(\0132\023.domi.ScaleOpPara"
  "msH\000\022>\n\025full_connection_param\030\240\006 \001(\0132\034.d"
  "omi.FullConnectionOpParamsH\000\022/\n\rsoftmax_"
  "param\030\204\007 \001(\0132\025.domi.SoftmaxOpParamsH\000\0225\n"
  "\020activation_param\030\350\007 \001(\0132\030.domi.Activati"
  "onOpParamsH\000\022/\n\rreshape_param\030\314\010 \001(\0132\025.d"
  "omi.ReshapeOpParamsH\000\032:\n\tAttrEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022\034\n\005value\030\002 \001(\0132\r.domi.AttrDef:\0028"
  "\001B\013\n\top_params\" \n\014SendOpParams\022\020\n\010event_"
  "id\030\001 \001(\r\" \n\014RecvOpParams\022\020\n\010event_id\030\001 \001"
  "(\r\"\217\002\n\016QuantizeFactor\022+\n\nscale_mode\030\001 \001("
  "\0162\027.domi.QuantizeScaleMode\022\023\n\013scale_valu"
  "e\030\002 \001(\014\022\024\n\014scale_offset\030\003 \001(\003\022\031\n\021offset_"
  "data_value\030\004 \001(\014\022\032\n\022offset_data_offset\030\005"
  " \001(\003\022\033\n\023offset_weight_value\030\006 \001(\014\022\034\n\024off"
  "set_weight_offset\030\007 \001(\003\022\030\n\020offset_pad_va"
  "lue\030\010 \001(\014\022\031\n\021offset_pad_offset\030\t \001(\003\"\303\001\n"
  "\022QuantizeCalcFactor\022\017\n\007offsetw\030\001 \001(\014\022\026\n\016"
  "offsetw_offset\030\002 \001(\003\022\017\n\007offsetd\030\003 \001(\014\022\026\n"
  "\016offsetd_offset\030\004 \001(\003\022\020\n\010scalereq\030\005 \001(\014\022"
  "\030\n\020scaledreq_offset\030\006 \001(\003\022\023\n\013offsetdnext"
  "\030\007 \001(\014\022\032\n\022offsetdnext_offset\030\010 \001(\003\"\267\002\n\024Q"
  "uantizeFactorParams\022.\n\rquantize_algo\030\001 \001"
  "(\0162\027.domi.QuantizeAlgorithm\022+\n\nscale_typ"
  "e\030\002 \001(\0162\027.domi.QuantizeScaleType\022,\n\016quan"
  "tize_param\030\003 \001(\0132\024.domi.QuantizeFactor\022."
  "\n\020dequantize_param\030\004 \001(\0132\024.domi.Quantize"
  "Factor\022.\n\020requantize_param\030\005 \001(\0132\024.domi."
  "QuantizeFactor\0224\n\022quantizecalc_param\030\006 \001"
  "(\0132\030.domi.QuantizeCalcFactor\"\314\002\n\023Convolu"
  "tionOpParams\022\014\n\004mode\030\001 \001(\005\022\014\n\004algo\030\002 \001(\005"
  "\022\020\n\010pad_mode\030\003 \001(\005\022\r\n\005group\030\004 \001(\r\022\022\n\nnum"
  "_output\030\005 \001(\r\022\013\n\003pad\030\n \003(\r\022\016\n\006stride\030\013 \003"
  "(\r\022\020\n\010dilation\030\014 \003(\r\022\016\n\006kernel\030\r \003(\r\022\r\n\005"
  "alpha\030\024 \001(\002\022\014\n\004beta\030\025 \001(\002\022\037\n\006filter\030( \001("
  "\0132\017.domi.WeightDef\022\035\n\004bias\030) \001(\0132\017.domi."
  "WeightDef\022\021\n\trelu_flag\030> \001(\010\022\013\n\003adj\030F \003("
  "\r\022\024\n\014target_shape\030G \003(\r\022\022\n\nbefore_pad\030H "
  "\003(\r\"\336\001\n\017PoolingOpParams\022\014\n\004mode\030\001 \001(\005\022\017\n"
  "\007nan_opt\030\002 \001(\005\022\020\n\010pad_mode\030\003 \001(\005\022\026\n\016glob"
  "al_pooling\030\004 \001(\010\022\016\n\006window\030\n \003(\r\022\013\n\003pad\030"
  "\013 \003(\r\022\016\n\006stride\030\014 \003(\r\022\021\n\tceil_mode\030\r \001(\010"
  "\022\021\n\tdata_mode\030\016 \001(\005\022\r\n\005alpha\030\024 \001(\002\022\014\n\004be"
  "ta\030\025 \001(\002\022\022\n\nbefore_pad\030\026 \003(\r\"\177\n\017EltwiseO"
  "pParams\022\014\n\004mode\030\001 \001(\005\022\r\n\005coeff\030\002 \003(\002\022\r\n\005"
  "alpha\030\003 \001(\002\022\014\n\004beta\030\004 \001(\002\022\037\n\006weight\030\005 \003("
  "\0132\017.domi.WeightDef\022\021\n\trelu_flag\030\006 \001(\010\"M\n"
  "\022ActivationOpParams\022\014\n\004mode\030\001 \001(\005\022\014\n\004coe"
  "f\030\002 \001(\002\022\r\n\005alpha\030\003 \001(\002\022\014\n\004beta\030\004 \001(\002\"\237\002\n"
  "\021BatchNormOpParams\022\014\n\004mode\030\001 \001(\005\022\r\n\005alph"
  "a\030\002 \001(\002\022\014\n\004beta\030\003 \001(\002\022\017\n\007epsilon\030\004 \001(\001\022\030"
  "\n\020use_global_stats\030\005 \001(\010\022\037\n\027moving_avera"
  "ge_fraction\030\006 \001(\002\022\'\n\016estimated_mean\030\007 \001("
  "\0132\017.domi.WeightDef\022+\n\022estimated_variance"
  "\030\010 \001(\0132\017.domi.WeightDef\022\036\n\005scale\030\t \001(\0132\017"
  ".domi.WeightDef\022\035\n\004bias\030\n \001(\0132\017.domi.Wei"
  "ghtDef\"N\n\rScaleOpParams\022\036\n\005scale\030\001 \001(\0132\017"
  ".domi.WeightDef\022\035\n\004bias\030\002 \001(\0132\017.domi.Wei"
  "ghtDef\"}\n\017ReshapeOpParams\022\r\n\005alpha\030\001 \001(\002"
  "\022\014\n\004beta\030\002 \001(\002\022\035\n\005shape\030\003 \001(\0132\016.domi.Sha"
  "peDef\022\014\n\004axis\030\004 \001(\005\022\020\n\010num_axes\030\005 \001(\005\022\016\n"
  "\006format\030\006 \001(\005\"J\n\017SoftmaxOpParams\022\014\n\004algo"
  "\030\001 \001(\005\022\014\n\004mode\030\002 \001(\005\022\r\n\005alpha\030\003 \001(\002\022\014\n\004b"
  "eta\030\004 \001(\002\"\177\n\026FullConnectionOpParams\022\037\n\006f"
  "ilter\030\001 \001(\0132\017.domi.WeightDef\022\035\n\004bias\030\002 \001"
  "(\0132\017.domi.WeightDef\022\022\n\nnum_output\030\003 \001(\r\022"
  "\021\n\trelu_flag\030\014 \001(\010\"T\n\017FlattenOpParams\022\r\n"
  "\005alpha\030\001 \001(\002\022\014\n\004beta\030\002 \001(\002\022\022\n\nstart_axis"
  "\030\003 \001(\005\022\020\n\010end_axis\030\004 \001(\005\"s\n\022AddLimitedOp"
  "Params\022\r\n\005alpha\030\001 \001(\002\022\014\n\004beta\030\002 \001(\002\022\014\n\004a"
  "xis\030\003 \001(\005\022\021\n\tbroadcast\030\004 \001(\010\022\037\n\006weight\030\n"
  " \003(\0132\017.domi.WeightDef\"s\n\022MulLimitedOpPar"
  "ams\022\r\n\005alpha\030\001 \001(\002\022\014\n\004beta\030\002 \001(\002\022\014\n\004axis"
  "\030\003 \001(\005\022\021\n\tbroadcast\030\004 \001(\010\022\037\n\006weight\030\n \003("
  "\0132\017.domi.WeightDef\"K\n\013AddOpParams\022\r\n\005alp"
  "ha\030\001 \001(\002\022\014\n\004beta\030\002 \001(\002\022\037\n\006weight\030\n \003(\0132\017"
  ".domi.WeightDef\"K\n\013MulOpParams\022\r\n\005alpha\030"
  "\001 \001(\002\022\014\n\004beta\030\002 \001(\002\022\037\n\006weight\030\n \003(\0132\017.do"
  "mi.WeightDef\"K\n\013SubOpParams\022\r\n\005alpha\030\001 \001"
  "(\002\022\014\n\004beta\030\002 \001(\002\022\037\n\006weight\030\n \003(\0132\017.domi."
  "WeightDef\"M\n\017BiasAddOpParams\022\r\n\005alpha\030\001 "
  "\001(\002\022\014\n\004beta\030\002 \001(\002\022\035\n\004bias\030\n \001(\0132\017.domi.W"
  "eightDef\"\225\001\n\016MatMulOpParams\022\r\n\005alpha\030\001 \001"
  "(\002\022\014\n\004beta\030\002 \001(\002\022\022\n\ntransposeX\030\003 \001(\010\022\022\n\n"
  "transposeW\030\004 \001(\010\022\037\n\006filter\030\n \001(\0132\017.domi."
  "WeightDef\022\035\n\004bias\030\014 \001(\0132\017.domi.WeightDef"
  "\",\n\rRsqrtOpParams\022\r\n\005alpha\030\001 \001(\002\022\014\n\004beta"
  "\030\002 \001(\002\"\223\002\n\tWeightDef\022\016\n\006format\030\001 \001(\005\022\021\n\t"
  "data_type\030\002 \001(\005\022\035\n\005shape\030\003 \001(\0132\016.domi.Sh"
  "apeDef\022\014\n\004data\030\004 \001(\014\022\023\n\013data_offset\030\005 \001("
  "\003\022\021\n\tcmps_size\030\006 \001(\r\022\020\n\010cmps_tab\030\007 \001(\014\022\027"
  "\n\017cmps_tab_offset\030\n \001(\003\022%\n\tcmps_info\030\010 \001"
  "(\0132\022.domi.CompressInfo\022<\n\027alloffset_quan"
  "tize_info\030\013 \001(\0132\033.domi.AllOffsetQuantize"
  "Info\"\027\n\010ShapeDef\022\013\n\003dim\030\001 \003(\003\"6\n\025AllOffs"
  "etQuantizeInfo\022\r\n\005scale\030\001 \001(\002\022\016\n\006offset\030"
  "\002 \001(\005\"\250\002\n\020TensorDescriptor\022\016\n\006format\030\001 \001"
  "(\005\022\021\n\tdata_type\030\002 \001(\005\022\013\n\003dim\030\003 \003(\003\022\014\n\004si"
  "ze\030\004 \001(\r\022\023\n\013reuse_input\030\005 \001(\010\022\025\n\routput_"
  "tensor\030\007 \001(\010\022%\n\013device_type\030\010 \001(\0162\020.domi"
  ".DeviceType\022\024\n\014input_tensor\030\t \001(\010\022\024\n\014rea"
  "l_dim_cnt\030\n \001(\r\022\031\n\021reuse_input_index\030\013 \001"
  "(\r\022<\n\027alloffset_quantize_info\030\014 \001(\0132\033.do"
  "mi.AllOffsetQuantizeInfo\"\245\001\n\014CompressInf"
  "o\022\020\n\010blockRow\030\001 \001(\005\022\020\n\010blockCol\030\002 \001(\005\022\020\n"
  "\010fractalK\030\003 \001(\005\022\020\n\010fractalN\030\004 \001(\005\022\024\n\014las"
  "tFractalK\030\005 \001(\005\022\024\n\014lastFractalN\030\006 \001(\005\022\020\n"
  "\010cubeSize\030\007 \001(\005\022\017\n\007loadDir\030\010 \001(\005\"\214\002\n\007Att"
  "rDef\022\013\n\001s\030\002 \001(\tH\000\022\013\n\001i\030\003 \001(\003H\000\022\013\n\001f\030\004 \001("
  "\002H\000\022\013\n\001b\030\005 \001(\010H\000\022\013\n\001u\030\006 \001(\rH\000\022\014\n\002bt\030\007 \001("
  "\014H\000\022\'\n\004list\030\001 \001(\0132\027.domi.AttrDef.ListVal"
  "ueH\000\022 \n\004func\030\n \001(\0132\020.domi.NamedAttrsH\000\032^"
  "\n\tListValue\022\t\n\001s\030\002 \003(\t\022\r\n\001i\030\003 \003(\003B\002\020\001\022\r\n"
  "\001f\030\004 \003(\002B\002\020\001\022\r\n\001b\030\005 \003(\010B\002\020\001\022\r\n\001u\030\006 \003(\rB\002"
  "\020\001\022\n\n\002bt\030\007 \003(\014B\007\n\005value\"\200\001\n\nNamedAttrs\022\014"
  "\n\004name\030\001 \001(\t\022(\n\004attr\030\002 \003(\0132\032.domi.NamedA"
  "ttrs.AttrEntry\032:\n\tAttrEntry\022\013\n\003key\030\001 \001(\t"
  "\022\034\n\005value\030\002 \001(\0132\r.domi.AttrDef:\0028\001**\n\nTa"
  "rgetType\022\010\n\004MINI\020\000\022\010\n\004TINY\020\001\022\010\n\004LITE\020\002*7"
  "\n\021QuantizeScaleType\022\020\n\014VECTOR_SCALE\020\000\022\020\n"
  "\014SCALAR_SCALE\020\001*3\n\021QuantizeScaleMode\022\017\n\013"
  "NORMAL_MODE\020\000\022\r\n\tSQRT_MODE\020\001*S\n\021Quantize"
  "Algorithm\022\023\n\017NON_OFFSET_ALGO\020\000\022\024\n\020HALF_O"
  "FFSET_ALGO\020\001\022\023\n\017ALL_OFFSET_ALGO\020\002*\036\n\nDev"
  "iceType\022\007\n\003NPU\020\000\022\007\n\003CPU\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_om_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_om_2eproto_sccs[34] = {
  &scc_info_ActivationOpParams_om_2eproto.base,
  &scc_info_AddLimitedOpParams_om_2eproto.base,
  &scc_info_AddOpParams_om_2eproto.base,
  &scc_info_AllOffsetQuantizeInfo_om_2eproto.base,
  &scc_info_AttrDef_om_2eproto.base,
  &scc_info_AttrDef_ListValue_om_2eproto.base,
  &scc_info_BatchNormOpParams_om_2eproto.base,
  &scc_info_BiasAddOpParams_om_2eproto.base,
  &scc_info_CompressInfo_om_2eproto.base,
  &scc_info_ConvolutionOpParams_om_2eproto.base,
  &scc_info_EltwiseOpParams_om_2eproto.base,
  &scc_info_FlattenOpParams_om_2eproto.base,
  &scc_info_FullConnectionOpParams_om_2eproto.base,
  &scc_info_MatMulOpParams_om_2eproto.base,
  &scc_info_ModelDef_om_2eproto.base,
  &scc_info_ModelDef_AttrEntry_DoNotUse_om_2eproto.base,
  &scc_info_MulLimitedOpParams_om_2eproto.base,
  &scc_info_MulOpParams_om_2eproto.base,
  &scc_info_OpDef_om_2eproto.base,
  &scc_info_OpDef_AttrEntry_DoNotUse_om_2eproto.base,
  &scc_info_PoolingOpParams_om_2eproto.base,
  &scc_info_QuantizeCalcFactor_om_2eproto.base,
  &scc_info_QuantizeFactor_om_2eproto.base,
  &scc_info_QuantizeFactorParams_om_2eproto.base,
  &scc_info_RecvOpParams_om_2eproto.base,
  &scc_info_ReshapeOpParams_om_2eproto.base,
  &scc_info_RsqrtOpParams_om_2eproto.base,
  &scc_info_ScaleOpParams_om_2eproto.base,
  &scc_info_SendOpParams_om_2eproto.base,
  &scc_info_ShapeDef_om_2eproto.base,
  &scc_info_SoftmaxOpParams_om_2eproto.base,
  &scc_info_SubOpParams_om_2eproto.base,
  &scc_info_TensorDescriptor_om_2eproto.base,
  &scc_info_WeightDef_om_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_om_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_om_2eproto = {
  false, false, descriptor_table_protodef_om_2eproto, "om.proto", 6113,
  &descriptor_table_om_2eproto_once, descriptor_table_om_2eproto_sccs, descriptor_table_om_2eproto_deps, 34, 0,
  schemas, file_default_instances, TableStruct_om_2eproto::offsets,
  file_level_metadata_om_2eproto, 36, file_level_enum_descriptors_om_2eproto, file_level_service_descriptors_om_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_om_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_om_2eproto)), true);
namespace domi {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TargetType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_om_2eproto);
  return file_level_enum_descriptors_om_2eproto[0];
}
bool TargetType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuantizeScaleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_om_2eproto);
  return file_level_enum_descriptors_om_2eproto[1];
}
bool QuantizeScaleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuantizeScaleMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_om_2eproto);
  return file_level_enum_descriptors_om_2eproto[2];
}
bool QuantizeScaleMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuantizeAlgorithm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_om_2eproto);
  return file_level_enum_descriptors_om_2eproto[3];
}
bool QuantizeAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_om_2eproto);
  return file_level_enum_descriptors_om_2eproto[4];
}
bool DeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

ModelDef_AttrEntry_DoNotUse::ModelDef_AttrEntry_DoNotUse() {}
ModelDef_AttrEntry_DoNotUse::ModelDef_AttrEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ModelDef_AttrEntry_DoNotUse::MergeFrom(const ModelDef_AttrEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ModelDef_AttrEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ModelDef_AttrEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ModelDef::InitAsDefaultInstance() {
}
class ModelDef::_Internal {
 public:
};

ModelDef::ModelDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  op_(arena),
  attr_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.ModelDef)
}
ModelDef::ModelDef(const ModelDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      op_(from.op_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attr_.MergeFrom(from.attr_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&label_num_) -
    reinterpret_cast<char*>(&version_)) + sizeof(label_num_));
  // @@protoc_insertion_point(copy_constructor:domi.ModelDef)
}

void ModelDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelDef_om_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&label_num_) -
      reinterpret_cast<char*>(&version_)) + sizeof(label_num_));
}

ModelDef::~ModelDef() {
  // @@protoc_insertion_point(destructor:domi.ModelDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelDef::ArenaDtor(void* object) {
  ModelDef* _this = reinterpret_cast< ModelDef* >(object);
  (void)_this;
}
void ModelDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelDef& ModelDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelDef_om_2eproto.base);
  return *internal_default_instance();
}


void ModelDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.ModelDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  op_.Clear();
  attr_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&label_num_) -
      reinterpret_cast<char*>(&version_)) + sizeof(label_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "domi.ModelDef.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 memory_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          memory_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 stream_num = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          stream_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 event_num = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          event_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 weight_size = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          weight_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 label_num = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          label_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .domi.OpDef op = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_op(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // .domi.TargetType target_type = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_target_type(static_cast<::domi::TargetType>(val));
        } else goto handle_unusual;
        continue;
      // map<string, .domi.AttrDef> attr = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&attr_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.ModelDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "domi.ModelDef.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_version(), target);
  }

  // uint64 memory_size = 10;
  if (this->memory_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_memory_size(), target);
  }

  // uint32 stream_num = 11;
  if (this->stream_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_stream_num(), target);
  }

  // uint32 event_num = 12;
  if (this->event_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_event_num(), target);
  }

  // uint64 weight_size = 13;
  if (this->weight_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_weight_size(), target);
  }

  // uint32 label_num = 15;
  if (this->label_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_label_num(), target);
  }

  // repeated .domi.OpDef op = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_op_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_op(i), target, stream);
  }

  // .domi.TargetType target_type = 23;
  if (this->target_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23, this->_internal_target_type(), target);
  }

  // map<string, .domi.AttrDef> attr = 30;
  if (!this->_internal_attr().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "domi.ModelDef.AttrEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_attr().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_attr().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >::const_iterator
          it = this->_internal_attr().begin();
          it != this->_internal_attr().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ModelDef_AttrEntry_DoNotUse::Funcs::InternalSerialize(30, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >::const_iterator
          it = this->_internal_attr().begin();
          it != this->_internal_attr().end(); ++it) {
        target = ModelDef_AttrEntry_DoNotUse::Funcs::InternalSerialize(30, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.ModelDef)
  return target;
}

size_t ModelDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.ModelDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .domi.OpDef op = 20;
  total_size += 2UL * this->_internal_op_size();
  for (const auto& msg : this->op_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .domi.AttrDef> attr = 30;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attr_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >::const_iterator
      it = this->_internal_attr().begin();
      it != this->_internal_attr().end(); ++it) {
    total_size += ModelDef_AttrEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  // uint32 stream_num = 11;
  if (this->stream_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stream_num());
  }

  // uint64 memory_size = 10;
  if (this->memory_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_memory_size());
  }

  // .domi.TargetType target_type = 23;
  if (this->target_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_target_type());
  }

  // uint64 weight_size = 13;
  if (this->weight_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_weight_size());
  }

  // uint32 event_num = 12;
  if (this->event_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_event_num());
  }

  // uint32 label_num = 15;
  if (this->label_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_label_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.ModelDef)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.ModelDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.ModelDef)
    MergeFrom(*source);
  }
}

void ModelDef::MergeFrom(const ModelDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.ModelDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  op_.MergeFrom(from.op_);
  attr_.MergeFrom(from.attr_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.stream_num() != 0) {
    _internal_set_stream_num(from._internal_stream_num());
  }
  if (from.memory_size() != 0) {
    _internal_set_memory_size(from._internal_memory_size());
  }
  if (from.target_type() != 0) {
    _internal_set_target_type(from._internal_target_type());
  }
  if (from.weight_size() != 0) {
    _internal_set_weight_size(from._internal_weight_size());
  }
  if (from.event_num() != 0) {
    _internal_set_event_num(from._internal_event_num());
  }
  if (from.label_num() != 0) {
    _internal_set_label_num(from._internal_label_num());
  }
}

void ModelDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.ModelDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelDef::CopyFrom(const ModelDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.ModelDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelDef::IsInitialized() const {
  return true;
}

void ModelDef::InternalSwap(ModelDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  op_.InternalSwap(&other->op_);
  attr_.Swap(&other->attr_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelDef, label_num_)
      + sizeof(ModelDef::label_num_)
      - PROTOBUF_FIELD_OFFSET(ModelDef, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

OpDef_AttrEntry_DoNotUse::OpDef_AttrEntry_DoNotUse() {}
OpDef_AttrEntry_DoNotUse::OpDef_AttrEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void OpDef_AttrEntry_DoNotUse::MergeFrom(const OpDef_AttrEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata OpDef_AttrEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void OpDef_AttrEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void OpDef::InitAsDefaultInstance() {
  ::domi::_OpDef_default_instance_._instance.get_mutable()->quantize_factor_ = const_cast< ::domi::QuantizeFactorParams*>(
      ::domi::QuantizeFactorParams::internal_default_instance());
  ::domi::_OpDef_default_instance_.sender_param_ = const_cast< ::domi::SendOpParams*>(
      ::domi::SendOpParams::internal_default_instance());
  ::domi::_OpDef_default_instance_.receiver_param_ = const_cast< ::domi::RecvOpParams*>(
      ::domi::RecvOpParams::internal_default_instance());
  ::domi::_OpDef_default_instance_.convolution_param_ = const_cast< ::domi::ConvolutionOpParams*>(
      ::domi::ConvolutionOpParams::internal_default_instance());
  ::domi::_OpDef_default_instance_.pooling_param_ = const_cast< ::domi::PoolingOpParams*>(
      ::domi::PoolingOpParams::internal_default_instance());
  ::domi::_OpDef_default_instance_.eltwise_param_ = const_cast< ::domi::EltwiseOpParams*>(
      ::domi::EltwiseOpParams::internal_default_instance());
  ::domi::_OpDef_default_instance_.batchnorm_param_ = const_cast< ::domi::BatchNormOpParams*>(
      ::domi::BatchNormOpParams::internal_default_instance());
  ::domi::_OpDef_default_instance_.scale_param_ = const_cast< ::domi::ScaleOpParams*>(
      ::domi::ScaleOpParams::internal_default_instance());
  ::domi::_OpDef_default_instance_.full_connection_param_ = const_cast< ::domi::FullConnectionOpParams*>(
      ::domi::FullConnectionOpParams::internal_default_instance());
  ::domi::_OpDef_default_instance_.softmax_param_ = const_cast< ::domi::SoftmaxOpParams*>(
      ::domi::SoftmaxOpParams::internal_default_instance());
  ::domi::_OpDef_default_instance_.activation_param_ = const_cast< ::domi::ActivationOpParams*>(
      ::domi::ActivationOpParams::internal_default_instance());
  ::domi::_OpDef_default_instance_.reshape_param_ = const_cast< ::domi::ReshapeOpParams*>(
      ::domi::ReshapeOpParams::internal_default_instance());
}
class OpDef::_Internal {
 public:
  static const ::domi::QuantizeFactorParams& quantize_factor(const OpDef* msg);
  static const ::domi::SendOpParams& sender_param(const OpDef* msg);
  static const ::domi::RecvOpParams& receiver_param(const OpDef* msg);
  static const ::domi::ConvolutionOpParams& convolution_param(const OpDef* msg);
  static const ::domi::PoolingOpParams& pooling_param(const OpDef* msg);
  static const ::domi::EltwiseOpParams& eltwise_param(const OpDef* msg);
  static const ::domi::BatchNormOpParams& batchnorm_param(const OpDef* msg);
  static const ::domi::ScaleOpParams& scale_param(const OpDef* msg);
  static const ::domi::FullConnectionOpParams& full_connection_param(const OpDef* msg);
  static const ::domi::SoftmaxOpParams& softmax_param(const OpDef* msg);
  static const ::domi::ActivationOpParams& activation_param(const OpDef* msg);
  static const ::domi::ReshapeOpParams& reshape_param(const OpDef* msg);
};

const ::domi::QuantizeFactorParams&
OpDef::_Internal::quantize_factor(const OpDef* msg) {
  return *msg->quantize_factor_;
}
const ::domi::SendOpParams&
OpDef::_Internal::sender_param(const OpDef* msg) {
  return *msg->op_params_.sender_param_;
}
const ::domi::RecvOpParams&
OpDef::_Internal::receiver_param(const OpDef* msg) {
  return *msg->op_params_.receiver_param_;
}
const ::domi::ConvolutionOpParams&
OpDef::_Internal::convolution_param(const OpDef* msg) {
  return *msg->op_params_.convolution_param_;
}
const ::domi::PoolingOpParams&
OpDef::_Internal::pooling_param(const OpDef* msg) {
  return *msg->op_params_.pooling_param_;
}
const ::domi::EltwiseOpParams&
OpDef::_Internal::eltwise_param(const OpDef* msg) {
  return *msg->op_params_.eltwise_param_;
}
const ::domi::BatchNormOpParams&
OpDef::_Internal::batchnorm_param(const OpDef* msg) {
  return *msg->op_params_.batchnorm_param_;
}
const ::domi::ScaleOpParams&
OpDef::_Internal::scale_param(const OpDef* msg) {
  return *msg->op_params_.scale_param_;
}
const ::domi::FullConnectionOpParams&
OpDef::_Internal::full_connection_param(const OpDef* msg) {
  return *msg->op_params_.full_connection_param_;
}
const ::domi::SoftmaxOpParams&
OpDef::_Internal::softmax_param(const OpDef* msg) {
  return *msg->op_params_.softmax_param_;
}
const ::domi::ActivationOpParams&
OpDef::_Internal::activation_param(const OpDef* msg) {
  return *msg->op_params_.activation_param_;
}
const ::domi::ReshapeOpParams&
OpDef::_Internal::reshape_param(const OpDef* msg) {
  return *msg->op_params_.reshape_param_;
}
void OpDef::set_allocated_sender_param(::domi::SendOpParams* sender_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op_params();
  if (sender_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sender_param);
    if (message_arena != submessage_arena) {
      sender_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender_param, submessage_arena);
    }
    set_has_sender_param();
    op_params_.sender_param_ = sender_param;
  }
  // @@protoc_insertion_point(field_set_allocated:domi.OpDef.sender_param)
}
void OpDef::set_allocated_receiver_param(::domi::RecvOpParams* receiver_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op_params();
  if (receiver_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(receiver_param);
    if (message_arena != submessage_arena) {
      receiver_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receiver_param, submessage_arena);
    }
    set_has_receiver_param();
    op_params_.receiver_param_ = receiver_param;
  }
  // @@protoc_insertion_point(field_set_allocated:domi.OpDef.receiver_param)
}
void OpDef::set_allocated_convolution_param(::domi::ConvolutionOpParams* convolution_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op_params();
  if (convolution_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(convolution_param);
    if (message_arena != submessage_arena) {
      convolution_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, convolution_param, submessage_arena);
    }
    set_has_convolution_param();
    op_params_.convolution_param_ = convolution_param;
  }
  // @@protoc_insertion_point(field_set_allocated:domi.OpDef.convolution_param)
}
void OpDef::set_allocated_pooling_param(::domi::PoolingOpParams* pooling_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op_params();
  if (pooling_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pooling_param);
    if (message_arena != submessage_arena) {
      pooling_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pooling_param, submessage_arena);
    }
    set_has_pooling_param();
    op_params_.pooling_param_ = pooling_param;
  }
  // @@protoc_insertion_point(field_set_allocated:domi.OpDef.pooling_param)
}
void OpDef::set_allocated_eltwise_param(::domi::EltwiseOpParams* eltwise_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op_params();
  if (eltwise_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(eltwise_param);
    if (message_arena != submessage_arena) {
      eltwise_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eltwise_param, submessage_arena);
    }
    set_has_eltwise_param();
    op_params_.eltwise_param_ = eltwise_param;
  }
  // @@protoc_insertion_point(field_set_allocated:domi.OpDef.eltwise_param)
}
void OpDef::set_allocated_batchnorm_param(::domi::BatchNormOpParams* batchnorm_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op_params();
  if (batchnorm_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(batchnorm_param);
    if (message_arena != submessage_arena) {
      batchnorm_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, batchnorm_param, submessage_arena);
    }
    set_has_batchnorm_param();
    op_params_.batchnorm_param_ = batchnorm_param;
  }
  // @@protoc_insertion_point(field_set_allocated:domi.OpDef.batchnorm_param)
}
void OpDef::set_allocated_scale_param(::domi::ScaleOpParams* scale_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op_params();
  if (scale_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scale_param);
    if (message_arena != submessage_arena) {
      scale_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale_param, submessage_arena);
    }
    set_has_scale_param();
    op_params_.scale_param_ = scale_param;
  }
  // @@protoc_insertion_point(field_set_allocated:domi.OpDef.scale_param)
}
void OpDef::set_allocated_full_connection_param(::domi::FullConnectionOpParams* full_connection_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op_params();
  if (full_connection_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(full_connection_param);
    if (message_arena != submessage_arena) {
      full_connection_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, full_connection_param, submessage_arena);
    }
    set_has_full_connection_param();
    op_params_.full_connection_param_ = full_connection_param;
  }
  // @@protoc_insertion_point(field_set_allocated:domi.OpDef.full_connection_param)
}
void OpDef::set_allocated_softmax_param(::domi::SoftmaxOpParams* softmax_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op_params();
  if (softmax_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(softmax_param);
    if (message_arena != submessage_arena) {
      softmax_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, softmax_param, submessage_arena);
    }
    set_has_softmax_param();
    op_params_.softmax_param_ = softmax_param;
  }
  // @@protoc_insertion_point(field_set_allocated:domi.OpDef.softmax_param)
}
void OpDef::set_allocated_activation_param(::domi::ActivationOpParams* activation_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op_params();
  if (activation_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(activation_param);
    if (message_arena != submessage_arena) {
      activation_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activation_param, submessage_arena);
    }
    set_has_activation_param();
    op_params_.activation_param_ = activation_param;
  }
  // @@protoc_insertion_point(field_set_allocated:domi.OpDef.activation_param)
}
void OpDef::set_allocated_reshape_param(::domi::ReshapeOpParams* reshape_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op_params();
  if (reshape_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reshape_param);
    if (message_arena != submessage_arena) {
      reshape_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reshape_param, submessage_arena);
    }
    set_has_reshape_param();
    op_params_.reshape_param_ = reshape_param;
  }
  // @@protoc_insertion_point(field_set_allocated:domi.OpDef.reshape_param)
}
OpDef::OpDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  input_name_(arena),
  src_name_(arena),
  src_index_(arena),
  input_(arena),
  output_(arena),
  input_desc_(arena),
  output_desc_(arena),
  weights_(arena),
  dst_name_(arena),
  dst_index_(arena),
  workspace_(arena),
  workspace_bytes_(arena),
  weight_name_(arena),
  is_input_const_(arena),
  attr_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.OpDef)
}
OpDef::OpDef(const OpDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      input_name_(from.input_name_),
      src_name_(from.src_name_),
      src_index_(from.src_index_),
      input_(from.input_),
      output_(from.output_),
      input_desc_(from.input_desc_),
      output_desc_(from.output_desc_),
      weights_(from.weights_),
      dst_name_(from.dst_name_),
      dst_index_(from.dst_index_),
      workspace_(from.workspace_),
      workspace_bytes_(from.workspace_bytes_),
      weight_name_(from.weight_name_),
      is_input_const_(from.is_input_const_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attr_.MergeFrom(from.attr_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  if (from._internal_has_quantize_factor()) {
    quantize_factor_ = new ::domi::QuantizeFactorParams(*from.quantize_factor_);
  } else {
    quantize_factor_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(stream_id_));
  clear_has_op_params();
  switch (from.op_params_case()) {
    case kSenderParam: {
      _internal_mutable_sender_param()->::domi::SendOpParams::MergeFrom(from._internal_sender_param());
      break;
    }
    case kReceiverParam: {
      _internal_mutable_receiver_param()->::domi::RecvOpParams::MergeFrom(from._internal_receiver_param());
      break;
    }
    case kConvolutionParam: {
      _internal_mutable_convolution_param()->::domi::ConvolutionOpParams::MergeFrom(from._internal_convolution_param());
      break;
    }
    case kPoolingParam: {
      _internal_mutable_pooling_param()->::domi::PoolingOpParams::MergeFrom(from._internal_pooling_param());
      break;
    }
    case kEltwiseParam: {
      _internal_mutable_eltwise_param()->::domi::EltwiseOpParams::MergeFrom(from._internal_eltwise_param());
      break;
    }
    case kBatchnormParam: {
      _internal_mutable_batchnorm_param()->::domi::BatchNormOpParams::MergeFrom(from._internal_batchnorm_param());
      break;
    }
    case kScaleParam: {
      _internal_mutable_scale_param()->::domi::ScaleOpParams::MergeFrom(from._internal_scale_param());
      break;
    }
    case kFullConnectionParam: {
      _internal_mutable_full_connection_param()->::domi::FullConnectionOpParams::MergeFrom(from._internal_full_connection_param());
      break;
    }
    case kSoftmaxParam: {
      _internal_mutable_softmax_param()->::domi::SoftmaxOpParams::MergeFrom(from._internal_softmax_param());
      break;
    }
    case kActivationParam: {
      _internal_mutable_activation_param()->::domi::ActivationOpParams::MergeFrom(from._internal_activation_param());
      break;
    }
    case kReshapeParam: {
      _internal_mutable_reshape_param()->::domi::ReshapeOpParams::MergeFrom(from._internal_reshape_param());
      break;
    }
    case OP_PARAMS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:domi.OpDef)
}

void OpDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpDef_om_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&quantize_factor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_id_) -
      reinterpret_cast<char*>(&quantize_factor_)) + sizeof(stream_id_));
  clear_has_op_params();
}

OpDef::~OpDef() {
  // @@protoc_insertion_point(destructor:domi.OpDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete quantize_factor_;
  if (has_op_params()) {
    clear_op_params();
  }
}

void OpDef::ArenaDtor(void* object) {
  OpDef* _this = reinterpret_cast< OpDef* >(object);
  (void)_this;
}
void OpDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpDef& OpDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpDef_om_2eproto.base);
  return *internal_default_instance();
}


void OpDef::clear_op_params() {
// @@protoc_insertion_point(one_of_clear_start:domi.OpDef)
  switch (op_params_case()) {
    case kSenderParam: {
      if (GetArena() == nullptr) {
        delete op_params_.sender_param_;
      }
      break;
    }
    case kReceiverParam: {
      if (GetArena() == nullptr) {
        delete op_params_.receiver_param_;
      }
      break;
    }
    case kConvolutionParam: {
      if (GetArena() == nullptr) {
        delete op_params_.convolution_param_;
      }
      break;
    }
    case kPoolingParam: {
      if (GetArena() == nullptr) {
        delete op_params_.pooling_param_;
      }
      break;
    }
    case kEltwiseParam: {
      if (GetArena() == nullptr) {
        delete op_params_.eltwise_param_;
      }
      break;
    }
    case kBatchnormParam: {
      if (GetArena() == nullptr) {
        delete op_params_.batchnorm_param_;
      }
      break;
    }
    case kScaleParam: {
      if (GetArena() == nullptr) {
        delete op_params_.scale_param_;
      }
      break;
    }
    case kFullConnectionParam: {
      if (GetArena() == nullptr) {
        delete op_params_.full_connection_param_;
      }
      break;
    }
    case kSoftmaxParam: {
      if (GetArena() == nullptr) {
        delete op_params_.softmax_param_;
      }
      break;
    }
    case kActivationParam: {
      if (GetArena() == nullptr) {
        delete op_params_.activation_param_;
      }
      break;
    }
    case kReshapeParam: {
      if (GetArena() == nullptr) {
        delete op_params_.reshape_param_;
      }
      break;
    }
    case OP_PARAMS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OP_PARAMS_NOT_SET;
}


void OpDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.OpDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_name_.Clear();
  src_name_.Clear();
  src_index_.Clear();
  input_.Clear();
  output_.Clear();
  input_desc_.Clear();
  output_desc_.Clear();
  weights_.Clear();
  dst_name_.Clear();
  dst_index_.Clear();
  workspace_.Clear();
  workspace_bytes_.Clear();
  weight_name_.Clear();
  is_input_const_.Clear();
  attr_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && quantize_factor_ != nullptr) {
    delete quantize_factor_;
  }
  quantize_factor_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(stream_id_));
  clear_op_params();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "domi.OpDef.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "domi.OpDef.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 stream_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string input_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "domi.OpDef.input_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string src_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_src_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "domi.OpDef.src_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 src_index = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_src_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_src_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 input = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_input(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_input(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 output = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_output(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88) {
          _internal_add_output(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .domi.TensorDescriptor input_desc = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_input_desc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .domi.TensorDescriptor output_desc = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_output_desc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .domi.WeightDef weights = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_weights(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string dst_name = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dst_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "domi.OpDef.dst_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 dst_index = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_dst_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128) {
          _internal_add_dst_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 workspace = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_workspace(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160) {
          _internal_add_workspace(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 workspace_bytes = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_workspace_bytes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168) {
          _internal_add_workspace_bytes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string weight_name = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_weight_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "domi.OpDef.weight_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bool is_input_const = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_is_input_const(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184) {
          _internal_add_is_input_const(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .domi.AttrDef> attr = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&attr_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else goto handle_unusual;
        continue;
      // .domi.QuantizeFactorParams quantize_factor = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_quantize_factor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.SendOpParams sender_param = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.RecvOpParams receiver_param = 200;
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_receiver_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.ConvolutionOpParams convolution_param = 300;
      case 300:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_convolution_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.PoolingOpParams pooling_param = 400;
      case 400:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_pooling_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.EltwiseOpParams eltwise_param = 500;
      case 500:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_eltwise_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.BatchNormOpParams batchnorm_param = 600;
      case 600:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_batchnorm_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.ScaleOpParams scale_param = 700;
      case 700:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.FullConnectionOpParams full_connection_param = 800;
      case 800:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_full_connection_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.SoftmaxOpParams softmax_param = 900;
      case 900:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_softmax_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.ActivationOpParams activation_param = 1000;
      case 1000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.ReshapeOpParams reshape_param = 1100;
      case 1100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_reshape_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.OpDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "domi.OpDef.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "domi.OpDef.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // uint32 id = 3;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_id(), target);
  }

  // uint32 stream_id = 4;
  if (this->stream_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_stream_id(), target);
  }

  // repeated string input_name = 5;
  for (int i = 0, n = this->_internal_input_name_size(); i < n; i++) {
    const auto& s = this->_internal_input_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "domi.OpDef.input_name");
    target = stream->WriteString(5, s, target);
  }

  // repeated string src_name = 8;
  for (int i = 0, n = this->_internal_src_name_size(); i < n; i++) {
    const auto& s = this->_internal_src_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "domi.OpDef.src_name");
    target = stream->WriteString(8, s, target);
  }

  // repeated int32 src_index = 9;
  {
    int byte_size = _src_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_src_index(), byte_size, target);
    }
  }

  // repeated int64 input = 10;
  {
    int byte_size = _input_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          10, _internal_input(), byte_size, target);
    }
  }

  // repeated int64 output = 11;
  {
    int byte_size = _output_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          11, _internal_output(), byte_size, target);
    }
  }

  // repeated .domi.TensorDescriptor input_desc = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_input_desc_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_input_desc(i), target, stream);
  }

  // repeated .domi.TensorDescriptor output_desc = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_output_desc_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_output_desc(i), target, stream);
  }

  // repeated .domi.WeightDef weights = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_weights_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_weights(i), target, stream);
  }

  // repeated string dst_name = 15;
  for (int i = 0, n = this->_internal_dst_name_size(); i < n; i++) {
    const auto& s = this->_internal_dst_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "domi.OpDef.dst_name");
    target = stream->WriteString(15, s, target);
  }

  // repeated int32 dst_index = 16;
  {
    int byte_size = _dst_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          16, _internal_dst_index(), byte_size, target);
    }
  }

  // repeated int64 workspace = 20;
  {
    int byte_size = _workspace_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          20, _internal_workspace(), byte_size, target);
    }
  }

  // repeated uint32 workspace_bytes = 21;
  {
    int byte_size = _workspace_bytes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          21, _internal_workspace_bytes(), byte_size, target);
    }
  }

  // repeated string weight_name = 22;
  for (int i = 0, n = this->_internal_weight_name_size(); i < n; i++) {
    const auto& s = this->_internal_weight_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "domi.OpDef.weight_name");
    target = stream->WriteString(22, s, target);
  }

  // repeated bool is_input_const = 23;
  if (this->_internal_is_input_const_size() > 0) {
    target = stream->WriteFixedPacked(23, _internal_is_input_const(), target);
  }

  // map<string, .domi.AttrDef> attr = 30;
  if (!this->_internal_attr().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "domi.OpDef.AttrEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_attr().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_attr().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >::const_iterator
          it = this->_internal_attr().begin();
          it != this->_internal_attr().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = OpDef_AttrEntry_DoNotUse::Funcs::InternalSerialize(30, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >::const_iterator
          it = this->_internal_attr().begin();
          it != this->_internal_attr().end(); ++it) {
        target = OpDef_AttrEntry_DoNotUse::Funcs::InternalSerialize(30, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .domi.QuantizeFactorParams quantize_factor = 31;
  if (this->has_quantize_factor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::quantize_factor(this), target, stream);
  }

  // .domi.SendOpParams sender_param = 100;
  if (_internal_has_sender_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::sender_param(this), target, stream);
  }

  // .domi.RecvOpParams receiver_param = 200;
  if (_internal_has_receiver_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        200, _Internal::receiver_param(this), target, stream);
  }

  // .domi.ConvolutionOpParams convolution_param = 300;
  if (_internal_has_convolution_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        300, _Internal::convolution_param(this), target, stream);
  }

  // .domi.PoolingOpParams pooling_param = 400;
  if (_internal_has_pooling_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        400, _Internal::pooling_param(this), target, stream);
  }

  // .domi.EltwiseOpParams eltwise_param = 500;
  if (_internal_has_eltwise_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        500, _Internal::eltwise_param(this), target, stream);
  }

  // .domi.BatchNormOpParams batchnorm_param = 600;
  if (_internal_has_batchnorm_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        600, _Internal::batchnorm_param(this), target, stream);
  }

  // .domi.ScaleOpParams scale_param = 700;
  if (_internal_has_scale_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        700, _Internal::scale_param(this), target, stream);
  }

  // .domi.FullConnectionOpParams full_connection_param = 800;
  if (_internal_has_full_connection_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        800, _Internal::full_connection_param(this), target, stream);
  }

  // .domi.SoftmaxOpParams softmax_param = 900;
  if (_internal_has_softmax_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        900, _Internal::softmax_param(this), target, stream);
  }

  // .domi.ActivationOpParams activation_param = 1000;
  if (_internal_has_activation_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1000, _Internal::activation_param(this), target, stream);
  }

  // .domi.ReshapeOpParams reshape_param = 1100;
  if (_internal_has_reshape_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1100, _Internal::reshape_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.OpDef)
  return target;
}

size_t OpDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.OpDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string input_name = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(input_name_.size());
  for (int i = 0, n = input_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      input_name_.Get(i));
  }

  // repeated string src_name = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(src_name_.size());
  for (int i = 0, n = src_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      src_name_.Get(i));
  }

  // repeated int32 src_index = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->src_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _src_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 input = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->input_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _input_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 output = 11;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->output_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _output_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .domi.TensorDescriptor input_desc = 12;
  total_size += 1UL * this->_internal_input_desc_size();
  for (const auto& msg : this->input_desc_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .domi.TensorDescriptor output_desc = 13;
  total_size += 1UL * this->_internal_output_desc_size();
  for (const auto& msg : this->output_desc_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .domi.WeightDef weights = 14;
  total_size += 1UL * this->_internal_weights_size();
  for (const auto& msg : this->weights_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string dst_name = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(dst_name_.size());
  for (int i = 0, n = dst_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      dst_name_.Get(i));
  }

  // repeated int32 dst_index = 16;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->dst_index_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dst_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 workspace = 20;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->workspace_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _workspace_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 workspace_bytes = 21;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->workspace_bytes_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _workspace_bytes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string weight_name = 22;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(weight_name_.size());
  for (int i = 0, n = weight_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      weight_name_.Get(i));
  }

  // repeated bool is_input_const = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_is_input_const_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _is_input_const_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<string, .domi.AttrDef> attr = 30;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attr_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >::const_iterator
      it = this->_internal_attr().begin();
      it != this->_internal_attr().end(); ++it) {
    total_size += OpDef_AttrEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // .domi.QuantizeFactorParams quantize_factor = 31;
  if (this->has_quantize_factor()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *quantize_factor_);
  }

  // uint32 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 stream_id = 4;
  if (this->stream_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stream_id());
  }

  switch (op_params_case()) {
    // .domi.SendOpParams sender_param = 100;
    case kSenderParam: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_params_.sender_param_);
      break;
    }
    // .domi.RecvOpParams receiver_param = 200;
    case kReceiverParam: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_params_.receiver_param_);
      break;
    }
    // .domi.ConvolutionOpParams convolution_param = 300;
    case kConvolutionParam: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_params_.convolution_param_);
      break;
    }
    // .domi.PoolingOpParams pooling_param = 400;
    case kPoolingParam: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_params_.pooling_param_);
      break;
    }
    // .domi.EltwiseOpParams eltwise_param = 500;
    case kEltwiseParam: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_params_.eltwise_param_);
      break;
    }
    // .domi.BatchNormOpParams batchnorm_param = 600;
    case kBatchnormParam: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_params_.batchnorm_param_);
      break;
    }
    // .domi.ScaleOpParams scale_param = 700;
    case kScaleParam: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_params_.scale_param_);
      break;
    }
    // .domi.FullConnectionOpParams full_connection_param = 800;
    case kFullConnectionParam: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_params_.full_connection_param_);
      break;
    }
    // .domi.SoftmaxOpParams softmax_param = 900;
    case kSoftmaxParam: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_params_.softmax_param_);
      break;
    }
    // .domi.ActivationOpParams activation_param = 1000;
    case kActivationParam: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_params_.activation_param_);
      break;
    }
    // .domi.ReshapeOpParams reshape_param = 1100;
    case kReshapeParam: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_params_.reshape_param_);
      break;
    }
    case OP_PARAMS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.OpDef)
  GOOGLE_DCHECK_NE(&from, this);
  const OpDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.OpDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.OpDef)
    MergeFrom(*source);
  }
}

void OpDef::MergeFrom(const OpDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.OpDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_name_.MergeFrom(from.input_name_);
  src_name_.MergeFrom(from.src_name_);
  src_index_.MergeFrom(from.src_index_);
  input_.MergeFrom(from.input_);
  output_.MergeFrom(from.output_);
  input_desc_.MergeFrom(from.input_desc_);
  output_desc_.MergeFrom(from.output_desc_);
  weights_.MergeFrom(from.weights_);
  dst_name_.MergeFrom(from.dst_name_);
  dst_index_.MergeFrom(from.dst_index_);
  workspace_.MergeFrom(from.workspace_);
  workspace_bytes_.MergeFrom(from.workspace_bytes_);
  weight_name_.MergeFrom(from.weight_name_);
  is_input_const_.MergeFrom(from.is_input_const_);
  attr_.MergeFrom(from.attr_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.has_quantize_factor()) {
    _internal_mutable_quantize_factor()->::domi::QuantizeFactorParams::MergeFrom(from._internal_quantize_factor());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.stream_id() != 0) {
    _internal_set_stream_id(from._internal_stream_id());
  }
  switch (from.op_params_case()) {
    case kSenderParam: {
      _internal_mutable_sender_param()->::domi::SendOpParams::MergeFrom(from._internal_sender_param());
      break;
    }
    case kReceiverParam: {
      _internal_mutable_receiver_param()->::domi::RecvOpParams::MergeFrom(from._internal_receiver_param());
      break;
    }
    case kConvolutionParam: {
      _internal_mutable_convolution_param()->::domi::ConvolutionOpParams::MergeFrom(from._internal_convolution_param());
      break;
    }
    case kPoolingParam: {
      _internal_mutable_pooling_param()->::domi::PoolingOpParams::MergeFrom(from._internal_pooling_param());
      break;
    }
    case kEltwiseParam: {
      _internal_mutable_eltwise_param()->::domi::EltwiseOpParams::MergeFrom(from._internal_eltwise_param());
      break;
    }
    case kBatchnormParam: {
      _internal_mutable_batchnorm_param()->::domi::BatchNormOpParams::MergeFrom(from._internal_batchnorm_param());
      break;
    }
    case kScaleParam: {
      _internal_mutable_scale_param()->::domi::ScaleOpParams::MergeFrom(from._internal_scale_param());
      break;
    }
    case kFullConnectionParam: {
      _internal_mutable_full_connection_param()->::domi::FullConnectionOpParams::MergeFrom(from._internal_full_connection_param());
      break;
    }
    case kSoftmaxParam: {
      _internal_mutable_softmax_param()->::domi::SoftmaxOpParams::MergeFrom(from._internal_softmax_param());
      break;
    }
    case kActivationParam: {
      _internal_mutable_activation_param()->::domi::ActivationOpParams::MergeFrom(from._internal_activation_param());
      break;
    }
    case kReshapeParam: {
      _internal_mutable_reshape_param()->::domi::ReshapeOpParams::MergeFrom(from._internal_reshape_param());
      break;
    }
    case OP_PARAMS_NOT_SET: {
      break;
    }
  }
}

void OpDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.OpDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpDef::CopyFrom(const OpDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.OpDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpDef::IsInitialized() const {
  return true;
}

void OpDef::InternalSwap(OpDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  input_name_.InternalSwap(&other->input_name_);
  src_name_.InternalSwap(&other->src_name_);
  src_index_.InternalSwap(&other->src_index_);
  input_.InternalSwap(&other->input_);
  output_.InternalSwap(&other->output_);
  input_desc_.InternalSwap(&other->input_desc_);
  output_desc_.InternalSwap(&other->output_desc_);
  weights_.InternalSwap(&other->weights_);
  dst_name_.InternalSwap(&other->dst_name_);
  dst_index_.InternalSwap(&other->dst_index_);
  workspace_.InternalSwap(&other->workspace_);
  workspace_bytes_.InternalSwap(&other->workspace_bytes_);
  weight_name_.InternalSwap(&other->weight_name_);
  is_input_const_.InternalSwap(&other->is_input_const_);
  attr_.Swap(&other->attr_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpDef, stream_id_)
      + sizeof(OpDef::stream_id_)
      - PROTOBUF_FIELD_OFFSET(OpDef, quantize_factor_)>(
          reinterpret_cast<char*>(&quantize_factor_),
          reinterpret_cast<char*>(&other->quantize_factor_));
  swap(op_params_, other->op_params_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendOpParams::InitAsDefaultInstance() {
}
class SendOpParams::_Internal {
 public:
};

SendOpParams::SendOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.SendOpParams)
}
SendOpParams::SendOpParams(const SendOpParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_id_ = from.event_id_;
  // @@protoc_insertion_point(copy_constructor:domi.SendOpParams)
}

void SendOpParams::SharedCtor() {
  event_id_ = 0u;
}

SendOpParams::~SendOpParams() {
  // @@protoc_insertion_point(destructor:domi.SendOpParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SendOpParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SendOpParams::ArenaDtor(void* object) {
  SendOpParams* _this = reinterpret_cast< SendOpParams* >(object);
  (void)_this;
}
void SendOpParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendOpParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendOpParams& SendOpParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendOpParams_om_2eproto.base);
  return *internal_default_instance();
}


void SendOpParams::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.SendOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendOpParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendOpParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.SendOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 event_id = 1;
  if (this->event_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_event_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.SendOpParams)
  return target;
}

size_t SendOpParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.SendOpParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 event_id = 1;
  if (this->event_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_event_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendOpParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.SendOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  const SendOpParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendOpParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.SendOpParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.SendOpParams)
    MergeFrom(*source);
  }
}

void SendOpParams::MergeFrom(const SendOpParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.SendOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_id() != 0) {
    _internal_set_event_id(from._internal_event_id());
  }
}

void SendOpParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.SendOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendOpParams::CopyFrom(const SendOpParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.SendOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendOpParams::IsInitialized() const {
  return true;
}

void SendOpParams::InternalSwap(SendOpParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(event_id_, other->event_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendOpParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecvOpParams::InitAsDefaultInstance() {
}
class RecvOpParams::_Internal {
 public:
};

RecvOpParams::RecvOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.RecvOpParams)
}
RecvOpParams::RecvOpParams(const RecvOpParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_id_ = from.event_id_;
  // @@protoc_insertion_point(copy_constructor:domi.RecvOpParams)
}

void RecvOpParams::SharedCtor() {
  event_id_ = 0u;
}

RecvOpParams::~RecvOpParams() {
  // @@protoc_insertion_point(destructor:domi.RecvOpParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecvOpParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RecvOpParams::ArenaDtor(void* object) {
  RecvOpParams* _this = reinterpret_cast< RecvOpParams* >(object);
  (void)_this;
}
void RecvOpParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecvOpParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecvOpParams& RecvOpParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecvOpParams_om_2eproto.base);
  return *internal_default_instance();
}


void RecvOpParams::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.RecvOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecvOpParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecvOpParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.RecvOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 event_id = 1;
  if (this->event_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_event_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.RecvOpParams)
  return target;
}

size_t RecvOpParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.RecvOpParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 event_id = 1;
  if (this->event_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_event_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecvOpParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.RecvOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  const RecvOpParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecvOpParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.RecvOpParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.RecvOpParams)
    MergeFrom(*source);
  }
}

void RecvOpParams::MergeFrom(const RecvOpParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.RecvOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_id() != 0) {
    _internal_set_event_id(from._internal_event_id());
  }
}

void RecvOpParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.RecvOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecvOpParams::CopyFrom(const RecvOpParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.RecvOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvOpParams::IsInitialized() const {
  return true;
}

void RecvOpParams::InternalSwap(RecvOpParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(event_id_, other->event_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecvOpParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QuantizeFactor::InitAsDefaultInstance() {
}
class QuantizeFactor::_Internal {
 public:
};

QuantizeFactor::QuantizeFactor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.QuantizeFactor)
}
QuantizeFactor::QuantizeFactor(const QuantizeFactor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  scale_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scale_value().empty()) {
    scale_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_scale_value(),
      GetArena());
  }
  offset_data_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_offset_data_value().empty()) {
    offset_data_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_offset_data_value(),
      GetArena());
  }
  offset_weight_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_offset_weight_value().empty()) {
    offset_weight_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_offset_weight_value(),
      GetArena());
  }
  offset_pad_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_offset_pad_value().empty()) {
    offset_pad_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_offset_pad_value(),
      GetArena());
  }
  ::memcpy(&scale_offset_, &from.scale_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_mode_) -
    reinterpret_cast<char*>(&scale_offset_)) + sizeof(scale_mode_));
  // @@protoc_insertion_point(copy_constructor:domi.QuantizeFactor)
}

void QuantizeFactor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QuantizeFactor_om_2eproto.base);
  scale_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  offset_data_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  offset_weight_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  offset_pad_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&scale_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_mode_) -
      reinterpret_cast<char*>(&scale_offset_)) + sizeof(scale_mode_));
}

QuantizeFactor::~QuantizeFactor() {
  // @@protoc_insertion_point(destructor:domi.QuantizeFactor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QuantizeFactor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  scale_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  offset_data_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  offset_weight_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  offset_pad_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QuantizeFactor::ArenaDtor(void* object) {
  QuantizeFactor* _this = reinterpret_cast< QuantizeFactor* >(object);
  (void)_this;
}
void QuantizeFactor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QuantizeFactor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuantizeFactor& QuantizeFactor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuantizeFactor_om_2eproto.base);
  return *internal_default_instance();
}


void QuantizeFactor::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.QuantizeFactor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scale_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  offset_data_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  offset_weight_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  offset_pad_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&scale_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_mode_) -
      reinterpret_cast<char*>(&scale_offset_)) + sizeof(scale_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuantizeFactor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .domi.QuantizeScaleMode scale_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_scale_mode(static_cast<::domi::QuantizeScaleMode>(val));
        } else goto handle_unusual;
        continue;
      // bytes scale_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_scale_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 scale_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          scale_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes offset_data_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_offset_data_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset_data_offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          offset_data_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes offset_weight_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_offset_weight_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset_weight_offset = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          offset_weight_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes offset_pad_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_offset_pad_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset_pad_offset = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          offset_pad_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QuantizeFactor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.QuantizeFactor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .domi.QuantizeScaleMode scale_mode = 1;
  if (this->scale_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_scale_mode(), target);
  }

  // bytes scale_value = 2;
  if (this->scale_value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_scale_value(), target);
  }

  // int64 scale_offset = 3;
  if (this->scale_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_scale_offset(), target);
  }

  // bytes offset_data_value = 4;
  if (this->offset_data_value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_offset_data_value(), target);
  }

  // int64 offset_data_offset = 5;
  if (this->offset_data_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_offset_data_offset(), target);
  }

  // bytes offset_weight_value = 6;
  if (this->offset_weight_value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_offset_weight_value(), target);
  }

  // int64 offset_weight_offset = 7;
  if (this->offset_weight_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_offset_weight_offset(), target);
  }

  // bytes offset_pad_value = 8;
  if (this->offset_pad_value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_offset_pad_value(), target);
  }

  // int64 offset_pad_offset = 9;
  if (this->offset_pad_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_offset_pad_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.QuantizeFactor)
  return target;
}

size_t QuantizeFactor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.QuantizeFactor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes scale_value = 2;
  if (this->scale_value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_scale_value());
  }

  // bytes offset_data_value = 4;
  if (this->offset_data_value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_offset_data_value());
  }

  // bytes offset_weight_value = 6;
  if (this->offset_weight_value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_offset_weight_value());
  }

  // bytes offset_pad_value = 8;
  if (this->offset_pad_value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_offset_pad_value());
  }

  // int64 scale_offset = 3;
  if (this->scale_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_scale_offset());
  }

  // int64 offset_data_offset = 5;
  if (this->offset_data_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset_data_offset());
  }

  // int64 offset_weight_offset = 7;
  if (this->offset_weight_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset_weight_offset());
  }

  // int64 offset_pad_offset = 9;
  if (this->offset_pad_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset_pad_offset());
  }

  // .domi.QuantizeScaleMode scale_mode = 1;
  if (this->scale_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scale_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuantizeFactor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.QuantizeFactor)
  GOOGLE_DCHECK_NE(&from, this);
  const QuantizeFactor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuantizeFactor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.QuantizeFactor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.QuantizeFactor)
    MergeFrom(*source);
  }
}

void QuantizeFactor::MergeFrom(const QuantizeFactor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.QuantizeFactor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.scale_value().size() > 0) {
    _internal_set_scale_value(from._internal_scale_value());
  }
  if (from.offset_data_value().size() > 0) {
    _internal_set_offset_data_value(from._internal_offset_data_value());
  }
  if (from.offset_weight_value().size() > 0) {
    _internal_set_offset_weight_value(from._internal_offset_weight_value());
  }
  if (from.offset_pad_value().size() > 0) {
    _internal_set_offset_pad_value(from._internal_offset_pad_value());
  }
  if (from.scale_offset() != 0) {
    _internal_set_scale_offset(from._internal_scale_offset());
  }
  if (from.offset_data_offset() != 0) {
    _internal_set_offset_data_offset(from._internal_offset_data_offset());
  }
  if (from.offset_weight_offset() != 0) {
    _internal_set_offset_weight_offset(from._internal_offset_weight_offset());
  }
  if (from.offset_pad_offset() != 0) {
    _internal_set_offset_pad_offset(from._internal_offset_pad_offset());
  }
  if (from.scale_mode() != 0) {
    _internal_set_scale_mode(from._internal_scale_mode());
  }
}

void QuantizeFactor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.QuantizeFactor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuantizeFactor::CopyFrom(const QuantizeFactor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.QuantizeFactor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuantizeFactor::IsInitialized() const {
  return true;
}

void QuantizeFactor::InternalSwap(QuantizeFactor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  scale_value_.Swap(&other->scale_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  offset_data_value_.Swap(&other->offset_data_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  offset_weight_value_.Swap(&other->offset_weight_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  offset_pad_value_.Swap(&other->offset_pad_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuantizeFactor, scale_mode_)
      + sizeof(QuantizeFactor::scale_mode_)
      - PROTOBUF_FIELD_OFFSET(QuantizeFactor, scale_offset_)>(
          reinterpret_cast<char*>(&scale_offset_),
          reinterpret_cast<char*>(&other->scale_offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QuantizeFactor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QuantizeCalcFactor::InitAsDefaultInstance() {
}
class QuantizeCalcFactor::_Internal {
 public:
};

QuantizeCalcFactor::QuantizeCalcFactor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.QuantizeCalcFactor)
}
QuantizeCalcFactor::QuantizeCalcFactor(const QuantizeCalcFactor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  offsetw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_offsetw().empty()) {
    offsetw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_offsetw(),
      GetArena());
  }
  offsetd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_offsetd().empty()) {
    offsetd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_offsetd(),
      GetArena());
  }
  scalereq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scalereq().empty()) {
    scalereq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_scalereq(),
      GetArena());
  }
  offsetdnext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_offsetdnext().empty()) {
    offsetdnext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_offsetdnext(),
      GetArena());
  }
  ::memcpy(&offsetw_offset_, &from.offsetw_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&offsetdnext_offset_) -
    reinterpret_cast<char*>(&offsetw_offset_)) + sizeof(offsetdnext_offset_));
  // @@protoc_insertion_point(copy_constructor:domi.QuantizeCalcFactor)
}

void QuantizeCalcFactor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QuantizeCalcFactor_om_2eproto.base);
  offsetw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  offsetd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scalereq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  offsetdnext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&offsetw_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offsetdnext_offset_) -
      reinterpret_cast<char*>(&offsetw_offset_)) + sizeof(offsetdnext_offset_));
}

QuantizeCalcFactor::~QuantizeCalcFactor() {
  // @@protoc_insertion_point(destructor:domi.QuantizeCalcFactor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QuantizeCalcFactor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  offsetw_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  offsetd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scalereq_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  offsetdnext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QuantizeCalcFactor::ArenaDtor(void* object) {
  QuantizeCalcFactor* _this = reinterpret_cast< QuantizeCalcFactor* >(object);
  (void)_this;
}
void QuantizeCalcFactor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QuantizeCalcFactor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuantizeCalcFactor& QuantizeCalcFactor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuantizeCalcFactor_om_2eproto.base);
  return *internal_default_instance();
}


void QuantizeCalcFactor::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.QuantizeCalcFactor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  offsetw_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  offsetd_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scalereq_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  offsetdnext_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&offsetw_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offsetdnext_offset_) -
      reinterpret_cast<char*>(&offsetw_offset_)) + sizeof(offsetdnext_offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuantizeCalcFactor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes offsetw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_offsetw();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offsetw_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offsetw_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes offsetd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_offsetd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offsetd_offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          offsetd_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes scalereq = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_scalereq();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 scaledreq_offset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          scaledreq_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes offsetdnext = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_offsetdnext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offsetdnext_offset = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          offsetdnext_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QuantizeCalcFactor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.QuantizeCalcFactor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes offsetw = 1;
  if (this->offsetw().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_offsetw(), target);
  }

  // int64 offsetw_offset = 2;
  if (this->offsetw_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_offsetw_offset(), target);
  }

  // bytes offsetd = 3;
  if (this->offsetd().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_offsetd(), target);
  }

  // int64 offsetd_offset = 4;
  if (this->offsetd_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_offsetd_offset(), target);
  }

  // bytes scalereq = 5;
  if (this->scalereq().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_scalereq(), target);
  }

  // int64 scaledreq_offset = 6;
  if (this->scaledreq_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_scaledreq_offset(), target);
  }

  // bytes offsetdnext = 7;
  if (this->offsetdnext().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_offsetdnext(), target);
  }

  // int64 offsetdnext_offset = 8;
  if (this->offsetdnext_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_offsetdnext_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.QuantizeCalcFactor)
  return target;
}

size_t QuantizeCalcFactor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.QuantizeCalcFactor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes offsetw = 1;
  if (this->offsetw().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_offsetw());
  }

  // bytes offsetd = 3;
  if (this->offsetd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_offsetd());
  }

  // bytes scalereq = 5;
  if (this->scalereq().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_scalereq());
  }

  // bytes offsetdnext = 7;
  if (this->offsetdnext().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_offsetdnext());
  }

  // int64 offsetw_offset = 2;
  if (this->offsetw_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offsetw_offset());
  }

  // int64 offsetd_offset = 4;
  if (this->offsetd_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offsetd_offset());
  }

  // int64 scaledreq_offset = 6;
  if (this->scaledreq_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_scaledreq_offset());
  }

  // int64 offsetdnext_offset = 8;
  if (this->offsetdnext_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offsetdnext_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuantizeCalcFactor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.QuantizeCalcFactor)
  GOOGLE_DCHECK_NE(&from, this);
  const QuantizeCalcFactor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuantizeCalcFactor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.QuantizeCalcFactor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.QuantizeCalcFactor)
    MergeFrom(*source);
  }
}

void QuantizeCalcFactor::MergeFrom(const QuantizeCalcFactor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.QuantizeCalcFactor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.offsetw().size() > 0) {
    _internal_set_offsetw(from._internal_offsetw());
  }
  if (from.offsetd().size() > 0) {
    _internal_set_offsetd(from._internal_offsetd());
  }
  if (from.scalereq().size() > 0) {
    _internal_set_scalereq(from._internal_scalereq());
  }
  if (from.offsetdnext().size() > 0) {
    _internal_set_offsetdnext(from._internal_offsetdnext());
  }
  if (from.offsetw_offset() != 0) {
    _internal_set_offsetw_offset(from._internal_offsetw_offset());
  }
  if (from.offsetd_offset() != 0) {
    _internal_set_offsetd_offset(from._internal_offsetd_offset());
  }
  if (from.scaledreq_offset() != 0) {
    _internal_set_scaledreq_offset(from._internal_scaledreq_offset());
  }
  if (from.offsetdnext_offset() != 0) {
    _internal_set_offsetdnext_offset(from._internal_offsetdnext_offset());
  }
}

void QuantizeCalcFactor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.QuantizeCalcFactor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuantizeCalcFactor::CopyFrom(const QuantizeCalcFactor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.QuantizeCalcFactor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuantizeCalcFactor::IsInitialized() const {
  return true;
}

void QuantizeCalcFactor::InternalSwap(QuantizeCalcFactor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  offsetw_.Swap(&other->offsetw_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  offsetd_.Swap(&other->offsetd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scalereq_.Swap(&other->scalereq_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  offsetdnext_.Swap(&other->offsetdnext_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuantizeCalcFactor, offsetdnext_offset_)
      + sizeof(QuantizeCalcFactor::offsetdnext_offset_)
      - PROTOBUF_FIELD_OFFSET(QuantizeCalcFactor, offsetw_offset_)>(
          reinterpret_cast<char*>(&offsetw_offset_),
          reinterpret_cast<char*>(&other->offsetw_offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QuantizeCalcFactor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QuantizeFactorParams::InitAsDefaultInstance() {
  ::domi::_QuantizeFactorParams_default_instance_._instance.get_mutable()->quantize_param_ = const_cast< ::domi::QuantizeFactor*>(
      ::domi::QuantizeFactor::internal_default_instance());
  ::domi::_QuantizeFactorParams_default_instance_._instance.get_mutable()->dequantize_param_ = const_cast< ::domi::QuantizeFactor*>(
      ::domi::QuantizeFactor::internal_default_instance());
  ::domi::_QuantizeFactorParams_default_instance_._instance.get_mutable()->requantize_param_ = const_cast< ::domi::QuantizeFactor*>(
      ::domi::QuantizeFactor::internal_default_instance());
  ::domi::_QuantizeFactorParams_default_instance_._instance.get_mutable()->quantizecalc_param_ = const_cast< ::domi::QuantizeCalcFactor*>(
      ::domi::QuantizeCalcFactor::internal_default_instance());
}
class QuantizeFactorParams::_Internal {
 public:
  static const ::domi::QuantizeFactor& quantize_param(const QuantizeFactorParams* msg);
  static const ::domi::QuantizeFactor& dequantize_param(const QuantizeFactorParams* msg);
  static const ::domi::QuantizeFactor& requantize_param(const QuantizeFactorParams* msg);
  static const ::domi::QuantizeCalcFactor& quantizecalc_param(const QuantizeFactorParams* msg);
};

const ::domi::QuantizeFactor&
QuantizeFactorParams::_Internal::quantize_param(const QuantizeFactorParams* msg) {
  return *msg->quantize_param_;
}
const ::domi::QuantizeFactor&
QuantizeFactorParams::_Internal::dequantize_param(const QuantizeFactorParams* msg) {
  return *msg->dequantize_param_;
}
const ::domi::QuantizeFactor&
QuantizeFactorParams::_Internal::requantize_param(const QuantizeFactorParams* msg) {
  return *msg->requantize_param_;
}
const ::domi::QuantizeCalcFactor&
QuantizeFactorParams::_Internal::quantizecalc_param(const QuantizeFactorParams* msg) {
  return *msg->quantizecalc_param_;
}
QuantizeFactorParams::QuantizeFactorParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.QuantizeFactorParams)
}
QuantizeFactorParams::QuantizeFactorParams(const QuantizeFactorParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_quantize_param()) {
    quantize_param_ = new ::domi::QuantizeFactor(*from.quantize_param_);
  } else {
    quantize_param_ = nullptr;
  }
  if (from._internal_has_dequantize_param()) {
    dequantize_param_ = new ::domi::QuantizeFactor(*from.dequantize_param_);
  } else {
    dequantize_param_ = nullptr;
  }
  if (from._internal_has_requantize_param()) {
    requantize_param_ = new ::domi::QuantizeFactor(*from.requantize_param_);
  } else {
    requantize_param_ = nullptr;
  }
  if (from._internal_has_quantizecalc_param()) {
    quantizecalc_param_ = new ::domi::QuantizeCalcFactor(*from.quantizecalc_param_);
  } else {
    quantizecalc_param_ = nullptr;
  }
  ::memcpy(&quantize_algo_, &from.quantize_algo_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_type_) -
    reinterpret_cast<char*>(&quantize_algo_)) + sizeof(scale_type_));
  // @@protoc_insertion_point(copy_constructor:domi.QuantizeFactorParams)
}

void QuantizeFactorParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QuantizeFactorParams_om_2eproto.base);
  ::memset(&quantize_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_type_) -
      reinterpret_cast<char*>(&quantize_param_)) + sizeof(scale_type_));
}

QuantizeFactorParams::~QuantizeFactorParams() {
  // @@protoc_insertion_point(destructor:domi.QuantizeFactorParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QuantizeFactorParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete quantize_param_;
  if (this != internal_default_instance()) delete dequantize_param_;
  if (this != internal_default_instance()) delete requantize_param_;
  if (this != internal_default_instance()) delete quantizecalc_param_;
}

void QuantizeFactorParams::ArenaDtor(void* object) {
  QuantizeFactorParams* _this = reinterpret_cast< QuantizeFactorParams* >(object);
  (void)_this;
}
void QuantizeFactorParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QuantizeFactorParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuantizeFactorParams& QuantizeFactorParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuantizeFactorParams_om_2eproto.base);
  return *internal_default_instance();
}


void QuantizeFactorParams::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.QuantizeFactorParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && quantize_param_ != nullptr) {
    delete quantize_param_;
  }
  quantize_param_ = nullptr;
  if (GetArena() == nullptr && dequantize_param_ != nullptr) {
    delete dequantize_param_;
  }
  dequantize_param_ = nullptr;
  if (GetArena() == nullptr && requantize_param_ != nullptr) {
    delete requantize_param_;
  }
  requantize_param_ = nullptr;
  if (GetArena() == nullptr && quantizecalc_param_ != nullptr) {
    delete quantizecalc_param_;
  }
  quantizecalc_param_ = nullptr;
  ::memset(&quantize_algo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_type_) -
      reinterpret_cast<char*>(&quantize_algo_)) + sizeof(scale_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuantizeFactorParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .domi.QuantizeAlgorithm quantize_algo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_quantize_algo(static_cast<::domi::QuantizeAlgorithm>(val));
        } else goto handle_unusual;
        continue;
      // .domi.QuantizeScaleType scale_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_scale_type(static_cast<::domi::QuantizeScaleType>(val));
        } else goto handle_unusual;
        continue;
      // .domi.QuantizeFactor quantize_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_quantize_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.QuantizeFactor dequantize_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_dequantize_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.QuantizeFactor requantize_param = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_requantize_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.QuantizeCalcFactor quantizecalc_param = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_quantizecalc_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QuantizeFactorParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.QuantizeFactorParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .domi.QuantizeAlgorithm quantize_algo = 1;
  if (this->quantize_algo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_quantize_algo(), target);
  }

  // .domi.QuantizeScaleType scale_type = 2;
  if (this->scale_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_scale_type(), target);
  }

  // .domi.QuantizeFactor quantize_param = 3;
  if (this->has_quantize_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::quantize_param(this), target, stream);
  }

  // .domi.QuantizeFactor dequantize_param = 4;
  if (this->has_dequantize_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::dequantize_param(this), target, stream);
  }

  // .domi.QuantizeFactor requantize_param = 5;
  if (this->has_requantize_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::requantize_param(this), target, stream);
  }

  // .domi.QuantizeCalcFactor quantizecalc_param = 6;
  if (this->has_quantizecalc_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::quantizecalc_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.QuantizeFactorParams)
  return target;
}

size_t QuantizeFactorParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.QuantizeFactorParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .domi.QuantizeFactor quantize_param = 3;
  if (this->has_quantize_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *quantize_param_);
  }

  // .domi.QuantizeFactor dequantize_param = 4;
  if (this->has_dequantize_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dequantize_param_);
  }

  // .domi.QuantizeFactor requantize_param = 5;
  if (this->has_requantize_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requantize_param_);
  }

  // .domi.QuantizeCalcFactor quantizecalc_param = 6;
  if (this->has_quantizecalc_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *quantizecalc_param_);
  }

  // .domi.QuantizeAlgorithm quantize_algo = 1;
  if (this->quantize_algo() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_quantize_algo());
  }

  // .domi.QuantizeScaleType scale_type = 2;
  if (this->scale_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scale_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuantizeFactorParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.QuantizeFactorParams)
  GOOGLE_DCHECK_NE(&from, this);
  const QuantizeFactorParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuantizeFactorParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.QuantizeFactorParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.QuantizeFactorParams)
    MergeFrom(*source);
  }
}

void QuantizeFactorParams::MergeFrom(const QuantizeFactorParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.QuantizeFactorParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_quantize_param()) {
    _internal_mutable_quantize_param()->::domi::QuantizeFactor::MergeFrom(from._internal_quantize_param());
  }
  if (from.has_dequantize_param()) {
    _internal_mutable_dequantize_param()->::domi::QuantizeFactor::MergeFrom(from._internal_dequantize_param());
  }
  if (from.has_requantize_param()) {
    _internal_mutable_requantize_param()->::domi::QuantizeFactor::MergeFrom(from._internal_requantize_param());
  }
  if (from.has_quantizecalc_param()) {
    _internal_mutable_quantizecalc_param()->::domi::QuantizeCalcFactor::MergeFrom(from._internal_quantizecalc_param());
  }
  if (from.quantize_algo() != 0) {
    _internal_set_quantize_algo(from._internal_quantize_algo());
  }
  if (from.scale_type() != 0) {
    _internal_set_scale_type(from._internal_scale_type());
  }
}

void QuantizeFactorParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.QuantizeFactorParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuantizeFactorParams::CopyFrom(const QuantizeFactorParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.QuantizeFactorParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuantizeFactorParams::IsInitialized() const {
  return true;
}

void QuantizeFactorParams::InternalSwap(QuantizeFactorParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuantizeFactorParams, scale_type_)
      + sizeof(QuantizeFactorParams::scale_type_)
      - PROTOBUF_FIELD_OFFSET(QuantizeFactorParams, quantize_param_)>(
          reinterpret_cast<char*>(&quantize_param_),
          reinterpret_cast<char*>(&other->quantize_param_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QuantizeFactorParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConvolutionOpParams::InitAsDefaultInstance() {
  ::domi::_ConvolutionOpParams_default_instance_._instance.get_mutable()->filter_ = const_cast< ::domi::WeightDef*>(
      ::domi::WeightDef::internal_default_instance());
  ::domi::_ConvolutionOpParams_default_instance_._instance.get_mutable()->bias_ = const_cast< ::domi::WeightDef*>(
      ::domi::WeightDef::internal_default_instance());
}
class ConvolutionOpParams::_Internal {
 public:
  static const ::domi::WeightDef& filter(const ConvolutionOpParams* msg);
  static const ::domi::WeightDef& bias(const ConvolutionOpParams* msg);
};

const ::domi::WeightDef&
ConvolutionOpParams::_Internal::filter(const ConvolutionOpParams* msg) {
  return *msg->filter_;
}
const ::domi::WeightDef&
ConvolutionOpParams::_Internal::bias(const ConvolutionOpParams* msg) {
  return *msg->bias_;
}
ConvolutionOpParams::ConvolutionOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pad_(arena),
  stride_(arena),
  dilation_(arena),
  kernel_(arena),
  adj_(arena),
  target_shape_(arena),
  before_pad_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.ConvolutionOpParams)
}
ConvolutionOpParams::ConvolutionOpParams(const ConvolutionOpParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pad_(from.pad_),
      stride_(from.stride_),
      dilation_(from.dilation_),
      kernel_(from.kernel_),
      adj_(from.adj_),
      target_shape_(from.target_shape_),
      before_pad_(from.before_pad_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filter()) {
    filter_ = new ::domi::WeightDef(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  if (from._internal_has_bias()) {
    bias_ = new ::domi::WeightDef(*from.bias_);
  } else {
    bias_ = nullptr;
  }
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&relu_flag_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(relu_flag_));
  // @@protoc_insertion_point(copy_constructor:domi.ConvolutionOpParams)
}

void ConvolutionOpParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConvolutionOpParams_om_2eproto.base);
  ::memset(&filter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relu_flag_) -
      reinterpret_cast<char*>(&filter_)) + sizeof(relu_flag_));
}

ConvolutionOpParams::~ConvolutionOpParams() {
  // @@protoc_insertion_point(destructor:domi.ConvolutionOpParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConvolutionOpParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete filter_;
  if (this != internal_default_instance()) delete bias_;
}

void ConvolutionOpParams::ArenaDtor(void* object) {
  ConvolutionOpParams* _this = reinterpret_cast< ConvolutionOpParams* >(object);
  (void)_this;
}
void ConvolutionOpParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConvolutionOpParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConvolutionOpParams& ConvolutionOpParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConvolutionOpParams_om_2eproto.base);
  return *internal_default_instance();
}


void ConvolutionOpParams::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.ConvolutionOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pad_.Clear();
  stride_.Clear();
  dilation_.Clear();
  kernel_.Clear();
  adj_.Clear();
  target_shape_.Clear();
  before_pad_.Clear();
  if (GetArena() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
  if (GetArena() == nullptr && bias_ != nullptr) {
    delete bias_;
  }
  bias_ = nullptr;
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relu_flag_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(relu_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConvolutionOpParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 algo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          algo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pad_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pad_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 group = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_output = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          num_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 pad = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_pad(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_pad(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 stride = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_stride(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88) {
          _internal_add_stride(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 dilation = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_dilation(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96) {
          _internal_add_dilation(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 kernel = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_kernel(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104) {
          _internal_add_kernel(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float alpha = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float beta = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .domi.WeightDef filter = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.WeightDef bias = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool relu_flag = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          relu_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 adj = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_adj(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_adj(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 target_shape = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_target_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_target_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 before_pad = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_before_pad(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_before_pad(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConvolutionOpParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.ConvolutionOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mode = 1;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mode(), target);
  }

  // int32 algo = 2;
  if (this->algo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_algo(), target);
  }

  // int32 pad_mode = 3;
  if (this->pad_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_pad_mode(), target);
  }

  // uint32 group = 4;
  if (this->group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_group(), target);
  }

  // uint32 num_output = 5;
  if (this->num_output() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_num_output(), target);
  }

  // repeated uint32 pad = 10;
  {
    int byte_size = _pad_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          10, _internal_pad(), byte_size, target);
    }
  }

  // repeated uint32 stride = 11;
  {
    int byte_size = _stride_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          11, _internal_stride(), byte_size, target);
    }
  }

  // repeated uint32 dilation = 12;
  {
    int byte_size = _dilation_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          12, _internal_dilation(), byte_size, target);
    }
  }

  // repeated uint32 kernel = 13;
  {
    int byte_size = _kernel_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          13, _internal_kernel(), byte_size, target);
    }
  }

  // float alpha = 20;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_alpha(), target);
  }

  // float beta = 21;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_beta(), target);
  }

  // .domi.WeightDef filter = 40;
  if (this->has_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::filter(this), target, stream);
  }

  // .domi.WeightDef bias = 41;
  if (this->has_bias()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::bias(this), target, stream);
  }

  // bool relu_flag = 62;
  if (this->relu_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(62, this->_internal_relu_flag(), target);
  }

  // repeated uint32 adj = 70;
  {
    int byte_size = _adj_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          70, _internal_adj(), byte_size, target);
    }
  }

  // repeated uint32 target_shape = 71;
  {
    int byte_size = _target_shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          71, _internal_target_shape(), byte_size, target);
    }
  }

  // repeated uint32 before_pad = 72;
  {
    int byte_size = _before_pad_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          72, _internal_before_pad(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.ConvolutionOpParams)
  return target;
}

size_t ConvolutionOpParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.ConvolutionOpParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 pad = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->pad_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pad_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 stride = 11;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->stride_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _stride_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 dilation = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->dilation_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dilation_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 kernel = 13;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->kernel_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _kernel_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 adj = 70;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->adj_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _adj_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 target_shape = 71;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->target_shape_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _target_shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 before_pad = 72;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->before_pad_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _before_pad_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .domi.WeightDef filter = 40;
  if (this->has_filter()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_);
  }

  // .domi.WeightDef bias = 41;
  if (this->has_bias()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bias_);
  }

  // int32 mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mode());
  }

  // int32 algo = 2;
  if (this->algo() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_algo());
  }

  // int32 pad_mode = 3;
  if (this->pad_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pad_mode());
  }

  // uint32 group = 4;
  if (this->group() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_group());
  }

  // uint32 num_output = 5;
  if (this->num_output() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_output());
  }

  // float alpha = 20;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    total_size += 2 + 4;
  }

  // float beta = 21;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    total_size += 2 + 4;
  }

  // bool relu_flag = 62;
  if (this->relu_flag() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConvolutionOpParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.ConvolutionOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ConvolutionOpParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConvolutionOpParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.ConvolutionOpParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.ConvolutionOpParams)
    MergeFrom(*source);
  }
}

void ConvolutionOpParams::MergeFrom(const ConvolutionOpParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.ConvolutionOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pad_.MergeFrom(from.pad_);
  stride_.MergeFrom(from.stride_);
  dilation_.MergeFrom(from.dilation_);
  kernel_.MergeFrom(from.kernel_);
  adj_.MergeFrom(from.adj_);
  target_shape_.MergeFrom(from.target_shape_);
  before_pad_.MergeFrom(from.before_pad_);
  if (from.has_filter()) {
    _internal_mutable_filter()->::domi::WeightDef::MergeFrom(from._internal_filter());
  }
  if (from.has_bias()) {
    _internal_mutable_bias()->::domi::WeightDef::MergeFrom(from._internal_bias());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.algo() != 0) {
    _internal_set_algo(from._internal_algo());
  }
  if (from.pad_mode() != 0) {
    _internal_set_pad_mode(from._internal_pad_mode());
  }
  if (from.group() != 0) {
    _internal_set_group(from._internal_group());
  }
  if (from.num_output() != 0) {
    _internal_set_num_output(from._internal_num_output());
  }
  if (!(from.alpha() <= 0 && from.alpha() >= 0)) {
    _internal_set_alpha(from._internal_alpha());
  }
  if (!(from.beta() <= 0 && from.beta() >= 0)) {
    _internal_set_beta(from._internal_beta());
  }
  if (from.relu_flag() != 0) {
    _internal_set_relu_flag(from._internal_relu_flag());
  }
}

void ConvolutionOpParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.ConvolutionOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvolutionOpParams::CopyFrom(const ConvolutionOpParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.ConvolutionOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvolutionOpParams::IsInitialized() const {
  return true;
}

void ConvolutionOpParams::InternalSwap(ConvolutionOpParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pad_.InternalSwap(&other->pad_);
  stride_.InternalSwap(&other->stride_);
  dilation_.InternalSwap(&other->dilation_);
  kernel_.InternalSwap(&other->kernel_);
  adj_.InternalSwap(&other->adj_);
  target_shape_.InternalSwap(&other->target_shape_);
  before_pad_.InternalSwap(&other->before_pad_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConvolutionOpParams, relu_flag_)
      + sizeof(ConvolutionOpParams::relu_flag_)
      - PROTOBUF_FIELD_OFFSET(ConvolutionOpParams, filter_)>(
          reinterpret_cast<char*>(&filter_),
          reinterpret_cast<char*>(&other->filter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConvolutionOpParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PoolingOpParams::InitAsDefaultInstance() {
}
class PoolingOpParams::_Internal {
 public:
};

PoolingOpParams::PoolingOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  window_(arena),
  pad_(arena),
  stride_(arena),
  before_pad_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.PoolingOpParams)
}
PoolingOpParams::PoolingOpParams(const PoolingOpParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      window_(from.window_),
      pad_(from.pad_),
      stride_(from.stride_),
      before_pad_(from.before_pad_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&alpha_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(alpha_));
  // @@protoc_insertion_point(copy_constructor:domi.PoolingOpParams)
}

void PoolingOpParams::SharedCtor() {
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alpha_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(alpha_));
}

PoolingOpParams::~PoolingOpParams() {
  // @@protoc_insertion_point(destructor:domi.PoolingOpParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PoolingOpParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PoolingOpParams::ArenaDtor(void* object) {
  PoolingOpParams* _this = reinterpret_cast< PoolingOpParams* >(object);
  (void)_this;
}
void PoolingOpParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PoolingOpParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoolingOpParams& PoolingOpParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PoolingOpParams_om_2eproto.base);
  return *internal_default_instance();
}


void PoolingOpParams::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.PoolingOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  window_.Clear();
  pad_.Clear();
  stride_.Clear();
  before_pad_.Clear();
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alpha_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(alpha_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoolingOpParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nan_opt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nan_opt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pad_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pad_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool global_pooling = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          global_pooling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 window = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_window(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_window(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 pad = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_pad(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88) {
          _internal_add_pad(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 stride = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_stride(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96) {
          _internal_add_stride(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ceil_mode = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ceil_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 data_mode = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          data_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float alpha = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float beta = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated uint32 before_pad = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_before_pad(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176) {
          _internal_add_before_pad(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoolingOpParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.PoolingOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mode = 1;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mode(), target);
  }

  // int32 nan_opt = 2;
  if (this->nan_opt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_nan_opt(), target);
  }

  // int32 pad_mode = 3;
  if (this->pad_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_pad_mode(), target);
  }

  // bool global_pooling = 4;
  if (this->global_pooling() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_global_pooling(), target);
  }

  // repeated uint32 window = 10;
  {
    int byte_size = _window_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          10, _internal_window(), byte_size, target);
    }
  }

  // repeated uint32 pad = 11;
  {
    int byte_size = _pad_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          11, _internal_pad(), byte_size, target);
    }
  }

  // repeated uint32 stride = 12;
  {
    int byte_size = _stride_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          12, _internal_stride(), byte_size, target);
    }
  }

  // bool ceil_mode = 13;
  if (this->ceil_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_ceil_mode(), target);
  }

  // int32 data_mode = 14;
  if (this->data_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_data_mode(), target);
  }

  // float alpha = 20;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_alpha(), target);
  }

  // float beta = 21;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_beta(), target);
  }

  // repeated uint32 before_pad = 22;
  {
    int byte_size = _before_pad_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          22, _internal_before_pad(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.PoolingOpParams)
  return target;
}

size_t PoolingOpParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.PoolingOpParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 window = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->window_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _window_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 pad = 11;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->pad_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pad_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 stride = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->stride_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _stride_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 before_pad = 22;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->before_pad_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _before_pad_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mode());
  }

  // int32 nan_opt = 2;
  if (this->nan_opt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nan_opt());
  }

  // int32 pad_mode = 3;
  if (this->pad_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pad_mode());
  }

  // bool global_pooling = 4;
  if (this->global_pooling() != 0) {
    total_size += 1 + 1;
  }

  // bool ceil_mode = 13;
  if (this->ceil_mode() != 0) {
    total_size += 1 + 1;
  }

  // float beta = 21;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 data_mode = 14;
  if (this->data_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_data_mode());
  }

  // float alpha = 20;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoolingOpParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.PoolingOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  const PoolingOpParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PoolingOpParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.PoolingOpParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.PoolingOpParams)
    MergeFrom(*source);
  }
}

void PoolingOpParams::MergeFrom(const PoolingOpParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.PoolingOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  window_.MergeFrom(from.window_);
  pad_.MergeFrom(from.pad_);
  stride_.MergeFrom(from.stride_);
  before_pad_.MergeFrom(from.before_pad_);
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.nan_opt() != 0) {
    _internal_set_nan_opt(from._internal_nan_opt());
  }
  if (from.pad_mode() != 0) {
    _internal_set_pad_mode(from._internal_pad_mode());
  }
  if (from.global_pooling() != 0) {
    _internal_set_global_pooling(from._internal_global_pooling());
  }
  if (from.ceil_mode() != 0) {
    _internal_set_ceil_mode(from._internal_ceil_mode());
  }
  if (!(from.beta() <= 0 && from.beta() >= 0)) {
    _internal_set_beta(from._internal_beta());
  }
  if (from.data_mode() != 0) {
    _internal_set_data_mode(from._internal_data_mode());
  }
  if (!(from.alpha() <= 0 && from.alpha() >= 0)) {
    _internal_set_alpha(from._internal_alpha());
  }
}

void PoolingOpParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.PoolingOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoolingOpParams::CopyFrom(const PoolingOpParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.PoolingOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoolingOpParams::IsInitialized() const {
  return true;
}

void PoolingOpParams::InternalSwap(PoolingOpParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  window_.InternalSwap(&other->window_);
  pad_.InternalSwap(&other->pad_);
  stride_.InternalSwap(&other->stride_);
  before_pad_.InternalSwap(&other->before_pad_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PoolingOpParams, alpha_)
      + sizeof(PoolingOpParams::alpha_)
      - PROTOBUF_FIELD_OFFSET(PoolingOpParams, mode_)>(
          reinterpret_cast<char*>(&mode_),
          reinterpret_cast<char*>(&other->mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PoolingOpParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EltwiseOpParams::InitAsDefaultInstance() {
}
class EltwiseOpParams::_Internal {
 public:
};

EltwiseOpParams::EltwiseOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  coeff_(arena),
  weight_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.EltwiseOpParams)
}
EltwiseOpParams::EltwiseOpParams(const EltwiseOpParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      coeff_(from.coeff_),
      weight_(from.weight_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&relu_flag_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(relu_flag_));
  // @@protoc_insertion_point(copy_constructor:domi.EltwiseOpParams)
}

void EltwiseOpParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EltwiseOpParams_om_2eproto.base);
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relu_flag_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(relu_flag_));
}

EltwiseOpParams::~EltwiseOpParams() {
  // @@protoc_insertion_point(destructor:domi.EltwiseOpParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EltwiseOpParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EltwiseOpParams::ArenaDtor(void* object) {
  EltwiseOpParams* _this = reinterpret_cast< EltwiseOpParams* >(object);
  (void)_this;
}
void EltwiseOpParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EltwiseOpParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EltwiseOpParams& EltwiseOpParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EltwiseOpParams_om_2eproto.base);
  return *internal_default_instance();
}


void EltwiseOpParams::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.EltwiseOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coeff_.Clear();
  weight_.Clear();
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relu_flag_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(relu_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EltwiseOpParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float coeff = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_coeff(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_coeff(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float alpha = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float beta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .domi.WeightDef weight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_weight(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // bool relu_flag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          relu_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EltwiseOpParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.EltwiseOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mode = 1;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mode(), target);
  }

  // repeated float coeff = 2;
  if (this->_internal_coeff_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_coeff(), target);
  }

  // float alpha = 3;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_alpha(), target);
  }

  // float beta = 4;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_beta(), target);
  }

  // repeated .domi.WeightDef weight = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_weight_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_weight(i), target, stream);
  }

  // bool relu_flag = 6;
  if (this->relu_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_relu_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.EltwiseOpParams)
  return target;
}

size_t EltwiseOpParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.EltwiseOpParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float coeff = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_coeff_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _coeff_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .domi.WeightDef weight = 5;
  total_size += 1UL * this->_internal_weight_size();
  for (const auto& msg : this->weight_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mode());
  }

  // float alpha = 3;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    total_size += 1 + 4;
  }

  // float beta = 4;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    total_size += 1 + 4;
  }

  // bool relu_flag = 6;
  if (this->relu_flag() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EltwiseOpParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.EltwiseOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  const EltwiseOpParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EltwiseOpParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.EltwiseOpParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.EltwiseOpParams)
    MergeFrom(*source);
  }
}

void EltwiseOpParams::MergeFrom(const EltwiseOpParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.EltwiseOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coeff_.MergeFrom(from.coeff_);
  weight_.MergeFrom(from.weight_);
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (!(from.alpha() <= 0 && from.alpha() >= 0)) {
    _internal_set_alpha(from._internal_alpha());
  }
  if (!(from.beta() <= 0 && from.beta() >= 0)) {
    _internal_set_beta(from._internal_beta());
  }
  if (from.relu_flag() != 0) {
    _internal_set_relu_flag(from._internal_relu_flag());
  }
}

void EltwiseOpParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.EltwiseOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EltwiseOpParams::CopyFrom(const EltwiseOpParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.EltwiseOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EltwiseOpParams::IsInitialized() const {
  return true;
}

void EltwiseOpParams::InternalSwap(EltwiseOpParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  coeff_.InternalSwap(&other->coeff_);
  weight_.InternalSwap(&other->weight_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EltwiseOpParams, relu_flag_)
      + sizeof(EltwiseOpParams::relu_flag_)
      - PROTOBUF_FIELD_OFFSET(EltwiseOpParams, mode_)>(
          reinterpret_cast<char*>(&mode_),
          reinterpret_cast<char*>(&other->mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EltwiseOpParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActivationOpParams::InitAsDefaultInstance() {
}
class ActivationOpParams::_Internal {
 public:
};

ActivationOpParams::ActivationOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.ActivationOpParams)
}
ActivationOpParams::ActivationOpParams(const ActivationOpParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(beta_));
  // @@protoc_insertion_point(copy_constructor:domi.ActivationOpParams)
}

void ActivationOpParams::SharedCtor() {
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&beta_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(beta_));
}

ActivationOpParams::~ActivationOpParams() {
  // @@protoc_insertion_point(destructor:domi.ActivationOpParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActivationOpParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ActivationOpParams::ArenaDtor(void* object) {
  ActivationOpParams* _this = reinterpret_cast< ActivationOpParams* >(object);
  (void)_this;
}
void ActivationOpParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActivationOpParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivationOpParams& ActivationOpParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivationOpParams_om_2eproto.base);
  return *internal_default_instance();
}


void ActivationOpParams::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.ActivationOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&beta_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(beta_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivationOpParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float coef = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          coef_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float alpha = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float beta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivationOpParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.ActivationOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mode = 1;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mode(), target);
  }

  // float coef = 2;
  if (!(this->coef() <= 0 && this->coef() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_coef(), target);
  }

  // float alpha = 3;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_alpha(), target);
  }

  // float beta = 4;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_beta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.ActivationOpParams)
  return target;
}

size_t ActivationOpParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.ActivationOpParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mode());
  }

  // float coef = 2;
  if (!(this->coef() <= 0 && this->coef() >= 0)) {
    total_size += 1 + 4;
  }

  // float alpha = 3;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    total_size += 1 + 4;
  }

  // float beta = 4;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivationOpParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.ActivationOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivationOpParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivationOpParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.ActivationOpParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.ActivationOpParams)
    MergeFrom(*source);
  }
}

void ActivationOpParams::MergeFrom(const ActivationOpParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.ActivationOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (!(from.coef() <= 0 && from.coef() >= 0)) {
    _internal_set_coef(from._internal_coef());
  }
  if (!(from.alpha() <= 0 && from.alpha() >= 0)) {
    _internal_set_alpha(from._internal_alpha());
  }
  if (!(from.beta() <= 0 && from.beta() >= 0)) {
    _internal_set_beta(from._internal_beta());
  }
}

void ActivationOpParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.ActivationOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivationOpParams::CopyFrom(const ActivationOpParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.ActivationOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivationOpParams::IsInitialized() const {
  return true;
}

void ActivationOpParams::InternalSwap(ActivationOpParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActivationOpParams, beta_)
      + sizeof(ActivationOpParams::beta_)
      - PROTOBUF_FIELD_OFFSET(ActivationOpParams, mode_)>(
          reinterpret_cast<char*>(&mode_),
          reinterpret_cast<char*>(&other->mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivationOpParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BatchNormOpParams::InitAsDefaultInstance() {
  ::domi::_BatchNormOpParams_default_instance_._instance.get_mutable()->estimated_mean_ = const_cast< ::domi::WeightDef*>(
      ::domi::WeightDef::internal_default_instance());
  ::domi::_BatchNormOpParams_default_instance_._instance.get_mutable()->estimated_variance_ = const_cast< ::domi::WeightDef*>(
      ::domi::WeightDef::internal_default_instance());
  ::domi::_BatchNormOpParams_default_instance_._instance.get_mutable()->scale_ = const_cast< ::domi::WeightDef*>(
      ::domi::WeightDef::internal_default_instance());
  ::domi::_BatchNormOpParams_default_instance_._instance.get_mutable()->bias_ = const_cast< ::domi::WeightDef*>(
      ::domi::WeightDef::internal_default_instance());
}
class BatchNormOpParams::_Internal {
 public:
  static const ::domi::WeightDef& estimated_mean(const BatchNormOpParams* msg);
  static const ::domi::WeightDef& estimated_variance(const BatchNormOpParams* msg);
  static const ::domi::WeightDef& scale(const BatchNormOpParams* msg);
  static const ::domi::WeightDef& bias(const BatchNormOpParams* msg);
};

const ::domi::WeightDef&
BatchNormOpParams::_Internal::estimated_mean(const BatchNormOpParams* msg) {
  return *msg->estimated_mean_;
}
const ::domi::WeightDef&
BatchNormOpParams::_Internal::estimated_variance(const BatchNormOpParams* msg) {
  return *msg->estimated_variance_;
}
const ::domi::WeightDef&
BatchNormOpParams::_Internal::scale(const BatchNormOpParams* msg) {
  return *msg->scale_;
}
const ::domi::WeightDef&
BatchNormOpParams::_Internal::bias(const BatchNormOpParams* msg) {
  return *msg->bias_;
}
BatchNormOpParams::BatchNormOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.BatchNormOpParams)
}
BatchNormOpParams::BatchNormOpParams(const BatchNormOpParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_estimated_mean()) {
    estimated_mean_ = new ::domi::WeightDef(*from.estimated_mean_);
  } else {
    estimated_mean_ = nullptr;
  }
  if (from._internal_has_estimated_variance()) {
    estimated_variance_ = new ::domi::WeightDef(*from.estimated_variance_);
  } else {
    estimated_variance_ = nullptr;
  }
  if (from._internal_has_scale()) {
    scale_ = new ::domi::WeightDef(*from.scale_);
  } else {
    scale_ = nullptr;
  }
  if (from._internal_has_bias()) {
    bias_ = new ::domi::WeightDef(*from.bias_);
  } else {
    bias_ = nullptr;
  }
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&moving_average_fraction_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(moving_average_fraction_));
  // @@protoc_insertion_point(copy_constructor:domi.BatchNormOpParams)
}

void BatchNormOpParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BatchNormOpParams_om_2eproto.base);
  ::memset(&estimated_mean_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&moving_average_fraction_) -
      reinterpret_cast<char*>(&estimated_mean_)) + sizeof(moving_average_fraction_));
}

BatchNormOpParams::~BatchNormOpParams() {
  // @@protoc_insertion_point(destructor:domi.BatchNormOpParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BatchNormOpParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete estimated_mean_;
  if (this != internal_default_instance()) delete estimated_variance_;
  if (this != internal_default_instance()) delete scale_;
  if (this != internal_default_instance()) delete bias_;
}

void BatchNormOpParams::ArenaDtor(void* object) {
  BatchNormOpParams* _this = reinterpret_cast< BatchNormOpParams* >(object);
  (void)_this;
}
void BatchNormOpParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchNormOpParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchNormOpParams& BatchNormOpParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatchNormOpParams_om_2eproto.base);
  return *internal_default_instance();
}


void BatchNormOpParams::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.BatchNormOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && estimated_mean_ != nullptr) {
    delete estimated_mean_;
  }
  estimated_mean_ = nullptr;
  if (GetArena() == nullptr && estimated_variance_ != nullptr) {
    delete estimated_variance_;
  }
  estimated_variance_ = nullptr;
  if (GetArena() == nullptr && scale_ != nullptr) {
    delete scale_;
  }
  scale_ = nullptr;
  if (GetArena() == nullptr && bias_ != nullptr) {
    delete bias_;
  }
  bias_ = nullptr;
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&moving_average_fraction_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(moving_average_fraction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchNormOpParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float alpha = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float beta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double epsilon = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          epsilon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool use_global_stats = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          use_global_stats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float moving_average_fraction = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          moving_average_fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .domi.WeightDef estimated_mean = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_estimated_mean(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.WeightDef estimated_variance = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_estimated_variance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.WeightDef scale = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.WeightDef bias = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchNormOpParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.BatchNormOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mode = 1;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mode(), target);
  }

  // float alpha = 2;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_alpha(), target);
  }

  // float beta = 3;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_beta(), target);
  }

  // double epsilon = 4;
  if (!(this->epsilon() <= 0 && this->epsilon() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_epsilon(), target);
  }

  // bool use_global_stats = 5;
  if (this->use_global_stats() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_use_global_stats(), target);
  }

  // float moving_average_fraction = 6;
  if (!(this->moving_average_fraction() <= 0 && this->moving_average_fraction() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_moving_average_fraction(), target);
  }

  // .domi.WeightDef estimated_mean = 7;
  if (this->has_estimated_mean()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::estimated_mean(this), target, stream);
  }

  // .domi.WeightDef estimated_variance = 8;
  if (this->has_estimated_variance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::estimated_variance(this), target, stream);
  }

  // .domi.WeightDef scale = 9;
  if (this->has_scale()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::scale(this), target, stream);
  }

  // .domi.WeightDef bias = 10;
  if (this->has_bias()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::bias(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.BatchNormOpParams)
  return target;
}

size_t BatchNormOpParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.BatchNormOpParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .domi.WeightDef estimated_mean = 7;
  if (this->has_estimated_mean()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *estimated_mean_);
  }

  // .domi.WeightDef estimated_variance = 8;
  if (this->has_estimated_variance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *estimated_variance_);
  }

  // .domi.WeightDef scale = 9;
  if (this->has_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scale_);
  }

  // .domi.WeightDef bias = 10;
  if (this->has_bias()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bias_);
  }

  // int32 mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mode());
  }

  // float alpha = 2;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    total_size += 1 + 4;
  }

  // double epsilon = 4;
  if (!(this->epsilon() <= 0 && this->epsilon() >= 0)) {
    total_size += 1 + 8;
  }

  // float beta = 3;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    total_size += 1 + 4;
  }

  // bool use_global_stats = 5;
  if (this->use_global_stats() != 0) {
    total_size += 1 + 1;
  }

  // float moving_average_fraction = 6;
  if (!(this->moving_average_fraction() <= 0 && this->moving_average_fraction() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchNormOpParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.BatchNormOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchNormOpParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatchNormOpParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.BatchNormOpParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.BatchNormOpParams)
    MergeFrom(*source);
  }
}

void BatchNormOpParams::MergeFrom(const BatchNormOpParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.BatchNormOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_estimated_mean()) {
    _internal_mutable_estimated_mean()->::domi::WeightDef::MergeFrom(from._internal_estimated_mean());
  }
  if (from.has_estimated_variance()) {
    _internal_mutable_estimated_variance()->::domi::WeightDef::MergeFrom(from._internal_estimated_variance());
  }
  if (from.has_scale()) {
    _internal_mutable_scale()->::domi::WeightDef::MergeFrom(from._internal_scale());
  }
  if (from.has_bias()) {
    _internal_mutable_bias()->::domi::WeightDef::MergeFrom(from._internal_bias());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (!(from.alpha() <= 0 && from.alpha() >= 0)) {
    _internal_set_alpha(from._internal_alpha());
  }
  if (!(from.epsilon() <= 0 && from.epsilon() >= 0)) {
    _internal_set_epsilon(from._internal_epsilon());
  }
  if (!(from.beta() <= 0 && from.beta() >= 0)) {
    _internal_set_beta(from._internal_beta());
  }
  if (from.use_global_stats() != 0) {
    _internal_set_use_global_stats(from._internal_use_global_stats());
  }
  if (!(from.moving_average_fraction() <= 0 && from.moving_average_fraction() >= 0)) {
    _internal_set_moving_average_fraction(from._internal_moving_average_fraction());
  }
}

void BatchNormOpParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.BatchNormOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchNormOpParams::CopyFrom(const BatchNormOpParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.BatchNormOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchNormOpParams::IsInitialized() const {
  return true;
}

void BatchNormOpParams::InternalSwap(BatchNormOpParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatchNormOpParams, moving_average_fraction_)
      + sizeof(BatchNormOpParams::moving_average_fraction_)
      - PROTOBUF_FIELD_OFFSET(BatchNormOpParams, estimated_mean_)>(
          reinterpret_cast<char*>(&estimated_mean_),
          reinterpret_cast<char*>(&other->estimated_mean_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchNormOpParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScaleOpParams::InitAsDefaultInstance() {
  ::domi::_ScaleOpParams_default_instance_._instance.get_mutable()->scale_ = const_cast< ::domi::WeightDef*>(
      ::domi::WeightDef::internal_default_instance());
  ::domi::_ScaleOpParams_default_instance_._instance.get_mutable()->bias_ = const_cast< ::domi::WeightDef*>(
      ::domi::WeightDef::internal_default_instance());
}
class ScaleOpParams::_Internal {
 public:
  static const ::domi::WeightDef& scale(const ScaleOpParams* msg);
  static const ::domi::WeightDef& bias(const ScaleOpParams* msg);
};

const ::domi::WeightDef&
ScaleOpParams::_Internal::scale(const ScaleOpParams* msg) {
  return *msg->scale_;
}
const ::domi::WeightDef&
ScaleOpParams::_Internal::bias(const ScaleOpParams* msg) {
  return *msg->bias_;
}
ScaleOpParams::ScaleOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.ScaleOpParams)
}
ScaleOpParams::ScaleOpParams(const ScaleOpParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scale()) {
    scale_ = new ::domi::WeightDef(*from.scale_);
  } else {
    scale_ = nullptr;
  }
  if (from._internal_has_bias()) {
    bias_ = new ::domi::WeightDef(*from.bias_);
  } else {
    bias_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:domi.ScaleOpParams)
}

void ScaleOpParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScaleOpParams_om_2eproto.base);
  ::memset(&scale_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bias_) -
      reinterpret_cast<char*>(&scale_)) + sizeof(bias_));
}

ScaleOpParams::~ScaleOpParams() {
  // @@protoc_insertion_point(destructor:domi.ScaleOpParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScaleOpParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scale_;
  if (this != internal_default_instance()) delete bias_;
}

void ScaleOpParams::ArenaDtor(void* object) {
  ScaleOpParams* _this = reinterpret_cast< ScaleOpParams* >(object);
  (void)_this;
}
void ScaleOpParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScaleOpParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScaleOpParams& ScaleOpParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScaleOpParams_om_2eproto.base);
  return *internal_default_instance();
}


void ScaleOpParams::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.ScaleOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scale_ != nullptr) {
    delete scale_;
  }
  scale_ = nullptr;
  if (GetArena() == nullptr && bias_ != nullptr) {
    delete bias_;
  }
  bias_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScaleOpParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .domi.WeightDef scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.WeightDef bias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScaleOpParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.ScaleOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .domi.WeightDef scale = 1;
  if (this->has_scale()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scale(this), target, stream);
  }

  // .domi.WeightDef bias = 2;
  if (this->has_bias()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bias(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.ScaleOpParams)
  return target;
}

size_t ScaleOpParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.ScaleOpParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .domi.WeightDef scale = 1;
  if (this->has_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scale_);
  }

  // .domi.WeightDef bias = 2;
  if (this->has_bias()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bias_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScaleOpParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.ScaleOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ScaleOpParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScaleOpParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.ScaleOpParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.ScaleOpParams)
    MergeFrom(*source);
  }
}

void ScaleOpParams::MergeFrom(const ScaleOpParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.ScaleOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scale()) {
    _internal_mutable_scale()->::domi::WeightDef::MergeFrom(from._internal_scale());
  }
  if (from.has_bias()) {
    _internal_mutable_bias()->::domi::WeightDef::MergeFrom(from._internal_bias());
  }
}

void ScaleOpParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.ScaleOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScaleOpParams::CopyFrom(const ScaleOpParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.ScaleOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScaleOpParams::IsInitialized() const {
  return true;
}

void ScaleOpParams::InternalSwap(ScaleOpParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScaleOpParams, bias_)
      + sizeof(ScaleOpParams::bias_)
      - PROTOBUF_FIELD_OFFSET(ScaleOpParams, scale_)>(
          reinterpret_cast<char*>(&scale_),
          reinterpret_cast<char*>(&other->scale_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScaleOpParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReshapeOpParams::InitAsDefaultInstance() {
  ::domi::_ReshapeOpParams_default_instance_._instance.get_mutable()->shape_ = const_cast< ::domi::ShapeDef*>(
      ::domi::ShapeDef::internal_default_instance());
}
class ReshapeOpParams::_Internal {
 public:
  static const ::domi::ShapeDef& shape(const ReshapeOpParams* msg);
};

const ::domi::ShapeDef&
ReshapeOpParams::_Internal::shape(const ReshapeOpParams* msg) {
  return *msg->shape_;
}
ReshapeOpParams::ReshapeOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.ReshapeOpParams)
}
ReshapeOpParams::ReshapeOpParams(const ReshapeOpParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shape()) {
    shape_ = new ::domi::ShapeDef(*from.shape_);
  } else {
    shape_ = nullptr;
  }
  ::memcpy(&alpha_, &from.alpha_,
    static_cast<size_t>(reinterpret_cast<char*>(&format_) -
    reinterpret_cast<char*>(&alpha_)) + sizeof(format_));
  // @@protoc_insertion_point(copy_constructor:domi.ReshapeOpParams)
}

void ReshapeOpParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReshapeOpParams_om_2eproto.base);
  ::memset(&shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&format_) -
      reinterpret_cast<char*>(&shape_)) + sizeof(format_));
}

ReshapeOpParams::~ReshapeOpParams() {
  // @@protoc_insertion_point(destructor:domi.ReshapeOpParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReshapeOpParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete shape_;
}

void ReshapeOpParams::ArenaDtor(void* object) {
  ReshapeOpParams* _this = reinterpret_cast< ReshapeOpParams* >(object);
  (void)_this;
}
void ReshapeOpParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReshapeOpParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReshapeOpParams& ReshapeOpParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReshapeOpParams_om_2eproto.base);
  return *internal_default_instance();
}


void ReshapeOpParams::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.ReshapeOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
  ::memset(&alpha_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&format_) -
      reinterpret_cast<char*>(&alpha_)) + sizeof(format_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReshapeOpParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float alpha = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float beta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .domi.ShapeDef shape = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 axis = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_axes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          num_axes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 format = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReshapeOpParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.ReshapeOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_alpha(), target);
  }

  // float beta = 2;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_beta(), target);
  }

  // .domi.ShapeDef shape = 3;
  if (this->has_shape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::shape(this), target, stream);
  }

  // int32 axis = 4;
  if (this->axis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_axis(), target);
  }

  // int32 num_axes = 5;
  if (this->num_axes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_num_axes(), target);
  }

  // int32 format = 6;
  if (this->format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.ReshapeOpParams)
  return target;
}

size_t ReshapeOpParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.ReshapeOpParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .domi.ShapeDef shape = 3;
  if (this->has_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  // float alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    total_size += 1 + 4;
  }

  // float beta = 2;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 axis = 4;
  if (this->axis() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axis());
  }

  // int32 num_axes = 5;
  if (this->num_axes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_axes());
  }

  // int32 format = 6;
  if (this->format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_format());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReshapeOpParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.ReshapeOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ReshapeOpParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReshapeOpParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.ReshapeOpParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.ReshapeOpParams)
    MergeFrom(*source);
  }
}

void ReshapeOpParams::MergeFrom(const ReshapeOpParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.ReshapeOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_shape()) {
    _internal_mutable_shape()->::domi::ShapeDef::MergeFrom(from._internal_shape());
  }
  if (!(from.alpha() <= 0 && from.alpha() >= 0)) {
    _internal_set_alpha(from._internal_alpha());
  }
  if (!(from.beta() <= 0 && from.beta() >= 0)) {
    _internal_set_beta(from._internal_beta());
  }
  if (from.axis() != 0) {
    _internal_set_axis(from._internal_axis());
  }
  if (from.num_axes() != 0) {
    _internal_set_num_axes(from._internal_num_axes());
  }
  if (from.format() != 0) {
    _internal_set_format(from._internal_format());
  }
}

void ReshapeOpParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.ReshapeOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReshapeOpParams::CopyFrom(const ReshapeOpParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.ReshapeOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReshapeOpParams::IsInitialized() const {
  return true;
}

void ReshapeOpParams::InternalSwap(ReshapeOpParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReshapeOpParams, format_)
      + sizeof(ReshapeOpParams::format_)
      - PROTOBUF_FIELD_OFFSET(ReshapeOpParams, shape_)>(
          reinterpret_cast<char*>(&shape_),
          reinterpret_cast<char*>(&other->shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReshapeOpParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SoftmaxOpParams::InitAsDefaultInstance() {
}
class SoftmaxOpParams::_Internal {
 public:
};

SoftmaxOpParams::SoftmaxOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.SoftmaxOpParams)
}
SoftmaxOpParams::SoftmaxOpParams(const SoftmaxOpParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&algo_, &from.algo_,
    static_cast<size_t>(reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&algo_)) + sizeof(beta_));
  // @@protoc_insertion_point(copy_constructor:domi.SoftmaxOpParams)
}

void SoftmaxOpParams::SharedCtor() {
  ::memset(&algo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&beta_) -
      reinterpret_cast<char*>(&algo_)) + sizeof(beta_));
}

SoftmaxOpParams::~SoftmaxOpParams() {
  // @@protoc_insertion_point(destructor:domi.SoftmaxOpParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SoftmaxOpParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SoftmaxOpParams::ArenaDtor(void* object) {
  SoftmaxOpParams* _this = reinterpret_cast< SoftmaxOpParams* >(object);
  (void)_this;
}
void SoftmaxOpParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SoftmaxOpParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SoftmaxOpParams& SoftmaxOpParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SoftmaxOpParams_om_2eproto.base);
  return *internal_default_instance();
}


void SoftmaxOpParams::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.SoftmaxOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&algo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&beta_) -
      reinterpret_cast<char*>(&algo_)) + sizeof(beta_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SoftmaxOpParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 algo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          algo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float alpha = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float beta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SoftmaxOpParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.SoftmaxOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 algo = 1;
  if (this->algo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_algo(), target);
  }

  // int32 mode = 2;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mode(), target);
  }

  // float alpha = 3;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_alpha(), target);
  }

  // float beta = 4;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_beta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.SoftmaxOpParams)
  return target;
}

size_t SoftmaxOpParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.SoftmaxOpParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 algo = 1;
  if (this->algo() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_algo());
  }

  // int32 mode = 2;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mode());
  }

  // float alpha = 3;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    total_size += 1 + 4;
  }

  // float beta = 4;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SoftmaxOpParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.SoftmaxOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  const SoftmaxOpParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SoftmaxOpParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.SoftmaxOpParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.SoftmaxOpParams)
    MergeFrom(*source);
  }
}

void SoftmaxOpParams::MergeFrom(const SoftmaxOpParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.SoftmaxOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.algo() != 0) {
    _internal_set_algo(from._internal_algo());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (!(from.alpha() <= 0 && from.alpha() >= 0)) {
    _internal_set_alpha(from._internal_alpha());
  }
  if (!(from.beta() <= 0 && from.beta() >= 0)) {
    _internal_set_beta(from._internal_beta());
  }
}

void SoftmaxOpParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.SoftmaxOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftmaxOpParams::CopyFrom(const SoftmaxOpParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.SoftmaxOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftmaxOpParams::IsInitialized() const {
  return true;
}

void SoftmaxOpParams::InternalSwap(SoftmaxOpParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SoftmaxOpParams, beta_)
      + sizeof(SoftmaxOpParams::beta_)
      - PROTOBUF_FIELD_OFFSET(SoftmaxOpParams, algo_)>(
          reinterpret_cast<char*>(&algo_),
          reinterpret_cast<char*>(&other->algo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SoftmaxOpParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FullConnectionOpParams::InitAsDefaultInstance() {
  ::domi::_FullConnectionOpParams_default_instance_._instance.get_mutable()->filter_ = const_cast< ::domi::WeightDef*>(
      ::domi::WeightDef::internal_default_instance());
  ::domi::_FullConnectionOpParams_default_instance_._instance.get_mutable()->bias_ = const_cast< ::domi::WeightDef*>(
      ::domi::WeightDef::internal_default_instance());
}
class FullConnectionOpParams::_Internal {
 public:
  static const ::domi::WeightDef& filter(const FullConnectionOpParams* msg);
  static const ::domi::WeightDef& bias(const FullConnectionOpParams* msg);
};

const ::domi::WeightDef&
FullConnectionOpParams::_Internal::filter(const FullConnectionOpParams* msg) {
  return *msg->filter_;
}
const ::domi::WeightDef&
FullConnectionOpParams::_Internal::bias(const FullConnectionOpParams* msg) {
  return *msg->bias_;
}
FullConnectionOpParams::FullConnectionOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.FullConnectionOpParams)
}
FullConnectionOpParams::FullConnectionOpParams(const FullConnectionOpParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filter()) {
    filter_ = new ::domi::WeightDef(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  if (from._internal_has_bias()) {
    bias_ = new ::domi::WeightDef(*from.bias_);
  } else {
    bias_ = nullptr;
  }
  ::memcpy(&num_output_, &from.num_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&relu_flag_) -
    reinterpret_cast<char*>(&num_output_)) + sizeof(relu_flag_));
  // @@protoc_insertion_point(copy_constructor:domi.FullConnectionOpParams)
}

void FullConnectionOpParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FullConnectionOpParams_om_2eproto.base);
  ::memset(&filter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relu_flag_) -
      reinterpret_cast<char*>(&filter_)) + sizeof(relu_flag_));
}

FullConnectionOpParams::~FullConnectionOpParams() {
  // @@protoc_insertion_point(destructor:domi.FullConnectionOpParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FullConnectionOpParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete filter_;
  if (this != internal_default_instance()) delete bias_;
}

void FullConnectionOpParams::ArenaDtor(void* object) {
  FullConnectionOpParams* _this = reinterpret_cast< FullConnectionOpParams* >(object);
  (void)_this;
}
void FullConnectionOpParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FullConnectionOpParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FullConnectionOpParams& FullConnectionOpParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FullConnectionOpParams_om_2eproto.base);
  return *internal_default_instance();
}


void FullConnectionOpParams::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.FullConnectionOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
  if (GetArena() == nullptr && bias_ != nullptr) {
    delete bias_;
  }
  bias_ = nullptr;
  ::memset(&num_output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relu_flag_) -
      reinterpret_cast<char*>(&num_output_)) + sizeof(relu_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FullConnectionOpParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .domi.WeightDef filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.WeightDef bias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_output = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool relu_flag = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          relu_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FullConnectionOpParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.FullConnectionOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .domi.WeightDef filter = 1;
  if (this->has_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::filter(this), target, stream);
  }

  // .domi.WeightDef bias = 2;
  if (this->has_bias()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bias(this), target, stream);
  }

  // uint32 num_output = 3;
  if (this->num_output() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_output(), target);
  }

  // bool relu_flag = 12;
  if (this->relu_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_relu_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.FullConnectionOpParams)
  return target;
}

size_t FullConnectionOpParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.FullConnectionOpParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .domi.WeightDef filter = 1;
  if (this->has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_);
  }

  // .domi.WeightDef bias = 2;
  if (this->has_bias()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bias_);
  }

  // uint32 num_output = 3;
  if (this->num_output() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_output());
  }

  // bool relu_flag = 12;
  if (this->relu_flag() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FullConnectionOpParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.FullConnectionOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  const FullConnectionOpParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FullConnectionOpParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.FullConnectionOpParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.FullConnectionOpParams)
    MergeFrom(*source);
  }
}

void FullConnectionOpParams::MergeFrom(const FullConnectionOpParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.FullConnectionOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_filter()) {
    _internal_mutable_filter()->::domi::WeightDef::MergeFrom(from._internal_filter());
  }
  if (from.has_bias()) {
    _internal_mutable_bias()->::domi::WeightDef::MergeFrom(from._internal_bias());
  }
  if (from.num_output() != 0) {
    _internal_set_num_output(from._internal_num_output());
  }
  if (from.relu_flag() != 0) {
    _internal_set_relu_flag(from._internal_relu_flag());
  }
}

void FullConnectionOpParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.FullConnectionOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FullConnectionOpParams::CopyFrom(const FullConnectionOpParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.FullConnectionOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullConnectionOpParams::IsInitialized() const {
  return true;
}

void FullConnectionOpParams::InternalSwap(FullConnectionOpParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FullConnectionOpParams, relu_flag_)
      + sizeof(FullConnectionOpParams::relu_flag_)
      - PROTOBUF_FIELD_OFFSET(FullConnectionOpParams, filter_)>(
          reinterpret_cast<char*>(&filter_),
          reinterpret_cast<char*>(&other->filter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FullConnectionOpParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlattenOpParams::InitAsDefaultInstance() {
}
class FlattenOpParams::_Internal {
 public:
};

FlattenOpParams::FlattenOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.FlattenOpParams)
}
FlattenOpParams::FlattenOpParams(const FlattenOpParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&alpha_, &from.alpha_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_axis_) -
    reinterpret_cast<char*>(&alpha_)) + sizeof(end_axis_));
  // @@protoc_insertion_point(copy_constructor:domi.FlattenOpParams)
}

void FlattenOpParams::SharedCtor() {
  ::memset(&alpha_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_axis_) -
      reinterpret_cast<char*>(&alpha_)) + sizeof(end_axis_));
}

FlattenOpParams::~FlattenOpParams() {
  // @@protoc_insertion_point(destructor:domi.FlattenOpParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlattenOpParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FlattenOpParams::ArenaDtor(void* object) {
  FlattenOpParams* _this = reinterpret_cast< FlattenOpParams* >(object);
  (void)_this;
}
void FlattenOpParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlattenOpParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlattenOpParams& FlattenOpParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlattenOpParams_om_2eproto.base);
  return *internal_default_instance();
}


void FlattenOpParams::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.FlattenOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&alpha_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_axis_) -
      reinterpret_cast<char*>(&alpha_)) + sizeof(end_axis_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlattenOpParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float alpha = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float beta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 start_axis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          start_axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 end_axis = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          end_axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlattenOpParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.FlattenOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_alpha(), target);
  }

  // float beta = 2;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_beta(), target);
  }

  // int32 start_axis = 3;
  if (this->start_axis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_start_axis(), target);
  }

  // int32 end_axis = 4;
  if (this->end_axis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_end_axis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.FlattenOpParams)
  return target;
}

size_t FlattenOpParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.FlattenOpParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    total_size += 1 + 4;
  }

  // float beta = 2;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 start_axis = 3;
  if (this->start_axis() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start_axis());
  }

  // int32 end_axis = 4;
  if (this->end_axis() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_end_axis());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlattenOpParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.FlattenOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  const FlattenOpParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlattenOpParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.FlattenOpParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.FlattenOpParams)
    MergeFrom(*source);
  }
}

void FlattenOpParams::MergeFrom(const FlattenOpParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.FlattenOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.alpha() <= 0 && from.alpha() >= 0)) {
    _internal_set_alpha(from._internal_alpha());
  }
  if (!(from.beta() <= 0 && from.beta() >= 0)) {
    _internal_set_beta(from._internal_beta());
  }
  if (from.start_axis() != 0) {
    _internal_set_start_axis(from._internal_start_axis());
  }
  if (from.end_axis() != 0) {
    _internal_set_end_axis(from._internal_end_axis());
  }
}

void FlattenOpParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.FlattenOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlattenOpParams::CopyFrom(const FlattenOpParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.FlattenOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlattenOpParams::IsInitialized() const {
  return true;
}

void FlattenOpParams::InternalSwap(FlattenOpParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlattenOpParams, end_axis_)
      + sizeof(FlattenOpParams::end_axis_)
      - PROTOBUF_FIELD_OFFSET(FlattenOpParams, alpha_)>(
          reinterpret_cast<char*>(&alpha_),
          reinterpret_cast<char*>(&other->alpha_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlattenOpParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddLimitedOpParams::InitAsDefaultInstance() {
}
class AddLimitedOpParams::_Internal {
 public:
};

AddLimitedOpParams::AddLimitedOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  weight_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.AddLimitedOpParams)
}
AddLimitedOpParams::AddLimitedOpParams(const AddLimitedOpParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      weight_(from.weight_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&alpha_, &from.alpha_,
    static_cast<size_t>(reinterpret_cast<char*>(&broadcast_) -
    reinterpret_cast<char*>(&alpha_)) + sizeof(broadcast_));
  // @@protoc_insertion_point(copy_constructor:domi.AddLimitedOpParams)
}

void AddLimitedOpParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddLimitedOpParams_om_2eproto.base);
  ::memset(&alpha_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&broadcast_) -
      reinterpret_cast<char*>(&alpha_)) + sizeof(broadcast_));
}

AddLimitedOpParams::~AddLimitedOpParams() {
  // @@protoc_insertion_point(destructor:domi.AddLimitedOpParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddLimitedOpParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AddLimitedOpParams::ArenaDtor(void* object) {
  AddLimitedOpParams* _this = reinterpret_cast< AddLimitedOpParams* >(object);
  (void)_this;
}
void AddLimitedOpParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddLimitedOpParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddLimitedOpParams& AddLimitedOpParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddLimitedOpParams_om_2eproto.base);
  return *internal_default_instance();
}


void AddLimitedOpParams::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.AddLimitedOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weight_.Clear();
  ::memset(&alpha_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&broadcast_) -
      reinterpret_cast<char*>(&alpha_)) + sizeof(broadcast_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddLimitedOpParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float alpha = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float beta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 axis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool broadcast = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          broadcast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .domi.WeightDef weight = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_weight(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddLimitedOpParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.AddLimitedOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_alpha(), target);
  }

  // float beta = 2;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_beta(), target);
  }

  // int32 axis = 3;
  if (this->axis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_axis(), target);
  }

  // bool broadcast = 4;
  if (this->broadcast() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_broadcast(), target);
  }

  // repeated .domi.WeightDef weight = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_weight_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_weight(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.AddLimitedOpParams)
  return target;
}

size_t AddLimitedOpParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.AddLimitedOpParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .domi.WeightDef weight = 10;
  total_size += 1UL * this->_internal_weight_size();
  for (const auto& msg : this->weight_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // float alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    total_size += 1 + 4;
  }

  // float beta = 2;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 axis = 3;
  if (this->axis() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axis());
  }

  // bool broadcast = 4;
  if (this->broadcast() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddLimitedOpParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.AddLimitedOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  const AddLimitedOpParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddLimitedOpParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.AddLimitedOpParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.AddLimitedOpParams)
    MergeFrom(*source);
  }
}

void AddLimitedOpParams::MergeFrom(const AddLimitedOpParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.AddLimitedOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weight_.MergeFrom(from.weight_);
  if (!(from.alpha() <= 0 && from.alpha() >= 0)) {
    _internal_set_alpha(from._internal_alpha());
  }
  if (!(from.beta() <= 0 && from.beta() >= 0)) {
    _internal_set_beta(from._internal_beta());
  }
  if (from.axis() != 0) {
    _internal_set_axis(from._internal_axis());
  }
  if (from.broadcast() != 0) {
    _internal_set_broadcast(from._internal_broadcast());
  }
}

void AddLimitedOpParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.AddLimitedOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddLimitedOpParams::CopyFrom(const AddLimitedOpParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.AddLimitedOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddLimitedOpParams::IsInitialized() const {
  return true;
}

void AddLimitedOpParams::InternalSwap(AddLimitedOpParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  weight_.InternalSwap(&other->weight_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddLimitedOpParams, broadcast_)
      + sizeof(AddLimitedOpParams::broadcast_)
      - PROTOBUF_FIELD_OFFSET(AddLimitedOpParams, alpha_)>(
          reinterpret_cast<char*>(&alpha_),
          reinterpret_cast<char*>(&other->alpha_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddLimitedOpParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MulLimitedOpParams::InitAsDefaultInstance() {
}
class MulLimitedOpParams::_Internal {
 public:
};

MulLimitedOpParams::MulLimitedOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  weight_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.MulLimitedOpParams)
}
MulLimitedOpParams::MulLimitedOpParams(const MulLimitedOpParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      weight_(from.weight_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&alpha_, &from.alpha_,
    static_cast<size_t>(reinterpret_cast<char*>(&broadcast_) -
    reinterpret_cast<char*>(&alpha_)) + sizeof(broadcast_));
  // @@protoc_insertion_point(copy_constructor:domi.MulLimitedOpParams)
}

void MulLimitedOpParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MulLimitedOpParams_om_2eproto.base);
  ::memset(&alpha_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&broadcast_) -
      reinterpret_cast<char*>(&alpha_)) + sizeof(broadcast_));
}

MulLimitedOpParams::~MulLimitedOpParams() {
  // @@protoc_insertion_point(destructor:domi.MulLimitedOpParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MulLimitedOpParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MulLimitedOpParams::ArenaDtor(void* object) {
  MulLimitedOpParams* _this = reinterpret_cast< MulLimitedOpParams* >(object);
  (void)_this;
}
void MulLimitedOpParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MulLimitedOpParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MulLimitedOpParams& MulLimitedOpParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MulLimitedOpParams_om_2eproto.base);
  return *internal_default_instance();
}


void MulLimitedOpParams::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.MulLimitedOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weight_.Clear();
  ::memset(&alpha_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&broadcast_) -
      reinterpret_cast<char*>(&alpha_)) + sizeof(broadcast_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MulLimitedOpParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float alpha = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float beta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 axis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool broadcast = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          broadcast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .domi.WeightDef weight = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_weight(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MulLimitedOpParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.MulLimitedOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_alpha(), target);
  }

  // float beta = 2;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_beta(), target);
  }

  // int32 axis = 3;
  if (this->axis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_axis(), target);
  }

  // bool broadcast = 4;
  if (this->broadcast() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_broadcast(), target);
  }

  // repeated .domi.WeightDef weight = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_weight_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_weight(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.MulLimitedOpParams)
  return target;
}

size_t MulLimitedOpParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.MulLimitedOpParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .domi.WeightDef weight = 10;
  total_size += 1UL * this->_internal_weight_size();
  for (const auto& msg : this->weight_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // float alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    total_size += 1 + 4;
  }

  // float beta = 2;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 axis = 3;
  if (this->axis() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axis());
  }

  // bool broadcast = 4;
  if (this->broadcast() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MulLimitedOpParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.MulLimitedOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  const MulLimitedOpParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MulLimitedOpParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.MulLimitedOpParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.MulLimitedOpParams)
    MergeFrom(*source);
  }
}

void MulLimitedOpParams::MergeFrom(const MulLimitedOpParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.MulLimitedOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weight_.MergeFrom(from.weight_);
  if (!(from.alpha() <= 0 && from.alpha() >= 0)) {
    _internal_set_alpha(from._internal_alpha());
  }
  if (!(from.beta() <= 0 && from.beta() >= 0)) {
    _internal_set_beta(from._internal_beta());
  }
  if (from.axis() != 0) {
    _internal_set_axis(from._internal_axis());
  }
  if (from.broadcast() != 0) {
    _internal_set_broadcast(from._internal_broadcast());
  }
}

void MulLimitedOpParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.MulLimitedOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MulLimitedOpParams::CopyFrom(const MulLimitedOpParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.MulLimitedOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MulLimitedOpParams::IsInitialized() const {
  return true;
}

void MulLimitedOpParams::InternalSwap(MulLimitedOpParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  weight_.InternalSwap(&other->weight_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MulLimitedOpParams, broadcast_)
      + sizeof(MulLimitedOpParams::broadcast_)
      - PROTOBUF_FIELD_OFFSET(MulLimitedOpParams, alpha_)>(
          reinterpret_cast<char*>(&alpha_),
          reinterpret_cast<char*>(&other->alpha_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MulLimitedOpParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddOpParams::InitAsDefaultInstance() {
}
class AddOpParams::_Internal {
 public:
};

AddOpParams::AddOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  weight_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.AddOpParams)
}
AddOpParams::AddOpParams(const AddOpParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      weight_(from.weight_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&alpha_, &from.alpha_,
    static_cast<size_t>(reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_)) + sizeof(beta_));
  // @@protoc_insertion_point(copy_constructor:domi.AddOpParams)
}

void AddOpParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddOpParams_om_2eproto.base);
  ::memset(&alpha_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&beta_) -
      reinterpret_cast<char*>(&alpha_)) + sizeof(beta_));
}

AddOpParams::~AddOpParams() {
  // @@protoc_insertion_point(destructor:domi.AddOpParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddOpParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AddOpParams::ArenaDtor(void* object) {
  AddOpParams* _this = reinterpret_cast< AddOpParams* >(object);
  (void)_this;
}
void AddOpParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddOpParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddOpParams& AddOpParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddOpParams_om_2eproto.base);
  return *internal_default_instance();
}


void AddOpParams::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.AddOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weight_.Clear();
  ::memset(&alpha_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&beta_) -
      reinterpret_cast<char*>(&alpha_)) + sizeof(beta_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddOpParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float alpha = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float beta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .domi.WeightDef weight = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_weight(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddOpParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.AddOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_alpha(), target);
  }

  // float beta = 2;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_beta(), target);
  }

  // repeated .domi.WeightDef weight = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_weight_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_weight(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.AddOpParams)
  return target;
}

size_t AddOpParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.AddOpParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .domi.WeightDef weight = 10;
  total_size += 1UL * this->_internal_weight_size();
  for (const auto& msg : this->weight_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // float alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    total_size += 1 + 4;
  }

  // float beta = 2;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddOpParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.AddOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  const AddOpParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddOpParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.AddOpParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.AddOpParams)
    MergeFrom(*source);
  }
}

void AddOpParams::MergeFrom(const AddOpParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.AddOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weight_.MergeFrom(from.weight_);
  if (!(from.alpha() <= 0 && from.alpha() >= 0)) {
    _internal_set_alpha(from._internal_alpha());
  }
  if (!(from.beta() <= 0 && from.beta() >= 0)) {
    _internal_set_beta(from._internal_beta());
  }
}

void AddOpParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.AddOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddOpParams::CopyFrom(const AddOpParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.AddOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddOpParams::IsInitialized() const {
  return true;
}

void AddOpParams::InternalSwap(AddOpParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  weight_.InternalSwap(&other->weight_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddOpParams, beta_)
      + sizeof(AddOpParams::beta_)
      - PROTOBUF_FIELD_OFFSET(AddOpParams, alpha_)>(
          reinterpret_cast<char*>(&alpha_),
          reinterpret_cast<char*>(&other->alpha_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddOpParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MulOpParams::InitAsDefaultInstance() {
}
class MulOpParams::_Internal {
 public:
};

MulOpParams::MulOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  weight_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.MulOpParams)
}
MulOpParams::MulOpParams(const MulOpParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      weight_(from.weight_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&alpha_, &from.alpha_,
    static_cast<size_t>(reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_)) + sizeof(beta_));
  // @@protoc_insertion_point(copy_constructor:domi.MulOpParams)
}

void MulOpParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MulOpParams_om_2eproto.base);
  ::memset(&alpha_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&beta_) -
      reinterpret_cast<char*>(&alpha_)) + sizeof(beta_));
}

MulOpParams::~MulOpParams() {
  // @@protoc_insertion_point(destructor:domi.MulOpParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MulOpParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MulOpParams::ArenaDtor(void* object) {
  MulOpParams* _this = reinterpret_cast< MulOpParams* >(object);
  (void)_this;
}
void MulOpParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MulOpParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MulOpParams& MulOpParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MulOpParams_om_2eproto.base);
  return *internal_default_instance();
}


void MulOpParams::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.MulOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weight_.Clear();
  ::memset(&alpha_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&beta_) -
      reinterpret_cast<char*>(&alpha_)) + sizeof(beta_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MulOpParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float alpha = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float beta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .domi.WeightDef weight = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_weight(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MulOpParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.MulOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_alpha(), target);
  }

  // float beta = 2;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_beta(), target);
  }

  // repeated .domi.WeightDef weight = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_weight_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_weight(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.MulOpParams)
  return target;
}

size_t MulOpParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.MulOpParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .domi.WeightDef weight = 10;
  total_size += 1UL * this->_internal_weight_size();
  for (const auto& msg : this->weight_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // float alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    total_size += 1 + 4;
  }

  // float beta = 2;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MulOpParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.MulOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  const MulOpParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MulOpParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.MulOpParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.MulOpParams)
    MergeFrom(*source);
  }
}

void MulOpParams::MergeFrom(const MulOpParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.MulOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weight_.MergeFrom(from.weight_);
  if (!(from.alpha() <= 0 && from.alpha() >= 0)) {
    _internal_set_alpha(from._internal_alpha());
  }
  if (!(from.beta() <= 0 && from.beta() >= 0)) {
    _internal_set_beta(from._internal_beta());
  }
}

void MulOpParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.MulOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MulOpParams::CopyFrom(const MulOpParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.MulOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MulOpParams::IsInitialized() const {
  return true;
}

void MulOpParams::InternalSwap(MulOpParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  weight_.InternalSwap(&other->weight_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MulOpParams, beta_)
      + sizeof(MulOpParams::beta_)
      - PROTOBUF_FIELD_OFFSET(MulOpParams, alpha_)>(
          reinterpret_cast<char*>(&alpha_),
          reinterpret_cast<char*>(&other->alpha_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MulOpParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubOpParams::InitAsDefaultInstance() {
}
class SubOpParams::_Internal {
 public:
};

SubOpParams::SubOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  weight_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.SubOpParams)
}
SubOpParams::SubOpParams(const SubOpParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      weight_(from.weight_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&alpha_, &from.alpha_,
    static_cast<size_t>(reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_)) + sizeof(beta_));
  // @@protoc_insertion_point(copy_constructor:domi.SubOpParams)
}

void SubOpParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubOpParams_om_2eproto.base);
  ::memset(&alpha_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&beta_) -
      reinterpret_cast<char*>(&alpha_)) + sizeof(beta_));
}

SubOpParams::~SubOpParams() {
  // @@protoc_insertion_point(destructor:domi.SubOpParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubOpParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubOpParams::ArenaDtor(void* object) {
  SubOpParams* _this = reinterpret_cast< SubOpParams* >(object);
  (void)_this;
}
void SubOpParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubOpParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubOpParams& SubOpParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubOpParams_om_2eproto.base);
  return *internal_default_instance();
}


void SubOpParams::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.SubOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weight_.Clear();
  ::memset(&alpha_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&beta_) -
      reinterpret_cast<char*>(&alpha_)) + sizeof(beta_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubOpParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float alpha = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float beta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .domi.WeightDef weight = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_weight(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubOpParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.SubOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_alpha(), target);
  }

  // float beta = 2;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_beta(), target);
  }

  // repeated .domi.WeightDef weight = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_weight_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_weight(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.SubOpParams)
  return target;
}

size_t SubOpParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.SubOpParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .domi.WeightDef weight = 10;
  total_size += 1UL * this->_internal_weight_size();
  for (const auto& msg : this->weight_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // float alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    total_size += 1 + 4;
  }

  // float beta = 2;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubOpParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.SubOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  const SubOpParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubOpParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.SubOpParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.SubOpParams)
    MergeFrom(*source);
  }
}

void SubOpParams::MergeFrom(const SubOpParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.SubOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weight_.MergeFrom(from.weight_);
  if (!(from.alpha() <= 0 && from.alpha() >= 0)) {
    _internal_set_alpha(from._internal_alpha());
  }
  if (!(from.beta() <= 0 && from.beta() >= 0)) {
    _internal_set_beta(from._internal_beta());
  }
}

void SubOpParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.SubOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubOpParams::CopyFrom(const SubOpParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.SubOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubOpParams::IsInitialized() const {
  return true;
}

void SubOpParams::InternalSwap(SubOpParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  weight_.InternalSwap(&other->weight_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubOpParams, beta_)
      + sizeof(SubOpParams::beta_)
      - PROTOBUF_FIELD_OFFSET(SubOpParams, alpha_)>(
          reinterpret_cast<char*>(&alpha_),
          reinterpret_cast<char*>(&other->alpha_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubOpParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BiasAddOpParams::InitAsDefaultInstance() {
  ::domi::_BiasAddOpParams_default_instance_._instance.get_mutable()->bias_ = const_cast< ::domi::WeightDef*>(
      ::domi::WeightDef::internal_default_instance());
}
class BiasAddOpParams::_Internal {
 public:
  static const ::domi::WeightDef& bias(const BiasAddOpParams* msg);
};

const ::domi::WeightDef&
BiasAddOpParams::_Internal::bias(const BiasAddOpParams* msg) {
  return *msg->bias_;
}
BiasAddOpParams::BiasAddOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.BiasAddOpParams)
}
BiasAddOpParams::BiasAddOpParams(const BiasAddOpParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bias()) {
    bias_ = new ::domi::WeightDef(*from.bias_);
  } else {
    bias_ = nullptr;
  }
  ::memcpy(&alpha_, &from.alpha_,
    static_cast<size_t>(reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_)) + sizeof(beta_));
  // @@protoc_insertion_point(copy_constructor:domi.BiasAddOpParams)
}

void BiasAddOpParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BiasAddOpParams_om_2eproto.base);
  ::memset(&bias_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&beta_) -
      reinterpret_cast<char*>(&bias_)) + sizeof(beta_));
}

BiasAddOpParams::~BiasAddOpParams() {
  // @@protoc_insertion_point(destructor:domi.BiasAddOpParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BiasAddOpParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bias_;
}

void BiasAddOpParams::ArenaDtor(void* object) {
  BiasAddOpParams* _this = reinterpret_cast< BiasAddOpParams* >(object);
  (void)_this;
}
void BiasAddOpParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BiasAddOpParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BiasAddOpParams& BiasAddOpParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BiasAddOpParams_om_2eproto.base);
  return *internal_default_instance();
}


void BiasAddOpParams::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.BiasAddOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && bias_ != nullptr) {
    delete bias_;
  }
  bias_ = nullptr;
  ::memset(&alpha_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&beta_) -
      reinterpret_cast<char*>(&alpha_)) + sizeof(beta_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BiasAddOpParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float alpha = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float beta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .domi.WeightDef bias = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BiasAddOpParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.BiasAddOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_alpha(), target);
  }

  // float beta = 2;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_beta(), target);
  }

  // .domi.WeightDef bias = 10;
  if (this->has_bias()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::bias(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.BiasAddOpParams)
  return target;
}

size_t BiasAddOpParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.BiasAddOpParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .domi.WeightDef bias = 10;
  if (this->has_bias()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bias_);
  }

  // float alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    total_size += 1 + 4;
  }

  // float beta = 2;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BiasAddOpParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.BiasAddOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  const BiasAddOpParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BiasAddOpParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.BiasAddOpParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.BiasAddOpParams)
    MergeFrom(*source);
  }
}

void BiasAddOpParams::MergeFrom(const BiasAddOpParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.BiasAddOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bias()) {
    _internal_mutable_bias()->::domi::WeightDef::MergeFrom(from._internal_bias());
  }
  if (!(from.alpha() <= 0 && from.alpha() >= 0)) {
    _internal_set_alpha(from._internal_alpha());
  }
  if (!(from.beta() <= 0 && from.beta() >= 0)) {
    _internal_set_beta(from._internal_beta());
  }
}

void BiasAddOpParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.BiasAddOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BiasAddOpParams::CopyFrom(const BiasAddOpParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.BiasAddOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiasAddOpParams::IsInitialized() const {
  return true;
}

void BiasAddOpParams::InternalSwap(BiasAddOpParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BiasAddOpParams, beta_)
      + sizeof(BiasAddOpParams::beta_)
      - PROTOBUF_FIELD_OFFSET(BiasAddOpParams, bias_)>(
          reinterpret_cast<char*>(&bias_),
          reinterpret_cast<char*>(&other->bias_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BiasAddOpParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MatMulOpParams::InitAsDefaultInstance() {
  ::domi::_MatMulOpParams_default_instance_._instance.get_mutable()->filter_ = const_cast< ::domi::WeightDef*>(
      ::domi::WeightDef::internal_default_instance());
  ::domi::_MatMulOpParams_default_instance_._instance.get_mutable()->bias_ = const_cast< ::domi::WeightDef*>(
      ::domi::WeightDef::internal_default_instance());
}
class MatMulOpParams::_Internal {
 public:
  static const ::domi::WeightDef& filter(const MatMulOpParams* msg);
  static const ::domi::WeightDef& bias(const MatMulOpParams* msg);
};

const ::domi::WeightDef&
MatMulOpParams::_Internal::filter(const MatMulOpParams* msg) {
  return *msg->filter_;
}
const ::domi::WeightDef&
MatMulOpParams::_Internal::bias(const MatMulOpParams* msg) {
  return *msg->bias_;
}
MatMulOpParams::MatMulOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.MatMulOpParams)
}
MatMulOpParams::MatMulOpParams(const MatMulOpParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filter()) {
    filter_ = new ::domi::WeightDef(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  if (from._internal_has_bias()) {
    bias_ = new ::domi::WeightDef(*from.bias_);
  } else {
    bias_ = nullptr;
  }
  ::memcpy(&alpha_, &from.alpha_,
    static_cast<size_t>(reinterpret_cast<char*>(&transposew_) -
    reinterpret_cast<char*>(&alpha_)) + sizeof(transposew_));
  // @@protoc_insertion_point(copy_constructor:domi.MatMulOpParams)
}

void MatMulOpParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatMulOpParams_om_2eproto.base);
  ::memset(&filter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transposew_) -
      reinterpret_cast<char*>(&filter_)) + sizeof(transposew_));
}

MatMulOpParams::~MatMulOpParams() {
  // @@protoc_insertion_point(destructor:domi.MatMulOpParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatMulOpParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete filter_;
  if (this != internal_default_instance()) delete bias_;
}

void MatMulOpParams::ArenaDtor(void* object) {
  MatMulOpParams* _this = reinterpret_cast< MatMulOpParams* >(object);
  (void)_this;
}
void MatMulOpParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatMulOpParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatMulOpParams& MatMulOpParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatMulOpParams_om_2eproto.base);
  return *internal_default_instance();
}


void MatMulOpParams::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.MatMulOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
  if (GetArena() == nullptr && bias_ != nullptr) {
    delete bias_;
  }
  bias_ = nullptr;
  ::memset(&alpha_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transposew_) -
      reinterpret_cast<char*>(&alpha_)) + sizeof(transposew_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatMulOpParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float alpha = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float beta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool transposeX = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          transposex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool transposeW = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          transposew_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.WeightDef filter = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.WeightDef bias = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatMulOpParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.MatMulOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_alpha(), target);
  }

  // float beta = 2;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_beta(), target);
  }

  // bool transposeX = 3;
  if (this->transposex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_transposex(), target);
  }

  // bool transposeW = 4;
  if (this->transposew() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_transposew(), target);
  }

  // .domi.WeightDef filter = 10;
  if (this->has_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::filter(this), target, stream);
  }

  // .domi.WeightDef bias = 12;
  if (this->has_bias()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::bias(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.MatMulOpParams)
  return target;
}

size_t MatMulOpParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.MatMulOpParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .domi.WeightDef filter = 10;
  if (this->has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_);
  }

  // .domi.WeightDef bias = 12;
  if (this->has_bias()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bias_);
  }

  // float alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    total_size += 1 + 4;
  }

  // float beta = 2;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    total_size += 1 + 4;
  }

  // bool transposeX = 3;
  if (this->transposex() != 0) {
    total_size += 1 + 1;
  }

  // bool transposeW = 4;
  if (this->transposew() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatMulOpParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.MatMulOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  const MatMulOpParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatMulOpParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.MatMulOpParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.MatMulOpParams)
    MergeFrom(*source);
  }
}

void MatMulOpParams::MergeFrom(const MatMulOpParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.MatMulOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_filter()) {
    _internal_mutable_filter()->::domi::WeightDef::MergeFrom(from._internal_filter());
  }
  if (from.has_bias()) {
    _internal_mutable_bias()->::domi::WeightDef::MergeFrom(from._internal_bias());
  }
  if (!(from.alpha() <= 0 && from.alpha() >= 0)) {
    _internal_set_alpha(from._internal_alpha());
  }
  if (!(from.beta() <= 0 && from.beta() >= 0)) {
    _internal_set_beta(from._internal_beta());
  }
  if (from.transposex() != 0) {
    _internal_set_transposex(from._internal_transposex());
  }
  if (from.transposew() != 0) {
    _internal_set_transposew(from._internal_transposew());
  }
}

void MatMulOpParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.MatMulOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatMulOpParams::CopyFrom(const MatMulOpParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.MatMulOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatMulOpParams::IsInitialized() const {
  return true;
}

void MatMulOpParams::InternalSwap(MatMulOpParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatMulOpParams, transposew_)
      + sizeof(MatMulOpParams::transposew_)
      - PROTOBUF_FIELD_OFFSET(MatMulOpParams, filter_)>(
          reinterpret_cast<char*>(&filter_),
          reinterpret_cast<char*>(&other->filter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatMulOpParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RsqrtOpParams::InitAsDefaultInstance() {
}
class RsqrtOpParams::_Internal {
 public:
};

RsqrtOpParams::RsqrtOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.RsqrtOpParams)
}
RsqrtOpParams::RsqrtOpParams(const RsqrtOpParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&alpha_, &from.alpha_,
    static_cast<size_t>(reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_)) + sizeof(beta_));
  // @@protoc_insertion_point(copy_constructor:domi.RsqrtOpParams)
}

void RsqrtOpParams::SharedCtor() {
  ::memset(&alpha_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&beta_) -
      reinterpret_cast<char*>(&alpha_)) + sizeof(beta_));
}

RsqrtOpParams::~RsqrtOpParams() {
  // @@protoc_insertion_point(destructor:domi.RsqrtOpParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RsqrtOpParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RsqrtOpParams::ArenaDtor(void* object) {
  RsqrtOpParams* _this = reinterpret_cast< RsqrtOpParams* >(object);
  (void)_this;
}
void RsqrtOpParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RsqrtOpParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RsqrtOpParams& RsqrtOpParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RsqrtOpParams_om_2eproto.base);
  return *internal_default_instance();
}


void RsqrtOpParams::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.RsqrtOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&alpha_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&beta_) -
      reinterpret_cast<char*>(&alpha_)) + sizeof(beta_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RsqrtOpParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float alpha = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float beta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RsqrtOpParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.RsqrtOpParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_alpha(), target);
  }

  // float beta = 2;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_beta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.RsqrtOpParams)
  return target;
}

size_t RsqrtOpParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.RsqrtOpParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    total_size += 1 + 4;
  }

  // float beta = 2;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RsqrtOpParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.RsqrtOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  const RsqrtOpParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RsqrtOpParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.RsqrtOpParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.RsqrtOpParams)
    MergeFrom(*source);
  }
}

void RsqrtOpParams::MergeFrom(const RsqrtOpParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.RsqrtOpParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.alpha() <= 0 && from.alpha() >= 0)) {
    _internal_set_alpha(from._internal_alpha());
  }
  if (!(from.beta() <= 0 && from.beta() >= 0)) {
    _internal_set_beta(from._internal_beta());
  }
}

void RsqrtOpParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.RsqrtOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RsqrtOpParams::CopyFrom(const RsqrtOpParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.RsqrtOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RsqrtOpParams::IsInitialized() const {
  return true;
}

void RsqrtOpParams::InternalSwap(RsqrtOpParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RsqrtOpParams, beta_)
      + sizeof(RsqrtOpParams::beta_)
      - PROTOBUF_FIELD_OFFSET(RsqrtOpParams, alpha_)>(
          reinterpret_cast<char*>(&alpha_),
          reinterpret_cast<char*>(&other->alpha_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RsqrtOpParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WeightDef::InitAsDefaultInstance() {
  ::domi::_WeightDef_default_instance_._instance.get_mutable()->shape_ = const_cast< ::domi::ShapeDef*>(
      ::domi::ShapeDef::internal_default_instance());
  ::domi::_WeightDef_default_instance_._instance.get_mutable()->cmps_info_ = const_cast< ::domi::CompressInfo*>(
      ::domi::CompressInfo::internal_default_instance());
  ::domi::_WeightDef_default_instance_._instance.get_mutable()->alloffset_quantize_info_ = const_cast< ::domi::AllOffsetQuantizeInfo*>(
      ::domi::AllOffsetQuantizeInfo::internal_default_instance());
}
class WeightDef::_Internal {
 public:
  static const ::domi::ShapeDef& shape(const WeightDef* msg);
  static const ::domi::CompressInfo& cmps_info(const WeightDef* msg);
  static const ::domi::AllOffsetQuantizeInfo& alloffset_quantize_info(const WeightDef* msg);
};

const ::domi::ShapeDef&
WeightDef::_Internal::shape(const WeightDef* msg) {
  return *msg->shape_;
}
const ::domi::CompressInfo&
WeightDef::_Internal::cmps_info(const WeightDef* msg) {
  return *msg->cmps_info_;
}
const ::domi::AllOffsetQuantizeInfo&
WeightDef::_Internal::alloffset_quantize_info(const WeightDef* msg) {
  return *msg->alloffset_quantize_info_;
}
WeightDef::WeightDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.WeightDef)
}
WeightDef::WeightDef(const WeightDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  cmps_tab_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cmps_tab().empty()) {
    cmps_tab_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cmps_tab(),
      GetArena());
  }
  if (from._internal_has_shape()) {
    shape_ = new ::domi::ShapeDef(*from.shape_);
  } else {
    shape_ = nullptr;
  }
  if (from._internal_has_cmps_info()) {
    cmps_info_ = new ::domi::CompressInfo(*from.cmps_info_);
  } else {
    cmps_info_ = nullptr;
  }
  if (from._internal_has_alloffset_quantize_info()) {
    alloffset_quantize_info_ = new ::domi::AllOffsetQuantizeInfo(*from.alloffset_quantize_info_);
  } else {
    alloffset_quantize_info_ = nullptr;
  }
  ::memcpy(&format_, &from.format_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmps_size_) -
    reinterpret_cast<char*>(&format_)) + sizeof(cmps_size_));
  // @@protoc_insertion_point(copy_constructor:domi.WeightDef)
}

void WeightDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WeightDef_om_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cmps_tab_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmps_size_) -
      reinterpret_cast<char*>(&shape_)) + sizeof(cmps_size_));
}

WeightDef::~WeightDef() {
  // @@protoc_insertion_point(destructor:domi.WeightDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WeightDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cmps_tab_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete shape_;
  if (this != internal_default_instance()) delete cmps_info_;
  if (this != internal_default_instance()) delete alloffset_quantize_info_;
}

void WeightDef::ArenaDtor(void* object) {
  WeightDef* _this = reinterpret_cast< WeightDef* >(object);
  (void)_this;
}
void WeightDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WeightDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WeightDef& WeightDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WeightDef_om_2eproto.base);
  return *internal_default_instance();
}


void WeightDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.WeightDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cmps_tab_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
  if (GetArena() == nullptr && cmps_info_ != nullptr) {
    delete cmps_info_;
  }
  cmps_info_ = nullptr;
  if (GetArena() == nullptr && alloffset_quantize_info_ != nullptr) {
    delete alloffset_quantize_info_;
  }
  alloffset_quantize_info_ = nullptr;
  ::memset(&format_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmps_size_) -
      reinterpret_cast<char*>(&format_)) + sizeof(cmps_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WeightDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 format = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 data_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          data_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.ShapeDef shape = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 data_offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          data_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cmps_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          cmps_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes cmps_tab = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_cmps_tab();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.CompressInfo cmps_info = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_cmps_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cmps_tab_offset = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          cmps_tab_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.AllOffsetQuantizeInfo alloffset_quantize_info = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_alloffset_quantize_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WeightDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.WeightDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 format = 1;
  if (this->format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_format(), target);
  }

  // int32 data_type = 2;
  if (this->data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_data_type(), target);
  }

  // .domi.ShapeDef shape = 3;
  if (this->has_shape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::shape(this), target, stream);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // int64 data_offset = 5;
  if (this->data_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_data_offset(), target);
  }

  // uint32 cmps_size = 6;
  if (this->cmps_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_cmps_size(), target);
  }

  // bytes cmps_tab = 7;
  if (this->cmps_tab().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_cmps_tab(), target);
  }

  // .domi.CompressInfo cmps_info = 8;
  if (this->has_cmps_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::cmps_info(this), target, stream);
  }

  // int64 cmps_tab_offset = 10;
  if (this->cmps_tab_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_cmps_tab_offset(), target);
  }

  // .domi.AllOffsetQuantizeInfo alloffset_quantize_info = 11;
  if (this->has_alloffset_quantize_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::alloffset_quantize_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.WeightDef)
  return target;
}

size_t WeightDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.WeightDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // bytes cmps_tab = 7;
  if (this->cmps_tab().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cmps_tab());
  }

  // .domi.ShapeDef shape = 3;
  if (this->has_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  // .domi.CompressInfo cmps_info = 8;
  if (this->has_cmps_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cmps_info_);
  }

  // .domi.AllOffsetQuantizeInfo alloffset_quantize_info = 11;
  if (this->has_alloffset_quantize_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *alloffset_quantize_info_);
  }

  // int32 format = 1;
  if (this->format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_format());
  }

  // int32 data_type = 2;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_data_type());
  }

  // int64 data_offset = 5;
  if (this->data_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_data_offset());
  }

  // int64 cmps_tab_offset = 10;
  if (this->cmps_tab_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cmps_tab_offset());
  }

  // uint32 cmps_size = 6;
  if (this->cmps_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cmps_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WeightDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.WeightDef)
  GOOGLE_DCHECK_NE(&from, this);
  const WeightDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WeightDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.WeightDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.WeightDef)
    MergeFrom(*source);
  }
}

void WeightDef::MergeFrom(const WeightDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.WeightDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.cmps_tab().size() > 0) {
    _internal_set_cmps_tab(from._internal_cmps_tab());
  }
  if (from.has_shape()) {
    _internal_mutable_shape()->::domi::ShapeDef::MergeFrom(from._internal_shape());
  }
  if (from.has_cmps_info()) {
    _internal_mutable_cmps_info()->::domi::CompressInfo::MergeFrom(from._internal_cmps_info());
  }
  if (from.has_alloffset_quantize_info()) {
    _internal_mutable_alloffset_quantize_info()->::domi::AllOffsetQuantizeInfo::MergeFrom(from._internal_alloffset_quantize_info());
  }
  if (from.format() != 0) {
    _internal_set_format(from._internal_format());
  }
  if (from.data_type() != 0) {
    _internal_set_data_type(from._internal_data_type());
  }
  if (from.data_offset() != 0) {
    _internal_set_data_offset(from._internal_data_offset());
  }
  if (from.cmps_tab_offset() != 0) {
    _internal_set_cmps_tab_offset(from._internal_cmps_tab_offset());
  }
  if (from.cmps_size() != 0) {
    _internal_set_cmps_size(from._internal_cmps_size());
  }
}

void WeightDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.WeightDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightDef::CopyFrom(const WeightDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.WeightDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightDef::IsInitialized() const {
  return true;
}

void WeightDef::InternalSwap(WeightDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cmps_tab_.Swap(&other->cmps_tab_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WeightDef, cmps_size_)
      + sizeof(WeightDef::cmps_size_)
      - PROTOBUF_FIELD_OFFSET(WeightDef, shape_)>(
          reinterpret_cast<char*>(&shape_),
          reinterpret_cast<char*>(&other->shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WeightDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShapeDef::InitAsDefaultInstance() {
}
class ShapeDef::_Internal {
 public:
};

ShapeDef::ShapeDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dim_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.ShapeDef)
}
ShapeDef::ShapeDef(const ShapeDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dim_(from.dim_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:domi.ShapeDef)
}

void ShapeDef::SharedCtor() {
}

ShapeDef::~ShapeDef() {
  // @@protoc_insertion_point(destructor:domi.ShapeDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShapeDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShapeDef::ArenaDtor(void* object) {
  ShapeDef* _this = reinterpret_cast< ShapeDef* >(object);
  (void)_this;
}
void ShapeDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShapeDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShapeDef& ShapeDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShapeDef_om_2eproto.base);
  return *internal_default_instance();
}


void ShapeDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.ShapeDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dim_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShapeDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 dim = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_dim(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_dim(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShapeDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.ShapeDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 dim = 1;
  {
    int byte_size = _dim_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_dim(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.ShapeDef)
  return target;
}

size_t ShapeDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.ShapeDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 dim = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->dim_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dim_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShapeDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.ShapeDef)
  GOOGLE_DCHECK_NE(&from, this);
  const ShapeDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShapeDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.ShapeDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.ShapeDef)
    MergeFrom(*source);
  }
}

void ShapeDef::MergeFrom(const ShapeDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.ShapeDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dim_.MergeFrom(from.dim_);
}

void ShapeDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.ShapeDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeDef::CopyFrom(const ShapeDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.ShapeDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeDef::IsInitialized() const {
  return true;
}

void ShapeDef::InternalSwap(ShapeDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dim_.InternalSwap(&other->dim_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShapeDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AllOffsetQuantizeInfo::InitAsDefaultInstance() {
}
class AllOffsetQuantizeInfo::_Internal {
 public:
};

AllOffsetQuantizeInfo::AllOffsetQuantizeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.AllOffsetQuantizeInfo)
}
AllOffsetQuantizeInfo::AllOffsetQuantizeInfo(const AllOffsetQuantizeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&scale_, &from.scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&scale_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:domi.AllOffsetQuantizeInfo)
}

void AllOffsetQuantizeInfo::SharedCtor() {
  ::memset(&scale_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&scale_)) + sizeof(offset_));
}

AllOffsetQuantizeInfo::~AllOffsetQuantizeInfo() {
  // @@protoc_insertion_point(destructor:domi.AllOffsetQuantizeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AllOffsetQuantizeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AllOffsetQuantizeInfo::ArenaDtor(void* object) {
  AllOffsetQuantizeInfo* _this = reinterpret_cast< AllOffsetQuantizeInfo* >(object);
  (void)_this;
}
void AllOffsetQuantizeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllOffsetQuantizeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllOffsetQuantizeInfo& AllOffsetQuantizeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllOffsetQuantizeInfo_om_2eproto.base);
  return *internal_default_instance();
}


void AllOffsetQuantizeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.AllOffsetQuantizeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&scale_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&scale_)) + sizeof(offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllOffsetQuantizeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllOffsetQuantizeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.AllOffsetQuantizeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float scale = 1;
  if (!(this->scale() <= 0 && this->scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_scale(), target);
  }

  // int32 offset = 2;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.AllOffsetQuantizeInfo)
  return target;
}

size_t AllOffsetQuantizeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.AllOffsetQuantizeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float scale = 1;
  if (!(this->scale() <= 0 && this->scale() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 offset = 2;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllOffsetQuantizeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.AllOffsetQuantizeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AllOffsetQuantizeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllOffsetQuantizeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.AllOffsetQuantizeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.AllOffsetQuantizeInfo)
    MergeFrom(*source);
  }
}

void AllOffsetQuantizeInfo::MergeFrom(const AllOffsetQuantizeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.AllOffsetQuantizeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.scale() <= 0 && from.scale() >= 0)) {
    _internal_set_scale(from._internal_scale());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void AllOffsetQuantizeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.AllOffsetQuantizeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllOffsetQuantizeInfo::CopyFrom(const AllOffsetQuantizeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.AllOffsetQuantizeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllOffsetQuantizeInfo::IsInitialized() const {
  return true;
}

void AllOffsetQuantizeInfo::InternalSwap(AllOffsetQuantizeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AllOffsetQuantizeInfo, offset_)
      + sizeof(AllOffsetQuantizeInfo::offset_)
      - PROTOBUF_FIELD_OFFSET(AllOffsetQuantizeInfo, scale_)>(
          reinterpret_cast<char*>(&scale_),
          reinterpret_cast<char*>(&other->scale_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AllOffsetQuantizeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TensorDescriptor::InitAsDefaultInstance() {
  ::domi::_TensorDescriptor_default_instance_._instance.get_mutable()->alloffset_quantize_info_ = const_cast< ::domi::AllOffsetQuantizeInfo*>(
      ::domi::AllOffsetQuantizeInfo::internal_default_instance());
}
class TensorDescriptor::_Internal {
 public:
  static const ::domi::AllOffsetQuantizeInfo& alloffset_quantize_info(const TensorDescriptor* msg);
};

const ::domi::AllOffsetQuantizeInfo&
TensorDescriptor::_Internal::alloffset_quantize_info(const TensorDescriptor* msg) {
  return *msg->alloffset_quantize_info_;
}
TensorDescriptor::TensorDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dim_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.TensorDescriptor)
}
TensorDescriptor::TensorDescriptor(const TensorDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dim_(from.dim_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_alloffset_quantize_info()) {
    alloffset_quantize_info_ = new ::domi::AllOffsetQuantizeInfo(*from.alloffset_quantize_info_);
  } else {
    alloffset_quantize_info_ = nullptr;
  }
  ::memcpy(&format_, &from.format_,
    static_cast<size_t>(reinterpret_cast<char*>(&reuse_input_index_) -
    reinterpret_cast<char*>(&format_)) + sizeof(reuse_input_index_));
  // @@protoc_insertion_point(copy_constructor:domi.TensorDescriptor)
}

void TensorDescriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TensorDescriptor_om_2eproto.base);
  ::memset(&alloffset_quantize_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reuse_input_index_) -
      reinterpret_cast<char*>(&alloffset_quantize_info_)) + sizeof(reuse_input_index_));
}

TensorDescriptor::~TensorDescriptor() {
  // @@protoc_insertion_point(destructor:domi.TensorDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TensorDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete alloffset_quantize_info_;
}

void TensorDescriptor::ArenaDtor(void* object) {
  TensorDescriptor* _this = reinterpret_cast< TensorDescriptor* >(object);
  (void)_this;
}
void TensorDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TensorDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TensorDescriptor& TensorDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TensorDescriptor_om_2eproto.base);
  return *internal_default_instance();
}


void TensorDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.TensorDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dim_.Clear();
  if (GetArena() == nullptr && alloffset_quantize_info_ != nullptr) {
    delete alloffset_quantize_info_;
  }
  alloffset_quantize_info_ = nullptr;
  ::memset(&format_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reuse_input_index_) -
      reinterpret_cast<char*>(&format_)) + sizeof(reuse_input_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TensorDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 format = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 data_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          data_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 dim = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_dim(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_dim(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool reuse_input = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          reuse_input_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool output_tensor = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          output_tensor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.DeviceType device_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_device_type(static_cast<::domi::DeviceType>(val));
        } else goto handle_unusual;
        continue;
      // bool input_tensor = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          input_tensor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 real_dim_cnt = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          real_dim_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 reuse_input_index = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          reuse_input_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.AllOffsetQuantizeInfo alloffset_quantize_info = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_alloffset_quantize_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TensorDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.TensorDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 format = 1;
  if (this->format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_format(), target);
  }

  // int32 data_type = 2;
  if (this->data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_data_type(), target);
  }

  // repeated int64 dim = 3;
  {
    int byte_size = _dim_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_dim(), byte_size, target);
    }
  }

  // uint32 size = 4;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_size(), target);
  }

  // bool reuse_input = 5;
  if (this->reuse_input() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_reuse_input(), target);
  }

  // bool output_tensor = 7;
  if (this->output_tensor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_output_tensor(), target);
  }

  // .domi.DeviceType device_type = 8;
  if (this->device_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_device_type(), target);
  }

  // bool input_tensor = 9;
  if (this->input_tensor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_input_tensor(), target);
  }

  // uint32 real_dim_cnt = 10;
  if (this->real_dim_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_real_dim_cnt(), target);
  }

  // uint32 reuse_input_index = 11;
  if (this->reuse_input_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_reuse_input_index(), target);
  }

  // .domi.AllOffsetQuantizeInfo alloffset_quantize_info = 12;
  if (this->has_alloffset_quantize_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::alloffset_quantize_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.TensorDescriptor)
  return target;
}

size_t TensorDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.TensorDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 dim = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->dim_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dim_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .domi.AllOffsetQuantizeInfo alloffset_quantize_info = 12;
  if (this->has_alloffset_quantize_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *alloffset_quantize_info_);
  }

  // int32 format = 1;
  if (this->format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_format());
  }

  // int32 data_type = 2;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_data_type());
  }

  // uint32 size = 4;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  // bool reuse_input = 5;
  if (this->reuse_input() != 0) {
    total_size += 1 + 1;
  }

  // bool output_tensor = 7;
  if (this->output_tensor() != 0) {
    total_size += 1 + 1;
  }

  // bool input_tensor = 9;
  if (this->input_tensor() != 0) {
    total_size += 1 + 1;
  }

  // .domi.DeviceType device_type = 8;
  if (this->device_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_device_type());
  }

  // uint32 real_dim_cnt = 10;
  if (this->real_dim_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_real_dim_cnt());
  }

  // uint32 reuse_input_index = 11;
  if (this->reuse_input_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reuse_input_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TensorDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.TensorDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TensorDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.TensorDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.TensorDescriptor)
    MergeFrom(*source);
  }
}

void TensorDescriptor::MergeFrom(const TensorDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.TensorDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dim_.MergeFrom(from.dim_);
  if (from.has_alloffset_quantize_info()) {
    _internal_mutable_alloffset_quantize_info()->::domi::AllOffsetQuantizeInfo::MergeFrom(from._internal_alloffset_quantize_info());
  }
  if (from.format() != 0) {
    _internal_set_format(from._internal_format());
  }
  if (from.data_type() != 0) {
    _internal_set_data_type(from._internal_data_type());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.reuse_input() != 0) {
    _internal_set_reuse_input(from._internal_reuse_input());
  }
  if (from.output_tensor() != 0) {
    _internal_set_output_tensor(from._internal_output_tensor());
  }
  if (from.input_tensor() != 0) {
    _internal_set_input_tensor(from._internal_input_tensor());
  }
  if (from.device_type() != 0) {
    _internal_set_device_type(from._internal_device_type());
  }
  if (from.real_dim_cnt() != 0) {
    _internal_set_real_dim_cnt(from._internal_real_dim_cnt());
  }
  if (from.reuse_input_index() != 0) {
    _internal_set_reuse_input_index(from._internal_reuse_input_index());
  }
}

void TensorDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.TensorDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorDescriptor::CopyFrom(const TensorDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.TensorDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorDescriptor::IsInitialized() const {
  return true;
}

void TensorDescriptor::InternalSwap(TensorDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dim_.InternalSwap(&other->dim_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TensorDescriptor, reuse_input_index_)
      + sizeof(TensorDescriptor::reuse_input_index_)
      - PROTOBUF_FIELD_OFFSET(TensorDescriptor, alloffset_quantize_info_)>(
          reinterpret_cast<char*>(&alloffset_quantize_info_),
          reinterpret_cast<char*>(&other->alloffset_quantize_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TensorDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CompressInfo::InitAsDefaultInstance() {
}
class CompressInfo::_Internal {
 public:
};

CompressInfo::CompressInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.CompressInfo)
}
CompressInfo::CompressInfo(const CompressInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&blockrow_, &from.blockrow_,
    static_cast<size_t>(reinterpret_cast<char*>(&loaddir_) -
    reinterpret_cast<char*>(&blockrow_)) + sizeof(loaddir_));
  // @@protoc_insertion_point(copy_constructor:domi.CompressInfo)
}

void CompressInfo::SharedCtor() {
  ::memset(&blockrow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&loaddir_) -
      reinterpret_cast<char*>(&blockrow_)) + sizeof(loaddir_));
}

CompressInfo::~CompressInfo() {
  // @@protoc_insertion_point(destructor:domi.CompressInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CompressInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CompressInfo::ArenaDtor(void* object) {
  CompressInfo* _this = reinterpret_cast< CompressInfo* >(object);
  (void)_this;
}
void CompressInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompressInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompressInfo& CompressInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompressInfo_om_2eproto.base);
  return *internal_default_instance();
}


void CompressInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.CompressInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&blockrow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&loaddir_) -
      reinterpret_cast<char*>(&blockrow_)) + sizeof(loaddir_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompressInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 blockRow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          blockrow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 blockCol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          blockcol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fractalK = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fractalk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fractalN = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fractaln_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lastFractalK = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          lastfractalk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lastFractalN = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          lastfractaln_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cubeSize = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          cubesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 loadDir = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          loaddir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompressInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.CompressInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 blockRow = 1;
  if (this->blockrow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_blockrow(), target);
  }

  // int32 blockCol = 2;
  if (this->blockcol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_blockcol(), target);
  }

  // int32 fractalK = 3;
  if (this->fractalk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_fractalk(), target);
  }

  // int32 fractalN = 4;
  if (this->fractaln() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_fractaln(), target);
  }

  // int32 lastFractalK = 5;
  if (this->lastfractalk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_lastfractalk(), target);
  }

  // int32 lastFractalN = 6;
  if (this->lastfractaln() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_lastfractaln(), target);
  }

  // int32 cubeSize = 7;
  if (this->cubesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_cubesize(), target);
  }

  // int32 loadDir = 8;
  if (this->loaddir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_loaddir(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.CompressInfo)
  return target;
}

size_t CompressInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.CompressInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 blockRow = 1;
  if (this->blockrow() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_blockrow());
  }

  // int32 blockCol = 2;
  if (this->blockcol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_blockcol());
  }

  // int32 fractalK = 3;
  if (this->fractalk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fractalk());
  }

  // int32 fractalN = 4;
  if (this->fractaln() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fractaln());
  }

  // int32 lastFractalK = 5;
  if (this->lastfractalk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lastfractalk());
  }

  // int32 lastFractalN = 6;
  if (this->lastfractaln() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lastfractaln());
  }

  // int32 cubeSize = 7;
  if (this->cubesize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cubesize());
  }

  // int32 loadDir = 8;
  if (this->loaddir() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_loaddir());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompressInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.CompressInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CompressInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompressInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.CompressInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.CompressInfo)
    MergeFrom(*source);
  }
}

void CompressInfo::MergeFrom(const CompressInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.CompressInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blockrow() != 0) {
    _internal_set_blockrow(from._internal_blockrow());
  }
  if (from.blockcol() != 0) {
    _internal_set_blockcol(from._internal_blockcol());
  }
  if (from.fractalk() != 0) {
    _internal_set_fractalk(from._internal_fractalk());
  }
  if (from.fractaln() != 0) {
    _internal_set_fractaln(from._internal_fractaln());
  }
  if (from.lastfractalk() != 0) {
    _internal_set_lastfractalk(from._internal_lastfractalk());
  }
  if (from.lastfractaln() != 0) {
    _internal_set_lastfractaln(from._internal_lastfractaln());
  }
  if (from.cubesize() != 0) {
    _internal_set_cubesize(from._internal_cubesize());
  }
  if (from.loaddir() != 0) {
    _internal_set_loaddir(from._internal_loaddir());
  }
}

void CompressInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.CompressInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompressInfo::CopyFrom(const CompressInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.CompressInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressInfo::IsInitialized() const {
  return true;
}

void CompressInfo::InternalSwap(CompressInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompressInfo, loaddir_)
      + sizeof(CompressInfo::loaddir_)
      - PROTOBUF_FIELD_OFFSET(CompressInfo, blockrow_)>(
          reinterpret_cast<char*>(&blockrow_),
          reinterpret_cast<char*>(&other->blockrow_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompressInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AttrDef_ListValue::InitAsDefaultInstance() {
}
class AttrDef_ListValue::_Internal {
 public:
};

AttrDef_ListValue::AttrDef_ListValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  s_(arena),
  i_(arena),
  f_(arena),
  b_(arena),
  u_(arena),
  bt_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.AttrDef.ListValue)
}
AttrDef_ListValue::AttrDef_ListValue(const AttrDef_ListValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      s_(from.s_),
      i_(from.i_),
      f_(from.f_),
      b_(from.b_),
      u_(from.u_),
      bt_(from.bt_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:domi.AttrDef.ListValue)
}

void AttrDef_ListValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AttrDef_ListValue_om_2eproto.base);
}

AttrDef_ListValue::~AttrDef_ListValue() {
  // @@protoc_insertion_point(destructor:domi.AttrDef.ListValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AttrDef_ListValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AttrDef_ListValue::ArenaDtor(void* object) {
  AttrDef_ListValue* _this = reinterpret_cast< AttrDef_ListValue* >(object);
  (void)_this;
}
void AttrDef_ListValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AttrDef_ListValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AttrDef_ListValue& AttrDef_ListValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AttrDef_ListValue_om_2eproto.base);
  return *internal_default_instance();
}


void AttrDef_ListValue::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.AttrDef.ListValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  s_.Clear();
  i_.Clear();
  f_.Clear();
  b_.Clear();
  u_.Clear();
  bt_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttrDef_ListValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_s();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "domi.AttrDef.ListValue.s"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int64 i = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_i(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_i(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float f = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_f(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_f(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated bool b = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_b(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_b(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 u = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_u(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_u(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes bt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bt();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AttrDef_ListValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.AttrDef.ListValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string s = 2;
  for (int i = 0, n = this->_internal_s_size(); i < n; i++) {
    const auto& s = this->_internal_s(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "domi.AttrDef.ListValue.s");
    target = stream->WriteString(2, s, target);
  }

  // repeated int64 i = 3 [packed = true];
  {
    int byte_size = _i_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_i(), byte_size, target);
    }
  }

  // repeated float f = 4 [packed = true];
  if (this->_internal_f_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_f(), target);
  }

  // repeated bool b = 5 [packed = true];
  if (this->_internal_b_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_b(), target);
  }

  // repeated uint32 u = 6 [packed = true];
  {
    int byte_size = _u_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_u(), byte_size, target);
    }
  }

  // repeated bytes bt = 7;
  for (int i = 0, n = this->_internal_bt_size(); i < n; i++) {
    const auto& s = this->_internal_bt(i);
    target = stream->WriteBytes(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.AttrDef.ListValue)
  return target;
}

size_t AttrDef_ListValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.AttrDef.ListValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string s = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(s_.size());
  for (int i = 0, n = s_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      s_.Get(i));
  }

  // repeated int64 i = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->i_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _i_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float f = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_f_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _f_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool b = 5 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_b_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _b_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 u = 6 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->u_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _u_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bytes bt = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(bt_.size());
  for (int i = 0, n = bt_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      bt_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttrDef_ListValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.AttrDef.ListValue)
  GOOGLE_DCHECK_NE(&from, this);
  const AttrDef_ListValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AttrDef_ListValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.AttrDef.ListValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.AttrDef.ListValue)
    MergeFrom(*source);
  }
}

void AttrDef_ListValue::MergeFrom(const AttrDef_ListValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.AttrDef.ListValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  s_.MergeFrom(from.s_);
  i_.MergeFrom(from.i_);
  f_.MergeFrom(from.f_);
  b_.MergeFrom(from.b_);
  u_.MergeFrom(from.u_);
  bt_.MergeFrom(from.bt_);
}

void AttrDef_ListValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.AttrDef.ListValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttrDef_ListValue::CopyFrom(const AttrDef_ListValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.AttrDef.ListValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttrDef_ListValue::IsInitialized() const {
  return true;
}

void AttrDef_ListValue::InternalSwap(AttrDef_ListValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  s_.InternalSwap(&other->s_);
  i_.InternalSwap(&other->i_);
  f_.InternalSwap(&other->f_);
  b_.InternalSwap(&other->b_);
  u_.InternalSwap(&other->u_);
  bt_.InternalSwap(&other->bt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttrDef_ListValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AttrDef::InitAsDefaultInstance() {
  ::domi::_AttrDef_default_instance_.s_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::domi::_AttrDef_default_instance_.i_ = PROTOBUF_LONGLONG(0);
  ::domi::_AttrDef_default_instance_.f_ = 0;
  ::domi::_AttrDef_default_instance_.b_ = false;
  ::domi::_AttrDef_default_instance_.u_ = 0u;
  ::domi::_AttrDef_default_instance_.bt_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::domi::_AttrDef_default_instance_.list_ = const_cast< ::domi::AttrDef_ListValue*>(
      ::domi::AttrDef_ListValue::internal_default_instance());
  ::domi::_AttrDef_default_instance_.func_ = const_cast< ::domi::NamedAttrs*>(
      ::domi::NamedAttrs::internal_default_instance());
}
class AttrDef::_Internal {
 public:
  static const ::domi::AttrDef_ListValue& list(const AttrDef* msg);
  static const ::domi::NamedAttrs& func(const AttrDef* msg);
};

const ::domi::AttrDef_ListValue&
AttrDef::_Internal::list(const AttrDef* msg) {
  return *msg->value_.list_;
}
const ::domi::NamedAttrs&
AttrDef::_Internal::func(const AttrDef* msg) {
  return *msg->value_.func_;
}
void AttrDef::set_allocated_list(::domi::AttrDef_ListValue* list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(list);
    if (message_arena != submessage_arena) {
      list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list, submessage_arena);
    }
    set_has_list();
    value_.list_ = list;
  }
  // @@protoc_insertion_point(field_set_allocated:domi.AttrDef.list)
}
void AttrDef::set_allocated_func(::domi::NamedAttrs* func) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (func) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(func);
    if (message_arena != submessage_arena) {
      func = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, func, submessage_arena);
    }
    set_has_func();
    value_.func_ = func;
  }
  // @@protoc_insertion_point(field_set_allocated:domi.AttrDef.func)
}
AttrDef::AttrDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.AttrDef)
}
AttrDef::AttrDef(const AttrDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kS: {
      _internal_set_s(from._internal_s());
      break;
    }
    case kI: {
      _internal_set_i(from._internal_i());
      break;
    }
    case kF: {
      _internal_set_f(from._internal_f());
      break;
    }
    case kB: {
      _internal_set_b(from._internal_b());
      break;
    }
    case kU: {
      _internal_set_u(from._internal_u());
      break;
    }
    case kBt: {
      _internal_set_bt(from._internal_bt());
      break;
    }
    case kList: {
      _internal_mutable_list()->::domi::AttrDef_ListValue::MergeFrom(from._internal_list());
      break;
    }
    case kFunc: {
      _internal_mutable_func()->::domi::NamedAttrs::MergeFrom(from._internal_func());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:domi.AttrDef)
}

void AttrDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AttrDef_om_2eproto.base);
  clear_has_value();
}

AttrDef::~AttrDef() {
  // @@protoc_insertion_point(destructor:domi.AttrDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AttrDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void AttrDef::ArenaDtor(void* object) {
  AttrDef* _this = reinterpret_cast< AttrDef* >(object);
  (void)_this;
}
void AttrDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AttrDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AttrDef& AttrDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AttrDef_om_2eproto.base);
  return *internal_default_instance();
}


void AttrDef::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:domi.AttrDef)
  switch (value_case()) {
    case kS: {
      value_.s_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kI: {
      // No need to clear
      break;
    }
    case kF: {
      // No need to clear
      break;
    }
    case kB: {
      // No need to clear
      break;
    }
    case kU: {
      // No need to clear
      break;
    }
    case kBt: {
      value_.bt_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kList: {
      if (GetArena() == nullptr) {
        delete value_.list_;
      }
      break;
    }
    case kFunc: {
      if (GetArena() == nullptr) {
        delete value_.func_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void AttrDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.AttrDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttrDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .domi.AttrDef.ListValue list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_s();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "domi.AttrDef.s"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 i = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_i(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float f = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _internal_set_f(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool b = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_b(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 u = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _internal_set_u(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes bt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_bt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.NamedAttrs func = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_func(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AttrDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.AttrDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .domi.AttrDef.ListValue list = 1;
  if (_internal_has_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::list(this), target, stream);
  }

  // string s = 2;
  if (_internal_has_s()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s().data(), static_cast<int>(this->_internal_s().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "domi.AttrDef.s");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_s(), target);
  }

  // int64 i = 3;
  if (_internal_has_i()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_i(), target);
  }

  // float f = 4;
  if (_internal_has_f()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_f(), target);
  }

  // bool b = 5;
  if (_internal_has_b()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_b(), target);
  }

  // uint32 u = 6;
  if (_internal_has_u()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_u(), target);
  }

  // bytes bt = 7;
  if (_internal_has_bt()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_bt(), target);
  }

  // .domi.NamedAttrs func = 10;
  if (_internal_has_func()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::func(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.AttrDef)
  return target;
}

size_t AttrDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.AttrDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // string s = 2;
    case kS: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_s());
      break;
    }
    // int64 i = 3;
    case kI: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_i());
      break;
    }
    // float f = 4;
    case kF: {
      total_size += 1 + 4;
      break;
    }
    // bool b = 5;
    case kB: {
      total_size += 1 + 1;
      break;
    }
    // uint32 u = 6;
    case kU: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_u());
      break;
    }
    // bytes bt = 7;
    case kBt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bt());
      break;
    }
    // .domi.AttrDef.ListValue list = 1;
    case kList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.list_);
      break;
    }
    // .domi.NamedAttrs func = 10;
    case kFunc: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.func_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttrDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.AttrDef)
  GOOGLE_DCHECK_NE(&from, this);
  const AttrDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AttrDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.AttrDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.AttrDef)
    MergeFrom(*source);
  }
}

void AttrDef::MergeFrom(const AttrDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.AttrDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kS: {
      _internal_set_s(from._internal_s());
      break;
    }
    case kI: {
      _internal_set_i(from._internal_i());
      break;
    }
    case kF: {
      _internal_set_f(from._internal_f());
      break;
    }
    case kB: {
      _internal_set_b(from._internal_b());
      break;
    }
    case kU: {
      _internal_set_u(from._internal_u());
      break;
    }
    case kBt: {
      _internal_set_bt(from._internal_bt());
      break;
    }
    case kList: {
      _internal_mutable_list()->::domi::AttrDef_ListValue::MergeFrom(from._internal_list());
      break;
    }
    case kFunc: {
      _internal_mutable_func()->::domi::NamedAttrs::MergeFrom(from._internal_func());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void AttrDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.AttrDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttrDef::CopyFrom(const AttrDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.AttrDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttrDef::IsInitialized() const {
  return true;
}

void AttrDef::InternalSwap(AttrDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttrDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

NamedAttrs_AttrEntry_DoNotUse::NamedAttrs_AttrEntry_DoNotUse() {}
NamedAttrs_AttrEntry_DoNotUse::NamedAttrs_AttrEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void NamedAttrs_AttrEntry_DoNotUse::MergeFrom(const NamedAttrs_AttrEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata NamedAttrs_AttrEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void NamedAttrs_AttrEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void NamedAttrs::InitAsDefaultInstance() {
}
class NamedAttrs::_Internal {
 public:
};

NamedAttrs::NamedAttrs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attr_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.NamedAttrs)
}
NamedAttrs::NamedAttrs(const NamedAttrs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attr_.MergeFrom(from.attr_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:domi.NamedAttrs)
}

void NamedAttrs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AttrDef_om_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NamedAttrs::~NamedAttrs() {
  // @@protoc_insertion_point(destructor:domi.NamedAttrs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NamedAttrs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NamedAttrs::ArenaDtor(void* object) {
  NamedAttrs* _this = reinterpret_cast< NamedAttrs* >(object);
  (void)_this;
}
void NamedAttrs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NamedAttrs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NamedAttrs& NamedAttrs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AttrDef_om_2eproto.base);
  return *internal_default_instance();
}


void NamedAttrs::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.NamedAttrs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attr_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamedAttrs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "domi.NamedAttrs.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .domi.AttrDef> attr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&attr_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedAttrs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.NamedAttrs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "domi.NamedAttrs.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // map<string, .domi.AttrDef> attr = 2;
  if (!this->_internal_attr().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "domi.NamedAttrs.AttrEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_attr().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_attr().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >::const_iterator
          it = this->_internal_attr().begin();
          it != this->_internal_attr().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = NamedAttrs_AttrEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >::const_iterator
          it = this->_internal_attr().begin();
          it != this->_internal_attr().end(); ++it) {
        target = NamedAttrs_AttrEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.NamedAttrs)
  return target;
}

size_t NamedAttrs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.NamedAttrs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .domi.AttrDef> attr = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attr_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >::const_iterator
      it = this->_internal_attr().begin();
      it != this->_internal_attr().end(); ++it) {
    total_size += NamedAttrs_AttrEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NamedAttrs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.NamedAttrs)
  GOOGLE_DCHECK_NE(&from, this);
  const NamedAttrs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NamedAttrs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.NamedAttrs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.NamedAttrs)
    MergeFrom(*source);
  }
}

void NamedAttrs::MergeFrom(const NamedAttrs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.NamedAttrs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attr_.MergeFrom(from.attr_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void NamedAttrs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.NamedAttrs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamedAttrs::CopyFrom(const NamedAttrs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.NamedAttrs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedAttrs::IsInitialized() const {
  return true;
}

void NamedAttrs::InternalSwap(NamedAttrs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attr_.Swap(&other->attr_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedAttrs::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace domi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::domi::ModelDef_AttrEntry_DoNotUse* Arena::CreateMaybeMessage< ::domi::ModelDef_AttrEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::ModelDef_AttrEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::ModelDef* Arena::CreateMaybeMessage< ::domi::ModelDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::ModelDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::OpDef_AttrEntry_DoNotUse* Arena::CreateMaybeMessage< ::domi::OpDef_AttrEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::OpDef_AttrEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::OpDef* Arena::CreateMaybeMessage< ::domi::OpDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::OpDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::SendOpParams* Arena::CreateMaybeMessage< ::domi::SendOpParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::SendOpParams >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::RecvOpParams* Arena::CreateMaybeMessage< ::domi::RecvOpParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::RecvOpParams >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::QuantizeFactor* Arena::CreateMaybeMessage< ::domi::QuantizeFactor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::QuantizeFactor >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::QuantizeCalcFactor* Arena::CreateMaybeMessage< ::domi::QuantizeCalcFactor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::QuantizeCalcFactor >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::QuantizeFactorParams* Arena::CreateMaybeMessage< ::domi::QuantizeFactorParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::QuantizeFactorParams >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::ConvolutionOpParams* Arena::CreateMaybeMessage< ::domi::ConvolutionOpParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::ConvolutionOpParams >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::PoolingOpParams* Arena::CreateMaybeMessage< ::domi::PoolingOpParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::PoolingOpParams >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::EltwiseOpParams* Arena::CreateMaybeMessage< ::domi::EltwiseOpParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::EltwiseOpParams >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::ActivationOpParams* Arena::CreateMaybeMessage< ::domi::ActivationOpParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::ActivationOpParams >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::BatchNormOpParams* Arena::CreateMaybeMessage< ::domi::BatchNormOpParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::BatchNormOpParams >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::ScaleOpParams* Arena::CreateMaybeMessage< ::domi::ScaleOpParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::ScaleOpParams >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::ReshapeOpParams* Arena::CreateMaybeMessage< ::domi::ReshapeOpParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::ReshapeOpParams >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::SoftmaxOpParams* Arena::CreateMaybeMessage< ::domi::SoftmaxOpParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::SoftmaxOpParams >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::FullConnectionOpParams* Arena::CreateMaybeMessage< ::domi::FullConnectionOpParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::FullConnectionOpParams >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::FlattenOpParams* Arena::CreateMaybeMessage< ::domi::FlattenOpParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::FlattenOpParams >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::AddLimitedOpParams* Arena::CreateMaybeMessage< ::domi::AddLimitedOpParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::AddLimitedOpParams >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::MulLimitedOpParams* Arena::CreateMaybeMessage< ::domi::MulLimitedOpParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::MulLimitedOpParams >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::AddOpParams* Arena::CreateMaybeMessage< ::domi::AddOpParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::AddOpParams >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::MulOpParams* Arena::CreateMaybeMessage< ::domi::MulOpParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::MulOpParams >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::SubOpParams* Arena::CreateMaybeMessage< ::domi::SubOpParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::SubOpParams >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::BiasAddOpParams* Arena::CreateMaybeMessage< ::domi::BiasAddOpParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::BiasAddOpParams >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::MatMulOpParams* Arena::CreateMaybeMessage< ::domi::MatMulOpParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::MatMulOpParams >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::RsqrtOpParams* Arena::CreateMaybeMessage< ::domi::RsqrtOpParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::RsqrtOpParams >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::WeightDef* Arena::CreateMaybeMessage< ::domi::WeightDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::WeightDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::ShapeDef* Arena::CreateMaybeMessage< ::domi::ShapeDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::ShapeDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::AllOffsetQuantizeInfo* Arena::CreateMaybeMessage< ::domi::AllOffsetQuantizeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::AllOffsetQuantizeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::TensorDescriptor* Arena::CreateMaybeMessage< ::domi::TensorDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::TensorDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::CompressInfo* Arena::CreateMaybeMessage< ::domi::CompressInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::CompressInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::AttrDef_ListValue* Arena::CreateMaybeMessage< ::domi::AttrDef_ListValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::AttrDef_ListValue >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::AttrDef* Arena::CreateMaybeMessage< ::domi::AttrDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::AttrDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::NamedAttrs_AttrEntry_DoNotUse* Arena::CreateMaybeMessage< ::domi::NamedAttrs_AttrEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::NamedAttrs_AttrEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::NamedAttrs* Arena::CreateMaybeMessage< ::domi::NamedAttrs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::NamedAttrs >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
