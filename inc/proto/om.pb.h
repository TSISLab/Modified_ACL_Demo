// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: om.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_om_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_om_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_om_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_om_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[36]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_om_2eproto;
namespace domi {
class ActivationOpParams;
class ActivationOpParamsDefaultTypeInternal;
extern ActivationOpParamsDefaultTypeInternal _ActivationOpParams_default_instance_;
class AddLimitedOpParams;
class AddLimitedOpParamsDefaultTypeInternal;
extern AddLimitedOpParamsDefaultTypeInternal _AddLimitedOpParams_default_instance_;
class AddOpParams;
class AddOpParamsDefaultTypeInternal;
extern AddOpParamsDefaultTypeInternal _AddOpParams_default_instance_;
class AllOffsetQuantizeInfo;
class AllOffsetQuantizeInfoDefaultTypeInternal;
extern AllOffsetQuantizeInfoDefaultTypeInternal _AllOffsetQuantizeInfo_default_instance_;
class AttrDef;
class AttrDefDefaultTypeInternal;
extern AttrDefDefaultTypeInternal _AttrDef_default_instance_;
class AttrDef_ListValue;
class AttrDef_ListValueDefaultTypeInternal;
extern AttrDef_ListValueDefaultTypeInternal _AttrDef_ListValue_default_instance_;
class BatchNormOpParams;
class BatchNormOpParamsDefaultTypeInternal;
extern BatchNormOpParamsDefaultTypeInternal _BatchNormOpParams_default_instance_;
class BiasAddOpParams;
class BiasAddOpParamsDefaultTypeInternal;
extern BiasAddOpParamsDefaultTypeInternal _BiasAddOpParams_default_instance_;
class CompressInfo;
class CompressInfoDefaultTypeInternal;
extern CompressInfoDefaultTypeInternal _CompressInfo_default_instance_;
class ConvolutionOpParams;
class ConvolutionOpParamsDefaultTypeInternal;
extern ConvolutionOpParamsDefaultTypeInternal _ConvolutionOpParams_default_instance_;
class EltwiseOpParams;
class EltwiseOpParamsDefaultTypeInternal;
extern EltwiseOpParamsDefaultTypeInternal _EltwiseOpParams_default_instance_;
class FlattenOpParams;
class FlattenOpParamsDefaultTypeInternal;
extern FlattenOpParamsDefaultTypeInternal _FlattenOpParams_default_instance_;
class FullConnectionOpParams;
class FullConnectionOpParamsDefaultTypeInternal;
extern FullConnectionOpParamsDefaultTypeInternal _FullConnectionOpParams_default_instance_;
class MatMulOpParams;
class MatMulOpParamsDefaultTypeInternal;
extern MatMulOpParamsDefaultTypeInternal _MatMulOpParams_default_instance_;
class ModelDef;
class ModelDefDefaultTypeInternal;
extern ModelDefDefaultTypeInternal _ModelDef_default_instance_;
class ModelDef_AttrEntry_DoNotUse;
class ModelDef_AttrEntry_DoNotUseDefaultTypeInternal;
extern ModelDef_AttrEntry_DoNotUseDefaultTypeInternal _ModelDef_AttrEntry_DoNotUse_default_instance_;
class MulLimitedOpParams;
class MulLimitedOpParamsDefaultTypeInternal;
extern MulLimitedOpParamsDefaultTypeInternal _MulLimitedOpParams_default_instance_;
class MulOpParams;
class MulOpParamsDefaultTypeInternal;
extern MulOpParamsDefaultTypeInternal _MulOpParams_default_instance_;
class NamedAttrs;
class NamedAttrsDefaultTypeInternal;
extern NamedAttrsDefaultTypeInternal _NamedAttrs_default_instance_;
class NamedAttrs_AttrEntry_DoNotUse;
class NamedAttrs_AttrEntry_DoNotUseDefaultTypeInternal;
extern NamedAttrs_AttrEntry_DoNotUseDefaultTypeInternal _NamedAttrs_AttrEntry_DoNotUse_default_instance_;
class OpDef;
class OpDefDefaultTypeInternal;
extern OpDefDefaultTypeInternal _OpDef_default_instance_;
class OpDef_AttrEntry_DoNotUse;
class OpDef_AttrEntry_DoNotUseDefaultTypeInternal;
extern OpDef_AttrEntry_DoNotUseDefaultTypeInternal _OpDef_AttrEntry_DoNotUse_default_instance_;
class PoolingOpParams;
class PoolingOpParamsDefaultTypeInternal;
extern PoolingOpParamsDefaultTypeInternal _PoolingOpParams_default_instance_;
class QuantizeCalcFactor;
class QuantizeCalcFactorDefaultTypeInternal;
extern QuantizeCalcFactorDefaultTypeInternal _QuantizeCalcFactor_default_instance_;
class QuantizeFactor;
class QuantizeFactorDefaultTypeInternal;
extern QuantizeFactorDefaultTypeInternal _QuantizeFactor_default_instance_;
class QuantizeFactorParams;
class QuantizeFactorParamsDefaultTypeInternal;
extern QuantizeFactorParamsDefaultTypeInternal _QuantizeFactorParams_default_instance_;
class RecvOpParams;
class RecvOpParamsDefaultTypeInternal;
extern RecvOpParamsDefaultTypeInternal _RecvOpParams_default_instance_;
class ReshapeOpParams;
class ReshapeOpParamsDefaultTypeInternal;
extern ReshapeOpParamsDefaultTypeInternal _ReshapeOpParams_default_instance_;
class RsqrtOpParams;
class RsqrtOpParamsDefaultTypeInternal;
extern RsqrtOpParamsDefaultTypeInternal _RsqrtOpParams_default_instance_;
class ScaleOpParams;
class ScaleOpParamsDefaultTypeInternal;
extern ScaleOpParamsDefaultTypeInternal _ScaleOpParams_default_instance_;
class SendOpParams;
class SendOpParamsDefaultTypeInternal;
extern SendOpParamsDefaultTypeInternal _SendOpParams_default_instance_;
class ShapeDef;
class ShapeDefDefaultTypeInternal;
extern ShapeDefDefaultTypeInternal _ShapeDef_default_instance_;
class SoftmaxOpParams;
class SoftmaxOpParamsDefaultTypeInternal;
extern SoftmaxOpParamsDefaultTypeInternal _SoftmaxOpParams_default_instance_;
class SubOpParams;
class SubOpParamsDefaultTypeInternal;
extern SubOpParamsDefaultTypeInternal _SubOpParams_default_instance_;
class TensorDescriptor;
class TensorDescriptorDefaultTypeInternal;
extern TensorDescriptorDefaultTypeInternal _TensorDescriptor_default_instance_;
class WeightDef;
class WeightDefDefaultTypeInternal;
extern WeightDefDefaultTypeInternal _WeightDef_default_instance_;
}  // namespace domi
PROTOBUF_NAMESPACE_OPEN
template<> ::domi::ActivationOpParams* Arena::CreateMaybeMessage<::domi::ActivationOpParams>(Arena*);
template<> ::domi::AddLimitedOpParams* Arena::CreateMaybeMessage<::domi::AddLimitedOpParams>(Arena*);
template<> ::domi::AddOpParams* Arena::CreateMaybeMessage<::domi::AddOpParams>(Arena*);
template<> ::domi::AllOffsetQuantizeInfo* Arena::CreateMaybeMessage<::domi::AllOffsetQuantizeInfo>(Arena*);
template<> ::domi::AttrDef* Arena::CreateMaybeMessage<::domi::AttrDef>(Arena*);
template<> ::domi::AttrDef_ListValue* Arena::CreateMaybeMessage<::domi::AttrDef_ListValue>(Arena*);
template<> ::domi::BatchNormOpParams* Arena::CreateMaybeMessage<::domi::BatchNormOpParams>(Arena*);
template<> ::domi::BiasAddOpParams* Arena::CreateMaybeMessage<::domi::BiasAddOpParams>(Arena*);
template<> ::domi::CompressInfo* Arena::CreateMaybeMessage<::domi::CompressInfo>(Arena*);
template<> ::domi::ConvolutionOpParams* Arena::CreateMaybeMessage<::domi::ConvolutionOpParams>(Arena*);
template<> ::domi::EltwiseOpParams* Arena::CreateMaybeMessage<::domi::EltwiseOpParams>(Arena*);
template<> ::domi::FlattenOpParams* Arena::CreateMaybeMessage<::domi::FlattenOpParams>(Arena*);
template<> ::domi::FullConnectionOpParams* Arena::CreateMaybeMessage<::domi::FullConnectionOpParams>(Arena*);
template<> ::domi::MatMulOpParams* Arena::CreateMaybeMessage<::domi::MatMulOpParams>(Arena*);
template<> ::domi::ModelDef* Arena::CreateMaybeMessage<::domi::ModelDef>(Arena*);
template<> ::domi::ModelDef_AttrEntry_DoNotUse* Arena::CreateMaybeMessage<::domi::ModelDef_AttrEntry_DoNotUse>(Arena*);
template<> ::domi::MulLimitedOpParams* Arena::CreateMaybeMessage<::domi::MulLimitedOpParams>(Arena*);
template<> ::domi::MulOpParams* Arena::CreateMaybeMessage<::domi::MulOpParams>(Arena*);
template<> ::domi::NamedAttrs* Arena::CreateMaybeMessage<::domi::NamedAttrs>(Arena*);
template<> ::domi::NamedAttrs_AttrEntry_DoNotUse* Arena::CreateMaybeMessage<::domi::NamedAttrs_AttrEntry_DoNotUse>(Arena*);
template<> ::domi::OpDef* Arena::CreateMaybeMessage<::domi::OpDef>(Arena*);
template<> ::domi::OpDef_AttrEntry_DoNotUse* Arena::CreateMaybeMessage<::domi::OpDef_AttrEntry_DoNotUse>(Arena*);
template<> ::domi::PoolingOpParams* Arena::CreateMaybeMessage<::domi::PoolingOpParams>(Arena*);
template<> ::domi::QuantizeCalcFactor* Arena::CreateMaybeMessage<::domi::QuantizeCalcFactor>(Arena*);
template<> ::domi::QuantizeFactor* Arena::CreateMaybeMessage<::domi::QuantizeFactor>(Arena*);
template<> ::domi::QuantizeFactorParams* Arena::CreateMaybeMessage<::domi::QuantizeFactorParams>(Arena*);
template<> ::domi::RecvOpParams* Arena::CreateMaybeMessage<::domi::RecvOpParams>(Arena*);
template<> ::domi::ReshapeOpParams* Arena::CreateMaybeMessage<::domi::ReshapeOpParams>(Arena*);
template<> ::domi::RsqrtOpParams* Arena::CreateMaybeMessage<::domi::RsqrtOpParams>(Arena*);
template<> ::domi::ScaleOpParams* Arena::CreateMaybeMessage<::domi::ScaleOpParams>(Arena*);
template<> ::domi::SendOpParams* Arena::CreateMaybeMessage<::domi::SendOpParams>(Arena*);
template<> ::domi::ShapeDef* Arena::CreateMaybeMessage<::domi::ShapeDef>(Arena*);
template<> ::domi::SoftmaxOpParams* Arena::CreateMaybeMessage<::domi::SoftmaxOpParams>(Arena*);
template<> ::domi::SubOpParams* Arena::CreateMaybeMessage<::domi::SubOpParams>(Arena*);
template<> ::domi::TensorDescriptor* Arena::CreateMaybeMessage<::domi::TensorDescriptor>(Arena*);
template<> ::domi::WeightDef* Arena::CreateMaybeMessage<::domi::WeightDef>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace domi {

enum TargetType : int {
  MINI = 0,
  TINY = 1,
  LITE = 2,
  TargetType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TargetType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TargetType_IsValid(int value);
constexpr TargetType TargetType_MIN = MINI;
constexpr TargetType TargetType_MAX = LITE;
constexpr int TargetType_ARRAYSIZE = TargetType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TargetType_descriptor();
template<typename T>
inline const std::string& TargetType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TargetType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TargetType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TargetType_descriptor(), enum_t_value);
}
inline bool TargetType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TargetType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TargetType>(
    TargetType_descriptor(), name, value);
}
enum QuantizeScaleType : int {
  VECTOR_SCALE = 0,
  SCALAR_SCALE = 1,
  QuantizeScaleType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  QuantizeScaleType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool QuantizeScaleType_IsValid(int value);
constexpr QuantizeScaleType QuantizeScaleType_MIN = VECTOR_SCALE;
constexpr QuantizeScaleType QuantizeScaleType_MAX = SCALAR_SCALE;
constexpr int QuantizeScaleType_ARRAYSIZE = QuantizeScaleType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuantizeScaleType_descriptor();
template<typename T>
inline const std::string& QuantizeScaleType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, QuantizeScaleType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function QuantizeScaleType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    QuantizeScaleType_descriptor(), enum_t_value);
}
inline bool QuantizeScaleType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, QuantizeScaleType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<QuantizeScaleType>(
    QuantizeScaleType_descriptor(), name, value);
}
enum QuantizeScaleMode : int {
  NORMAL_MODE = 0,
  SQRT_MODE = 1,
  QuantizeScaleMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  QuantizeScaleMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool QuantizeScaleMode_IsValid(int value);
constexpr QuantizeScaleMode QuantizeScaleMode_MIN = NORMAL_MODE;
constexpr QuantizeScaleMode QuantizeScaleMode_MAX = SQRT_MODE;
constexpr int QuantizeScaleMode_ARRAYSIZE = QuantizeScaleMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuantizeScaleMode_descriptor();
template<typename T>
inline const std::string& QuantizeScaleMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, QuantizeScaleMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function QuantizeScaleMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    QuantizeScaleMode_descriptor(), enum_t_value);
}
inline bool QuantizeScaleMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, QuantizeScaleMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<QuantizeScaleMode>(
    QuantizeScaleMode_descriptor(), name, value);
}
enum QuantizeAlgorithm : int {
  NON_OFFSET_ALGO = 0,
  HALF_OFFSET_ALGO = 1,
  ALL_OFFSET_ALGO = 2,
  QuantizeAlgorithm_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  QuantizeAlgorithm_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool QuantizeAlgorithm_IsValid(int value);
constexpr QuantizeAlgorithm QuantizeAlgorithm_MIN = NON_OFFSET_ALGO;
constexpr QuantizeAlgorithm QuantizeAlgorithm_MAX = ALL_OFFSET_ALGO;
constexpr int QuantizeAlgorithm_ARRAYSIZE = QuantizeAlgorithm_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuantizeAlgorithm_descriptor();
template<typename T>
inline const std::string& QuantizeAlgorithm_Name(T enum_t_value) {
  static_assert(::std::is_same<T, QuantizeAlgorithm>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function QuantizeAlgorithm_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    QuantizeAlgorithm_descriptor(), enum_t_value);
}
inline bool QuantizeAlgorithm_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, QuantizeAlgorithm* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<QuantizeAlgorithm>(
    QuantizeAlgorithm_descriptor(), name, value);
}
enum DeviceType : int {
  NPU = 0,
  CPU = 1,
  DeviceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DeviceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DeviceType_IsValid(int value);
constexpr DeviceType DeviceType_MIN = NPU;
constexpr DeviceType DeviceType_MAX = CPU;
constexpr int DeviceType_ARRAYSIZE = DeviceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceType_descriptor();
template<typename T>
inline const std::string& DeviceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeviceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeviceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DeviceType_descriptor(), enum_t_value);
}
inline bool DeviceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DeviceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DeviceType>(
    DeviceType_descriptor(), name, value);
}
// ===================================================================

class ModelDef_AttrEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ModelDef_AttrEntry_DoNotUse, 
    std::string, ::domi::AttrDef,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ModelDef_AttrEntry_DoNotUse, 
    std::string, ::domi::AttrDef,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ModelDef_AttrEntry_DoNotUse();
  explicit ModelDef_AttrEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ModelDef_AttrEntry_DoNotUse& other);
  static const ModelDef_AttrEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ModelDef_AttrEntry_DoNotUse*>(&_ModelDef_AttrEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "domi.ModelDef.AttrEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class ModelDef PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:domi.ModelDef) */ {
 public:
  inline ModelDef() : ModelDef(nullptr) {}
  virtual ~ModelDef();

  ModelDef(const ModelDef& from);
  ModelDef(ModelDef&& from) noexcept
    : ModelDef() {
    *this = ::std::move(from);
  }

  inline ModelDef& operator=(const ModelDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelDef& operator=(ModelDef&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelDef& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelDef* internal_default_instance() {
    return reinterpret_cast<const ModelDef*>(
               &_ModelDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ModelDef& a, ModelDef& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelDef* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelDef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelDef* New() const final {
    return CreateMaybeMessage<ModelDef>(nullptr);
  }

  ModelDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelDef>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelDef& from);
  void MergeFrom(const ModelDef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelDef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "domi.ModelDef";
  }
  protected:
  explicit ModelDef(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kOpFieldNumber = 20,
    kAttrFieldNumber = 30,
    kNameFieldNumber = 1,
    kVersionFieldNumber = 2,
    kStreamNumFieldNumber = 11,
    kMemorySizeFieldNumber = 10,
    kTargetTypeFieldNumber = 23,
    kWeightSizeFieldNumber = 13,
    kEventNumFieldNumber = 12,
    kLabelNumFieldNumber = 15,
  };
  // repeated .domi.OpDef op = 20;
  int op_size() const;
  private:
  int _internal_op_size() const;
  public:
  void clear_op();
  ::domi::OpDef* mutable_op(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::OpDef >*
      mutable_op();
  private:
  const ::domi::OpDef& _internal_op(int index) const;
  ::domi::OpDef* _internal_add_op();
  public:
  const ::domi::OpDef& op(int index) const;
  ::domi::OpDef* add_op();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::OpDef >&
      op() const;

  // map<string, .domi.AttrDef> attr = 30;
  int attr_size() const;
  private:
  int _internal_attr_size() const;
  public:
  void clear_attr();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >&
      _internal_attr() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >*
      _internal_mutable_attr();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >&
      attr() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >*
      mutable_attr();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 version = 2;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 stream_num = 11;
  void clear_stream_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 stream_num() const;
  void set_stream_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stream_num() const;
  void _internal_set_stream_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 memory_size = 10;
  void clear_memory_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 memory_size() const;
  void set_memory_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_memory_size() const;
  void _internal_set_memory_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .domi.TargetType target_type = 23;
  void clear_target_type();
  ::domi::TargetType target_type() const;
  void set_target_type(::domi::TargetType value);
  private:
  ::domi::TargetType _internal_target_type() const;
  void _internal_set_target_type(::domi::TargetType value);
  public:

  // uint64 weight_size = 13;
  void clear_weight_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 weight_size() const;
  void set_weight_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_weight_size() const;
  void _internal_set_weight_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 event_num = 12;
  void clear_event_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 event_num() const;
  void set_event_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_event_num() const;
  void _internal_set_event_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 label_num = 15;
  void clear_label_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 label_num() const;
  void set_label_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_label_num() const;
  void _internal_set_label_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:domi.ModelDef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::OpDef > op_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ModelDef_AttrEntry_DoNotUse,
      std::string, ::domi::AttrDef,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > attr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stream_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 memory_size_;
  int target_type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 weight_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 event_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 label_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_om_2eproto;
};
// -------------------------------------------------------------------

class OpDef_AttrEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OpDef_AttrEntry_DoNotUse, 
    std::string, ::domi::AttrDef,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OpDef_AttrEntry_DoNotUse, 
    std::string, ::domi::AttrDef,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  OpDef_AttrEntry_DoNotUse();
  explicit OpDef_AttrEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const OpDef_AttrEntry_DoNotUse& other);
  static const OpDef_AttrEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const OpDef_AttrEntry_DoNotUse*>(&_OpDef_AttrEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "domi.OpDef.AttrEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class OpDef PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:domi.OpDef) */ {
 public:
  inline OpDef() : OpDef(nullptr) {}
  virtual ~OpDef();

  OpDef(const OpDef& from);
  OpDef(OpDef&& from) noexcept
    : OpDef() {
    *this = ::std::move(from);
  }

  inline OpDef& operator=(const OpDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpDef& operator=(OpDef&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpDef& default_instance();

  enum OpParamsCase {
    kSenderParam = 100,
    kReceiverParam = 200,
    kConvolutionParam = 300,
    kPoolingParam = 400,
    kEltwiseParam = 500,
    kBatchnormParam = 600,
    kScaleParam = 700,
    kFullConnectionParam = 800,
    kSoftmaxParam = 900,
    kActivationParam = 1000,
    kReshapeParam = 1100,
    OP_PARAMS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpDef* internal_default_instance() {
    return reinterpret_cast<const OpDef*>(
               &_OpDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OpDef& a, OpDef& b) {
    a.Swap(&b);
  }
  inline void Swap(OpDef* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpDef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpDef* New() const final {
    return CreateMaybeMessage<OpDef>(nullptr);
  }

  OpDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpDef>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpDef& from);
  void MergeFrom(const OpDef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpDef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "domi.OpDef";
  }
  protected:
  explicit OpDef(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kInputNameFieldNumber = 5,
    kSrcNameFieldNumber = 8,
    kSrcIndexFieldNumber = 9,
    kInputFieldNumber = 10,
    kOutputFieldNumber = 11,
    kInputDescFieldNumber = 12,
    kOutputDescFieldNumber = 13,
    kWeightsFieldNumber = 14,
    kDstNameFieldNumber = 15,
    kDstIndexFieldNumber = 16,
    kWorkspaceFieldNumber = 20,
    kWorkspaceBytesFieldNumber = 21,
    kWeightNameFieldNumber = 22,
    kIsInputConstFieldNumber = 23,
    kAttrFieldNumber = 30,
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kQuantizeFactorFieldNumber = 31,
    kIdFieldNumber = 3,
    kStreamIdFieldNumber = 4,
    kSenderParamFieldNumber = 100,
    kReceiverParamFieldNumber = 200,
    kConvolutionParamFieldNumber = 300,
    kPoolingParamFieldNumber = 400,
    kEltwiseParamFieldNumber = 500,
    kBatchnormParamFieldNumber = 600,
    kScaleParamFieldNumber = 700,
    kFullConnectionParamFieldNumber = 800,
    kSoftmaxParamFieldNumber = 900,
    kActivationParamFieldNumber = 1000,
    kReshapeParamFieldNumber = 1100,
  };
  // repeated string input_name = 5;
  int input_name_size() const;
  private:
  int _internal_input_name_size() const;
  public:
  void clear_input_name();
  const std::string& input_name(int index) const;
  std::string* mutable_input_name(int index);
  void set_input_name(int index, const std::string& value);
  void set_input_name(int index, std::string&& value);
  void set_input_name(int index, const char* value);
  void set_input_name(int index, const char* value, size_t size);
  std::string* add_input_name();
  void add_input_name(const std::string& value);
  void add_input_name(std::string&& value);
  void add_input_name(const char* value);
  void add_input_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_name();
  private:
  const std::string& _internal_input_name(int index) const;
  std::string* _internal_add_input_name();
  public:

  // repeated string src_name = 8;
  int src_name_size() const;
  private:
  int _internal_src_name_size() const;
  public:
  void clear_src_name();
  const std::string& src_name(int index) const;
  std::string* mutable_src_name(int index);
  void set_src_name(int index, const std::string& value);
  void set_src_name(int index, std::string&& value);
  void set_src_name(int index, const char* value);
  void set_src_name(int index, const char* value, size_t size);
  std::string* add_src_name();
  void add_src_name(const std::string& value);
  void add_src_name(std::string&& value);
  void add_src_name(const char* value);
  void add_src_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& src_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_src_name();
  private:
  const std::string& _internal_src_name(int index) const;
  std::string* _internal_add_src_name();
  public:

  // repeated int32 src_index = 9;
  int src_index_size() const;
  private:
  int _internal_src_index_size() const;
  public:
  void clear_src_index();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_src_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_src_index() const;
  void _internal_add_src_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_src_index();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 src_index(int index) const;
  void set_src_index(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_src_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      src_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_src_index();

  // repeated int64 input = 10;
  int input_size() const;
  private:
  int _internal_input_size() const;
  public:
  void clear_input();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_input(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_input() const;
  void _internal_add_input(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_input();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 input(int index) const;
  void set_input(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_input(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      input() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_input();

  // repeated int64 output = 11;
  int output_size() const;
  private:
  int _internal_output_size() const;
  public:
  void clear_output();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_output(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_output() const;
  void _internal_add_output(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_output();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 output(int index) const;
  void set_output(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_output(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      output() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_output();

  // repeated .domi.TensorDescriptor input_desc = 12;
  int input_desc_size() const;
  private:
  int _internal_input_desc_size() const;
  public:
  void clear_input_desc();
  ::domi::TensorDescriptor* mutable_input_desc(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::TensorDescriptor >*
      mutable_input_desc();
  private:
  const ::domi::TensorDescriptor& _internal_input_desc(int index) const;
  ::domi::TensorDescriptor* _internal_add_input_desc();
  public:
  const ::domi::TensorDescriptor& input_desc(int index) const;
  ::domi::TensorDescriptor* add_input_desc();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::TensorDescriptor >&
      input_desc() const;

  // repeated .domi.TensorDescriptor output_desc = 13;
  int output_desc_size() const;
  private:
  int _internal_output_desc_size() const;
  public:
  void clear_output_desc();
  ::domi::TensorDescriptor* mutable_output_desc(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::TensorDescriptor >*
      mutable_output_desc();
  private:
  const ::domi::TensorDescriptor& _internal_output_desc(int index) const;
  ::domi::TensorDescriptor* _internal_add_output_desc();
  public:
  const ::domi::TensorDescriptor& output_desc(int index) const;
  ::domi::TensorDescriptor* add_output_desc();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::TensorDescriptor >&
      output_desc() const;

  // repeated .domi.WeightDef weights = 14;
  int weights_size() const;
  private:
  int _internal_weights_size() const;
  public:
  void clear_weights();
  ::domi::WeightDef* mutable_weights(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef >*
      mutable_weights();
  private:
  const ::domi::WeightDef& _internal_weights(int index) const;
  ::domi::WeightDef* _internal_add_weights();
  public:
  const ::domi::WeightDef& weights(int index) const;
  ::domi::WeightDef* add_weights();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef >&
      weights() const;

  // repeated string dst_name = 15;
  int dst_name_size() const;
  private:
  int _internal_dst_name_size() const;
  public:
  void clear_dst_name();
  const std::string& dst_name(int index) const;
  std::string* mutable_dst_name(int index);
  void set_dst_name(int index, const std::string& value);
  void set_dst_name(int index, std::string&& value);
  void set_dst_name(int index, const char* value);
  void set_dst_name(int index, const char* value, size_t size);
  std::string* add_dst_name();
  void add_dst_name(const std::string& value);
  void add_dst_name(std::string&& value);
  void add_dst_name(const char* value);
  void add_dst_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dst_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dst_name();
  private:
  const std::string& _internal_dst_name(int index) const;
  std::string* _internal_add_dst_name();
  public:

  // repeated int32 dst_index = 16;
  int dst_index_size() const;
  private:
  int _internal_dst_index_size() const;
  public:
  void clear_dst_index();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dst_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_dst_index() const;
  void _internal_add_dst_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_dst_index();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 dst_index(int index) const;
  void set_dst_index(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_dst_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      dst_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_dst_index();

  // repeated int64 workspace = 20;
  int workspace_size() const;
  private:
  int _internal_workspace_size() const;
  public:
  void clear_workspace();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_workspace(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_workspace() const;
  void _internal_add_workspace(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_workspace();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 workspace(int index) const;
  void set_workspace(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_workspace(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      workspace() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_workspace();

  // repeated uint32 workspace_bytes = 21;
  int workspace_bytes_size() const;
  private:
  int _internal_workspace_bytes_size() const;
  public:
  void clear_workspace_bytes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_workspace_bytes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_workspace_bytes() const;
  void _internal_add_workspace_bytes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_workspace_bytes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 workspace_bytes(int index) const;
  void set_workspace_bytes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_workspace_bytes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      workspace_bytes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_workspace_bytes();

  // repeated string weight_name = 22;
  int weight_name_size() const;
  private:
  int _internal_weight_name_size() const;
  public:
  void clear_weight_name();
  const std::string& weight_name(int index) const;
  std::string* mutable_weight_name(int index);
  void set_weight_name(int index, const std::string& value);
  void set_weight_name(int index, std::string&& value);
  void set_weight_name(int index, const char* value);
  void set_weight_name(int index, const char* value, size_t size);
  std::string* add_weight_name();
  void add_weight_name(const std::string& value);
  void add_weight_name(std::string&& value);
  void add_weight_name(const char* value);
  void add_weight_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& weight_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_weight_name();
  private:
  const std::string& _internal_weight_name(int index) const;
  std::string* _internal_add_weight_name();
  public:

  // repeated bool is_input_const = 23;
  int is_input_const_size() const;
  private:
  int _internal_is_input_const_size() const;
  public:
  void clear_is_input_const();
  private:
  bool _internal_is_input_const(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_is_input_const() const;
  void _internal_add_is_input_const(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_is_input_const();
  public:
  bool is_input_const(int index) const;
  void set_is_input_const(int index, bool value);
  void add_is_input_const(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      is_input_const() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_is_input_const();

  // map<string, .domi.AttrDef> attr = 30;
  int attr_size() const;
  private:
  int _internal_attr_size() const;
  public:
  void clear_attr();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >&
      _internal_attr() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >*
      _internal_mutable_attr();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >&
      attr() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >*
      mutable_attr();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .domi.QuantizeFactorParams quantize_factor = 31;
  bool has_quantize_factor() const;
  private:
  bool _internal_has_quantize_factor() const;
  public:
  void clear_quantize_factor();
  const ::domi::QuantizeFactorParams& quantize_factor() const;
  ::domi::QuantizeFactorParams* release_quantize_factor();
  ::domi::QuantizeFactorParams* mutable_quantize_factor();
  void set_allocated_quantize_factor(::domi::QuantizeFactorParams* quantize_factor);
  private:
  const ::domi::QuantizeFactorParams& _internal_quantize_factor() const;
  ::domi::QuantizeFactorParams* _internal_mutable_quantize_factor();
  public:
  void unsafe_arena_set_allocated_quantize_factor(
      ::domi::QuantizeFactorParams* quantize_factor);
  ::domi::QuantizeFactorParams* unsafe_arena_release_quantize_factor();

  // uint32 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 stream_id = 4;
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .domi.SendOpParams sender_param = 100;
  bool has_sender_param() const;
  private:
  bool _internal_has_sender_param() const;
  public:
  void clear_sender_param();
  const ::domi::SendOpParams& sender_param() const;
  ::domi::SendOpParams* release_sender_param();
  ::domi::SendOpParams* mutable_sender_param();
  void set_allocated_sender_param(::domi::SendOpParams* sender_param);
  private:
  const ::domi::SendOpParams& _internal_sender_param() const;
  ::domi::SendOpParams* _internal_mutable_sender_param();
  public:
  void unsafe_arena_set_allocated_sender_param(
      ::domi::SendOpParams* sender_param);
  ::domi::SendOpParams* unsafe_arena_release_sender_param();

  // .domi.RecvOpParams receiver_param = 200;
  bool has_receiver_param() const;
  private:
  bool _internal_has_receiver_param() const;
  public:
  void clear_receiver_param();
  const ::domi::RecvOpParams& receiver_param() const;
  ::domi::RecvOpParams* release_receiver_param();
  ::domi::RecvOpParams* mutable_receiver_param();
  void set_allocated_receiver_param(::domi::RecvOpParams* receiver_param);
  private:
  const ::domi::RecvOpParams& _internal_receiver_param() const;
  ::domi::RecvOpParams* _internal_mutable_receiver_param();
  public:
  void unsafe_arena_set_allocated_receiver_param(
      ::domi::RecvOpParams* receiver_param);
  ::domi::RecvOpParams* unsafe_arena_release_receiver_param();

  // .domi.ConvolutionOpParams convolution_param = 300;
  bool has_convolution_param() const;
  private:
  bool _internal_has_convolution_param() const;
  public:
  void clear_convolution_param();
  const ::domi::ConvolutionOpParams& convolution_param() const;
  ::domi::ConvolutionOpParams* release_convolution_param();
  ::domi::ConvolutionOpParams* mutable_convolution_param();
  void set_allocated_convolution_param(::domi::ConvolutionOpParams* convolution_param);
  private:
  const ::domi::ConvolutionOpParams& _internal_convolution_param() const;
  ::domi::ConvolutionOpParams* _internal_mutable_convolution_param();
  public:
  void unsafe_arena_set_allocated_convolution_param(
      ::domi::ConvolutionOpParams* convolution_param);
  ::domi::ConvolutionOpParams* unsafe_arena_release_convolution_param();

  // .domi.PoolingOpParams pooling_param = 400;
  bool has_pooling_param() const;
  private:
  bool _internal_has_pooling_param() const;
  public:
  void clear_pooling_param();
  const ::domi::PoolingOpParams& pooling_param() const;
  ::domi::PoolingOpParams* release_pooling_param();
  ::domi::PoolingOpParams* mutable_pooling_param();
  void set_allocated_pooling_param(::domi::PoolingOpParams* pooling_param);
  private:
  const ::domi::PoolingOpParams& _internal_pooling_param() const;
  ::domi::PoolingOpParams* _internal_mutable_pooling_param();
  public:
  void unsafe_arena_set_allocated_pooling_param(
      ::domi::PoolingOpParams* pooling_param);
  ::domi::PoolingOpParams* unsafe_arena_release_pooling_param();

  // .domi.EltwiseOpParams eltwise_param = 500;
  bool has_eltwise_param() const;
  private:
  bool _internal_has_eltwise_param() const;
  public:
  void clear_eltwise_param();
  const ::domi::EltwiseOpParams& eltwise_param() const;
  ::domi::EltwiseOpParams* release_eltwise_param();
  ::domi::EltwiseOpParams* mutable_eltwise_param();
  void set_allocated_eltwise_param(::domi::EltwiseOpParams* eltwise_param);
  private:
  const ::domi::EltwiseOpParams& _internal_eltwise_param() const;
  ::domi::EltwiseOpParams* _internal_mutable_eltwise_param();
  public:
  void unsafe_arena_set_allocated_eltwise_param(
      ::domi::EltwiseOpParams* eltwise_param);
  ::domi::EltwiseOpParams* unsafe_arena_release_eltwise_param();

  // .domi.BatchNormOpParams batchnorm_param = 600;
  bool has_batchnorm_param() const;
  private:
  bool _internal_has_batchnorm_param() const;
  public:
  void clear_batchnorm_param();
  const ::domi::BatchNormOpParams& batchnorm_param() const;
  ::domi::BatchNormOpParams* release_batchnorm_param();
  ::domi::BatchNormOpParams* mutable_batchnorm_param();
  void set_allocated_batchnorm_param(::domi::BatchNormOpParams* batchnorm_param);
  private:
  const ::domi::BatchNormOpParams& _internal_batchnorm_param() const;
  ::domi::BatchNormOpParams* _internal_mutable_batchnorm_param();
  public:
  void unsafe_arena_set_allocated_batchnorm_param(
      ::domi::BatchNormOpParams* batchnorm_param);
  ::domi::BatchNormOpParams* unsafe_arena_release_batchnorm_param();

  // .domi.ScaleOpParams scale_param = 700;
  bool has_scale_param() const;
  private:
  bool _internal_has_scale_param() const;
  public:
  void clear_scale_param();
  const ::domi::ScaleOpParams& scale_param() const;
  ::domi::ScaleOpParams* release_scale_param();
  ::domi::ScaleOpParams* mutable_scale_param();
  void set_allocated_scale_param(::domi::ScaleOpParams* scale_param);
  private:
  const ::domi::ScaleOpParams& _internal_scale_param() const;
  ::domi::ScaleOpParams* _internal_mutable_scale_param();
  public:
  void unsafe_arena_set_allocated_scale_param(
      ::domi::ScaleOpParams* scale_param);
  ::domi::ScaleOpParams* unsafe_arena_release_scale_param();

  // .domi.FullConnectionOpParams full_connection_param = 800;
  bool has_full_connection_param() const;
  private:
  bool _internal_has_full_connection_param() const;
  public:
  void clear_full_connection_param();
  const ::domi::FullConnectionOpParams& full_connection_param() const;
  ::domi::FullConnectionOpParams* release_full_connection_param();
  ::domi::FullConnectionOpParams* mutable_full_connection_param();
  void set_allocated_full_connection_param(::domi::FullConnectionOpParams* full_connection_param);
  private:
  const ::domi::FullConnectionOpParams& _internal_full_connection_param() const;
  ::domi::FullConnectionOpParams* _internal_mutable_full_connection_param();
  public:
  void unsafe_arena_set_allocated_full_connection_param(
      ::domi::FullConnectionOpParams* full_connection_param);
  ::domi::FullConnectionOpParams* unsafe_arena_release_full_connection_param();

  // .domi.SoftmaxOpParams softmax_param = 900;
  bool has_softmax_param() const;
  private:
  bool _internal_has_softmax_param() const;
  public:
  void clear_softmax_param();
  const ::domi::SoftmaxOpParams& softmax_param() const;
  ::domi::SoftmaxOpParams* release_softmax_param();
  ::domi::SoftmaxOpParams* mutable_softmax_param();
  void set_allocated_softmax_param(::domi::SoftmaxOpParams* softmax_param);
  private:
  const ::domi::SoftmaxOpParams& _internal_softmax_param() const;
  ::domi::SoftmaxOpParams* _internal_mutable_softmax_param();
  public:
  void unsafe_arena_set_allocated_softmax_param(
      ::domi::SoftmaxOpParams* softmax_param);
  ::domi::SoftmaxOpParams* unsafe_arena_release_softmax_param();

  // .domi.ActivationOpParams activation_param = 1000;
  bool has_activation_param() const;
  private:
  bool _internal_has_activation_param() const;
  public:
  void clear_activation_param();
  const ::domi::ActivationOpParams& activation_param() const;
  ::domi::ActivationOpParams* release_activation_param();
  ::domi::ActivationOpParams* mutable_activation_param();
  void set_allocated_activation_param(::domi::ActivationOpParams* activation_param);
  private:
  const ::domi::ActivationOpParams& _internal_activation_param() const;
  ::domi::ActivationOpParams* _internal_mutable_activation_param();
  public:
  void unsafe_arena_set_allocated_activation_param(
      ::domi::ActivationOpParams* activation_param);
  ::domi::ActivationOpParams* unsafe_arena_release_activation_param();

  // .domi.ReshapeOpParams reshape_param = 1100;
  bool has_reshape_param() const;
  private:
  bool _internal_has_reshape_param() const;
  public:
  void clear_reshape_param();
  const ::domi::ReshapeOpParams& reshape_param() const;
  ::domi::ReshapeOpParams* release_reshape_param();
  ::domi::ReshapeOpParams* mutable_reshape_param();
  void set_allocated_reshape_param(::domi::ReshapeOpParams* reshape_param);
  private:
  const ::domi::ReshapeOpParams& _internal_reshape_param() const;
  ::domi::ReshapeOpParams* _internal_mutable_reshape_param();
  public:
  void unsafe_arena_set_allocated_reshape_param(
      ::domi::ReshapeOpParams* reshape_param);
  ::domi::ReshapeOpParams* unsafe_arena_release_reshape_param();

  void clear_op_params();
  OpParamsCase op_params_case() const;
  // @@protoc_insertion_point(class_scope:domi.OpDef)
 private:
  class _Internal;
  void set_has_sender_param();
  void set_has_receiver_param();
  void set_has_convolution_param();
  void set_has_pooling_param();
  void set_has_eltwise_param();
  void set_has_batchnorm_param();
  void set_has_scale_param();
  void set_has_full_connection_param();
  void set_has_softmax_param();
  void set_has_activation_param();
  void set_has_reshape_param();

  inline bool has_op_params() const;
  inline void clear_has_op_params();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> src_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > src_index_;
  mutable std::atomic<int> _src_index_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > input_;
  mutable std::atomic<int> _input_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > output_;
  mutable std::atomic<int> _output_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::TensorDescriptor > input_desc_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::TensorDescriptor > output_desc_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef > weights_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dst_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > dst_index_;
  mutable std::atomic<int> _dst_index_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > workspace_;
  mutable std::atomic<int> _workspace_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > workspace_bytes_;
  mutable std::atomic<int> _workspace_bytes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> weight_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > is_input_const_;
  mutable std::atomic<int> _is_input_const_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      OpDef_AttrEntry_DoNotUse,
      std::string, ::domi::AttrDef,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > attr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::domi::QuantizeFactorParams* quantize_factor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stream_id_;
  union OpParamsUnion {
    OpParamsUnion() {}
    ::domi::SendOpParams* sender_param_;
    ::domi::RecvOpParams* receiver_param_;
    ::domi::ConvolutionOpParams* convolution_param_;
    ::domi::PoolingOpParams* pooling_param_;
    ::domi::EltwiseOpParams* eltwise_param_;
    ::domi::BatchNormOpParams* batchnorm_param_;
    ::domi::ScaleOpParams* scale_param_;
    ::domi::FullConnectionOpParams* full_connection_param_;
    ::domi::SoftmaxOpParams* softmax_param_;
    ::domi::ActivationOpParams* activation_param_;
    ::domi::ReshapeOpParams* reshape_param_;
  } op_params_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_om_2eproto;
};
// -------------------------------------------------------------------

class SendOpParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:domi.SendOpParams) */ {
 public:
  inline SendOpParams() : SendOpParams(nullptr) {}
  virtual ~SendOpParams();

  SendOpParams(const SendOpParams& from);
  SendOpParams(SendOpParams&& from) noexcept
    : SendOpParams() {
    *this = ::std::move(from);
  }

  inline SendOpParams& operator=(const SendOpParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendOpParams& operator=(SendOpParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendOpParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendOpParams* internal_default_instance() {
    return reinterpret_cast<const SendOpParams*>(
               &_SendOpParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SendOpParams& a, SendOpParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SendOpParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendOpParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendOpParams* New() const final {
    return CreateMaybeMessage<SendOpParams>(nullptr);
  }

  SendOpParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendOpParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendOpParams& from);
  void MergeFrom(const SendOpParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendOpParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "domi.SendOpParams";
  }
  protected:
  explicit SendOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventIdFieldNumber = 1,
  };
  // uint32 event_id = 1;
  void clear_event_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 event_id() const;
  void set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_event_id() const;
  void _internal_set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:domi.SendOpParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 event_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_om_2eproto;
};
// -------------------------------------------------------------------

class RecvOpParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:domi.RecvOpParams) */ {
 public:
  inline RecvOpParams() : RecvOpParams(nullptr) {}
  virtual ~RecvOpParams();

  RecvOpParams(const RecvOpParams& from);
  RecvOpParams(RecvOpParams&& from) noexcept
    : RecvOpParams() {
    *this = ::std::move(from);
  }

  inline RecvOpParams& operator=(const RecvOpParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecvOpParams& operator=(RecvOpParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecvOpParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecvOpParams* internal_default_instance() {
    return reinterpret_cast<const RecvOpParams*>(
               &_RecvOpParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RecvOpParams& a, RecvOpParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RecvOpParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecvOpParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecvOpParams* New() const final {
    return CreateMaybeMessage<RecvOpParams>(nullptr);
  }

  RecvOpParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecvOpParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecvOpParams& from);
  void MergeFrom(const RecvOpParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecvOpParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "domi.RecvOpParams";
  }
  protected:
  explicit RecvOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventIdFieldNumber = 1,
  };
  // uint32 event_id = 1;
  void clear_event_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 event_id() const;
  void set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_event_id() const;
  void _internal_set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:domi.RecvOpParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 event_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_om_2eproto;
};
// -------------------------------------------------------------------

class QuantizeFactor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:domi.QuantizeFactor) */ {
 public:
  inline QuantizeFactor() : QuantizeFactor(nullptr) {}
  virtual ~QuantizeFactor();

  QuantizeFactor(const QuantizeFactor& from);
  QuantizeFactor(QuantizeFactor&& from) noexcept
    : QuantizeFactor() {
    *this = ::std::move(from);
  }

  inline QuantizeFactor& operator=(const QuantizeFactor& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuantizeFactor& operator=(QuantizeFactor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuantizeFactor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuantizeFactor* internal_default_instance() {
    return reinterpret_cast<const QuantizeFactor*>(
               &_QuantizeFactor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(QuantizeFactor& a, QuantizeFactor& b) {
    a.Swap(&b);
  }
  inline void Swap(QuantizeFactor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuantizeFactor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuantizeFactor* New() const final {
    return CreateMaybeMessage<QuantizeFactor>(nullptr);
  }

  QuantizeFactor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuantizeFactor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuantizeFactor& from);
  void MergeFrom(const QuantizeFactor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuantizeFactor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "domi.QuantizeFactor";
  }
  protected:
  explicit QuantizeFactor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScaleValueFieldNumber = 2,
    kOffsetDataValueFieldNumber = 4,
    kOffsetWeightValueFieldNumber = 6,
    kOffsetPadValueFieldNumber = 8,
    kScaleOffsetFieldNumber = 3,
    kOffsetDataOffsetFieldNumber = 5,
    kOffsetWeightOffsetFieldNumber = 7,
    kOffsetPadOffsetFieldNumber = 9,
    kScaleModeFieldNumber = 1,
  };
  // bytes scale_value = 2;
  void clear_scale_value();
  const std::string& scale_value() const;
  void set_scale_value(const std::string& value);
  void set_scale_value(std::string&& value);
  void set_scale_value(const char* value);
  void set_scale_value(const void* value, size_t size);
  std::string* mutable_scale_value();
  std::string* release_scale_value();
  void set_allocated_scale_value(std::string* scale_value);
  private:
  const std::string& _internal_scale_value() const;
  void _internal_set_scale_value(const std::string& value);
  std::string* _internal_mutable_scale_value();
  public:

  // bytes offset_data_value = 4;
  void clear_offset_data_value();
  const std::string& offset_data_value() const;
  void set_offset_data_value(const std::string& value);
  void set_offset_data_value(std::string&& value);
  void set_offset_data_value(const char* value);
  void set_offset_data_value(const void* value, size_t size);
  std::string* mutable_offset_data_value();
  std::string* release_offset_data_value();
  void set_allocated_offset_data_value(std::string* offset_data_value);
  private:
  const std::string& _internal_offset_data_value() const;
  void _internal_set_offset_data_value(const std::string& value);
  std::string* _internal_mutable_offset_data_value();
  public:

  // bytes offset_weight_value = 6;
  void clear_offset_weight_value();
  const std::string& offset_weight_value() const;
  void set_offset_weight_value(const std::string& value);
  void set_offset_weight_value(std::string&& value);
  void set_offset_weight_value(const char* value);
  void set_offset_weight_value(const void* value, size_t size);
  std::string* mutable_offset_weight_value();
  std::string* release_offset_weight_value();
  void set_allocated_offset_weight_value(std::string* offset_weight_value);
  private:
  const std::string& _internal_offset_weight_value() const;
  void _internal_set_offset_weight_value(const std::string& value);
  std::string* _internal_mutable_offset_weight_value();
  public:

  // bytes offset_pad_value = 8;
  void clear_offset_pad_value();
  const std::string& offset_pad_value() const;
  void set_offset_pad_value(const std::string& value);
  void set_offset_pad_value(std::string&& value);
  void set_offset_pad_value(const char* value);
  void set_offset_pad_value(const void* value, size_t size);
  std::string* mutable_offset_pad_value();
  std::string* release_offset_pad_value();
  void set_allocated_offset_pad_value(std::string* offset_pad_value);
  private:
  const std::string& _internal_offset_pad_value() const;
  void _internal_set_offset_pad_value(const std::string& value);
  std::string* _internal_mutable_offset_pad_value();
  public:

  // int64 scale_offset = 3;
  void clear_scale_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 scale_offset() const;
  void set_scale_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_scale_offset() const;
  void _internal_set_scale_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 offset_data_offset = 5;
  void clear_offset_data_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset_data_offset() const;
  void set_offset_data_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset_data_offset() const;
  void _internal_set_offset_data_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 offset_weight_offset = 7;
  void clear_offset_weight_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset_weight_offset() const;
  void set_offset_weight_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset_weight_offset() const;
  void _internal_set_offset_weight_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 offset_pad_offset = 9;
  void clear_offset_pad_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset_pad_offset() const;
  void set_offset_pad_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset_pad_offset() const;
  void _internal_set_offset_pad_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .domi.QuantizeScaleMode scale_mode = 1;
  void clear_scale_mode();
  ::domi::QuantizeScaleMode scale_mode() const;
  void set_scale_mode(::domi::QuantizeScaleMode value);
  private:
  ::domi::QuantizeScaleMode _internal_scale_mode() const;
  void _internal_set_scale_mode(::domi::QuantizeScaleMode value);
  public:

  // @@protoc_insertion_point(class_scope:domi.QuantizeFactor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scale_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr offset_data_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr offset_weight_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr offset_pad_value_;
  ::PROTOBUF_NAMESPACE_ID::int64 scale_offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_data_offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_weight_offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_pad_offset_;
  int scale_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_om_2eproto;
};
// -------------------------------------------------------------------

class QuantizeCalcFactor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:domi.QuantizeCalcFactor) */ {
 public:
  inline QuantizeCalcFactor() : QuantizeCalcFactor(nullptr) {}
  virtual ~QuantizeCalcFactor();

  QuantizeCalcFactor(const QuantizeCalcFactor& from);
  QuantizeCalcFactor(QuantizeCalcFactor&& from) noexcept
    : QuantizeCalcFactor() {
    *this = ::std::move(from);
  }

  inline QuantizeCalcFactor& operator=(const QuantizeCalcFactor& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuantizeCalcFactor& operator=(QuantizeCalcFactor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuantizeCalcFactor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuantizeCalcFactor* internal_default_instance() {
    return reinterpret_cast<const QuantizeCalcFactor*>(
               &_QuantizeCalcFactor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(QuantizeCalcFactor& a, QuantizeCalcFactor& b) {
    a.Swap(&b);
  }
  inline void Swap(QuantizeCalcFactor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuantizeCalcFactor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuantizeCalcFactor* New() const final {
    return CreateMaybeMessage<QuantizeCalcFactor>(nullptr);
  }

  QuantizeCalcFactor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuantizeCalcFactor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuantizeCalcFactor& from);
  void MergeFrom(const QuantizeCalcFactor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuantizeCalcFactor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "domi.QuantizeCalcFactor";
  }
  protected:
  explicit QuantizeCalcFactor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetwFieldNumber = 1,
    kOffsetdFieldNumber = 3,
    kScalereqFieldNumber = 5,
    kOffsetdnextFieldNumber = 7,
    kOffsetwOffsetFieldNumber = 2,
    kOffsetdOffsetFieldNumber = 4,
    kScaledreqOffsetFieldNumber = 6,
    kOffsetdnextOffsetFieldNumber = 8,
  };
  // bytes offsetw = 1;
  void clear_offsetw();
  const std::string& offsetw() const;
  void set_offsetw(const std::string& value);
  void set_offsetw(std::string&& value);
  void set_offsetw(const char* value);
  void set_offsetw(const void* value, size_t size);
  std::string* mutable_offsetw();
  std::string* release_offsetw();
  void set_allocated_offsetw(std::string* offsetw);
  private:
  const std::string& _internal_offsetw() const;
  void _internal_set_offsetw(const std::string& value);
  std::string* _internal_mutable_offsetw();
  public:

  // bytes offsetd = 3;
  void clear_offsetd();
  const std::string& offsetd() const;
  void set_offsetd(const std::string& value);
  void set_offsetd(std::string&& value);
  void set_offsetd(const char* value);
  void set_offsetd(const void* value, size_t size);
  std::string* mutable_offsetd();
  std::string* release_offsetd();
  void set_allocated_offsetd(std::string* offsetd);
  private:
  const std::string& _internal_offsetd() const;
  void _internal_set_offsetd(const std::string& value);
  std::string* _internal_mutable_offsetd();
  public:

  // bytes scalereq = 5;
  void clear_scalereq();
  const std::string& scalereq() const;
  void set_scalereq(const std::string& value);
  void set_scalereq(std::string&& value);
  void set_scalereq(const char* value);
  void set_scalereq(const void* value, size_t size);
  std::string* mutable_scalereq();
  std::string* release_scalereq();
  void set_allocated_scalereq(std::string* scalereq);
  private:
  const std::string& _internal_scalereq() const;
  void _internal_set_scalereq(const std::string& value);
  std::string* _internal_mutable_scalereq();
  public:

  // bytes offsetdnext = 7;
  void clear_offsetdnext();
  const std::string& offsetdnext() const;
  void set_offsetdnext(const std::string& value);
  void set_offsetdnext(std::string&& value);
  void set_offsetdnext(const char* value);
  void set_offsetdnext(const void* value, size_t size);
  std::string* mutable_offsetdnext();
  std::string* release_offsetdnext();
  void set_allocated_offsetdnext(std::string* offsetdnext);
  private:
  const std::string& _internal_offsetdnext() const;
  void _internal_set_offsetdnext(const std::string& value);
  std::string* _internal_mutable_offsetdnext();
  public:

  // int64 offsetw_offset = 2;
  void clear_offsetw_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offsetw_offset() const;
  void set_offsetw_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offsetw_offset() const;
  void _internal_set_offsetw_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 offsetd_offset = 4;
  void clear_offsetd_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offsetd_offset() const;
  void set_offsetd_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offsetd_offset() const;
  void _internal_set_offsetd_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 scaledreq_offset = 6;
  void clear_scaledreq_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 scaledreq_offset() const;
  void set_scaledreq_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_scaledreq_offset() const;
  void _internal_set_scaledreq_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 offsetdnext_offset = 8;
  void clear_offsetdnext_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offsetdnext_offset() const;
  void set_offsetdnext_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offsetdnext_offset() const;
  void _internal_set_offsetdnext_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:domi.QuantizeCalcFactor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr offsetw_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr offsetd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scalereq_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr offsetdnext_;
  ::PROTOBUF_NAMESPACE_ID::int64 offsetw_offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 offsetd_offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 scaledreq_offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 offsetdnext_offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_om_2eproto;
};
// -------------------------------------------------------------------

class QuantizeFactorParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:domi.QuantizeFactorParams) */ {
 public:
  inline QuantizeFactorParams() : QuantizeFactorParams(nullptr) {}
  virtual ~QuantizeFactorParams();

  QuantizeFactorParams(const QuantizeFactorParams& from);
  QuantizeFactorParams(QuantizeFactorParams&& from) noexcept
    : QuantizeFactorParams() {
    *this = ::std::move(from);
  }

  inline QuantizeFactorParams& operator=(const QuantizeFactorParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuantizeFactorParams& operator=(QuantizeFactorParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuantizeFactorParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuantizeFactorParams* internal_default_instance() {
    return reinterpret_cast<const QuantizeFactorParams*>(
               &_QuantizeFactorParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(QuantizeFactorParams& a, QuantizeFactorParams& b) {
    a.Swap(&b);
  }
  inline void Swap(QuantizeFactorParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuantizeFactorParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuantizeFactorParams* New() const final {
    return CreateMaybeMessage<QuantizeFactorParams>(nullptr);
  }

  QuantizeFactorParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuantizeFactorParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuantizeFactorParams& from);
  void MergeFrom(const QuantizeFactorParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuantizeFactorParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "domi.QuantizeFactorParams";
  }
  protected:
  explicit QuantizeFactorParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuantizeParamFieldNumber = 3,
    kDequantizeParamFieldNumber = 4,
    kRequantizeParamFieldNumber = 5,
    kQuantizecalcParamFieldNumber = 6,
    kQuantizeAlgoFieldNumber = 1,
    kScaleTypeFieldNumber = 2,
  };
  // .domi.QuantizeFactor quantize_param = 3;
  bool has_quantize_param() const;
  private:
  bool _internal_has_quantize_param() const;
  public:
  void clear_quantize_param();
  const ::domi::QuantizeFactor& quantize_param() const;
  ::domi::QuantizeFactor* release_quantize_param();
  ::domi::QuantizeFactor* mutable_quantize_param();
  void set_allocated_quantize_param(::domi::QuantizeFactor* quantize_param);
  private:
  const ::domi::QuantizeFactor& _internal_quantize_param() const;
  ::domi::QuantizeFactor* _internal_mutable_quantize_param();
  public:
  void unsafe_arena_set_allocated_quantize_param(
      ::domi::QuantizeFactor* quantize_param);
  ::domi::QuantizeFactor* unsafe_arena_release_quantize_param();

  // .domi.QuantizeFactor dequantize_param = 4;
  bool has_dequantize_param() const;
  private:
  bool _internal_has_dequantize_param() const;
  public:
  void clear_dequantize_param();
  const ::domi::QuantizeFactor& dequantize_param() const;
  ::domi::QuantizeFactor* release_dequantize_param();
  ::domi::QuantizeFactor* mutable_dequantize_param();
  void set_allocated_dequantize_param(::domi::QuantizeFactor* dequantize_param);
  private:
  const ::domi::QuantizeFactor& _internal_dequantize_param() const;
  ::domi::QuantizeFactor* _internal_mutable_dequantize_param();
  public:
  void unsafe_arena_set_allocated_dequantize_param(
      ::domi::QuantizeFactor* dequantize_param);
  ::domi::QuantizeFactor* unsafe_arena_release_dequantize_param();

  // .domi.QuantizeFactor requantize_param = 5;
  bool has_requantize_param() const;
  private:
  bool _internal_has_requantize_param() const;
  public:
  void clear_requantize_param();
  const ::domi::QuantizeFactor& requantize_param() const;
  ::domi::QuantizeFactor* release_requantize_param();
  ::domi::QuantizeFactor* mutable_requantize_param();
  void set_allocated_requantize_param(::domi::QuantizeFactor* requantize_param);
  private:
  const ::domi::QuantizeFactor& _internal_requantize_param() const;
  ::domi::QuantizeFactor* _internal_mutable_requantize_param();
  public:
  void unsafe_arena_set_allocated_requantize_param(
      ::domi::QuantizeFactor* requantize_param);
  ::domi::QuantizeFactor* unsafe_arena_release_requantize_param();

  // .domi.QuantizeCalcFactor quantizecalc_param = 6;
  bool has_quantizecalc_param() const;
  private:
  bool _internal_has_quantizecalc_param() const;
  public:
  void clear_quantizecalc_param();
  const ::domi::QuantizeCalcFactor& quantizecalc_param() const;
  ::domi::QuantizeCalcFactor* release_quantizecalc_param();
  ::domi::QuantizeCalcFactor* mutable_quantizecalc_param();
  void set_allocated_quantizecalc_param(::domi::QuantizeCalcFactor* quantizecalc_param);
  private:
  const ::domi::QuantizeCalcFactor& _internal_quantizecalc_param() const;
  ::domi::QuantizeCalcFactor* _internal_mutable_quantizecalc_param();
  public:
  void unsafe_arena_set_allocated_quantizecalc_param(
      ::domi::QuantizeCalcFactor* quantizecalc_param);
  ::domi::QuantizeCalcFactor* unsafe_arena_release_quantizecalc_param();

  // .domi.QuantizeAlgorithm quantize_algo = 1;
  void clear_quantize_algo();
  ::domi::QuantizeAlgorithm quantize_algo() const;
  void set_quantize_algo(::domi::QuantizeAlgorithm value);
  private:
  ::domi::QuantizeAlgorithm _internal_quantize_algo() const;
  void _internal_set_quantize_algo(::domi::QuantizeAlgorithm value);
  public:

  // .domi.QuantizeScaleType scale_type = 2;
  void clear_scale_type();
  ::domi::QuantizeScaleType scale_type() const;
  void set_scale_type(::domi::QuantizeScaleType value);
  private:
  ::domi::QuantizeScaleType _internal_scale_type() const;
  void _internal_set_scale_type(::domi::QuantizeScaleType value);
  public:

  // @@protoc_insertion_point(class_scope:domi.QuantizeFactorParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::domi::QuantizeFactor* quantize_param_;
  ::domi::QuantizeFactor* dequantize_param_;
  ::domi::QuantizeFactor* requantize_param_;
  ::domi::QuantizeCalcFactor* quantizecalc_param_;
  int quantize_algo_;
  int scale_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_om_2eproto;
};
// -------------------------------------------------------------------

class ConvolutionOpParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:domi.ConvolutionOpParams) */ {
 public:
  inline ConvolutionOpParams() : ConvolutionOpParams(nullptr) {}
  virtual ~ConvolutionOpParams();

  ConvolutionOpParams(const ConvolutionOpParams& from);
  ConvolutionOpParams(ConvolutionOpParams&& from) noexcept
    : ConvolutionOpParams() {
    *this = ::std::move(from);
  }

  inline ConvolutionOpParams& operator=(const ConvolutionOpParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConvolutionOpParams& operator=(ConvolutionOpParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConvolutionOpParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConvolutionOpParams* internal_default_instance() {
    return reinterpret_cast<const ConvolutionOpParams*>(
               &_ConvolutionOpParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ConvolutionOpParams& a, ConvolutionOpParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ConvolutionOpParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConvolutionOpParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConvolutionOpParams* New() const final {
    return CreateMaybeMessage<ConvolutionOpParams>(nullptr);
  }

  ConvolutionOpParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConvolutionOpParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConvolutionOpParams& from);
  void MergeFrom(const ConvolutionOpParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConvolutionOpParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "domi.ConvolutionOpParams";
  }
  protected:
  explicit ConvolutionOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPadFieldNumber = 10,
    kStrideFieldNumber = 11,
    kDilationFieldNumber = 12,
    kKernelFieldNumber = 13,
    kAdjFieldNumber = 70,
    kTargetShapeFieldNumber = 71,
    kBeforePadFieldNumber = 72,
    kFilterFieldNumber = 40,
    kBiasFieldNumber = 41,
    kModeFieldNumber = 1,
    kAlgoFieldNumber = 2,
    kPadModeFieldNumber = 3,
    kGroupFieldNumber = 4,
    kNumOutputFieldNumber = 5,
    kAlphaFieldNumber = 20,
    kBetaFieldNumber = 21,
    kReluFlagFieldNumber = 62,
  };
  // repeated uint32 pad = 10;
  int pad_size() const;
  private:
  int _internal_pad_size() const;
  public:
  void clear_pad();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pad(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_pad() const;
  void _internal_add_pad(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_pad();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 pad(int index) const;
  void set_pad(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_pad(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      pad() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_pad();

  // repeated uint32 stride = 11;
  int stride_size() const;
  private:
  int _internal_stride_size() const;
  public:
  void clear_stride();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stride(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_stride() const;
  void _internal_add_stride(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_stride();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 stride(int index) const;
  void set_stride(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_stride(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      stride() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_stride();

  // repeated uint32 dilation = 12;
  int dilation_size() const;
  private:
  int _internal_dilation_size() const;
  public:
  void clear_dilation();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dilation(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_dilation() const;
  void _internal_add_dilation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_dilation();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 dilation(int index) const;
  void set_dilation(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_dilation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      dilation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_dilation();

  // repeated uint32 kernel = 13;
  int kernel_size() const;
  private:
  int _internal_kernel_size() const;
  public:
  void clear_kernel();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kernel(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_kernel() const;
  void _internal_add_kernel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_kernel();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 kernel(int index) const;
  void set_kernel(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_kernel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      kernel() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_kernel();

  // repeated uint32 adj = 70;
  int adj_size() const;
  private:
  int _internal_adj_size() const;
  public:
  void clear_adj();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_adj(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_adj() const;
  void _internal_add_adj(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_adj();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 adj(int index) const;
  void set_adj(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_adj(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      adj() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_adj();

  // repeated uint32 target_shape = 71;
  int target_shape_size() const;
  private:
  int _internal_target_shape_size() const;
  public:
  void clear_target_shape();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_target_shape(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_target_shape() const;
  void _internal_add_target_shape(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_target_shape();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 target_shape(int index) const;
  void set_target_shape(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_target_shape(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      target_shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_target_shape();

  // repeated uint32 before_pad = 72;
  int before_pad_size() const;
  private:
  int _internal_before_pad_size() const;
  public:
  void clear_before_pad();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_before_pad(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_before_pad() const;
  void _internal_add_before_pad(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_before_pad();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 before_pad(int index) const;
  void set_before_pad(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_before_pad(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      before_pad() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_before_pad();

  // .domi.WeightDef filter = 40;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::domi::WeightDef& filter() const;
  ::domi::WeightDef* release_filter();
  ::domi::WeightDef* mutable_filter();
  void set_allocated_filter(::domi::WeightDef* filter);
  private:
  const ::domi::WeightDef& _internal_filter() const;
  ::domi::WeightDef* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::domi::WeightDef* filter);
  ::domi::WeightDef* unsafe_arena_release_filter();

  // .domi.WeightDef bias = 41;
  bool has_bias() const;
  private:
  bool _internal_has_bias() const;
  public:
  void clear_bias();
  const ::domi::WeightDef& bias() const;
  ::domi::WeightDef* release_bias();
  ::domi::WeightDef* mutable_bias();
  void set_allocated_bias(::domi::WeightDef* bias);
  private:
  const ::domi::WeightDef& _internal_bias() const;
  ::domi::WeightDef* _internal_mutable_bias();
  public:
  void unsafe_arena_set_allocated_bias(
      ::domi::WeightDef* bias);
  ::domi::WeightDef* unsafe_arena_release_bias();

  // int32 mode = 1;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 algo = 2;
  void clear_algo();
  ::PROTOBUF_NAMESPACE_ID::int32 algo() const;
  void set_algo(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_algo() const;
  void _internal_set_algo(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pad_mode = 3;
  void clear_pad_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 pad_mode() const;
  void set_pad_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pad_mode() const;
  void _internal_set_pad_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 group = 4;
  void clear_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 group() const;
  void set_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group() const;
  void _internal_set_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num_output = 5;
  void clear_num_output();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_output() const;
  void set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_output() const;
  void _internal_set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float alpha = 20;
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // float beta = 21;
  void clear_beta();
  float beta() const;
  void set_beta(float value);
  private:
  float _internal_beta() const;
  void _internal_set_beta(float value);
  public:

  // bool relu_flag = 62;
  void clear_relu_flag();
  bool relu_flag() const;
  void set_relu_flag(bool value);
  private:
  bool _internal_relu_flag() const;
  void _internal_set_relu_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:domi.ConvolutionOpParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > pad_;
  mutable std::atomic<int> _pad_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > stride_;
  mutable std::atomic<int> _stride_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > dilation_;
  mutable std::atomic<int> _dilation_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > kernel_;
  mutable std::atomic<int> _kernel_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > adj_;
  mutable std::atomic<int> _adj_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > target_shape_;
  mutable std::atomic<int> _target_shape_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > before_pad_;
  mutable std::atomic<int> _before_pad_cached_byte_size_;
  ::domi::WeightDef* filter_;
  ::domi::WeightDef* bias_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 algo_;
  ::PROTOBUF_NAMESPACE_ID::int32 pad_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_output_;
  float alpha_;
  float beta_;
  bool relu_flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_om_2eproto;
};
// -------------------------------------------------------------------

class PoolingOpParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:domi.PoolingOpParams) */ {
 public:
  inline PoolingOpParams() : PoolingOpParams(nullptr) {}
  virtual ~PoolingOpParams();

  PoolingOpParams(const PoolingOpParams& from);
  PoolingOpParams(PoolingOpParams&& from) noexcept
    : PoolingOpParams() {
    *this = ::std::move(from);
  }

  inline PoolingOpParams& operator=(const PoolingOpParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoolingOpParams& operator=(PoolingOpParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PoolingOpParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoolingOpParams* internal_default_instance() {
    return reinterpret_cast<const PoolingOpParams*>(
               &_PoolingOpParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PoolingOpParams& a, PoolingOpParams& b) {
    a.Swap(&b);
  }
  inline void Swap(PoolingOpParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoolingOpParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoolingOpParams* New() const final {
    return CreateMaybeMessage<PoolingOpParams>(nullptr);
  }

  PoolingOpParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoolingOpParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoolingOpParams& from);
  void MergeFrom(const PoolingOpParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoolingOpParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "domi.PoolingOpParams";
  }
  protected:
  explicit PoolingOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWindowFieldNumber = 10,
    kPadFieldNumber = 11,
    kStrideFieldNumber = 12,
    kBeforePadFieldNumber = 22,
    kModeFieldNumber = 1,
    kNanOptFieldNumber = 2,
    kPadModeFieldNumber = 3,
    kGlobalPoolingFieldNumber = 4,
    kCeilModeFieldNumber = 13,
    kBetaFieldNumber = 21,
    kDataModeFieldNumber = 14,
    kAlphaFieldNumber = 20,
  };
  // repeated uint32 window = 10;
  int window_size() const;
  private:
  int _internal_window_size() const;
  public:
  void clear_window();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_window(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_window() const;
  void _internal_add_window(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_window();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 window(int index) const;
  void set_window(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_window(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      window() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_window();

  // repeated uint32 pad = 11;
  int pad_size() const;
  private:
  int _internal_pad_size() const;
  public:
  void clear_pad();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pad(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_pad() const;
  void _internal_add_pad(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_pad();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 pad(int index) const;
  void set_pad(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_pad(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      pad() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_pad();

  // repeated uint32 stride = 12;
  int stride_size() const;
  private:
  int _internal_stride_size() const;
  public:
  void clear_stride();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stride(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_stride() const;
  void _internal_add_stride(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_stride();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 stride(int index) const;
  void set_stride(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_stride(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      stride() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_stride();

  // repeated uint32 before_pad = 22;
  int before_pad_size() const;
  private:
  int _internal_before_pad_size() const;
  public:
  void clear_before_pad();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_before_pad(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_before_pad() const;
  void _internal_add_before_pad(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_before_pad();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 before_pad(int index) const;
  void set_before_pad(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_before_pad(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      before_pad() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_before_pad();

  // int32 mode = 1;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nan_opt = 2;
  void clear_nan_opt();
  ::PROTOBUF_NAMESPACE_ID::int32 nan_opt() const;
  void set_nan_opt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nan_opt() const;
  void _internal_set_nan_opt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pad_mode = 3;
  void clear_pad_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 pad_mode() const;
  void set_pad_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pad_mode() const;
  void _internal_set_pad_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool global_pooling = 4;
  void clear_global_pooling();
  bool global_pooling() const;
  void set_global_pooling(bool value);
  private:
  bool _internal_global_pooling() const;
  void _internal_set_global_pooling(bool value);
  public:

  // bool ceil_mode = 13;
  void clear_ceil_mode();
  bool ceil_mode() const;
  void set_ceil_mode(bool value);
  private:
  bool _internal_ceil_mode() const;
  void _internal_set_ceil_mode(bool value);
  public:

  // float beta = 21;
  void clear_beta();
  float beta() const;
  void set_beta(float value);
  private:
  float _internal_beta() const;
  void _internal_set_beta(float value);
  public:

  // int32 data_mode = 14;
  void clear_data_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 data_mode() const;
  void set_data_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data_mode() const;
  void _internal_set_data_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float alpha = 20;
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // @@protoc_insertion_point(class_scope:domi.PoolingOpParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > window_;
  mutable std::atomic<int> _window_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > pad_;
  mutable std::atomic<int> _pad_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > stride_;
  mutable std::atomic<int> _stride_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > before_pad_;
  mutable std::atomic<int> _before_pad_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 nan_opt_;
  ::PROTOBUF_NAMESPACE_ID::int32 pad_mode_;
  bool global_pooling_;
  bool ceil_mode_;
  float beta_;
  ::PROTOBUF_NAMESPACE_ID::int32 data_mode_;
  float alpha_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_om_2eproto;
};
// -------------------------------------------------------------------

class EltwiseOpParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:domi.EltwiseOpParams) */ {
 public:
  inline EltwiseOpParams() : EltwiseOpParams(nullptr) {}
  virtual ~EltwiseOpParams();

  EltwiseOpParams(const EltwiseOpParams& from);
  EltwiseOpParams(EltwiseOpParams&& from) noexcept
    : EltwiseOpParams() {
    *this = ::std::move(from);
  }

  inline EltwiseOpParams& operator=(const EltwiseOpParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EltwiseOpParams& operator=(EltwiseOpParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EltwiseOpParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EltwiseOpParams* internal_default_instance() {
    return reinterpret_cast<const EltwiseOpParams*>(
               &_EltwiseOpParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(EltwiseOpParams& a, EltwiseOpParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EltwiseOpParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EltwiseOpParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EltwiseOpParams* New() const final {
    return CreateMaybeMessage<EltwiseOpParams>(nullptr);
  }

  EltwiseOpParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EltwiseOpParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EltwiseOpParams& from);
  void MergeFrom(const EltwiseOpParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EltwiseOpParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "domi.EltwiseOpParams";
  }
  protected:
  explicit EltwiseOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoeffFieldNumber = 2,
    kWeightFieldNumber = 5,
    kModeFieldNumber = 1,
    kAlphaFieldNumber = 3,
    kBetaFieldNumber = 4,
    kReluFlagFieldNumber = 6,
  };
  // repeated float coeff = 2;
  int coeff_size() const;
  private:
  int _internal_coeff_size() const;
  public:
  void clear_coeff();
  private:
  float _internal_coeff(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_coeff() const;
  void _internal_add_coeff(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_coeff();
  public:
  float coeff(int index) const;
  void set_coeff(int index, float value);
  void add_coeff(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      coeff() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_coeff();

  // repeated .domi.WeightDef weight = 5;
  int weight_size() const;
  private:
  int _internal_weight_size() const;
  public:
  void clear_weight();
  ::domi::WeightDef* mutable_weight(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef >*
      mutable_weight();
  private:
  const ::domi::WeightDef& _internal_weight(int index) const;
  ::domi::WeightDef* _internal_add_weight();
  public:
  const ::domi::WeightDef& weight(int index) const;
  ::domi::WeightDef* add_weight();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef >&
      weight() const;

  // int32 mode = 1;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float alpha = 3;
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // float beta = 4;
  void clear_beta();
  float beta() const;
  void set_beta(float value);
  private:
  float _internal_beta() const;
  void _internal_set_beta(float value);
  public:

  // bool relu_flag = 6;
  void clear_relu_flag();
  bool relu_flag() const;
  void set_relu_flag(bool value);
  private:
  bool _internal_relu_flag() const;
  void _internal_set_relu_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:domi.EltwiseOpParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > coeff_;
  mutable std::atomic<int> _coeff_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef > weight_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  float alpha_;
  float beta_;
  bool relu_flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_om_2eproto;
};
// -------------------------------------------------------------------

class ActivationOpParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:domi.ActivationOpParams) */ {
 public:
  inline ActivationOpParams() : ActivationOpParams(nullptr) {}
  virtual ~ActivationOpParams();

  ActivationOpParams(const ActivationOpParams& from);
  ActivationOpParams(ActivationOpParams&& from) noexcept
    : ActivationOpParams() {
    *this = ::std::move(from);
  }

  inline ActivationOpParams& operator=(const ActivationOpParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivationOpParams& operator=(ActivationOpParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActivationOpParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActivationOpParams* internal_default_instance() {
    return reinterpret_cast<const ActivationOpParams*>(
               &_ActivationOpParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ActivationOpParams& a, ActivationOpParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivationOpParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActivationOpParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivationOpParams* New() const final {
    return CreateMaybeMessage<ActivationOpParams>(nullptr);
  }

  ActivationOpParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivationOpParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActivationOpParams& from);
  void MergeFrom(const ActivationOpParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivationOpParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "domi.ActivationOpParams";
  }
  protected:
  explicit ActivationOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
    kCoefFieldNumber = 2,
    kAlphaFieldNumber = 3,
    kBetaFieldNumber = 4,
  };
  // int32 mode = 1;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float coef = 2;
  void clear_coef();
  float coef() const;
  void set_coef(float value);
  private:
  float _internal_coef() const;
  void _internal_set_coef(float value);
  public:

  // float alpha = 3;
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // float beta = 4;
  void clear_beta();
  float beta() const;
  void set_beta(float value);
  private:
  float _internal_beta() const;
  void _internal_set_beta(float value);
  public:

  // @@protoc_insertion_point(class_scope:domi.ActivationOpParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  float coef_;
  float alpha_;
  float beta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_om_2eproto;
};
// -------------------------------------------------------------------

class BatchNormOpParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:domi.BatchNormOpParams) */ {
 public:
  inline BatchNormOpParams() : BatchNormOpParams(nullptr) {}
  virtual ~BatchNormOpParams();

  BatchNormOpParams(const BatchNormOpParams& from);
  BatchNormOpParams(BatchNormOpParams&& from) noexcept
    : BatchNormOpParams() {
    *this = ::std::move(from);
  }

  inline BatchNormOpParams& operator=(const BatchNormOpParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchNormOpParams& operator=(BatchNormOpParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BatchNormOpParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchNormOpParams* internal_default_instance() {
    return reinterpret_cast<const BatchNormOpParams*>(
               &_BatchNormOpParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(BatchNormOpParams& a, BatchNormOpParams& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchNormOpParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchNormOpParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatchNormOpParams* New() const final {
    return CreateMaybeMessage<BatchNormOpParams>(nullptr);
  }

  BatchNormOpParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatchNormOpParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BatchNormOpParams& from);
  void MergeFrom(const BatchNormOpParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchNormOpParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "domi.BatchNormOpParams";
  }
  protected:
  explicit BatchNormOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEstimatedMeanFieldNumber = 7,
    kEstimatedVarianceFieldNumber = 8,
    kScaleFieldNumber = 9,
    kBiasFieldNumber = 10,
    kModeFieldNumber = 1,
    kAlphaFieldNumber = 2,
    kEpsilonFieldNumber = 4,
    kBetaFieldNumber = 3,
    kUseGlobalStatsFieldNumber = 5,
    kMovingAverageFractionFieldNumber = 6,
  };
  // .domi.WeightDef estimated_mean = 7;
  bool has_estimated_mean() const;
  private:
  bool _internal_has_estimated_mean() const;
  public:
  void clear_estimated_mean();
  const ::domi::WeightDef& estimated_mean() const;
  ::domi::WeightDef* release_estimated_mean();
  ::domi::WeightDef* mutable_estimated_mean();
  void set_allocated_estimated_mean(::domi::WeightDef* estimated_mean);
  private:
  const ::domi::WeightDef& _internal_estimated_mean() const;
  ::domi::WeightDef* _internal_mutable_estimated_mean();
  public:
  void unsafe_arena_set_allocated_estimated_mean(
      ::domi::WeightDef* estimated_mean);
  ::domi::WeightDef* unsafe_arena_release_estimated_mean();

  // .domi.WeightDef estimated_variance = 8;
  bool has_estimated_variance() const;
  private:
  bool _internal_has_estimated_variance() const;
  public:
  void clear_estimated_variance();
  const ::domi::WeightDef& estimated_variance() const;
  ::domi::WeightDef* release_estimated_variance();
  ::domi::WeightDef* mutable_estimated_variance();
  void set_allocated_estimated_variance(::domi::WeightDef* estimated_variance);
  private:
  const ::domi::WeightDef& _internal_estimated_variance() const;
  ::domi::WeightDef* _internal_mutable_estimated_variance();
  public:
  void unsafe_arena_set_allocated_estimated_variance(
      ::domi::WeightDef* estimated_variance);
  ::domi::WeightDef* unsafe_arena_release_estimated_variance();

  // .domi.WeightDef scale = 9;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  const ::domi::WeightDef& scale() const;
  ::domi::WeightDef* release_scale();
  ::domi::WeightDef* mutable_scale();
  void set_allocated_scale(::domi::WeightDef* scale);
  private:
  const ::domi::WeightDef& _internal_scale() const;
  ::domi::WeightDef* _internal_mutable_scale();
  public:
  void unsafe_arena_set_allocated_scale(
      ::domi::WeightDef* scale);
  ::domi::WeightDef* unsafe_arena_release_scale();

  // .domi.WeightDef bias = 10;
  bool has_bias() const;
  private:
  bool _internal_has_bias() const;
  public:
  void clear_bias();
  const ::domi::WeightDef& bias() const;
  ::domi::WeightDef* release_bias();
  ::domi::WeightDef* mutable_bias();
  void set_allocated_bias(::domi::WeightDef* bias);
  private:
  const ::domi::WeightDef& _internal_bias() const;
  ::domi::WeightDef* _internal_mutable_bias();
  public:
  void unsafe_arena_set_allocated_bias(
      ::domi::WeightDef* bias);
  ::domi::WeightDef* unsafe_arena_release_bias();

  // int32 mode = 1;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float alpha = 2;
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // double epsilon = 4;
  void clear_epsilon();
  double epsilon() const;
  void set_epsilon(double value);
  private:
  double _internal_epsilon() const;
  void _internal_set_epsilon(double value);
  public:

  // float beta = 3;
  void clear_beta();
  float beta() const;
  void set_beta(float value);
  private:
  float _internal_beta() const;
  void _internal_set_beta(float value);
  public:

  // bool use_global_stats = 5;
  void clear_use_global_stats();
  bool use_global_stats() const;
  void set_use_global_stats(bool value);
  private:
  bool _internal_use_global_stats() const;
  void _internal_set_use_global_stats(bool value);
  public:

  // float moving_average_fraction = 6;
  void clear_moving_average_fraction();
  float moving_average_fraction() const;
  void set_moving_average_fraction(float value);
  private:
  float _internal_moving_average_fraction() const;
  void _internal_set_moving_average_fraction(float value);
  public:

  // @@protoc_insertion_point(class_scope:domi.BatchNormOpParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::domi::WeightDef* estimated_mean_;
  ::domi::WeightDef* estimated_variance_;
  ::domi::WeightDef* scale_;
  ::domi::WeightDef* bias_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  float alpha_;
  double epsilon_;
  float beta_;
  bool use_global_stats_;
  float moving_average_fraction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_om_2eproto;
};
// -------------------------------------------------------------------

class ScaleOpParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:domi.ScaleOpParams) */ {
 public:
  inline ScaleOpParams() : ScaleOpParams(nullptr) {}
  virtual ~ScaleOpParams();

  ScaleOpParams(const ScaleOpParams& from);
  ScaleOpParams(ScaleOpParams&& from) noexcept
    : ScaleOpParams() {
    *this = ::std::move(from);
  }

  inline ScaleOpParams& operator=(const ScaleOpParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScaleOpParams& operator=(ScaleOpParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScaleOpParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScaleOpParams* internal_default_instance() {
    return reinterpret_cast<const ScaleOpParams*>(
               &_ScaleOpParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ScaleOpParams& a, ScaleOpParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ScaleOpParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScaleOpParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScaleOpParams* New() const final {
    return CreateMaybeMessage<ScaleOpParams>(nullptr);
  }

  ScaleOpParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScaleOpParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScaleOpParams& from);
  void MergeFrom(const ScaleOpParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScaleOpParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "domi.ScaleOpParams";
  }
  protected:
  explicit ScaleOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScaleFieldNumber = 1,
    kBiasFieldNumber = 2,
  };
  // .domi.WeightDef scale = 1;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  const ::domi::WeightDef& scale() const;
  ::domi::WeightDef* release_scale();
  ::domi::WeightDef* mutable_scale();
  void set_allocated_scale(::domi::WeightDef* scale);
  private:
  const ::domi::WeightDef& _internal_scale() const;
  ::domi::WeightDef* _internal_mutable_scale();
  public:
  void unsafe_arena_set_allocated_scale(
      ::domi::WeightDef* scale);
  ::domi::WeightDef* unsafe_arena_release_scale();

  // .domi.WeightDef bias = 2;
  bool has_bias() const;
  private:
  bool _internal_has_bias() const;
  public:
  void clear_bias();
  const ::domi::WeightDef& bias() const;
  ::domi::WeightDef* release_bias();
  ::domi::WeightDef* mutable_bias();
  void set_allocated_bias(::domi::WeightDef* bias);
  private:
  const ::domi::WeightDef& _internal_bias() const;
  ::domi::WeightDef* _internal_mutable_bias();
  public:
  void unsafe_arena_set_allocated_bias(
      ::domi::WeightDef* bias);
  ::domi::WeightDef* unsafe_arena_release_bias();

  // @@protoc_insertion_point(class_scope:domi.ScaleOpParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::domi::WeightDef* scale_;
  ::domi::WeightDef* bias_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_om_2eproto;
};
// -------------------------------------------------------------------

class ReshapeOpParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:domi.ReshapeOpParams) */ {
 public:
  inline ReshapeOpParams() : ReshapeOpParams(nullptr) {}
  virtual ~ReshapeOpParams();

  ReshapeOpParams(const ReshapeOpParams& from);
  ReshapeOpParams(ReshapeOpParams&& from) noexcept
    : ReshapeOpParams() {
    *this = ::std::move(from);
  }

  inline ReshapeOpParams& operator=(const ReshapeOpParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReshapeOpParams& operator=(ReshapeOpParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReshapeOpParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReshapeOpParams* internal_default_instance() {
    return reinterpret_cast<const ReshapeOpParams*>(
               &_ReshapeOpParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ReshapeOpParams& a, ReshapeOpParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ReshapeOpParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReshapeOpParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReshapeOpParams* New() const final {
    return CreateMaybeMessage<ReshapeOpParams>(nullptr);
  }

  ReshapeOpParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReshapeOpParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReshapeOpParams& from);
  void MergeFrom(const ReshapeOpParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReshapeOpParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "domi.ReshapeOpParams";
  }
  protected:
  explicit ReshapeOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 3,
    kAlphaFieldNumber = 1,
    kBetaFieldNumber = 2,
    kAxisFieldNumber = 4,
    kNumAxesFieldNumber = 5,
    kFormatFieldNumber = 6,
  };
  // .domi.ShapeDef shape = 3;
  bool has_shape() const;
  private:
  bool _internal_has_shape() const;
  public:
  void clear_shape();
  const ::domi::ShapeDef& shape() const;
  ::domi::ShapeDef* release_shape();
  ::domi::ShapeDef* mutable_shape();
  void set_allocated_shape(::domi::ShapeDef* shape);
  private:
  const ::domi::ShapeDef& _internal_shape() const;
  ::domi::ShapeDef* _internal_mutable_shape();
  public:
  void unsafe_arena_set_allocated_shape(
      ::domi::ShapeDef* shape);
  ::domi::ShapeDef* unsafe_arena_release_shape();

  // float alpha = 1;
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // float beta = 2;
  void clear_beta();
  float beta() const;
  void set_beta(float value);
  private:
  float _internal_beta() const;
  void _internal_set_beta(float value);
  public:

  // int32 axis = 4;
  void clear_axis();
  ::PROTOBUF_NAMESPACE_ID::int32 axis() const;
  void set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis() const;
  void _internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num_axes = 5;
  void clear_num_axes();
  ::PROTOBUF_NAMESPACE_ID::int32 num_axes() const;
  void set_num_axes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_axes() const;
  void _internal_set_num_axes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 format = 6;
  void clear_format();
  ::PROTOBUF_NAMESPACE_ID::int32 format() const;
  void set_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_format() const;
  void _internal_set_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:domi.ReshapeOpParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::domi::ShapeDef* shape_;
  float alpha_;
  float beta_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_axes_;
  ::PROTOBUF_NAMESPACE_ID::int32 format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_om_2eproto;
};
// -------------------------------------------------------------------

class SoftmaxOpParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:domi.SoftmaxOpParams) */ {
 public:
  inline SoftmaxOpParams() : SoftmaxOpParams(nullptr) {}
  virtual ~SoftmaxOpParams();

  SoftmaxOpParams(const SoftmaxOpParams& from);
  SoftmaxOpParams(SoftmaxOpParams&& from) noexcept
    : SoftmaxOpParams() {
    *this = ::std::move(from);
  }

  inline SoftmaxOpParams& operator=(const SoftmaxOpParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SoftmaxOpParams& operator=(SoftmaxOpParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SoftmaxOpParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SoftmaxOpParams* internal_default_instance() {
    return reinterpret_cast<const SoftmaxOpParams*>(
               &_SoftmaxOpParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SoftmaxOpParams& a, SoftmaxOpParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SoftmaxOpParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SoftmaxOpParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SoftmaxOpParams* New() const final {
    return CreateMaybeMessage<SoftmaxOpParams>(nullptr);
  }

  SoftmaxOpParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SoftmaxOpParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SoftmaxOpParams& from);
  void MergeFrom(const SoftmaxOpParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SoftmaxOpParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "domi.SoftmaxOpParams";
  }
  protected:
  explicit SoftmaxOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlgoFieldNumber = 1,
    kModeFieldNumber = 2,
    kAlphaFieldNumber = 3,
    kBetaFieldNumber = 4,
  };
  // int32 algo = 1;
  void clear_algo();
  ::PROTOBUF_NAMESPACE_ID::int32 algo() const;
  void set_algo(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_algo() const;
  void _internal_set_algo(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mode = 2;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float alpha = 3;
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // float beta = 4;
  void clear_beta();
  float beta() const;
  void set_beta(float value);
  private:
  float _internal_beta() const;
  void _internal_set_beta(float value);
  public:

  // @@protoc_insertion_point(class_scope:domi.SoftmaxOpParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 algo_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  float alpha_;
  float beta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_om_2eproto;
};
// -------------------------------------------------------------------

class FullConnectionOpParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:domi.FullConnectionOpParams) */ {
 public:
  inline FullConnectionOpParams() : FullConnectionOpParams(nullptr) {}
  virtual ~FullConnectionOpParams();

  FullConnectionOpParams(const FullConnectionOpParams& from);
  FullConnectionOpParams(FullConnectionOpParams&& from) noexcept
    : FullConnectionOpParams() {
    *this = ::std::move(from);
  }

  inline FullConnectionOpParams& operator=(const FullConnectionOpParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline FullConnectionOpParams& operator=(FullConnectionOpParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FullConnectionOpParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FullConnectionOpParams* internal_default_instance() {
    return reinterpret_cast<const FullConnectionOpParams*>(
               &_FullConnectionOpParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(FullConnectionOpParams& a, FullConnectionOpParams& b) {
    a.Swap(&b);
  }
  inline void Swap(FullConnectionOpParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FullConnectionOpParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FullConnectionOpParams* New() const final {
    return CreateMaybeMessage<FullConnectionOpParams>(nullptr);
  }

  FullConnectionOpParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FullConnectionOpParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FullConnectionOpParams& from);
  void MergeFrom(const FullConnectionOpParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FullConnectionOpParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "domi.FullConnectionOpParams";
  }
  protected:
  explicit FullConnectionOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterFieldNumber = 1,
    kBiasFieldNumber = 2,
    kNumOutputFieldNumber = 3,
    kReluFlagFieldNumber = 12,
  };
  // .domi.WeightDef filter = 1;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::domi::WeightDef& filter() const;
  ::domi::WeightDef* release_filter();
  ::domi::WeightDef* mutable_filter();
  void set_allocated_filter(::domi::WeightDef* filter);
  private:
  const ::domi::WeightDef& _internal_filter() const;
  ::domi::WeightDef* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::domi::WeightDef* filter);
  ::domi::WeightDef* unsafe_arena_release_filter();

  // .domi.WeightDef bias = 2;
  bool has_bias() const;
  private:
  bool _internal_has_bias() const;
  public:
  void clear_bias();
  const ::domi::WeightDef& bias() const;
  ::domi::WeightDef* release_bias();
  ::domi::WeightDef* mutable_bias();
  void set_allocated_bias(::domi::WeightDef* bias);
  private:
  const ::domi::WeightDef& _internal_bias() const;
  ::domi::WeightDef* _internal_mutable_bias();
  public:
  void unsafe_arena_set_allocated_bias(
      ::domi::WeightDef* bias);
  ::domi::WeightDef* unsafe_arena_release_bias();

  // uint32 num_output = 3;
  void clear_num_output();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_output() const;
  void set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_output() const;
  void _internal_set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool relu_flag = 12;
  void clear_relu_flag();
  bool relu_flag() const;
  void set_relu_flag(bool value);
  private:
  bool _internal_relu_flag() const;
  void _internal_set_relu_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:domi.FullConnectionOpParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::domi::WeightDef* filter_;
  ::domi::WeightDef* bias_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_output_;
  bool relu_flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_om_2eproto;
};
// -------------------------------------------------------------------

class FlattenOpParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:domi.FlattenOpParams) */ {
 public:
  inline FlattenOpParams() : FlattenOpParams(nullptr) {}
  virtual ~FlattenOpParams();

  FlattenOpParams(const FlattenOpParams& from);
  FlattenOpParams(FlattenOpParams&& from) noexcept
    : FlattenOpParams() {
    *this = ::std::move(from);
  }

  inline FlattenOpParams& operator=(const FlattenOpParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlattenOpParams& operator=(FlattenOpParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlattenOpParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlattenOpParams* internal_default_instance() {
    return reinterpret_cast<const FlattenOpParams*>(
               &_FlattenOpParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(FlattenOpParams& a, FlattenOpParams& b) {
    a.Swap(&b);
  }
  inline void Swap(FlattenOpParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlattenOpParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlattenOpParams* New() const final {
    return CreateMaybeMessage<FlattenOpParams>(nullptr);
  }

  FlattenOpParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlattenOpParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlattenOpParams& from);
  void MergeFrom(const FlattenOpParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlattenOpParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "domi.FlattenOpParams";
  }
  protected:
  explicit FlattenOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlphaFieldNumber = 1,
    kBetaFieldNumber = 2,
    kStartAxisFieldNumber = 3,
    kEndAxisFieldNumber = 4,
  };
  // float alpha = 1;
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // float beta = 2;
  void clear_beta();
  float beta() const;
  void set_beta(float value);
  private:
  float _internal_beta() const;
  void _internal_set_beta(float value);
  public:

  // int32 start_axis = 3;
  void clear_start_axis();
  ::PROTOBUF_NAMESPACE_ID::int32 start_axis() const;
  void set_start_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_axis() const;
  void _internal_set_start_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 end_axis = 4;
  void clear_end_axis();
  ::PROTOBUF_NAMESPACE_ID::int32 end_axis() const;
  void set_end_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end_axis() const;
  void _internal_set_end_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:domi.FlattenOpParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float alpha_;
  float beta_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_axis_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_axis_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_om_2eproto;
};
// -------------------------------------------------------------------

class AddLimitedOpParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:domi.AddLimitedOpParams) */ {
 public:
  inline AddLimitedOpParams() : AddLimitedOpParams(nullptr) {}
  virtual ~AddLimitedOpParams();

  AddLimitedOpParams(const AddLimitedOpParams& from);
  AddLimitedOpParams(AddLimitedOpParams&& from) noexcept
    : AddLimitedOpParams() {
    *this = ::std::move(from);
  }

  inline AddLimitedOpParams& operator=(const AddLimitedOpParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddLimitedOpParams& operator=(AddLimitedOpParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddLimitedOpParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddLimitedOpParams* internal_default_instance() {
    return reinterpret_cast<const AddLimitedOpParams*>(
               &_AddLimitedOpParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(AddLimitedOpParams& a, AddLimitedOpParams& b) {
    a.Swap(&b);
  }
  inline void Swap(AddLimitedOpParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddLimitedOpParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddLimitedOpParams* New() const final {
    return CreateMaybeMessage<AddLimitedOpParams>(nullptr);
  }

  AddLimitedOpParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddLimitedOpParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddLimitedOpParams& from);
  void MergeFrom(const AddLimitedOpParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddLimitedOpParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "domi.AddLimitedOpParams";
  }
  protected:
  explicit AddLimitedOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFieldNumber = 10,
    kAlphaFieldNumber = 1,
    kBetaFieldNumber = 2,
    kAxisFieldNumber = 3,
    kBroadcastFieldNumber = 4,
  };
  // repeated .domi.WeightDef weight = 10;
  int weight_size() const;
  private:
  int _internal_weight_size() const;
  public:
  void clear_weight();
  ::domi::WeightDef* mutable_weight(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef >*
      mutable_weight();
  private:
  const ::domi::WeightDef& _internal_weight(int index) const;
  ::domi::WeightDef* _internal_add_weight();
  public:
  const ::domi::WeightDef& weight(int index) const;
  ::domi::WeightDef* add_weight();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef >&
      weight() const;

  // float alpha = 1;
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // float beta = 2;
  void clear_beta();
  float beta() const;
  void set_beta(float value);
  private:
  float _internal_beta() const;
  void _internal_set_beta(float value);
  public:

  // int32 axis = 3;
  void clear_axis();
  ::PROTOBUF_NAMESPACE_ID::int32 axis() const;
  void set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis() const;
  void _internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool broadcast = 4;
  void clear_broadcast();
  bool broadcast() const;
  void set_broadcast(bool value);
  private:
  bool _internal_broadcast() const;
  void _internal_set_broadcast(bool value);
  public:

  // @@protoc_insertion_point(class_scope:domi.AddLimitedOpParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef > weight_;
  float alpha_;
  float beta_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_;
  bool broadcast_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_om_2eproto;
};
// -------------------------------------------------------------------

class MulLimitedOpParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:domi.MulLimitedOpParams) */ {
 public:
  inline MulLimitedOpParams() : MulLimitedOpParams(nullptr) {}
  virtual ~MulLimitedOpParams();

  MulLimitedOpParams(const MulLimitedOpParams& from);
  MulLimitedOpParams(MulLimitedOpParams&& from) noexcept
    : MulLimitedOpParams() {
    *this = ::std::move(from);
  }

  inline MulLimitedOpParams& operator=(const MulLimitedOpParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline MulLimitedOpParams& operator=(MulLimitedOpParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MulLimitedOpParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MulLimitedOpParams* internal_default_instance() {
    return reinterpret_cast<const MulLimitedOpParams*>(
               &_MulLimitedOpParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(MulLimitedOpParams& a, MulLimitedOpParams& b) {
    a.Swap(&b);
  }
  inline void Swap(MulLimitedOpParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MulLimitedOpParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MulLimitedOpParams* New() const final {
    return CreateMaybeMessage<MulLimitedOpParams>(nullptr);
  }

  MulLimitedOpParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MulLimitedOpParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MulLimitedOpParams& from);
  void MergeFrom(const MulLimitedOpParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MulLimitedOpParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "domi.MulLimitedOpParams";
  }
  protected:
  explicit MulLimitedOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFieldNumber = 10,
    kAlphaFieldNumber = 1,
    kBetaFieldNumber = 2,
    kAxisFieldNumber = 3,
    kBroadcastFieldNumber = 4,
  };
  // repeated .domi.WeightDef weight = 10;
  int weight_size() const;
  private:
  int _internal_weight_size() const;
  public:
  void clear_weight();
  ::domi::WeightDef* mutable_weight(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef >*
      mutable_weight();
  private:
  const ::domi::WeightDef& _internal_weight(int index) const;
  ::domi::WeightDef* _internal_add_weight();
  public:
  const ::domi::WeightDef& weight(int index) const;
  ::domi::WeightDef* add_weight();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef >&
      weight() const;

  // float alpha = 1;
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // float beta = 2;
  void clear_beta();
  float beta() const;
  void set_beta(float value);
  private:
  float _internal_beta() const;
  void _internal_set_beta(float value);
  public:

  // int32 axis = 3;
  void clear_axis();
  ::PROTOBUF_NAMESPACE_ID::int32 axis() const;
  void set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis() const;
  void _internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool broadcast = 4;
  void clear_broadcast();
  bool broadcast() const;
  void set_broadcast(bool value);
  private:
  bool _internal_broadcast() const;
  void _internal_set_broadcast(bool value);
  public:

  // @@protoc_insertion_point(class_scope:domi.MulLimitedOpParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef > weight_;
  float alpha_;
  float beta_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_;
  bool broadcast_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_om_2eproto;
};
// -------------------------------------------------------------------

class AddOpParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:domi.AddOpParams) */ {
 public:
  inline AddOpParams() : AddOpParams(nullptr) {}
  virtual ~AddOpParams();

  AddOpParams(const AddOpParams& from);
  AddOpParams(AddOpParams&& from) noexcept
    : AddOpParams() {
    *this = ::std::move(from);
  }

  inline AddOpParams& operator=(const AddOpParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddOpParams& operator=(AddOpParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddOpParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddOpParams* internal_default_instance() {
    return reinterpret_cast<const AddOpParams*>(
               &_AddOpParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(AddOpParams& a, AddOpParams& b) {
    a.Swap(&b);
  }
  inline void Swap(AddOpParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddOpParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddOpParams* New() const final {
    return CreateMaybeMessage<AddOpParams>(nullptr);
  }

  AddOpParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddOpParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddOpParams& from);
  void MergeFrom(const AddOpParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddOpParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "domi.AddOpParams";
  }
  protected:
  explicit AddOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFieldNumber = 10,
    kAlphaFieldNumber = 1,
    kBetaFieldNumber = 2,
  };
  // repeated .domi.WeightDef weight = 10;
  int weight_size() const;
  private:
  int _internal_weight_size() const;
  public:
  void clear_weight();
  ::domi::WeightDef* mutable_weight(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef >*
      mutable_weight();
  private:
  const ::domi::WeightDef& _internal_weight(int index) const;
  ::domi::WeightDef* _internal_add_weight();
  public:
  const ::domi::WeightDef& weight(int index) const;
  ::domi::WeightDef* add_weight();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef >&
      weight() const;

  // float alpha = 1;
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // float beta = 2;
  void clear_beta();
  float beta() const;
  void set_beta(float value);
  private:
  float _internal_beta() const;
  void _internal_set_beta(float value);
  public:

  // @@protoc_insertion_point(class_scope:domi.AddOpParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef > weight_;
  float alpha_;
  float beta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_om_2eproto;
};
// -------------------------------------------------------------------

class MulOpParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:domi.MulOpParams) */ {
 public:
  inline MulOpParams() : MulOpParams(nullptr) {}
  virtual ~MulOpParams();

  MulOpParams(const MulOpParams& from);
  MulOpParams(MulOpParams&& from) noexcept
    : MulOpParams() {
    *this = ::std::move(from);
  }

  inline MulOpParams& operator=(const MulOpParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline MulOpParams& operator=(MulOpParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MulOpParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MulOpParams* internal_default_instance() {
    return reinterpret_cast<const MulOpParams*>(
               &_MulOpParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(MulOpParams& a, MulOpParams& b) {
    a.Swap(&b);
  }
  inline void Swap(MulOpParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MulOpParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MulOpParams* New() const final {
    return CreateMaybeMessage<MulOpParams>(nullptr);
  }

  MulOpParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MulOpParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MulOpParams& from);
  void MergeFrom(const MulOpParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MulOpParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "domi.MulOpParams";
  }
  protected:
  explicit MulOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFieldNumber = 10,
    kAlphaFieldNumber = 1,
    kBetaFieldNumber = 2,
  };
  // repeated .domi.WeightDef weight = 10;
  int weight_size() const;
  private:
  int _internal_weight_size() const;
  public:
  void clear_weight();
  ::domi::WeightDef* mutable_weight(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef >*
      mutable_weight();
  private:
  const ::domi::WeightDef& _internal_weight(int index) const;
  ::domi::WeightDef* _internal_add_weight();
  public:
  const ::domi::WeightDef& weight(int index) const;
  ::domi::WeightDef* add_weight();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef >&
      weight() const;

  // float alpha = 1;
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // float beta = 2;
  void clear_beta();
  float beta() const;
  void set_beta(float value);
  private:
  float _internal_beta() const;
  void _internal_set_beta(float value);
  public:

  // @@protoc_insertion_point(class_scope:domi.MulOpParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef > weight_;
  float alpha_;
  float beta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_om_2eproto;
};
// -------------------------------------------------------------------

class SubOpParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:domi.SubOpParams) */ {
 public:
  inline SubOpParams() : SubOpParams(nullptr) {}
  virtual ~SubOpParams();

  SubOpParams(const SubOpParams& from);
  SubOpParams(SubOpParams&& from) noexcept
    : SubOpParams() {
    *this = ::std::move(from);
  }

  inline SubOpParams& operator=(const SubOpParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubOpParams& operator=(SubOpParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubOpParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubOpParams* internal_default_instance() {
    return reinterpret_cast<const SubOpParams*>(
               &_SubOpParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SubOpParams& a, SubOpParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SubOpParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubOpParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubOpParams* New() const final {
    return CreateMaybeMessage<SubOpParams>(nullptr);
  }

  SubOpParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubOpParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubOpParams& from);
  void MergeFrom(const SubOpParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubOpParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "domi.SubOpParams";
  }
  protected:
  explicit SubOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFieldNumber = 10,
    kAlphaFieldNumber = 1,
    kBetaFieldNumber = 2,
  };
  // repeated .domi.WeightDef weight = 10;
  int weight_size() const;
  private:
  int _internal_weight_size() const;
  public:
  void clear_weight();
  ::domi::WeightDef* mutable_weight(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef >*
      mutable_weight();
  private:
  const ::domi::WeightDef& _internal_weight(int index) const;
  ::domi::WeightDef* _internal_add_weight();
  public:
  const ::domi::WeightDef& weight(int index) const;
  ::domi::WeightDef* add_weight();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef >&
      weight() const;

  // float alpha = 1;
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // float beta = 2;
  void clear_beta();
  float beta() const;
  void set_beta(float value);
  private:
  float _internal_beta() const;
  void _internal_set_beta(float value);
  public:

  // @@protoc_insertion_point(class_scope:domi.SubOpParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef > weight_;
  float alpha_;
  float beta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_om_2eproto;
};
// -------------------------------------------------------------------

class BiasAddOpParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:domi.BiasAddOpParams) */ {
 public:
  inline BiasAddOpParams() : BiasAddOpParams(nullptr) {}
  virtual ~BiasAddOpParams();

  BiasAddOpParams(const BiasAddOpParams& from);
  BiasAddOpParams(BiasAddOpParams&& from) noexcept
    : BiasAddOpParams() {
    *this = ::std::move(from);
  }

  inline BiasAddOpParams& operator=(const BiasAddOpParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline BiasAddOpParams& operator=(BiasAddOpParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BiasAddOpParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BiasAddOpParams* internal_default_instance() {
    return reinterpret_cast<const BiasAddOpParams*>(
               &_BiasAddOpParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(BiasAddOpParams& a, BiasAddOpParams& b) {
    a.Swap(&b);
  }
  inline void Swap(BiasAddOpParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BiasAddOpParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BiasAddOpParams* New() const final {
    return CreateMaybeMessage<BiasAddOpParams>(nullptr);
  }

  BiasAddOpParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BiasAddOpParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BiasAddOpParams& from);
  void MergeFrom(const BiasAddOpParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BiasAddOpParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "domi.BiasAddOpParams";
  }
  protected:
  explicit BiasAddOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBiasFieldNumber = 10,
    kAlphaFieldNumber = 1,
    kBetaFieldNumber = 2,
  };
  // .domi.WeightDef bias = 10;
  bool has_bias() const;
  private:
  bool _internal_has_bias() const;
  public:
  void clear_bias();
  const ::domi::WeightDef& bias() const;
  ::domi::WeightDef* release_bias();
  ::domi::WeightDef* mutable_bias();
  void set_allocated_bias(::domi::WeightDef* bias);
  private:
  const ::domi::WeightDef& _internal_bias() const;
  ::domi::WeightDef* _internal_mutable_bias();
  public:
  void unsafe_arena_set_allocated_bias(
      ::domi::WeightDef* bias);
  ::domi::WeightDef* unsafe_arena_release_bias();

  // float alpha = 1;
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // float beta = 2;
  void clear_beta();
  float beta() const;
  void set_beta(float value);
  private:
  float _internal_beta() const;
  void _internal_set_beta(float value);
  public:

  // @@protoc_insertion_point(class_scope:domi.BiasAddOpParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::domi::WeightDef* bias_;
  float alpha_;
  float beta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_om_2eproto;
};
// -------------------------------------------------------------------

class MatMulOpParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:domi.MatMulOpParams) */ {
 public:
  inline MatMulOpParams() : MatMulOpParams(nullptr) {}
  virtual ~MatMulOpParams();

  MatMulOpParams(const MatMulOpParams& from);
  MatMulOpParams(MatMulOpParams&& from) noexcept
    : MatMulOpParams() {
    *this = ::std::move(from);
  }

  inline MatMulOpParams& operator=(const MatMulOpParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatMulOpParams& operator=(MatMulOpParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatMulOpParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatMulOpParams* internal_default_instance() {
    return reinterpret_cast<const MatMulOpParams*>(
               &_MatMulOpParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(MatMulOpParams& a, MatMulOpParams& b) {
    a.Swap(&b);
  }
  inline void Swap(MatMulOpParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatMulOpParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatMulOpParams* New() const final {
    return CreateMaybeMessage<MatMulOpParams>(nullptr);
  }

  MatMulOpParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatMulOpParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatMulOpParams& from);
  void MergeFrom(const MatMulOpParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatMulOpParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "domi.MatMulOpParams";
  }
  protected:
  explicit MatMulOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterFieldNumber = 10,
    kBiasFieldNumber = 12,
    kAlphaFieldNumber = 1,
    kBetaFieldNumber = 2,
    kTransposeXFieldNumber = 3,
    kTransposeWFieldNumber = 4,
  };
  // .domi.WeightDef filter = 10;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::domi::WeightDef& filter() const;
  ::domi::WeightDef* release_filter();
  ::domi::WeightDef* mutable_filter();
  void set_allocated_filter(::domi::WeightDef* filter);
  private:
  const ::domi::WeightDef& _internal_filter() const;
  ::domi::WeightDef* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::domi::WeightDef* filter);
  ::domi::WeightDef* unsafe_arena_release_filter();

  // .domi.WeightDef bias = 12;
  bool has_bias() const;
  private:
  bool _internal_has_bias() const;
  public:
  void clear_bias();
  const ::domi::WeightDef& bias() const;
  ::domi::WeightDef* release_bias();
  ::domi::WeightDef* mutable_bias();
  void set_allocated_bias(::domi::WeightDef* bias);
  private:
  const ::domi::WeightDef& _internal_bias() const;
  ::domi::WeightDef* _internal_mutable_bias();
  public:
  void unsafe_arena_set_allocated_bias(
      ::domi::WeightDef* bias);
  ::domi::WeightDef* unsafe_arena_release_bias();

  // float alpha = 1;
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // float beta = 2;
  void clear_beta();
  float beta() const;
  void set_beta(float value);
  private:
  float _internal_beta() const;
  void _internal_set_beta(float value);
  public:

  // bool transposeX = 3;
  void clear_transposex();
  bool transposex() const;
  void set_transposex(bool value);
  private:
  bool _internal_transposex() const;
  void _internal_set_transposex(bool value);
  public:

  // bool transposeW = 4;
  void clear_transposew();
  bool transposew() const;
  void set_transposew(bool value);
  private:
  bool _internal_transposew() const;
  void _internal_set_transposew(bool value);
  public:

  // @@protoc_insertion_point(class_scope:domi.MatMulOpParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::domi::WeightDef* filter_;
  ::domi::WeightDef* bias_;
  float alpha_;
  float beta_;
  bool transposex_;
  bool transposew_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_om_2eproto;
};
// -------------------------------------------------------------------

class RsqrtOpParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:domi.RsqrtOpParams) */ {
 public:
  inline RsqrtOpParams() : RsqrtOpParams(nullptr) {}
  virtual ~RsqrtOpParams();

  RsqrtOpParams(const RsqrtOpParams& from);
  RsqrtOpParams(RsqrtOpParams&& from) noexcept
    : RsqrtOpParams() {
    *this = ::std::move(from);
  }

  inline RsqrtOpParams& operator=(const RsqrtOpParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RsqrtOpParams& operator=(RsqrtOpParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RsqrtOpParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RsqrtOpParams* internal_default_instance() {
    return reinterpret_cast<const RsqrtOpParams*>(
               &_RsqrtOpParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(RsqrtOpParams& a, RsqrtOpParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RsqrtOpParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RsqrtOpParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RsqrtOpParams* New() const final {
    return CreateMaybeMessage<RsqrtOpParams>(nullptr);
  }

  RsqrtOpParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RsqrtOpParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RsqrtOpParams& from);
  void MergeFrom(const RsqrtOpParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RsqrtOpParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "domi.RsqrtOpParams";
  }
  protected:
  explicit RsqrtOpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlphaFieldNumber = 1,
    kBetaFieldNumber = 2,
  };
  // float alpha = 1;
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // float beta = 2;
  void clear_beta();
  float beta() const;
  void set_beta(float value);
  private:
  float _internal_beta() const;
  void _internal_set_beta(float value);
  public:

  // @@protoc_insertion_point(class_scope:domi.RsqrtOpParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float alpha_;
  float beta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_om_2eproto;
};
// -------------------------------------------------------------------

class WeightDef PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:domi.WeightDef) */ {
 public:
  inline WeightDef() : WeightDef(nullptr) {}
  virtual ~WeightDef();

  WeightDef(const WeightDef& from);
  WeightDef(WeightDef&& from) noexcept
    : WeightDef() {
    *this = ::std::move(from);
  }

  inline WeightDef& operator=(const WeightDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline WeightDef& operator=(WeightDef&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WeightDef& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WeightDef* internal_default_instance() {
    return reinterpret_cast<const WeightDef*>(
               &_WeightDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(WeightDef& a, WeightDef& b) {
    a.Swap(&b);
  }
  inline void Swap(WeightDef* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WeightDef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WeightDef* New() const final {
    return CreateMaybeMessage<WeightDef>(nullptr);
  }

  WeightDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WeightDef>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WeightDef& from);
  void MergeFrom(const WeightDef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WeightDef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "domi.WeightDef";
  }
  protected:
  explicit WeightDef(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 4,
    kCmpsTabFieldNumber = 7,
    kShapeFieldNumber = 3,
    kCmpsInfoFieldNumber = 8,
    kAlloffsetQuantizeInfoFieldNumber = 11,
    kFormatFieldNumber = 1,
    kDataTypeFieldNumber = 2,
    kDataOffsetFieldNumber = 5,
    kCmpsTabOffsetFieldNumber = 10,
    kCmpsSizeFieldNumber = 6,
  };
  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // bytes cmps_tab = 7;
  void clear_cmps_tab();
  const std::string& cmps_tab() const;
  void set_cmps_tab(const std::string& value);
  void set_cmps_tab(std::string&& value);
  void set_cmps_tab(const char* value);
  void set_cmps_tab(const void* value, size_t size);
  std::string* mutable_cmps_tab();
  std::string* release_cmps_tab();
  void set_allocated_cmps_tab(std::string* cmps_tab);
  private:
  const std::string& _internal_cmps_tab() const;
  void _internal_set_cmps_tab(const std::string& value);
  std::string* _internal_mutable_cmps_tab();
  public:

  // .domi.ShapeDef shape = 3;
  bool has_shape() const;
  private:
  bool _internal_has_shape() const;
  public:
  void clear_shape();
  const ::domi::ShapeDef& shape() const;
  ::domi::ShapeDef* release_shape();
  ::domi::ShapeDef* mutable_shape();
  void set_allocated_shape(::domi::ShapeDef* shape);
  private:
  const ::domi::ShapeDef& _internal_shape() const;
  ::domi::ShapeDef* _internal_mutable_shape();
  public:
  void unsafe_arena_set_allocated_shape(
      ::domi::ShapeDef* shape);
  ::domi::ShapeDef* unsafe_arena_release_shape();

  // .domi.CompressInfo cmps_info = 8;
  bool has_cmps_info() const;
  private:
  bool _internal_has_cmps_info() const;
  public:
  void clear_cmps_info();
  const ::domi::CompressInfo& cmps_info() const;
  ::domi::CompressInfo* release_cmps_info();
  ::domi::CompressInfo* mutable_cmps_info();
  void set_allocated_cmps_info(::domi::CompressInfo* cmps_info);
  private:
  const ::domi::CompressInfo& _internal_cmps_info() const;
  ::domi::CompressInfo* _internal_mutable_cmps_info();
  public:
  void unsafe_arena_set_allocated_cmps_info(
      ::domi::CompressInfo* cmps_info);
  ::domi::CompressInfo* unsafe_arena_release_cmps_info();

  // .domi.AllOffsetQuantizeInfo alloffset_quantize_info = 11;
  bool has_alloffset_quantize_info() const;
  private:
  bool _internal_has_alloffset_quantize_info() const;
  public:
  void clear_alloffset_quantize_info();
  const ::domi::AllOffsetQuantizeInfo& alloffset_quantize_info() const;
  ::domi::AllOffsetQuantizeInfo* release_alloffset_quantize_info();
  ::domi::AllOffsetQuantizeInfo* mutable_alloffset_quantize_info();
  void set_allocated_alloffset_quantize_info(::domi::AllOffsetQuantizeInfo* alloffset_quantize_info);
  private:
  const ::domi::AllOffsetQuantizeInfo& _internal_alloffset_quantize_info() const;
  ::domi::AllOffsetQuantizeInfo* _internal_mutable_alloffset_quantize_info();
  public:
  void unsafe_arena_set_allocated_alloffset_quantize_info(
      ::domi::AllOffsetQuantizeInfo* alloffset_quantize_info);
  ::domi::AllOffsetQuantizeInfo* unsafe_arena_release_alloffset_quantize_info();

  // int32 format = 1;
  void clear_format();
  ::PROTOBUF_NAMESPACE_ID::int32 format() const;
  void set_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_format() const;
  void _internal_set_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 data_type = 2;
  void clear_data_type();
  ::PROTOBUF_NAMESPACE_ID::int32 data_type() const;
  void set_data_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data_type() const;
  void _internal_set_data_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 data_offset = 5;
  void clear_data_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 data_offset() const;
  void set_data_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_data_offset() const;
  void _internal_set_data_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 cmps_tab_offset = 10;
  void clear_cmps_tab_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 cmps_tab_offset() const;
  void set_cmps_tab_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cmps_tab_offset() const;
  void _internal_set_cmps_tab_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 cmps_size = 6;
  void clear_cmps_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 cmps_size() const;
  void set_cmps_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cmps_size() const;
  void _internal_set_cmps_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:domi.WeightDef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmps_tab_;
  ::domi::ShapeDef* shape_;
  ::domi::CompressInfo* cmps_info_;
  ::domi::AllOffsetQuantizeInfo* alloffset_quantize_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 format_;
  ::PROTOBUF_NAMESPACE_ID::int32 data_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 data_offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 cmps_tab_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cmps_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_om_2eproto;
};
// -------------------------------------------------------------------

class ShapeDef PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:domi.ShapeDef) */ {
 public:
  inline ShapeDef() : ShapeDef(nullptr) {}
  virtual ~ShapeDef();

  ShapeDef(const ShapeDef& from);
  ShapeDef(ShapeDef&& from) noexcept
    : ShapeDef() {
    *this = ::std::move(from);
  }

  inline ShapeDef& operator=(const ShapeDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShapeDef& operator=(ShapeDef&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShapeDef& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShapeDef* internal_default_instance() {
    return reinterpret_cast<const ShapeDef*>(
               &_ShapeDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ShapeDef& a, ShapeDef& b) {
    a.Swap(&b);
  }
  inline void Swap(ShapeDef* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShapeDef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShapeDef* New() const final {
    return CreateMaybeMessage<ShapeDef>(nullptr);
  }

  ShapeDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShapeDef>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShapeDef& from);
  void MergeFrom(const ShapeDef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShapeDef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "domi.ShapeDef";
  }
  protected:
  explicit ShapeDef(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimFieldNumber = 1,
  };
  // repeated int64 dim = 1;
  int dim_size() const;
  private:
  int _internal_dim_size() const;
  public:
  void clear_dim();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_dim(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_dim() const;
  void _internal_add_dim(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_dim();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 dim(int index) const;
  void set_dim(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_dim(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      dim() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_dim();

  // @@protoc_insertion_point(class_scope:domi.ShapeDef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > dim_;
  mutable std::atomic<int> _dim_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_om_2eproto;
};
// -------------------------------------------------------------------

class AllOffsetQuantizeInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:domi.AllOffsetQuantizeInfo) */ {
 public:
  inline AllOffsetQuantizeInfo() : AllOffsetQuantizeInfo(nullptr) {}
  virtual ~AllOffsetQuantizeInfo();

  AllOffsetQuantizeInfo(const AllOffsetQuantizeInfo& from);
  AllOffsetQuantizeInfo(AllOffsetQuantizeInfo&& from) noexcept
    : AllOffsetQuantizeInfo() {
    *this = ::std::move(from);
  }

  inline AllOffsetQuantizeInfo& operator=(const AllOffsetQuantizeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllOffsetQuantizeInfo& operator=(AllOffsetQuantizeInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AllOffsetQuantizeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllOffsetQuantizeInfo* internal_default_instance() {
    return reinterpret_cast<const AllOffsetQuantizeInfo*>(
               &_AllOffsetQuantizeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(AllOffsetQuantizeInfo& a, AllOffsetQuantizeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AllOffsetQuantizeInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllOffsetQuantizeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AllOffsetQuantizeInfo* New() const final {
    return CreateMaybeMessage<AllOffsetQuantizeInfo>(nullptr);
  }

  AllOffsetQuantizeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AllOffsetQuantizeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AllOffsetQuantizeInfo& from);
  void MergeFrom(const AllOffsetQuantizeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllOffsetQuantizeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "domi.AllOffsetQuantizeInfo";
  }
  protected:
  explicit AllOffsetQuantizeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScaleFieldNumber = 1,
    kOffsetFieldNumber = 2,
  };
  // float scale = 1;
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // int32 offset = 2;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:domi.AllOffsetQuantizeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float scale_;
  ::PROTOBUF_NAMESPACE_ID::int32 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_om_2eproto;
};
// -------------------------------------------------------------------

class TensorDescriptor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:domi.TensorDescriptor) */ {
 public:
  inline TensorDescriptor() : TensorDescriptor(nullptr) {}
  virtual ~TensorDescriptor();

  TensorDescriptor(const TensorDescriptor& from);
  TensorDescriptor(TensorDescriptor&& from) noexcept
    : TensorDescriptor() {
    *this = ::std::move(from);
  }

  inline TensorDescriptor& operator=(const TensorDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorDescriptor& operator=(TensorDescriptor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TensorDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorDescriptor* internal_default_instance() {
    return reinterpret_cast<const TensorDescriptor*>(
               &_TensorDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(TensorDescriptor& a, TensorDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorDescriptor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TensorDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TensorDescriptor* New() const final {
    return CreateMaybeMessage<TensorDescriptor>(nullptr);
  }

  TensorDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TensorDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TensorDescriptor& from);
  void MergeFrom(const TensorDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "domi.TensorDescriptor";
  }
  protected:
  explicit TensorDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimFieldNumber = 3,
    kAlloffsetQuantizeInfoFieldNumber = 12,
    kFormatFieldNumber = 1,
    kDataTypeFieldNumber = 2,
    kSizeFieldNumber = 4,
    kReuseInputFieldNumber = 5,
    kOutputTensorFieldNumber = 7,
    kInputTensorFieldNumber = 9,
    kDeviceTypeFieldNumber = 8,
    kRealDimCntFieldNumber = 10,
    kReuseInputIndexFieldNumber = 11,
  };
  // repeated int64 dim = 3;
  int dim_size() const;
  private:
  int _internal_dim_size() const;
  public:
  void clear_dim();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_dim(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_dim() const;
  void _internal_add_dim(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_dim();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 dim(int index) const;
  void set_dim(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_dim(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      dim() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_dim();

  // .domi.AllOffsetQuantizeInfo alloffset_quantize_info = 12;
  bool has_alloffset_quantize_info() const;
  private:
  bool _internal_has_alloffset_quantize_info() const;
  public:
  void clear_alloffset_quantize_info();
  const ::domi::AllOffsetQuantizeInfo& alloffset_quantize_info() const;
  ::domi::AllOffsetQuantizeInfo* release_alloffset_quantize_info();
  ::domi::AllOffsetQuantizeInfo* mutable_alloffset_quantize_info();
  void set_allocated_alloffset_quantize_info(::domi::AllOffsetQuantizeInfo* alloffset_quantize_info);
  private:
  const ::domi::AllOffsetQuantizeInfo& _internal_alloffset_quantize_info() const;
  ::domi::AllOffsetQuantizeInfo* _internal_mutable_alloffset_quantize_info();
  public:
  void unsafe_arena_set_allocated_alloffset_quantize_info(
      ::domi::AllOffsetQuantizeInfo* alloffset_quantize_info);
  ::domi::AllOffsetQuantizeInfo* unsafe_arena_release_alloffset_quantize_info();

  // int32 format = 1;
  void clear_format();
  ::PROTOBUF_NAMESPACE_ID::int32 format() const;
  void set_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_format() const;
  void _internal_set_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 data_type = 2;
  void clear_data_type();
  ::PROTOBUF_NAMESPACE_ID::int32 data_type() const;
  void set_data_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data_type() const;
  void _internal_set_data_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 size = 4;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool reuse_input = 5;
  void clear_reuse_input();
  bool reuse_input() const;
  void set_reuse_input(bool value);
  private:
  bool _internal_reuse_input() const;
  void _internal_set_reuse_input(bool value);
  public:

  // bool output_tensor = 7;
  void clear_output_tensor();
  bool output_tensor() const;
  void set_output_tensor(bool value);
  private:
  bool _internal_output_tensor() const;
  void _internal_set_output_tensor(bool value);
  public:

  // bool input_tensor = 9;
  void clear_input_tensor();
  bool input_tensor() const;
  void set_input_tensor(bool value);
  private:
  bool _internal_input_tensor() const;
  void _internal_set_input_tensor(bool value);
  public:

  // .domi.DeviceType device_type = 8;
  void clear_device_type();
  ::domi::DeviceType device_type() const;
  void set_device_type(::domi::DeviceType value);
  private:
  ::domi::DeviceType _internal_device_type() const;
  void _internal_set_device_type(::domi::DeviceType value);
  public:

  // uint32 real_dim_cnt = 10;
  void clear_real_dim_cnt();
  ::PROTOBUF_NAMESPACE_ID::uint32 real_dim_cnt() const;
  void set_real_dim_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_real_dim_cnt() const;
  void _internal_set_real_dim_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 reuse_input_index = 11;
  void clear_reuse_input_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 reuse_input_index() const;
  void set_reuse_input_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reuse_input_index() const;
  void _internal_set_reuse_input_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:domi.TensorDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > dim_;
  mutable std::atomic<int> _dim_cached_byte_size_;
  ::domi::AllOffsetQuantizeInfo* alloffset_quantize_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 format_;
  ::PROTOBUF_NAMESPACE_ID::int32 data_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  bool reuse_input_;
  bool output_tensor_;
  bool input_tensor_;
  int device_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 real_dim_cnt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reuse_input_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_om_2eproto;
};
// -------------------------------------------------------------------

class CompressInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:domi.CompressInfo) */ {
 public:
  inline CompressInfo() : CompressInfo(nullptr) {}
  virtual ~CompressInfo();

  CompressInfo(const CompressInfo& from);
  CompressInfo(CompressInfo&& from) noexcept
    : CompressInfo() {
    *this = ::std::move(from);
  }

  inline CompressInfo& operator=(const CompressInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompressInfo& operator=(CompressInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompressInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompressInfo* internal_default_instance() {
    return reinterpret_cast<const CompressInfo*>(
               &_CompressInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CompressInfo& a, CompressInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CompressInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompressInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompressInfo* New() const final {
    return CreateMaybeMessage<CompressInfo>(nullptr);
  }

  CompressInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompressInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompressInfo& from);
  void MergeFrom(const CompressInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompressInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "domi.CompressInfo";
  }
  protected:
  explicit CompressInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockRowFieldNumber = 1,
    kBlockColFieldNumber = 2,
    kFractalKFieldNumber = 3,
    kFractalNFieldNumber = 4,
    kLastFractalKFieldNumber = 5,
    kLastFractalNFieldNumber = 6,
    kCubeSizeFieldNumber = 7,
    kLoadDirFieldNumber = 8,
  };
  // int32 blockRow = 1;
  void clear_blockrow();
  ::PROTOBUF_NAMESPACE_ID::int32 blockrow() const;
  void set_blockrow(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_blockrow() const;
  void _internal_set_blockrow(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 blockCol = 2;
  void clear_blockcol();
  ::PROTOBUF_NAMESPACE_ID::int32 blockcol() const;
  void set_blockcol(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_blockcol() const;
  void _internal_set_blockcol(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fractalK = 3;
  void clear_fractalk();
  ::PROTOBUF_NAMESPACE_ID::int32 fractalk() const;
  void set_fractalk(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fractalk() const;
  void _internal_set_fractalk(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fractalN = 4;
  void clear_fractaln();
  ::PROTOBUF_NAMESPACE_ID::int32 fractaln() const;
  void set_fractaln(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fractaln() const;
  void _internal_set_fractaln(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lastFractalK = 5;
  void clear_lastfractalk();
  ::PROTOBUF_NAMESPACE_ID::int32 lastfractalk() const;
  void set_lastfractalk(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lastfractalk() const;
  void _internal_set_lastfractalk(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lastFractalN = 6;
  void clear_lastfractaln();
  ::PROTOBUF_NAMESPACE_ID::int32 lastfractaln() const;
  void set_lastfractaln(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lastfractaln() const;
  void _internal_set_lastfractaln(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cubeSize = 7;
  void clear_cubesize();
  ::PROTOBUF_NAMESPACE_ID::int32 cubesize() const;
  void set_cubesize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cubesize() const;
  void _internal_set_cubesize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 loadDir = 8;
  void clear_loaddir();
  ::PROTOBUF_NAMESPACE_ID::int32 loaddir() const;
  void set_loaddir(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_loaddir() const;
  void _internal_set_loaddir(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:domi.CompressInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 blockrow_;
  ::PROTOBUF_NAMESPACE_ID::int32 blockcol_;
  ::PROTOBUF_NAMESPACE_ID::int32 fractalk_;
  ::PROTOBUF_NAMESPACE_ID::int32 fractaln_;
  ::PROTOBUF_NAMESPACE_ID::int32 lastfractalk_;
  ::PROTOBUF_NAMESPACE_ID::int32 lastfractaln_;
  ::PROTOBUF_NAMESPACE_ID::int32 cubesize_;
  ::PROTOBUF_NAMESPACE_ID::int32 loaddir_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_om_2eproto;
};
// -------------------------------------------------------------------

class AttrDef_ListValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:domi.AttrDef.ListValue) */ {
 public:
  inline AttrDef_ListValue() : AttrDef_ListValue(nullptr) {}
  virtual ~AttrDef_ListValue();

  AttrDef_ListValue(const AttrDef_ListValue& from);
  AttrDef_ListValue(AttrDef_ListValue&& from) noexcept
    : AttrDef_ListValue() {
    *this = ::std::move(from);
  }

  inline AttrDef_ListValue& operator=(const AttrDef_ListValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttrDef_ListValue& operator=(AttrDef_ListValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttrDef_ListValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttrDef_ListValue* internal_default_instance() {
    return reinterpret_cast<const AttrDef_ListValue*>(
               &_AttrDef_ListValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(AttrDef_ListValue& a, AttrDef_ListValue& b) {
    a.Swap(&b);
  }
  inline void Swap(AttrDef_ListValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttrDef_ListValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttrDef_ListValue* New() const final {
    return CreateMaybeMessage<AttrDef_ListValue>(nullptr);
  }

  AttrDef_ListValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttrDef_ListValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttrDef_ListValue& from);
  void MergeFrom(const AttrDef_ListValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttrDef_ListValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "domi.AttrDef.ListValue";
  }
  protected:
  explicit AttrDef_ListValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSFieldNumber = 2,
    kIFieldNumber = 3,
    kFFieldNumber = 4,
    kBFieldNumber = 5,
    kUFieldNumber = 6,
    kBtFieldNumber = 7,
  };
  // repeated string s = 2;
  int s_size() const;
  private:
  int _internal_s_size() const;
  public:
  void clear_s();
  const std::string& s(int index) const;
  std::string* mutable_s(int index);
  void set_s(int index, const std::string& value);
  void set_s(int index, std::string&& value);
  void set_s(int index, const char* value);
  void set_s(int index, const char* value, size_t size);
  std::string* add_s();
  void add_s(const std::string& value);
  void add_s(std::string&& value);
  void add_s(const char* value);
  void add_s(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& s() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_s();
  private:
  const std::string& _internal_s(int index) const;
  std::string* _internal_add_s();
  public:

  // repeated int64 i = 3 [packed = true];
  int i_size() const;
  private:
  int _internal_i_size() const;
  public:
  void clear_i();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_i(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_i() const;
  void _internal_add_i(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_i();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 i(int index) const;
  void set_i(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_i(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      i() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_i();

  // repeated float f = 4 [packed = true];
  int f_size() const;
  private:
  int _internal_f_size() const;
  public:
  void clear_f();
  private:
  float _internal_f(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_f() const;
  void _internal_add_f(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_f();
  public:
  float f(int index) const;
  void set_f(int index, float value);
  void add_f(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      f() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_f();

  // repeated bool b = 5 [packed = true];
  int b_size() const;
  private:
  int _internal_b_size() const;
  public:
  void clear_b();
  private:
  bool _internal_b(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_b() const;
  void _internal_add_b(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_b();
  public:
  bool b(int index) const;
  void set_b(int index, bool value);
  void add_b(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      b() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_b();

  // repeated uint32 u = 6 [packed = true];
  int u_size() const;
  private:
  int _internal_u_size() const;
  public:
  void clear_u();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_u(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_u() const;
  void _internal_add_u(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_u();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 u(int index) const;
  void set_u(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_u(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      u() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_u();

  // repeated bytes bt = 7;
  int bt_size() const;
  private:
  int _internal_bt_size() const;
  public:
  void clear_bt();
  const std::string& bt(int index) const;
  std::string* mutable_bt(int index);
  void set_bt(int index, const std::string& value);
  void set_bt(int index, std::string&& value);
  void set_bt(int index, const char* value);
  void set_bt(int index, const void* value, size_t size);
  std::string* add_bt();
  void add_bt(const std::string& value);
  void add_bt(std::string&& value);
  void add_bt(const char* value);
  void add_bt(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bt() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bt();
  private:
  const std::string& _internal_bt(int index) const;
  std::string* _internal_add_bt();
  public:

  // @@protoc_insertion_point(class_scope:domi.AttrDef.ListValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> s_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > i_;
  mutable std::atomic<int> _i_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > f_;
  mutable std::atomic<int> _f_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > b_;
  mutable std::atomic<int> _b_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > u_;
  mutable std::atomic<int> _u_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_om_2eproto;
};
// -------------------------------------------------------------------

class AttrDef PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:domi.AttrDef) */ {
 public:
  inline AttrDef() : AttrDef(nullptr) {}
  virtual ~AttrDef();

  AttrDef(const AttrDef& from);
  AttrDef(AttrDef&& from) noexcept
    : AttrDef() {
    *this = ::std::move(from);
  }

  inline AttrDef& operator=(const AttrDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttrDef& operator=(AttrDef&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttrDef& default_instance();

  enum ValueCase {
    kS = 2,
    kI = 3,
    kF = 4,
    kB = 5,
    kU = 6,
    kBt = 7,
    kList = 1,
    kFunc = 10,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttrDef* internal_default_instance() {
    return reinterpret_cast<const AttrDef*>(
               &_AttrDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(AttrDef& a, AttrDef& b) {
    a.Swap(&b);
  }
  inline void Swap(AttrDef* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttrDef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttrDef* New() const final {
    return CreateMaybeMessage<AttrDef>(nullptr);
  }

  AttrDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttrDef>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttrDef& from);
  void MergeFrom(const AttrDef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttrDef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "domi.AttrDef";
  }
  protected:
  explicit AttrDef(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AttrDef_ListValue ListValue;

  // accessors -------------------------------------------------------

  enum : int {
    kSFieldNumber = 2,
    kIFieldNumber = 3,
    kFFieldNumber = 4,
    kBFieldNumber = 5,
    kUFieldNumber = 6,
    kBtFieldNumber = 7,
    kListFieldNumber = 1,
    kFuncFieldNumber = 10,
  };
  // string s = 2;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  const std::string& s() const;
  void set_s(const std::string& value);
  void set_s(std::string&& value);
  void set_s(const char* value);
  void set_s(const char* value, size_t size);
  std::string* mutable_s();
  std::string* release_s();
  void set_allocated_s(std::string* s);
  private:
  const std::string& _internal_s() const;
  void _internal_set_s(const std::string& value);
  std::string* _internal_mutable_s();
  public:

  // int64 i = 3;
  private:
  bool _internal_has_i() const;
  public:
  void clear_i();
  ::PROTOBUF_NAMESPACE_ID::int64 i() const;
  void set_i(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_i() const;
  void _internal_set_i(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float f = 4;
  private:
  bool _internal_has_f() const;
  public:
  void clear_f();
  float f() const;
  void set_f(float value);
  private:
  float _internal_f() const;
  void _internal_set_f(float value);
  public:

  // bool b = 5;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  bool b() const;
  void set_b(bool value);
  private:
  bool _internal_b() const;
  void _internal_set_b(bool value);
  public:

  // uint32 u = 6;
  private:
  bool _internal_has_u() const;
  public:
  void clear_u();
  ::PROTOBUF_NAMESPACE_ID::uint32 u() const;
  void set_u(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_u() const;
  void _internal_set_u(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bytes bt = 7;
  private:
  bool _internal_has_bt() const;
  public:
  void clear_bt();
  const std::string& bt() const;
  void set_bt(const std::string& value);
  void set_bt(std::string&& value);
  void set_bt(const char* value);
  void set_bt(const void* value, size_t size);
  std::string* mutable_bt();
  std::string* release_bt();
  void set_allocated_bt(std::string* bt);
  private:
  const std::string& _internal_bt() const;
  void _internal_set_bt(const std::string& value);
  std::string* _internal_mutable_bt();
  public:

  // .domi.AttrDef.ListValue list = 1;
  bool has_list() const;
  private:
  bool _internal_has_list() const;
  public:
  void clear_list();
  const ::domi::AttrDef_ListValue& list() const;
  ::domi::AttrDef_ListValue* release_list();
  ::domi::AttrDef_ListValue* mutable_list();
  void set_allocated_list(::domi::AttrDef_ListValue* list);
  private:
  const ::domi::AttrDef_ListValue& _internal_list() const;
  ::domi::AttrDef_ListValue* _internal_mutable_list();
  public:
  void unsafe_arena_set_allocated_list(
      ::domi::AttrDef_ListValue* list);
  ::domi::AttrDef_ListValue* unsafe_arena_release_list();

  // .domi.NamedAttrs func = 10;
  bool has_func() const;
  private:
  bool _internal_has_func() const;
  public:
  void clear_func();
  const ::domi::NamedAttrs& func() const;
  ::domi::NamedAttrs* release_func();
  ::domi::NamedAttrs* mutable_func();
  void set_allocated_func(::domi::NamedAttrs* func);
  private:
  const ::domi::NamedAttrs& _internal_func() const;
  ::domi::NamedAttrs* _internal_mutable_func();
  public:
  void unsafe_arena_set_allocated_func(
      ::domi::NamedAttrs* func);
  ::domi::NamedAttrs* unsafe_arena_release_func();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:domi.AttrDef)
 private:
  class _Internal;
  void set_has_s();
  void set_has_i();
  void set_has_f();
  void set_has_b();
  void set_has_u();
  void set_has_bt();
  void set_has_list();
  void set_has_func();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueUnion {
    ValueUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_;
    ::PROTOBUF_NAMESPACE_ID::int64 i_;
    float f_;
    bool b_;
    ::PROTOBUF_NAMESPACE_ID::uint32 u_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bt_;
    ::domi::AttrDef_ListValue* list_;
    ::domi::NamedAttrs* func_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_om_2eproto;
};
// -------------------------------------------------------------------

class NamedAttrs_AttrEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NamedAttrs_AttrEntry_DoNotUse, 
    std::string, ::domi::AttrDef,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NamedAttrs_AttrEntry_DoNotUse, 
    std::string, ::domi::AttrDef,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  NamedAttrs_AttrEntry_DoNotUse();
  explicit NamedAttrs_AttrEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const NamedAttrs_AttrEntry_DoNotUse& other);
  static const NamedAttrs_AttrEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NamedAttrs_AttrEntry_DoNotUse*>(&_NamedAttrs_AttrEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "domi.NamedAttrs.AttrEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[34];
  }

  public:
};

// -------------------------------------------------------------------

class NamedAttrs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:domi.NamedAttrs) */ {
 public:
  inline NamedAttrs() : NamedAttrs(nullptr) {}
  virtual ~NamedAttrs();

  NamedAttrs(const NamedAttrs& from);
  NamedAttrs(NamedAttrs&& from) noexcept
    : NamedAttrs() {
    *this = ::std::move(from);
  }

  inline NamedAttrs& operator=(const NamedAttrs& from) {
    CopyFrom(from);
    return *this;
  }
  inline NamedAttrs& operator=(NamedAttrs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NamedAttrs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NamedAttrs* internal_default_instance() {
    return reinterpret_cast<const NamedAttrs*>(
               &_NamedAttrs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(NamedAttrs& a, NamedAttrs& b) {
    a.Swap(&b);
  }
  inline void Swap(NamedAttrs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NamedAttrs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NamedAttrs* New() const final {
    return CreateMaybeMessage<NamedAttrs>(nullptr);
  }

  NamedAttrs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NamedAttrs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NamedAttrs& from);
  void MergeFrom(const NamedAttrs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NamedAttrs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "domi.NamedAttrs";
  }
  protected:
  explicit NamedAttrs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_om_2eproto);
    return ::descriptor_table_om_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAttrFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // map<string, .domi.AttrDef> attr = 2;
  int attr_size() const;
  private:
  int _internal_attr_size() const;
  public:
  void clear_attr();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >&
      _internal_attr() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >*
      _internal_mutable_attr();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >&
      attr() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >*
      mutable_attr();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:domi.NamedAttrs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      NamedAttrs_AttrEntry_DoNotUse,
      std::string, ::domi::AttrDef,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > attr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_om_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ModelDef

// string name = 1;
inline void ModelDef::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelDef::name() const {
  // @@protoc_insertion_point(field_get:domi.ModelDef.name)
  return _internal_name();
}
inline void ModelDef::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:domi.ModelDef.name)
}
inline std::string* ModelDef::mutable_name() {
  // @@protoc_insertion_point(field_mutable:domi.ModelDef.name)
  return _internal_mutable_name();
}
inline const std::string& ModelDef::_internal_name() const {
  return name_.Get();
}
inline void ModelDef::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelDef::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:domi.ModelDef.name)
}
inline void ModelDef::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:domi.ModelDef.name)
}
inline void ModelDef::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:domi.ModelDef.name)
}
inline std::string* ModelDef::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelDef::release_name() {
  // @@protoc_insertion_point(field_release:domi.ModelDef.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelDef::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:domi.ModelDef.name)
}

// uint32 version = 2;
inline void ModelDef::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelDef::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelDef::version() const {
  // @@protoc_insertion_point(field_get:domi.ModelDef.version)
  return _internal_version();
}
inline void ModelDef::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void ModelDef::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:domi.ModelDef.version)
}

// uint64 memory_size = 10;
inline void ModelDef::clear_memory_size() {
  memory_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModelDef::_internal_memory_size() const {
  return memory_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModelDef::memory_size() const {
  // @@protoc_insertion_point(field_get:domi.ModelDef.memory_size)
  return _internal_memory_size();
}
inline void ModelDef::_internal_set_memory_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  memory_size_ = value;
}
inline void ModelDef::set_memory_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_memory_size(value);
  // @@protoc_insertion_point(field_set:domi.ModelDef.memory_size)
}

// uint32 stream_num = 11;
inline void ModelDef::clear_stream_num() {
  stream_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelDef::_internal_stream_num() const {
  return stream_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelDef::stream_num() const {
  // @@protoc_insertion_point(field_get:domi.ModelDef.stream_num)
  return _internal_stream_num();
}
inline void ModelDef::_internal_set_stream_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stream_num_ = value;
}
inline void ModelDef::set_stream_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stream_num(value);
  // @@protoc_insertion_point(field_set:domi.ModelDef.stream_num)
}

// uint32 event_num = 12;
inline void ModelDef::clear_event_num() {
  event_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelDef::_internal_event_num() const {
  return event_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelDef::event_num() const {
  // @@protoc_insertion_point(field_get:domi.ModelDef.event_num)
  return _internal_event_num();
}
inline void ModelDef::_internal_set_event_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  event_num_ = value;
}
inline void ModelDef::set_event_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_event_num(value);
  // @@protoc_insertion_point(field_set:domi.ModelDef.event_num)
}

// uint64 weight_size = 13;
inline void ModelDef::clear_weight_size() {
  weight_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModelDef::_internal_weight_size() const {
  return weight_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModelDef::weight_size() const {
  // @@protoc_insertion_point(field_get:domi.ModelDef.weight_size)
  return _internal_weight_size();
}
inline void ModelDef::_internal_set_weight_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  weight_size_ = value;
}
inline void ModelDef::set_weight_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_weight_size(value);
  // @@protoc_insertion_point(field_set:domi.ModelDef.weight_size)
}

// uint32 label_num = 15;
inline void ModelDef::clear_label_num() {
  label_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelDef::_internal_label_num() const {
  return label_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelDef::label_num() const {
  // @@protoc_insertion_point(field_get:domi.ModelDef.label_num)
  return _internal_label_num();
}
inline void ModelDef::_internal_set_label_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  label_num_ = value;
}
inline void ModelDef::set_label_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_label_num(value);
  // @@protoc_insertion_point(field_set:domi.ModelDef.label_num)
}

// repeated .domi.OpDef op = 20;
inline int ModelDef::_internal_op_size() const {
  return op_.size();
}
inline int ModelDef::op_size() const {
  return _internal_op_size();
}
inline void ModelDef::clear_op() {
  op_.Clear();
}
inline ::domi::OpDef* ModelDef::mutable_op(int index) {
  // @@protoc_insertion_point(field_mutable:domi.ModelDef.op)
  return op_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::OpDef >*
ModelDef::mutable_op() {
  // @@protoc_insertion_point(field_mutable_list:domi.ModelDef.op)
  return &op_;
}
inline const ::domi::OpDef& ModelDef::_internal_op(int index) const {
  return op_.Get(index);
}
inline const ::domi::OpDef& ModelDef::op(int index) const {
  // @@protoc_insertion_point(field_get:domi.ModelDef.op)
  return _internal_op(index);
}
inline ::domi::OpDef* ModelDef::_internal_add_op() {
  return op_.Add();
}
inline ::domi::OpDef* ModelDef::add_op() {
  // @@protoc_insertion_point(field_add:domi.ModelDef.op)
  return _internal_add_op();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::OpDef >&
ModelDef::op() const {
  // @@protoc_insertion_point(field_list:domi.ModelDef.op)
  return op_;
}

// .domi.TargetType target_type = 23;
inline void ModelDef::clear_target_type() {
  target_type_ = 0;
}
inline ::domi::TargetType ModelDef::_internal_target_type() const {
  return static_cast< ::domi::TargetType >(target_type_);
}
inline ::domi::TargetType ModelDef::target_type() const {
  // @@protoc_insertion_point(field_get:domi.ModelDef.target_type)
  return _internal_target_type();
}
inline void ModelDef::_internal_set_target_type(::domi::TargetType value) {
  
  target_type_ = value;
}
inline void ModelDef::set_target_type(::domi::TargetType value) {
  _internal_set_target_type(value);
  // @@protoc_insertion_point(field_set:domi.ModelDef.target_type)
}

// map<string, .domi.AttrDef> attr = 30;
inline int ModelDef::_internal_attr_size() const {
  return attr_.size();
}
inline int ModelDef::attr_size() const {
  return _internal_attr_size();
}
inline void ModelDef::clear_attr() {
  attr_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >&
ModelDef::_internal_attr() const {
  return attr_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >&
ModelDef::attr() const {
  // @@protoc_insertion_point(field_map:domi.ModelDef.attr)
  return _internal_attr();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >*
ModelDef::_internal_mutable_attr() {
  return attr_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >*
ModelDef::mutable_attr() {
  // @@protoc_insertion_point(field_mutable_map:domi.ModelDef.attr)
  return _internal_mutable_attr();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// OpDef

// string name = 1;
inline void OpDef::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OpDef::name() const {
  // @@protoc_insertion_point(field_get:domi.OpDef.name)
  return _internal_name();
}
inline void OpDef::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:domi.OpDef.name)
}
inline std::string* OpDef::mutable_name() {
  // @@protoc_insertion_point(field_mutable:domi.OpDef.name)
  return _internal_mutable_name();
}
inline const std::string& OpDef::_internal_name() const {
  return name_.Get();
}
inline void OpDef::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OpDef::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:domi.OpDef.name)
}
inline void OpDef::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:domi.OpDef.name)
}
inline void OpDef::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:domi.OpDef.name)
}
inline std::string* OpDef::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OpDef::release_name() {
  // @@protoc_insertion_point(field_release:domi.OpDef.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpDef::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:domi.OpDef.name)
}

// string type = 2;
inline void OpDef::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OpDef::type() const {
  // @@protoc_insertion_point(field_get:domi.OpDef.type)
  return _internal_type();
}
inline void OpDef::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:domi.OpDef.type)
}
inline std::string* OpDef::mutable_type() {
  // @@protoc_insertion_point(field_mutable:domi.OpDef.type)
  return _internal_mutable_type();
}
inline const std::string& OpDef::_internal_type() const {
  return type_.Get();
}
inline void OpDef::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OpDef::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:domi.OpDef.type)
}
inline void OpDef::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:domi.OpDef.type)
}
inline void OpDef::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:domi.OpDef.type)
}
inline std::string* OpDef::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OpDef::release_type() {
  // @@protoc_insertion_point(field_release:domi.OpDef.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpDef::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:domi.OpDef.type)
}

// uint32 id = 3;
inline void OpDef::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OpDef::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OpDef::id() const {
  // @@protoc_insertion_point(field_get:domi.OpDef.id)
  return _internal_id();
}
inline void OpDef::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void OpDef::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:domi.OpDef.id)
}

// uint32 stream_id = 4;
inline void OpDef::clear_stream_id() {
  stream_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OpDef::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OpDef::stream_id() const {
  // @@protoc_insertion_point(field_get:domi.OpDef.stream_id)
  return _internal_stream_id();
}
inline void OpDef::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stream_id_ = value;
}
inline void OpDef::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:domi.OpDef.stream_id)
}

// repeated string input_name = 5;
inline int OpDef::_internal_input_name_size() const {
  return input_name_.size();
}
inline int OpDef::input_name_size() const {
  return _internal_input_name_size();
}
inline void OpDef::clear_input_name() {
  input_name_.Clear();
}
inline std::string* OpDef::add_input_name() {
  // @@protoc_insertion_point(field_add_mutable:domi.OpDef.input_name)
  return _internal_add_input_name();
}
inline const std::string& OpDef::_internal_input_name(int index) const {
  return input_name_.Get(index);
}
inline const std::string& OpDef::input_name(int index) const {
  // @@protoc_insertion_point(field_get:domi.OpDef.input_name)
  return _internal_input_name(index);
}
inline std::string* OpDef::mutable_input_name(int index) {
  // @@protoc_insertion_point(field_mutable:domi.OpDef.input_name)
  return input_name_.Mutable(index);
}
inline void OpDef::set_input_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:domi.OpDef.input_name)
  input_name_.Mutable(index)->assign(value);
}
inline void OpDef::set_input_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:domi.OpDef.input_name)
  input_name_.Mutable(index)->assign(std::move(value));
}
inline void OpDef::set_input_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:domi.OpDef.input_name)
}
inline void OpDef::set_input_name(int index, const char* value, size_t size) {
  input_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:domi.OpDef.input_name)
}
inline std::string* OpDef::_internal_add_input_name() {
  return input_name_.Add();
}
inline void OpDef::add_input_name(const std::string& value) {
  input_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:domi.OpDef.input_name)
}
inline void OpDef::add_input_name(std::string&& value) {
  input_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:domi.OpDef.input_name)
}
inline void OpDef::add_input_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:domi.OpDef.input_name)
}
inline void OpDef::add_input_name(const char* value, size_t size) {
  input_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:domi.OpDef.input_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OpDef::input_name() const {
  // @@protoc_insertion_point(field_list:domi.OpDef.input_name)
  return input_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OpDef::mutable_input_name() {
  // @@protoc_insertion_point(field_mutable_list:domi.OpDef.input_name)
  return &input_name_;
}

// repeated string src_name = 8;
inline int OpDef::_internal_src_name_size() const {
  return src_name_.size();
}
inline int OpDef::src_name_size() const {
  return _internal_src_name_size();
}
inline void OpDef::clear_src_name() {
  src_name_.Clear();
}
inline std::string* OpDef::add_src_name() {
  // @@protoc_insertion_point(field_add_mutable:domi.OpDef.src_name)
  return _internal_add_src_name();
}
inline const std::string& OpDef::_internal_src_name(int index) const {
  return src_name_.Get(index);
}
inline const std::string& OpDef::src_name(int index) const {
  // @@protoc_insertion_point(field_get:domi.OpDef.src_name)
  return _internal_src_name(index);
}
inline std::string* OpDef::mutable_src_name(int index) {
  // @@protoc_insertion_point(field_mutable:domi.OpDef.src_name)
  return src_name_.Mutable(index);
}
inline void OpDef::set_src_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:domi.OpDef.src_name)
  src_name_.Mutable(index)->assign(value);
}
inline void OpDef::set_src_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:domi.OpDef.src_name)
  src_name_.Mutable(index)->assign(std::move(value));
}
inline void OpDef::set_src_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  src_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:domi.OpDef.src_name)
}
inline void OpDef::set_src_name(int index, const char* value, size_t size) {
  src_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:domi.OpDef.src_name)
}
inline std::string* OpDef::_internal_add_src_name() {
  return src_name_.Add();
}
inline void OpDef::add_src_name(const std::string& value) {
  src_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:domi.OpDef.src_name)
}
inline void OpDef::add_src_name(std::string&& value) {
  src_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:domi.OpDef.src_name)
}
inline void OpDef::add_src_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  src_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:domi.OpDef.src_name)
}
inline void OpDef::add_src_name(const char* value, size_t size) {
  src_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:domi.OpDef.src_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OpDef::src_name() const {
  // @@protoc_insertion_point(field_list:domi.OpDef.src_name)
  return src_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OpDef::mutable_src_name() {
  // @@protoc_insertion_point(field_mutable_list:domi.OpDef.src_name)
  return &src_name_;
}

// repeated int32 src_index = 9;
inline int OpDef::_internal_src_index_size() const {
  return src_index_.size();
}
inline int OpDef::src_index_size() const {
  return _internal_src_index_size();
}
inline void OpDef::clear_src_index() {
  src_index_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpDef::_internal_src_index(int index) const {
  return src_index_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpDef::src_index(int index) const {
  // @@protoc_insertion_point(field_get:domi.OpDef.src_index)
  return _internal_src_index(index);
}
inline void OpDef::set_src_index(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  src_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:domi.OpDef.src_index)
}
inline void OpDef::_internal_add_src_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  src_index_.Add(value);
}
inline void OpDef::add_src_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_src_index(value);
  // @@protoc_insertion_point(field_add:domi.OpDef.src_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
OpDef::_internal_src_index() const {
  return src_index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
OpDef::src_index() const {
  // @@protoc_insertion_point(field_list:domi.OpDef.src_index)
  return _internal_src_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
OpDef::_internal_mutable_src_index() {
  return &src_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
OpDef::mutable_src_index() {
  // @@protoc_insertion_point(field_mutable_list:domi.OpDef.src_index)
  return _internal_mutable_src_index();
}

// repeated int64 input = 10;
inline int OpDef::_internal_input_size() const {
  return input_.size();
}
inline int OpDef::input_size() const {
  return _internal_input_size();
}
inline void OpDef::clear_input() {
  input_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpDef::_internal_input(int index) const {
  return input_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpDef::input(int index) const {
  // @@protoc_insertion_point(field_get:domi.OpDef.input)
  return _internal_input(index);
}
inline void OpDef::set_input(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  input_.Set(index, value);
  // @@protoc_insertion_point(field_set:domi.OpDef.input)
}
inline void OpDef::_internal_add_input(::PROTOBUF_NAMESPACE_ID::int64 value) {
  input_.Add(value);
}
inline void OpDef::add_input(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_input(value);
  // @@protoc_insertion_point(field_add:domi.OpDef.input)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
OpDef::_internal_input() const {
  return input_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
OpDef::input() const {
  // @@protoc_insertion_point(field_list:domi.OpDef.input)
  return _internal_input();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
OpDef::_internal_mutable_input() {
  return &input_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
OpDef::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:domi.OpDef.input)
  return _internal_mutable_input();
}

// repeated int64 output = 11;
inline int OpDef::_internal_output_size() const {
  return output_.size();
}
inline int OpDef::output_size() const {
  return _internal_output_size();
}
inline void OpDef::clear_output() {
  output_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpDef::_internal_output(int index) const {
  return output_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpDef::output(int index) const {
  // @@protoc_insertion_point(field_get:domi.OpDef.output)
  return _internal_output(index);
}
inline void OpDef::set_output(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  output_.Set(index, value);
  // @@protoc_insertion_point(field_set:domi.OpDef.output)
}
inline void OpDef::_internal_add_output(::PROTOBUF_NAMESPACE_ID::int64 value) {
  output_.Add(value);
}
inline void OpDef::add_output(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_output(value);
  // @@protoc_insertion_point(field_add:domi.OpDef.output)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
OpDef::_internal_output() const {
  return output_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
OpDef::output() const {
  // @@protoc_insertion_point(field_list:domi.OpDef.output)
  return _internal_output();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
OpDef::_internal_mutable_output() {
  return &output_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
OpDef::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:domi.OpDef.output)
  return _internal_mutable_output();
}

// repeated .domi.TensorDescriptor input_desc = 12;
inline int OpDef::_internal_input_desc_size() const {
  return input_desc_.size();
}
inline int OpDef::input_desc_size() const {
  return _internal_input_desc_size();
}
inline void OpDef::clear_input_desc() {
  input_desc_.Clear();
}
inline ::domi::TensorDescriptor* OpDef::mutable_input_desc(int index) {
  // @@protoc_insertion_point(field_mutable:domi.OpDef.input_desc)
  return input_desc_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::TensorDescriptor >*
OpDef::mutable_input_desc() {
  // @@protoc_insertion_point(field_mutable_list:domi.OpDef.input_desc)
  return &input_desc_;
}
inline const ::domi::TensorDescriptor& OpDef::_internal_input_desc(int index) const {
  return input_desc_.Get(index);
}
inline const ::domi::TensorDescriptor& OpDef::input_desc(int index) const {
  // @@protoc_insertion_point(field_get:domi.OpDef.input_desc)
  return _internal_input_desc(index);
}
inline ::domi::TensorDescriptor* OpDef::_internal_add_input_desc() {
  return input_desc_.Add();
}
inline ::domi::TensorDescriptor* OpDef::add_input_desc() {
  // @@protoc_insertion_point(field_add:domi.OpDef.input_desc)
  return _internal_add_input_desc();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::TensorDescriptor >&
OpDef::input_desc() const {
  // @@protoc_insertion_point(field_list:domi.OpDef.input_desc)
  return input_desc_;
}

// repeated .domi.TensorDescriptor output_desc = 13;
inline int OpDef::_internal_output_desc_size() const {
  return output_desc_.size();
}
inline int OpDef::output_desc_size() const {
  return _internal_output_desc_size();
}
inline void OpDef::clear_output_desc() {
  output_desc_.Clear();
}
inline ::domi::TensorDescriptor* OpDef::mutable_output_desc(int index) {
  // @@protoc_insertion_point(field_mutable:domi.OpDef.output_desc)
  return output_desc_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::TensorDescriptor >*
OpDef::mutable_output_desc() {
  // @@protoc_insertion_point(field_mutable_list:domi.OpDef.output_desc)
  return &output_desc_;
}
inline const ::domi::TensorDescriptor& OpDef::_internal_output_desc(int index) const {
  return output_desc_.Get(index);
}
inline const ::domi::TensorDescriptor& OpDef::output_desc(int index) const {
  // @@protoc_insertion_point(field_get:domi.OpDef.output_desc)
  return _internal_output_desc(index);
}
inline ::domi::TensorDescriptor* OpDef::_internal_add_output_desc() {
  return output_desc_.Add();
}
inline ::domi::TensorDescriptor* OpDef::add_output_desc() {
  // @@protoc_insertion_point(field_add:domi.OpDef.output_desc)
  return _internal_add_output_desc();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::TensorDescriptor >&
OpDef::output_desc() const {
  // @@protoc_insertion_point(field_list:domi.OpDef.output_desc)
  return output_desc_;
}

// repeated .domi.WeightDef weights = 14;
inline int OpDef::_internal_weights_size() const {
  return weights_.size();
}
inline int OpDef::weights_size() const {
  return _internal_weights_size();
}
inline void OpDef::clear_weights() {
  weights_.Clear();
}
inline ::domi::WeightDef* OpDef::mutable_weights(int index) {
  // @@protoc_insertion_point(field_mutable:domi.OpDef.weights)
  return weights_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef >*
OpDef::mutable_weights() {
  // @@protoc_insertion_point(field_mutable_list:domi.OpDef.weights)
  return &weights_;
}
inline const ::domi::WeightDef& OpDef::_internal_weights(int index) const {
  return weights_.Get(index);
}
inline const ::domi::WeightDef& OpDef::weights(int index) const {
  // @@protoc_insertion_point(field_get:domi.OpDef.weights)
  return _internal_weights(index);
}
inline ::domi::WeightDef* OpDef::_internal_add_weights() {
  return weights_.Add();
}
inline ::domi::WeightDef* OpDef::add_weights() {
  // @@protoc_insertion_point(field_add:domi.OpDef.weights)
  return _internal_add_weights();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef >&
OpDef::weights() const {
  // @@protoc_insertion_point(field_list:domi.OpDef.weights)
  return weights_;
}

// repeated string dst_name = 15;
inline int OpDef::_internal_dst_name_size() const {
  return dst_name_.size();
}
inline int OpDef::dst_name_size() const {
  return _internal_dst_name_size();
}
inline void OpDef::clear_dst_name() {
  dst_name_.Clear();
}
inline std::string* OpDef::add_dst_name() {
  // @@protoc_insertion_point(field_add_mutable:domi.OpDef.dst_name)
  return _internal_add_dst_name();
}
inline const std::string& OpDef::_internal_dst_name(int index) const {
  return dst_name_.Get(index);
}
inline const std::string& OpDef::dst_name(int index) const {
  // @@protoc_insertion_point(field_get:domi.OpDef.dst_name)
  return _internal_dst_name(index);
}
inline std::string* OpDef::mutable_dst_name(int index) {
  // @@protoc_insertion_point(field_mutable:domi.OpDef.dst_name)
  return dst_name_.Mutable(index);
}
inline void OpDef::set_dst_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:domi.OpDef.dst_name)
  dst_name_.Mutable(index)->assign(value);
}
inline void OpDef::set_dst_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:domi.OpDef.dst_name)
  dst_name_.Mutable(index)->assign(std::move(value));
}
inline void OpDef::set_dst_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dst_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:domi.OpDef.dst_name)
}
inline void OpDef::set_dst_name(int index, const char* value, size_t size) {
  dst_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:domi.OpDef.dst_name)
}
inline std::string* OpDef::_internal_add_dst_name() {
  return dst_name_.Add();
}
inline void OpDef::add_dst_name(const std::string& value) {
  dst_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:domi.OpDef.dst_name)
}
inline void OpDef::add_dst_name(std::string&& value) {
  dst_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:domi.OpDef.dst_name)
}
inline void OpDef::add_dst_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dst_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:domi.OpDef.dst_name)
}
inline void OpDef::add_dst_name(const char* value, size_t size) {
  dst_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:domi.OpDef.dst_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OpDef::dst_name() const {
  // @@protoc_insertion_point(field_list:domi.OpDef.dst_name)
  return dst_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OpDef::mutable_dst_name() {
  // @@protoc_insertion_point(field_mutable_list:domi.OpDef.dst_name)
  return &dst_name_;
}

// repeated int32 dst_index = 16;
inline int OpDef::_internal_dst_index_size() const {
  return dst_index_.size();
}
inline int OpDef::dst_index_size() const {
  return _internal_dst_index_size();
}
inline void OpDef::clear_dst_index() {
  dst_index_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpDef::_internal_dst_index(int index) const {
  return dst_index_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpDef::dst_index(int index) const {
  // @@protoc_insertion_point(field_get:domi.OpDef.dst_index)
  return _internal_dst_index(index);
}
inline void OpDef::set_dst_index(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  dst_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:domi.OpDef.dst_index)
}
inline void OpDef::_internal_add_dst_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  dst_index_.Add(value);
}
inline void OpDef::add_dst_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_dst_index(value);
  // @@protoc_insertion_point(field_add:domi.OpDef.dst_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
OpDef::_internal_dst_index() const {
  return dst_index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
OpDef::dst_index() const {
  // @@protoc_insertion_point(field_list:domi.OpDef.dst_index)
  return _internal_dst_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
OpDef::_internal_mutable_dst_index() {
  return &dst_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
OpDef::mutable_dst_index() {
  // @@protoc_insertion_point(field_mutable_list:domi.OpDef.dst_index)
  return _internal_mutable_dst_index();
}

// repeated int64 workspace = 20;
inline int OpDef::_internal_workspace_size() const {
  return workspace_.size();
}
inline int OpDef::workspace_size() const {
  return _internal_workspace_size();
}
inline void OpDef::clear_workspace() {
  workspace_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpDef::_internal_workspace(int index) const {
  return workspace_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpDef::workspace(int index) const {
  // @@protoc_insertion_point(field_get:domi.OpDef.workspace)
  return _internal_workspace(index);
}
inline void OpDef::set_workspace(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  workspace_.Set(index, value);
  // @@protoc_insertion_point(field_set:domi.OpDef.workspace)
}
inline void OpDef::_internal_add_workspace(::PROTOBUF_NAMESPACE_ID::int64 value) {
  workspace_.Add(value);
}
inline void OpDef::add_workspace(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_workspace(value);
  // @@protoc_insertion_point(field_add:domi.OpDef.workspace)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
OpDef::_internal_workspace() const {
  return workspace_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
OpDef::workspace() const {
  // @@protoc_insertion_point(field_list:domi.OpDef.workspace)
  return _internal_workspace();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
OpDef::_internal_mutable_workspace() {
  return &workspace_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
OpDef::mutable_workspace() {
  // @@protoc_insertion_point(field_mutable_list:domi.OpDef.workspace)
  return _internal_mutable_workspace();
}

// repeated uint32 workspace_bytes = 21;
inline int OpDef::_internal_workspace_bytes_size() const {
  return workspace_bytes_.size();
}
inline int OpDef::workspace_bytes_size() const {
  return _internal_workspace_bytes_size();
}
inline void OpDef::clear_workspace_bytes() {
  workspace_bytes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OpDef::_internal_workspace_bytes(int index) const {
  return workspace_bytes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OpDef::workspace_bytes(int index) const {
  // @@protoc_insertion_point(field_get:domi.OpDef.workspace_bytes)
  return _internal_workspace_bytes(index);
}
inline void OpDef::set_workspace_bytes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  workspace_bytes_.Set(index, value);
  // @@protoc_insertion_point(field_set:domi.OpDef.workspace_bytes)
}
inline void OpDef::_internal_add_workspace_bytes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  workspace_bytes_.Add(value);
}
inline void OpDef::add_workspace_bytes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_workspace_bytes(value);
  // @@protoc_insertion_point(field_add:domi.OpDef.workspace_bytes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
OpDef::_internal_workspace_bytes() const {
  return workspace_bytes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
OpDef::workspace_bytes() const {
  // @@protoc_insertion_point(field_list:domi.OpDef.workspace_bytes)
  return _internal_workspace_bytes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
OpDef::_internal_mutable_workspace_bytes() {
  return &workspace_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
OpDef::mutable_workspace_bytes() {
  // @@protoc_insertion_point(field_mutable_list:domi.OpDef.workspace_bytes)
  return _internal_mutable_workspace_bytes();
}

// repeated string weight_name = 22;
inline int OpDef::_internal_weight_name_size() const {
  return weight_name_.size();
}
inline int OpDef::weight_name_size() const {
  return _internal_weight_name_size();
}
inline void OpDef::clear_weight_name() {
  weight_name_.Clear();
}
inline std::string* OpDef::add_weight_name() {
  // @@protoc_insertion_point(field_add_mutable:domi.OpDef.weight_name)
  return _internal_add_weight_name();
}
inline const std::string& OpDef::_internal_weight_name(int index) const {
  return weight_name_.Get(index);
}
inline const std::string& OpDef::weight_name(int index) const {
  // @@protoc_insertion_point(field_get:domi.OpDef.weight_name)
  return _internal_weight_name(index);
}
inline std::string* OpDef::mutable_weight_name(int index) {
  // @@protoc_insertion_point(field_mutable:domi.OpDef.weight_name)
  return weight_name_.Mutable(index);
}
inline void OpDef::set_weight_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:domi.OpDef.weight_name)
  weight_name_.Mutable(index)->assign(value);
}
inline void OpDef::set_weight_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:domi.OpDef.weight_name)
  weight_name_.Mutable(index)->assign(std::move(value));
}
inline void OpDef::set_weight_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  weight_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:domi.OpDef.weight_name)
}
inline void OpDef::set_weight_name(int index, const char* value, size_t size) {
  weight_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:domi.OpDef.weight_name)
}
inline std::string* OpDef::_internal_add_weight_name() {
  return weight_name_.Add();
}
inline void OpDef::add_weight_name(const std::string& value) {
  weight_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:domi.OpDef.weight_name)
}
inline void OpDef::add_weight_name(std::string&& value) {
  weight_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:domi.OpDef.weight_name)
}
inline void OpDef::add_weight_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  weight_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:domi.OpDef.weight_name)
}
inline void OpDef::add_weight_name(const char* value, size_t size) {
  weight_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:domi.OpDef.weight_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OpDef::weight_name() const {
  // @@protoc_insertion_point(field_list:domi.OpDef.weight_name)
  return weight_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OpDef::mutable_weight_name() {
  // @@protoc_insertion_point(field_mutable_list:domi.OpDef.weight_name)
  return &weight_name_;
}

// repeated bool is_input_const = 23;
inline int OpDef::_internal_is_input_const_size() const {
  return is_input_const_.size();
}
inline int OpDef::is_input_const_size() const {
  return _internal_is_input_const_size();
}
inline void OpDef::clear_is_input_const() {
  is_input_const_.Clear();
}
inline bool OpDef::_internal_is_input_const(int index) const {
  return is_input_const_.Get(index);
}
inline bool OpDef::is_input_const(int index) const {
  // @@protoc_insertion_point(field_get:domi.OpDef.is_input_const)
  return _internal_is_input_const(index);
}
inline void OpDef::set_is_input_const(int index, bool value) {
  is_input_const_.Set(index, value);
  // @@protoc_insertion_point(field_set:domi.OpDef.is_input_const)
}
inline void OpDef::_internal_add_is_input_const(bool value) {
  is_input_const_.Add(value);
}
inline void OpDef::add_is_input_const(bool value) {
  _internal_add_is_input_const(value);
  // @@protoc_insertion_point(field_add:domi.OpDef.is_input_const)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
OpDef::_internal_is_input_const() const {
  return is_input_const_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
OpDef::is_input_const() const {
  // @@protoc_insertion_point(field_list:domi.OpDef.is_input_const)
  return _internal_is_input_const();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
OpDef::_internal_mutable_is_input_const() {
  return &is_input_const_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
OpDef::mutable_is_input_const() {
  // @@protoc_insertion_point(field_mutable_list:domi.OpDef.is_input_const)
  return _internal_mutable_is_input_const();
}

// map<string, .domi.AttrDef> attr = 30;
inline int OpDef::_internal_attr_size() const {
  return attr_.size();
}
inline int OpDef::attr_size() const {
  return _internal_attr_size();
}
inline void OpDef::clear_attr() {
  attr_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >&
OpDef::_internal_attr() const {
  return attr_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >&
OpDef::attr() const {
  // @@protoc_insertion_point(field_map:domi.OpDef.attr)
  return _internal_attr();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >*
OpDef::_internal_mutable_attr() {
  return attr_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >*
OpDef::mutable_attr() {
  // @@protoc_insertion_point(field_mutable_map:domi.OpDef.attr)
  return _internal_mutable_attr();
}

// .domi.QuantizeFactorParams quantize_factor = 31;
inline bool OpDef::_internal_has_quantize_factor() const {
  return this != internal_default_instance() && quantize_factor_ != nullptr;
}
inline bool OpDef::has_quantize_factor() const {
  return _internal_has_quantize_factor();
}
inline void OpDef::clear_quantize_factor() {
  if (GetArena() == nullptr && quantize_factor_ != nullptr) {
    delete quantize_factor_;
  }
  quantize_factor_ = nullptr;
}
inline const ::domi::QuantizeFactorParams& OpDef::_internal_quantize_factor() const {
  const ::domi::QuantizeFactorParams* p = quantize_factor_;
  return p != nullptr ? *p : *reinterpret_cast<const ::domi::QuantizeFactorParams*>(
      &::domi::_QuantizeFactorParams_default_instance_);
}
inline const ::domi::QuantizeFactorParams& OpDef::quantize_factor() const {
  // @@protoc_insertion_point(field_get:domi.OpDef.quantize_factor)
  return _internal_quantize_factor();
}
inline void OpDef::unsafe_arena_set_allocated_quantize_factor(
    ::domi::QuantizeFactorParams* quantize_factor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quantize_factor_);
  }
  quantize_factor_ = quantize_factor;
  if (quantize_factor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.OpDef.quantize_factor)
}
inline ::domi::QuantizeFactorParams* OpDef::release_quantize_factor() {
  
  ::domi::QuantizeFactorParams* temp = quantize_factor_;
  quantize_factor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::domi::QuantizeFactorParams* OpDef::unsafe_arena_release_quantize_factor() {
  // @@protoc_insertion_point(field_release:domi.OpDef.quantize_factor)
  
  ::domi::QuantizeFactorParams* temp = quantize_factor_;
  quantize_factor_ = nullptr;
  return temp;
}
inline ::domi::QuantizeFactorParams* OpDef::_internal_mutable_quantize_factor() {
  
  if (quantize_factor_ == nullptr) {
    auto* p = CreateMaybeMessage<::domi::QuantizeFactorParams>(GetArena());
    quantize_factor_ = p;
  }
  return quantize_factor_;
}
inline ::domi::QuantizeFactorParams* OpDef::mutable_quantize_factor() {
  // @@protoc_insertion_point(field_mutable:domi.OpDef.quantize_factor)
  return _internal_mutable_quantize_factor();
}
inline void OpDef::set_allocated_quantize_factor(::domi::QuantizeFactorParams* quantize_factor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete quantize_factor_;
  }
  if (quantize_factor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(quantize_factor);
    if (message_arena != submessage_arena) {
      quantize_factor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quantize_factor, submessage_arena);
    }
    
  } else {
    
  }
  quantize_factor_ = quantize_factor;
  // @@protoc_insertion_point(field_set_allocated:domi.OpDef.quantize_factor)
}

// .domi.SendOpParams sender_param = 100;
inline bool OpDef::_internal_has_sender_param() const {
  return op_params_case() == kSenderParam;
}
inline bool OpDef::has_sender_param() const {
  return _internal_has_sender_param();
}
inline void OpDef::set_has_sender_param() {
  _oneof_case_[0] = kSenderParam;
}
inline void OpDef::clear_sender_param() {
  if (_internal_has_sender_param()) {
    if (GetArena() == nullptr) {
      delete op_params_.sender_param_;
    }
    clear_has_op_params();
  }
}
inline ::domi::SendOpParams* OpDef::release_sender_param() {
  // @@protoc_insertion_point(field_release:domi.OpDef.sender_param)
  if (_internal_has_sender_param()) {
    clear_has_op_params();
      ::domi::SendOpParams* temp = op_params_.sender_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_params_.sender_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::domi::SendOpParams& OpDef::_internal_sender_param() const {
  return _internal_has_sender_param()
      ? *op_params_.sender_param_
      : *reinterpret_cast< ::domi::SendOpParams*>(&::domi::_SendOpParams_default_instance_);
}
inline const ::domi::SendOpParams& OpDef::sender_param() const {
  // @@protoc_insertion_point(field_get:domi.OpDef.sender_param)
  return _internal_sender_param();
}
inline ::domi::SendOpParams* OpDef::unsafe_arena_release_sender_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:domi.OpDef.sender_param)
  if (_internal_has_sender_param()) {
    clear_has_op_params();
    ::domi::SendOpParams* temp = op_params_.sender_param_;
    op_params_.sender_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OpDef::unsafe_arena_set_allocated_sender_param(::domi::SendOpParams* sender_param) {
  clear_op_params();
  if (sender_param) {
    set_has_sender_param();
    op_params_.sender_param_ = sender_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.OpDef.sender_param)
}
inline ::domi::SendOpParams* OpDef::_internal_mutable_sender_param() {
  if (!_internal_has_sender_param()) {
    clear_op_params();
    set_has_sender_param();
    op_params_.sender_param_ = CreateMaybeMessage< ::domi::SendOpParams >(GetArena());
  }
  return op_params_.sender_param_;
}
inline ::domi::SendOpParams* OpDef::mutable_sender_param() {
  // @@protoc_insertion_point(field_mutable:domi.OpDef.sender_param)
  return _internal_mutable_sender_param();
}

// .domi.RecvOpParams receiver_param = 200;
inline bool OpDef::_internal_has_receiver_param() const {
  return op_params_case() == kReceiverParam;
}
inline bool OpDef::has_receiver_param() const {
  return _internal_has_receiver_param();
}
inline void OpDef::set_has_receiver_param() {
  _oneof_case_[0] = kReceiverParam;
}
inline void OpDef::clear_receiver_param() {
  if (_internal_has_receiver_param()) {
    if (GetArena() == nullptr) {
      delete op_params_.receiver_param_;
    }
    clear_has_op_params();
  }
}
inline ::domi::RecvOpParams* OpDef::release_receiver_param() {
  // @@protoc_insertion_point(field_release:domi.OpDef.receiver_param)
  if (_internal_has_receiver_param()) {
    clear_has_op_params();
      ::domi::RecvOpParams* temp = op_params_.receiver_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_params_.receiver_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::domi::RecvOpParams& OpDef::_internal_receiver_param() const {
  return _internal_has_receiver_param()
      ? *op_params_.receiver_param_
      : *reinterpret_cast< ::domi::RecvOpParams*>(&::domi::_RecvOpParams_default_instance_);
}
inline const ::domi::RecvOpParams& OpDef::receiver_param() const {
  // @@protoc_insertion_point(field_get:domi.OpDef.receiver_param)
  return _internal_receiver_param();
}
inline ::domi::RecvOpParams* OpDef::unsafe_arena_release_receiver_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:domi.OpDef.receiver_param)
  if (_internal_has_receiver_param()) {
    clear_has_op_params();
    ::domi::RecvOpParams* temp = op_params_.receiver_param_;
    op_params_.receiver_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OpDef::unsafe_arena_set_allocated_receiver_param(::domi::RecvOpParams* receiver_param) {
  clear_op_params();
  if (receiver_param) {
    set_has_receiver_param();
    op_params_.receiver_param_ = receiver_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.OpDef.receiver_param)
}
inline ::domi::RecvOpParams* OpDef::_internal_mutable_receiver_param() {
  if (!_internal_has_receiver_param()) {
    clear_op_params();
    set_has_receiver_param();
    op_params_.receiver_param_ = CreateMaybeMessage< ::domi::RecvOpParams >(GetArena());
  }
  return op_params_.receiver_param_;
}
inline ::domi::RecvOpParams* OpDef::mutable_receiver_param() {
  // @@protoc_insertion_point(field_mutable:domi.OpDef.receiver_param)
  return _internal_mutable_receiver_param();
}

// .domi.ConvolutionOpParams convolution_param = 300;
inline bool OpDef::_internal_has_convolution_param() const {
  return op_params_case() == kConvolutionParam;
}
inline bool OpDef::has_convolution_param() const {
  return _internal_has_convolution_param();
}
inline void OpDef::set_has_convolution_param() {
  _oneof_case_[0] = kConvolutionParam;
}
inline void OpDef::clear_convolution_param() {
  if (_internal_has_convolution_param()) {
    if (GetArena() == nullptr) {
      delete op_params_.convolution_param_;
    }
    clear_has_op_params();
  }
}
inline ::domi::ConvolutionOpParams* OpDef::release_convolution_param() {
  // @@protoc_insertion_point(field_release:domi.OpDef.convolution_param)
  if (_internal_has_convolution_param()) {
    clear_has_op_params();
      ::domi::ConvolutionOpParams* temp = op_params_.convolution_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_params_.convolution_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::domi::ConvolutionOpParams& OpDef::_internal_convolution_param() const {
  return _internal_has_convolution_param()
      ? *op_params_.convolution_param_
      : *reinterpret_cast< ::domi::ConvolutionOpParams*>(&::domi::_ConvolutionOpParams_default_instance_);
}
inline const ::domi::ConvolutionOpParams& OpDef::convolution_param() const {
  // @@protoc_insertion_point(field_get:domi.OpDef.convolution_param)
  return _internal_convolution_param();
}
inline ::domi::ConvolutionOpParams* OpDef::unsafe_arena_release_convolution_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:domi.OpDef.convolution_param)
  if (_internal_has_convolution_param()) {
    clear_has_op_params();
    ::domi::ConvolutionOpParams* temp = op_params_.convolution_param_;
    op_params_.convolution_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OpDef::unsafe_arena_set_allocated_convolution_param(::domi::ConvolutionOpParams* convolution_param) {
  clear_op_params();
  if (convolution_param) {
    set_has_convolution_param();
    op_params_.convolution_param_ = convolution_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.OpDef.convolution_param)
}
inline ::domi::ConvolutionOpParams* OpDef::_internal_mutable_convolution_param() {
  if (!_internal_has_convolution_param()) {
    clear_op_params();
    set_has_convolution_param();
    op_params_.convolution_param_ = CreateMaybeMessage< ::domi::ConvolutionOpParams >(GetArena());
  }
  return op_params_.convolution_param_;
}
inline ::domi::ConvolutionOpParams* OpDef::mutable_convolution_param() {
  // @@protoc_insertion_point(field_mutable:domi.OpDef.convolution_param)
  return _internal_mutable_convolution_param();
}

// .domi.PoolingOpParams pooling_param = 400;
inline bool OpDef::_internal_has_pooling_param() const {
  return op_params_case() == kPoolingParam;
}
inline bool OpDef::has_pooling_param() const {
  return _internal_has_pooling_param();
}
inline void OpDef::set_has_pooling_param() {
  _oneof_case_[0] = kPoolingParam;
}
inline void OpDef::clear_pooling_param() {
  if (_internal_has_pooling_param()) {
    if (GetArena() == nullptr) {
      delete op_params_.pooling_param_;
    }
    clear_has_op_params();
  }
}
inline ::domi::PoolingOpParams* OpDef::release_pooling_param() {
  // @@protoc_insertion_point(field_release:domi.OpDef.pooling_param)
  if (_internal_has_pooling_param()) {
    clear_has_op_params();
      ::domi::PoolingOpParams* temp = op_params_.pooling_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_params_.pooling_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::domi::PoolingOpParams& OpDef::_internal_pooling_param() const {
  return _internal_has_pooling_param()
      ? *op_params_.pooling_param_
      : *reinterpret_cast< ::domi::PoolingOpParams*>(&::domi::_PoolingOpParams_default_instance_);
}
inline const ::domi::PoolingOpParams& OpDef::pooling_param() const {
  // @@protoc_insertion_point(field_get:domi.OpDef.pooling_param)
  return _internal_pooling_param();
}
inline ::domi::PoolingOpParams* OpDef::unsafe_arena_release_pooling_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:domi.OpDef.pooling_param)
  if (_internal_has_pooling_param()) {
    clear_has_op_params();
    ::domi::PoolingOpParams* temp = op_params_.pooling_param_;
    op_params_.pooling_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OpDef::unsafe_arena_set_allocated_pooling_param(::domi::PoolingOpParams* pooling_param) {
  clear_op_params();
  if (pooling_param) {
    set_has_pooling_param();
    op_params_.pooling_param_ = pooling_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.OpDef.pooling_param)
}
inline ::domi::PoolingOpParams* OpDef::_internal_mutable_pooling_param() {
  if (!_internal_has_pooling_param()) {
    clear_op_params();
    set_has_pooling_param();
    op_params_.pooling_param_ = CreateMaybeMessage< ::domi::PoolingOpParams >(GetArena());
  }
  return op_params_.pooling_param_;
}
inline ::domi::PoolingOpParams* OpDef::mutable_pooling_param() {
  // @@protoc_insertion_point(field_mutable:domi.OpDef.pooling_param)
  return _internal_mutable_pooling_param();
}

// .domi.EltwiseOpParams eltwise_param = 500;
inline bool OpDef::_internal_has_eltwise_param() const {
  return op_params_case() == kEltwiseParam;
}
inline bool OpDef::has_eltwise_param() const {
  return _internal_has_eltwise_param();
}
inline void OpDef::set_has_eltwise_param() {
  _oneof_case_[0] = kEltwiseParam;
}
inline void OpDef::clear_eltwise_param() {
  if (_internal_has_eltwise_param()) {
    if (GetArena() == nullptr) {
      delete op_params_.eltwise_param_;
    }
    clear_has_op_params();
  }
}
inline ::domi::EltwiseOpParams* OpDef::release_eltwise_param() {
  // @@protoc_insertion_point(field_release:domi.OpDef.eltwise_param)
  if (_internal_has_eltwise_param()) {
    clear_has_op_params();
      ::domi::EltwiseOpParams* temp = op_params_.eltwise_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_params_.eltwise_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::domi::EltwiseOpParams& OpDef::_internal_eltwise_param() const {
  return _internal_has_eltwise_param()
      ? *op_params_.eltwise_param_
      : *reinterpret_cast< ::domi::EltwiseOpParams*>(&::domi::_EltwiseOpParams_default_instance_);
}
inline const ::domi::EltwiseOpParams& OpDef::eltwise_param() const {
  // @@protoc_insertion_point(field_get:domi.OpDef.eltwise_param)
  return _internal_eltwise_param();
}
inline ::domi::EltwiseOpParams* OpDef::unsafe_arena_release_eltwise_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:domi.OpDef.eltwise_param)
  if (_internal_has_eltwise_param()) {
    clear_has_op_params();
    ::domi::EltwiseOpParams* temp = op_params_.eltwise_param_;
    op_params_.eltwise_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OpDef::unsafe_arena_set_allocated_eltwise_param(::domi::EltwiseOpParams* eltwise_param) {
  clear_op_params();
  if (eltwise_param) {
    set_has_eltwise_param();
    op_params_.eltwise_param_ = eltwise_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.OpDef.eltwise_param)
}
inline ::domi::EltwiseOpParams* OpDef::_internal_mutable_eltwise_param() {
  if (!_internal_has_eltwise_param()) {
    clear_op_params();
    set_has_eltwise_param();
    op_params_.eltwise_param_ = CreateMaybeMessage< ::domi::EltwiseOpParams >(GetArena());
  }
  return op_params_.eltwise_param_;
}
inline ::domi::EltwiseOpParams* OpDef::mutable_eltwise_param() {
  // @@protoc_insertion_point(field_mutable:domi.OpDef.eltwise_param)
  return _internal_mutable_eltwise_param();
}

// .domi.BatchNormOpParams batchnorm_param = 600;
inline bool OpDef::_internal_has_batchnorm_param() const {
  return op_params_case() == kBatchnormParam;
}
inline bool OpDef::has_batchnorm_param() const {
  return _internal_has_batchnorm_param();
}
inline void OpDef::set_has_batchnorm_param() {
  _oneof_case_[0] = kBatchnormParam;
}
inline void OpDef::clear_batchnorm_param() {
  if (_internal_has_batchnorm_param()) {
    if (GetArena() == nullptr) {
      delete op_params_.batchnorm_param_;
    }
    clear_has_op_params();
  }
}
inline ::domi::BatchNormOpParams* OpDef::release_batchnorm_param() {
  // @@protoc_insertion_point(field_release:domi.OpDef.batchnorm_param)
  if (_internal_has_batchnorm_param()) {
    clear_has_op_params();
      ::domi::BatchNormOpParams* temp = op_params_.batchnorm_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_params_.batchnorm_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::domi::BatchNormOpParams& OpDef::_internal_batchnorm_param() const {
  return _internal_has_batchnorm_param()
      ? *op_params_.batchnorm_param_
      : *reinterpret_cast< ::domi::BatchNormOpParams*>(&::domi::_BatchNormOpParams_default_instance_);
}
inline const ::domi::BatchNormOpParams& OpDef::batchnorm_param() const {
  // @@protoc_insertion_point(field_get:domi.OpDef.batchnorm_param)
  return _internal_batchnorm_param();
}
inline ::domi::BatchNormOpParams* OpDef::unsafe_arena_release_batchnorm_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:domi.OpDef.batchnorm_param)
  if (_internal_has_batchnorm_param()) {
    clear_has_op_params();
    ::domi::BatchNormOpParams* temp = op_params_.batchnorm_param_;
    op_params_.batchnorm_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OpDef::unsafe_arena_set_allocated_batchnorm_param(::domi::BatchNormOpParams* batchnorm_param) {
  clear_op_params();
  if (batchnorm_param) {
    set_has_batchnorm_param();
    op_params_.batchnorm_param_ = batchnorm_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.OpDef.batchnorm_param)
}
inline ::domi::BatchNormOpParams* OpDef::_internal_mutable_batchnorm_param() {
  if (!_internal_has_batchnorm_param()) {
    clear_op_params();
    set_has_batchnorm_param();
    op_params_.batchnorm_param_ = CreateMaybeMessage< ::domi::BatchNormOpParams >(GetArena());
  }
  return op_params_.batchnorm_param_;
}
inline ::domi::BatchNormOpParams* OpDef::mutable_batchnorm_param() {
  // @@protoc_insertion_point(field_mutable:domi.OpDef.batchnorm_param)
  return _internal_mutable_batchnorm_param();
}

// .domi.ScaleOpParams scale_param = 700;
inline bool OpDef::_internal_has_scale_param() const {
  return op_params_case() == kScaleParam;
}
inline bool OpDef::has_scale_param() const {
  return _internal_has_scale_param();
}
inline void OpDef::set_has_scale_param() {
  _oneof_case_[0] = kScaleParam;
}
inline void OpDef::clear_scale_param() {
  if (_internal_has_scale_param()) {
    if (GetArena() == nullptr) {
      delete op_params_.scale_param_;
    }
    clear_has_op_params();
  }
}
inline ::domi::ScaleOpParams* OpDef::release_scale_param() {
  // @@protoc_insertion_point(field_release:domi.OpDef.scale_param)
  if (_internal_has_scale_param()) {
    clear_has_op_params();
      ::domi::ScaleOpParams* temp = op_params_.scale_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_params_.scale_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::domi::ScaleOpParams& OpDef::_internal_scale_param() const {
  return _internal_has_scale_param()
      ? *op_params_.scale_param_
      : *reinterpret_cast< ::domi::ScaleOpParams*>(&::domi::_ScaleOpParams_default_instance_);
}
inline const ::domi::ScaleOpParams& OpDef::scale_param() const {
  // @@protoc_insertion_point(field_get:domi.OpDef.scale_param)
  return _internal_scale_param();
}
inline ::domi::ScaleOpParams* OpDef::unsafe_arena_release_scale_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:domi.OpDef.scale_param)
  if (_internal_has_scale_param()) {
    clear_has_op_params();
    ::domi::ScaleOpParams* temp = op_params_.scale_param_;
    op_params_.scale_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OpDef::unsafe_arena_set_allocated_scale_param(::domi::ScaleOpParams* scale_param) {
  clear_op_params();
  if (scale_param) {
    set_has_scale_param();
    op_params_.scale_param_ = scale_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.OpDef.scale_param)
}
inline ::domi::ScaleOpParams* OpDef::_internal_mutable_scale_param() {
  if (!_internal_has_scale_param()) {
    clear_op_params();
    set_has_scale_param();
    op_params_.scale_param_ = CreateMaybeMessage< ::domi::ScaleOpParams >(GetArena());
  }
  return op_params_.scale_param_;
}
inline ::domi::ScaleOpParams* OpDef::mutable_scale_param() {
  // @@protoc_insertion_point(field_mutable:domi.OpDef.scale_param)
  return _internal_mutable_scale_param();
}

// .domi.FullConnectionOpParams full_connection_param = 800;
inline bool OpDef::_internal_has_full_connection_param() const {
  return op_params_case() == kFullConnectionParam;
}
inline bool OpDef::has_full_connection_param() const {
  return _internal_has_full_connection_param();
}
inline void OpDef::set_has_full_connection_param() {
  _oneof_case_[0] = kFullConnectionParam;
}
inline void OpDef::clear_full_connection_param() {
  if (_internal_has_full_connection_param()) {
    if (GetArena() == nullptr) {
      delete op_params_.full_connection_param_;
    }
    clear_has_op_params();
  }
}
inline ::domi::FullConnectionOpParams* OpDef::release_full_connection_param() {
  // @@protoc_insertion_point(field_release:domi.OpDef.full_connection_param)
  if (_internal_has_full_connection_param()) {
    clear_has_op_params();
      ::domi::FullConnectionOpParams* temp = op_params_.full_connection_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_params_.full_connection_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::domi::FullConnectionOpParams& OpDef::_internal_full_connection_param() const {
  return _internal_has_full_connection_param()
      ? *op_params_.full_connection_param_
      : *reinterpret_cast< ::domi::FullConnectionOpParams*>(&::domi::_FullConnectionOpParams_default_instance_);
}
inline const ::domi::FullConnectionOpParams& OpDef::full_connection_param() const {
  // @@protoc_insertion_point(field_get:domi.OpDef.full_connection_param)
  return _internal_full_connection_param();
}
inline ::domi::FullConnectionOpParams* OpDef::unsafe_arena_release_full_connection_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:domi.OpDef.full_connection_param)
  if (_internal_has_full_connection_param()) {
    clear_has_op_params();
    ::domi::FullConnectionOpParams* temp = op_params_.full_connection_param_;
    op_params_.full_connection_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OpDef::unsafe_arena_set_allocated_full_connection_param(::domi::FullConnectionOpParams* full_connection_param) {
  clear_op_params();
  if (full_connection_param) {
    set_has_full_connection_param();
    op_params_.full_connection_param_ = full_connection_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.OpDef.full_connection_param)
}
inline ::domi::FullConnectionOpParams* OpDef::_internal_mutable_full_connection_param() {
  if (!_internal_has_full_connection_param()) {
    clear_op_params();
    set_has_full_connection_param();
    op_params_.full_connection_param_ = CreateMaybeMessage< ::domi::FullConnectionOpParams >(GetArena());
  }
  return op_params_.full_connection_param_;
}
inline ::domi::FullConnectionOpParams* OpDef::mutable_full_connection_param() {
  // @@protoc_insertion_point(field_mutable:domi.OpDef.full_connection_param)
  return _internal_mutable_full_connection_param();
}

// .domi.SoftmaxOpParams softmax_param = 900;
inline bool OpDef::_internal_has_softmax_param() const {
  return op_params_case() == kSoftmaxParam;
}
inline bool OpDef::has_softmax_param() const {
  return _internal_has_softmax_param();
}
inline void OpDef::set_has_softmax_param() {
  _oneof_case_[0] = kSoftmaxParam;
}
inline void OpDef::clear_softmax_param() {
  if (_internal_has_softmax_param()) {
    if (GetArena() == nullptr) {
      delete op_params_.softmax_param_;
    }
    clear_has_op_params();
  }
}
inline ::domi::SoftmaxOpParams* OpDef::release_softmax_param() {
  // @@protoc_insertion_point(field_release:domi.OpDef.softmax_param)
  if (_internal_has_softmax_param()) {
    clear_has_op_params();
      ::domi::SoftmaxOpParams* temp = op_params_.softmax_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_params_.softmax_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::domi::SoftmaxOpParams& OpDef::_internal_softmax_param() const {
  return _internal_has_softmax_param()
      ? *op_params_.softmax_param_
      : *reinterpret_cast< ::domi::SoftmaxOpParams*>(&::domi::_SoftmaxOpParams_default_instance_);
}
inline const ::domi::SoftmaxOpParams& OpDef::softmax_param() const {
  // @@protoc_insertion_point(field_get:domi.OpDef.softmax_param)
  return _internal_softmax_param();
}
inline ::domi::SoftmaxOpParams* OpDef::unsafe_arena_release_softmax_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:domi.OpDef.softmax_param)
  if (_internal_has_softmax_param()) {
    clear_has_op_params();
    ::domi::SoftmaxOpParams* temp = op_params_.softmax_param_;
    op_params_.softmax_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OpDef::unsafe_arena_set_allocated_softmax_param(::domi::SoftmaxOpParams* softmax_param) {
  clear_op_params();
  if (softmax_param) {
    set_has_softmax_param();
    op_params_.softmax_param_ = softmax_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.OpDef.softmax_param)
}
inline ::domi::SoftmaxOpParams* OpDef::_internal_mutable_softmax_param() {
  if (!_internal_has_softmax_param()) {
    clear_op_params();
    set_has_softmax_param();
    op_params_.softmax_param_ = CreateMaybeMessage< ::domi::SoftmaxOpParams >(GetArena());
  }
  return op_params_.softmax_param_;
}
inline ::domi::SoftmaxOpParams* OpDef::mutable_softmax_param() {
  // @@protoc_insertion_point(field_mutable:domi.OpDef.softmax_param)
  return _internal_mutable_softmax_param();
}

// .domi.ActivationOpParams activation_param = 1000;
inline bool OpDef::_internal_has_activation_param() const {
  return op_params_case() == kActivationParam;
}
inline bool OpDef::has_activation_param() const {
  return _internal_has_activation_param();
}
inline void OpDef::set_has_activation_param() {
  _oneof_case_[0] = kActivationParam;
}
inline void OpDef::clear_activation_param() {
  if (_internal_has_activation_param()) {
    if (GetArena() == nullptr) {
      delete op_params_.activation_param_;
    }
    clear_has_op_params();
  }
}
inline ::domi::ActivationOpParams* OpDef::release_activation_param() {
  // @@protoc_insertion_point(field_release:domi.OpDef.activation_param)
  if (_internal_has_activation_param()) {
    clear_has_op_params();
      ::domi::ActivationOpParams* temp = op_params_.activation_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_params_.activation_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::domi::ActivationOpParams& OpDef::_internal_activation_param() const {
  return _internal_has_activation_param()
      ? *op_params_.activation_param_
      : *reinterpret_cast< ::domi::ActivationOpParams*>(&::domi::_ActivationOpParams_default_instance_);
}
inline const ::domi::ActivationOpParams& OpDef::activation_param() const {
  // @@protoc_insertion_point(field_get:domi.OpDef.activation_param)
  return _internal_activation_param();
}
inline ::domi::ActivationOpParams* OpDef::unsafe_arena_release_activation_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:domi.OpDef.activation_param)
  if (_internal_has_activation_param()) {
    clear_has_op_params();
    ::domi::ActivationOpParams* temp = op_params_.activation_param_;
    op_params_.activation_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OpDef::unsafe_arena_set_allocated_activation_param(::domi::ActivationOpParams* activation_param) {
  clear_op_params();
  if (activation_param) {
    set_has_activation_param();
    op_params_.activation_param_ = activation_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.OpDef.activation_param)
}
inline ::domi::ActivationOpParams* OpDef::_internal_mutable_activation_param() {
  if (!_internal_has_activation_param()) {
    clear_op_params();
    set_has_activation_param();
    op_params_.activation_param_ = CreateMaybeMessage< ::domi::ActivationOpParams >(GetArena());
  }
  return op_params_.activation_param_;
}
inline ::domi::ActivationOpParams* OpDef::mutable_activation_param() {
  // @@protoc_insertion_point(field_mutable:domi.OpDef.activation_param)
  return _internal_mutable_activation_param();
}

// .domi.ReshapeOpParams reshape_param = 1100;
inline bool OpDef::_internal_has_reshape_param() const {
  return op_params_case() == kReshapeParam;
}
inline bool OpDef::has_reshape_param() const {
  return _internal_has_reshape_param();
}
inline void OpDef::set_has_reshape_param() {
  _oneof_case_[0] = kReshapeParam;
}
inline void OpDef::clear_reshape_param() {
  if (_internal_has_reshape_param()) {
    if (GetArena() == nullptr) {
      delete op_params_.reshape_param_;
    }
    clear_has_op_params();
  }
}
inline ::domi::ReshapeOpParams* OpDef::release_reshape_param() {
  // @@protoc_insertion_point(field_release:domi.OpDef.reshape_param)
  if (_internal_has_reshape_param()) {
    clear_has_op_params();
      ::domi::ReshapeOpParams* temp = op_params_.reshape_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_params_.reshape_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::domi::ReshapeOpParams& OpDef::_internal_reshape_param() const {
  return _internal_has_reshape_param()
      ? *op_params_.reshape_param_
      : *reinterpret_cast< ::domi::ReshapeOpParams*>(&::domi::_ReshapeOpParams_default_instance_);
}
inline const ::domi::ReshapeOpParams& OpDef::reshape_param() const {
  // @@protoc_insertion_point(field_get:domi.OpDef.reshape_param)
  return _internal_reshape_param();
}
inline ::domi::ReshapeOpParams* OpDef::unsafe_arena_release_reshape_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:domi.OpDef.reshape_param)
  if (_internal_has_reshape_param()) {
    clear_has_op_params();
    ::domi::ReshapeOpParams* temp = op_params_.reshape_param_;
    op_params_.reshape_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OpDef::unsafe_arena_set_allocated_reshape_param(::domi::ReshapeOpParams* reshape_param) {
  clear_op_params();
  if (reshape_param) {
    set_has_reshape_param();
    op_params_.reshape_param_ = reshape_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.OpDef.reshape_param)
}
inline ::domi::ReshapeOpParams* OpDef::_internal_mutable_reshape_param() {
  if (!_internal_has_reshape_param()) {
    clear_op_params();
    set_has_reshape_param();
    op_params_.reshape_param_ = CreateMaybeMessage< ::domi::ReshapeOpParams >(GetArena());
  }
  return op_params_.reshape_param_;
}
inline ::domi::ReshapeOpParams* OpDef::mutable_reshape_param() {
  // @@protoc_insertion_point(field_mutable:domi.OpDef.reshape_param)
  return _internal_mutable_reshape_param();
}

inline bool OpDef::has_op_params() const {
  return op_params_case() != OP_PARAMS_NOT_SET;
}
inline void OpDef::clear_has_op_params() {
  _oneof_case_[0] = OP_PARAMS_NOT_SET;
}
inline OpDef::OpParamsCase OpDef::op_params_case() const {
  return OpDef::OpParamsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SendOpParams

// uint32 event_id = 1;
inline void SendOpParams::clear_event_id() {
  event_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SendOpParams::_internal_event_id() const {
  return event_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SendOpParams::event_id() const {
  // @@protoc_insertion_point(field_get:domi.SendOpParams.event_id)
  return _internal_event_id();
}
inline void SendOpParams::_internal_set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  event_id_ = value;
}
inline void SendOpParams::set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:domi.SendOpParams.event_id)
}

// -------------------------------------------------------------------

// RecvOpParams

// uint32 event_id = 1;
inline void RecvOpParams::clear_event_id() {
  event_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RecvOpParams::_internal_event_id() const {
  return event_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RecvOpParams::event_id() const {
  // @@protoc_insertion_point(field_get:domi.RecvOpParams.event_id)
  return _internal_event_id();
}
inline void RecvOpParams::_internal_set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  event_id_ = value;
}
inline void RecvOpParams::set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:domi.RecvOpParams.event_id)
}

// -------------------------------------------------------------------

// QuantizeFactor

// .domi.QuantizeScaleMode scale_mode = 1;
inline void QuantizeFactor::clear_scale_mode() {
  scale_mode_ = 0;
}
inline ::domi::QuantizeScaleMode QuantizeFactor::_internal_scale_mode() const {
  return static_cast< ::domi::QuantizeScaleMode >(scale_mode_);
}
inline ::domi::QuantizeScaleMode QuantizeFactor::scale_mode() const {
  // @@protoc_insertion_point(field_get:domi.QuantizeFactor.scale_mode)
  return _internal_scale_mode();
}
inline void QuantizeFactor::_internal_set_scale_mode(::domi::QuantizeScaleMode value) {
  
  scale_mode_ = value;
}
inline void QuantizeFactor::set_scale_mode(::domi::QuantizeScaleMode value) {
  _internal_set_scale_mode(value);
  // @@protoc_insertion_point(field_set:domi.QuantizeFactor.scale_mode)
}

// bytes scale_value = 2;
inline void QuantizeFactor::clear_scale_value() {
  scale_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QuantizeFactor::scale_value() const {
  // @@protoc_insertion_point(field_get:domi.QuantizeFactor.scale_value)
  return _internal_scale_value();
}
inline void QuantizeFactor::set_scale_value(const std::string& value) {
  _internal_set_scale_value(value);
  // @@protoc_insertion_point(field_set:domi.QuantizeFactor.scale_value)
}
inline std::string* QuantizeFactor::mutable_scale_value() {
  // @@protoc_insertion_point(field_mutable:domi.QuantizeFactor.scale_value)
  return _internal_mutable_scale_value();
}
inline const std::string& QuantizeFactor::_internal_scale_value() const {
  return scale_value_.Get();
}
inline void QuantizeFactor::_internal_set_scale_value(const std::string& value) {
  
  scale_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QuantizeFactor::set_scale_value(std::string&& value) {
  
  scale_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:domi.QuantizeFactor.scale_value)
}
inline void QuantizeFactor::set_scale_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scale_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:domi.QuantizeFactor.scale_value)
}
inline void QuantizeFactor::set_scale_value(const void* value,
    size_t size) {
  
  scale_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:domi.QuantizeFactor.scale_value)
}
inline std::string* QuantizeFactor::_internal_mutable_scale_value() {
  
  return scale_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QuantizeFactor::release_scale_value() {
  // @@protoc_insertion_point(field_release:domi.QuantizeFactor.scale_value)
  return scale_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QuantizeFactor::set_allocated_scale_value(std::string* scale_value) {
  if (scale_value != nullptr) {
    
  } else {
    
  }
  scale_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scale_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:domi.QuantizeFactor.scale_value)
}

// int64 scale_offset = 3;
inline void QuantizeFactor::clear_scale_offset() {
  scale_offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuantizeFactor::_internal_scale_offset() const {
  return scale_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuantizeFactor::scale_offset() const {
  // @@protoc_insertion_point(field_get:domi.QuantizeFactor.scale_offset)
  return _internal_scale_offset();
}
inline void QuantizeFactor::_internal_set_scale_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  scale_offset_ = value;
}
inline void QuantizeFactor::set_scale_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_scale_offset(value);
  // @@protoc_insertion_point(field_set:domi.QuantizeFactor.scale_offset)
}

// bytes offset_data_value = 4;
inline void QuantizeFactor::clear_offset_data_value() {
  offset_data_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QuantizeFactor::offset_data_value() const {
  // @@protoc_insertion_point(field_get:domi.QuantizeFactor.offset_data_value)
  return _internal_offset_data_value();
}
inline void QuantizeFactor::set_offset_data_value(const std::string& value) {
  _internal_set_offset_data_value(value);
  // @@protoc_insertion_point(field_set:domi.QuantizeFactor.offset_data_value)
}
inline std::string* QuantizeFactor::mutable_offset_data_value() {
  // @@protoc_insertion_point(field_mutable:domi.QuantizeFactor.offset_data_value)
  return _internal_mutable_offset_data_value();
}
inline const std::string& QuantizeFactor::_internal_offset_data_value() const {
  return offset_data_value_.Get();
}
inline void QuantizeFactor::_internal_set_offset_data_value(const std::string& value) {
  
  offset_data_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QuantizeFactor::set_offset_data_value(std::string&& value) {
  
  offset_data_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:domi.QuantizeFactor.offset_data_value)
}
inline void QuantizeFactor::set_offset_data_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  offset_data_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:domi.QuantizeFactor.offset_data_value)
}
inline void QuantizeFactor::set_offset_data_value(const void* value,
    size_t size) {
  
  offset_data_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:domi.QuantizeFactor.offset_data_value)
}
inline std::string* QuantizeFactor::_internal_mutable_offset_data_value() {
  
  return offset_data_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QuantizeFactor::release_offset_data_value() {
  // @@protoc_insertion_point(field_release:domi.QuantizeFactor.offset_data_value)
  return offset_data_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QuantizeFactor::set_allocated_offset_data_value(std::string* offset_data_value) {
  if (offset_data_value != nullptr) {
    
  } else {
    
  }
  offset_data_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), offset_data_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:domi.QuantizeFactor.offset_data_value)
}

// int64 offset_data_offset = 5;
inline void QuantizeFactor::clear_offset_data_offset() {
  offset_data_offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuantizeFactor::_internal_offset_data_offset() const {
  return offset_data_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuantizeFactor::offset_data_offset() const {
  // @@protoc_insertion_point(field_get:domi.QuantizeFactor.offset_data_offset)
  return _internal_offset_data_offset();
}
inline void QuantizeFactor::_internal_set_offset_data_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_data_offset_ = value;
}
inline void QuantizeFactor::set_offset_data_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset_data_offset(value);
  // @@protoc_insertion_point(field_set:domi.QuantizeFactor.offset_data_offset)
}

// bytes offset_weight_value = 6;
inline void QuantizeFactor::clear_offset_weight_value() {
  offset_weight_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QuantizeFactor::offset_weight_value() const {
  // @@protoc_insertion_point(field_get:domi.QuantizeFactor.offset_weight_value)
  return _internal_offset_weight_value();
}
inline void QuantizeFactor::set_offset_weight_value(const std::string& value) {
  _internal_set_offset_weight_value(value);
  // @@protoc_insertion_point(field_set:domi.QuantizeFactor.offset_weight_value)
}
inline std::string* QuantizeFactor::mutable_offset_weight_value() {
  // @@protoc_insertion_point(field_mutable:domi.QuantizeFactor.offset_weight_value)
  return _internal_mutable_offset_weight_value();
}
inline const std::string& QuantizeFactor::_internal_offset_weight_value() const {
  return offset_weight_value_.Get();
}
inline void QuantizeFactor::_internal_set_offset_weight_value(const std::string& value) {
  
  offset_weight_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QuantizeFactor::set_offset_weight_value(std::string&& value) {
  
  offset_weight_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:domi.QuantizeFactor.offset_weight_value)
}
inline void QuantizeFactor::set_offset_weight_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  offset_weight_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:domi.QuantizeFactor.offset_weight_value)
}
inline void QuantizeFactor::set_offset_weight_value(const void* value,
    size_t size) {
  
  offset_weight_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:domi.QuantizeFactor.offset_weight_value)
}
inline std::string* QuantizeFactor::_internal_mutable_offset_weight_value() {
  
  return offset_weight_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QuantizeFactor::release_offset_weight_value() {
  // @@protoc_insertion_point(field_release:domi.QuantizeFactor.offset_weight_value)
  return offset_weight_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QuantizeFactor::set_allocated_offset_weight_value(std::string* offset_weight_value) {
  if (offset_weight_value != nullptr) {
    
  } else {
    
  }
  offset_weight_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), offset_weight_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:domi.QuantizeFactor.offset_weight_value)
}

// int64 offset_weight_offset = 7;
inline void QuantizeFactor::clear_offset_weight_offset() {
  offset_weight_offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuantizeFactor::_internal_offset_weight_offset() const {
  return offset_weight_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuantizeFactor::offset_weight_offset() const {
  // @@protoc_insertion_point(field_get:domi.QuantizeFactor.offset_weight_offset)
  return _internal_offset_weight_offset();
}
inline void QuantizeFactor::_internal_set_offset_weight_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_weight_offset_ = value;
}
inline void QuantizeFactor::set_offset_weight_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset_weight_offset(value);
  // @@protoc_insertion_point(field_set:domi.QuantizeFactor.offset_weight_offset)
}

// bytes offset_pad_value = 8;
inline void QuantizeFactor::clear_offset_pad_value() {
  offset_pad_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QuantizeFactor::offset_pad_value() const {
  // @@protoc_insertion_point(field_get:domi.QuantizeFactor.offset_pad_value)
  return _internal_offset_pad_value();
}
inline void QuantizeFactor::set_offset_pad_value(const std::string& value) {
  _internal_set_offset_pad_value(value);
  // @@protoc_insertion_point(field_set:domi.QuantizeFactor.offset_pad_value)
}
inline std::string* QuantizeFactor::mutable_offset_pad_value() {
  // @@protoc_insertion_point(field_mutable:domi.QuantizeFactor.offset_pad_value)
  return _internal_mutable_offset_pad_value();
}
inline const std::string& QuantizeFactor::_internal_offset_pad_value() const {
  return offset_pad_value_.Get();
}
inline void QuantizeFactor::_internal_set_offset_pad_value(const std::string& value) {
  
  offset_pad_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QuantizeFactor::set_offset_pad_value(std::string&& value) {
  
  offset_pad_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:domi.QuantizeFactor.offset_pad_value)
}
inline void QuantizeFactor::set_offset_pad_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  offset_pad_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:domi.QuantizeFactor.offset_pad_value)
}
inline void QuantizeFactor::set_offset_pad_value(const void* value,
    size_t size) {
  
  offset_pad_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:domi.QuantizeFactor.offset_pad_value)
}
inline std::string* QuantizeFactor::_internal_mutable_offset_pad_value() {
  
  return offset_pad_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QuantizeFactor::release_offset_pad_value() {
  // @@protoc_insertion_point(field_release:domi.QuantizeFactor.offset_pad_value)
  return offset_pad_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QuantizeFactor::set_allocated_offset_pad_value(std::string* offset_pad_value) {
  if (offset_pad_value != nullptr) {
    
  } else {
    
  }
  offset_pad_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), offset_pad_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:domi.QuantizeFactor.offset_pad_value)
}

// int64 offset_pad_offset = 9;
inline void QuantizeFactor::clear_offset_pad_offset() {
  offset_pad_offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuantizeFactor::_internal_offset_pad_offset() const {
  return offset_pad_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuantizeFactor::offset_pad_offset() const {
  // @@protoc_insertion_point(field_get:domi.QuantizeFactor.offset_pad_offset)
  return _internal_offset_pad_offset();
}
inline void QuantizeFactor::_internal_set_offset_pad_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_pad_offset_ = value;
}
inline void QuantizeFactor::set_offset_pad_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset_pad_offset(value);
  // @@protoc_insertion_point(field_set:domi.QuantizeFactor.offset_pad_offset)
}

// -------------------------------------------------------------------

// QuantizeCalcFactor

// bytes offsetw = 1;
inline void QuantizeCalcFactor::clear_offsetw() {
  offsetw_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QuantizeCalcFactor::offsetw() const {
  // @@protoc_insertion_point(field_get:domi.QuantizeCalcFactor.offsetw)
  return _internal_offsetw();
}
inline void QuantizeCalcFactor::set_offsetw(const std::string& value) {
  _internal_set_offsetw(value);
  // @@protoc_insertion_point(field_set:domi.QuantizeCalcFactor.offsetw)
}
inline std::string* QuantizeCalcFactor::mutable_offsetw() {
  // @@protoc_insertion_point(field_mutable:domi.QuantizeCalcFactor.offsetw)
  return _internal_mutable_offsetw();
}
inline const std::string& QuantizeCalcFactor::_internal_offsetw() const {
  return offsetw_.Get();
}
inline void QuantizeCalcFactor::_internal_set_offsetw(const std::string& value) {
  
  offsetw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QuantizeCalcFactor::set_offsetw(std::string&& value) {
  
  offsetw_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:domi.QuantizeCalcFactor.offsetw)
}
inline void QuantizeCalcFactor::set_offsetw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  offsetw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:domi.QuantizeCalcFactor.offsetw)
}
inline void QuantizeCalcFactor::set_offsetw(const void* value,
    size_t size) {
  
  offsetw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:domi.QuantizeCalcFactor.offsetw)
}
inline std::string* QuantizeCalcFactor::_internal_mutable_offsetw() {
  
  return offsetw_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QuantizeCalcFactor::release_offsetw() {
  // @@protoc_insertion_point(field_release:domi.QuantizeCalcFactor.offsetw)
  return offsetw_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QuantizeCalcFactor::set_allocated_offsetw(std::string* offsetw) {
  if (offsetw != nullptr) {
    
  } else {
    
  }
  offsetw_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), offsetw,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:domi.QuantizeCalcFactor.offsetw)
}

// int64 offsetw_offset = 2;
inline void QuantizeCalcFactor::clear_offsetw_offset() {
  offsetw_offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuantizeCalcFactor::_internal_offsetw_offset() const {
  return offsetw_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuantizeCalcFactor::offsetw_offset() const {
  // @@protoc_insertion_point(field_get:domi.QuantizeCalcFactor.offsetw_offset)
  return _internal_offsetw_offset();
}
inline void QuantizeCalcFactor::_internal_set_offsetw_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offsetw_offset_ = value;
}
inline void QuantizeCalcFactor::set_offsetw_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offsetw_offset(value);
  // @@protoc_insertion_point(field_set:domi.QuantizeCalcFactor.offsetw_offset)
}

// bytes offsetd = 3;
inline void QuantizeCalcFactor::clear_offsetd() {
  offsetd_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QuantizeCalcFactor::offsetd() const {
  // @@protoc_insertion_point(field_get:domi.QuantizeCalcFactor.offsetd)
  return _internal_offsetd();
}
inline void QuantizeCalcFactor::set_offsetd(const std::string& value) {
  _internal_set_offsetd(value);
  // @@protoc_insertion_point(field_set:domi.QuantizeCalcFactor.offsetd)
}
inline std::string* QuantizeCalcFactor::mutable_offsetd() {
  // @@protoc_insertion_point(field_mutable:domi.QuantizeCalcFactor.offsetd)
  return _internal_mutable_offsetd();
}
inline const std::string& QuantizeCalcFactor::_internal_offsetd() const {
  return offsetd_.Get();
}
inline void QuantizeCalcFactor::_internal_set_offsetd(const std::string& value) {
  
  offsetd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QuantizeCalcFactor::set_offsetd(std::string&& value) {
  
  offsetd_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:domi.QuantizeCalcFactor.offsetd)
}
inline void QuantizeCalcFactor::set_offsetd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  offsetd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:domi.QuantizeCalcFactor.offsetd)
}
inline void QuantizeCalcFactor::set_offsetd(const void* value,
    size_t size) {
  
  offsetd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:domi.QuantizeCalcFactor.offsetd)
}
inline std::string* QuantizeCalcFactor::_internal_mutable_offsetd() {
  
  return offsetd_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QuantizeCalcFactor::release_offsetd() {
  // @@protoc_insertion_point(field_release:domi.QuantizeCalcFactor.offsetd)
  return offsetd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QuantizeCalcFactor::set_allocated_offsetd(std::string* offsetd) {
  if (offsetd != nullptr) {
    
  } else {
    
  }
  offsetd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), offsetd,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:domi.QuantizeCalcFactor.offsetd)
}

// int64 offsetd_offset = 4;
inline void QuantizeCalcFactor::clear_offsetd_offset() {
  offsetd_offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuantizeCalcFactor::_internal_offsetd_offset() const {
  return offsetd_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuantizeCalcFactor::offsetd_offset() const {
  // @@protoc_insertion_point(field_get:domi.QuantizeCalcFactor.offsetd_offset)
  return _internal_offsetd_offset();
}
inline void QuantizeCalcFactor::_internal_set_offsetd_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offsetd_offset_ = value;
}
inline void QuantizeCalcFactor::set_offsetd_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offsetd_offset(value);
  // @@protoc_insertion_point(field_set:domi.QuantizeCalcFactor.offsetd_offset)
}

// bytes scalereq = 5;
inline void QuantizeCalcFactor::clear_scalereq() {
  scalereq_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QuantizeCalcFactor::scalereq() const {
  // @@protoc_insertion_point(field_get:domi.QuantizeCalcFactor.scalereq)
  return _internal_scalereq();
}
inline void QuantizeCalcFactor::set_scalereq(const std::string& value) {
  _internal_set_scalereq(value);
  // @@protoc_insertion_point(field_set:domi.QuantizeCalcFactor.scalereq)
}
inline std::string* QuantizeCalcFactor::mutable_scalereq() {
  // @@protoc_insertion_point(field_mutable:domi.QuantizeCalcFactor.scalereq)
  return _internal_mutable_scalereq();
}
inline const std::string& QuantizeCalcFactor::_internal_scalereq() const {
  return scalereq_.Get();
}
inline void QuantizeCalcFactor::_internal_set_scalereq(const std::string& value) {
  
  scalereq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QuantizeCalcFactor::set_scalereq(std::string&& value) {
  
  scalereq_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:domi.QuantizeCalcFactor.scalereq)
}
inline void QuantizeCalcFactor::set_scalereq(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scalereq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:domi.QuantizeCalcFactor.scalereq)
}
inline void QuantizeCalcFactor::set_scalereq(const void* value,
    size_t size) {
  
  scalereq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:domi.QuantizeCalcFactor.scalereq)
}
inline std::string* QuantizeCalcFactor::_internal_mutable_scalereq() {
  
  return scalereq_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QuantizeCalcFactor::release_scalereq() {
  // @@protoc_insertion_point(field_release:domi.QuantizeCalcFactor.scalereq)
  return scalereq_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QuantizeCalcFactor::set_allocated_scalereq(std::string* scalereq) {
  if (scalereq != nullptr) {
    
  } else {
    
  }
  scalereq_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scalereq,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:domi.QuantizeCalcFactor.scalereq)
}

// int64 scaledreq_offset = 6;
inline void QuantizeCalcFactor::clear_scaledreq_offset() {
  scaledreq_offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuantizeCalcFactor::_internal_scaledreq_offset() const {
  return scaledreq_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuantizeCalcFactor::scaledreq_offset() const {
  // @@protoc_insertion_point(field_get:domi.QuantizeCalcFactor.scaledreq_offset)
  return _internal_scaledreq_offset();
}
inline void QuantizeCalcFactor::_internal_set_scaledreq_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  scaledreq_offset_ = value;
}
inline void QuantizeCalcFactor::set_scaledreq_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_scaledreq_offset(value);
  // @@protoc_insertion_point(field_set:domi.QuantizeCalcFactor.scaledreq_offset)
}

// bytes offsetdnext = 7;
inline void QuantizeCalcFactor::clear_offsetdnext() {
  offsetdnext_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QuantizeCalcFactor::offsetdnext() const {
  // @@protoc_insertion_point(field_get:domi.QuantizeCalcFactor.offsetdnext)
  return _internal_offsetdnext();
}
inline void QuantizeCalcFactor::set_offsetdnext(const std::string& value) {
  _internal_set_offsetdnext(value);
  // @@protoc_insertion_point(field_set:domi.QuantizeCalcFactor.offsetdnext)
}
inline std::string* QuantizeCalcFactor::mutable_offsetdnext() {
  // @@protoc_insertion_point(field_mutable:domi.QuantizeCalcFactor.offsetdnext)
  return _internal_mutable_offsetdnext();
}
inline const std::string& QuantizeCalcFactor::_internal_offsetdnext() const {
  return offsetdnext_.Get();
}
inline void QuantizeCalcFactor::_internal_set_offsetdnext(const std::string& value) {
  
  offsetdnext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QuantizeCalcFactor::set_offsetdnext(std::string&& value) {
  
  offsetdnext_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:domi.QuantizeCalcFactor.offsetdnext)
}
inline void QuantizeCalcFactor::set_offsetdnext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  offsetdnext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:domi.QuantizeCalcFactor.offsetdnext)
}
inline void QuantizeCalcFactor::set_offsetdnext(const void* value,
    size_t size) {
  
  offsetdnext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:domi.QuantizeCalcFactor.offsetdnext)
}
inline std::string* QuantizeCalcFactor::_internal_mutable_offsetdnext() {
  
  return offsetdnext_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QuantizeCalcFactor::release_offsetdnext() {
  // @@protoc_insertion_point(field_release:domi.QuantizeCalcFactor.offsetdnext)
  return offsetdnext_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QuantizeCalcFactor::set_allocated_offsetdnext(std::string* offsetdnext) {
  if (offsetdnext != nullptr) {
    
  } else {
    
  }
  offsetdnext_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), offsetdnext,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:domi.QuantizeCalcFactor.offsetdnext)
}

// int64 offsetdnext_offset = 8;
inline void QuantizeCalcFactor::clear_offsetdnext_offset() {
  offsetdnext_offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuantizeCalcFactor::_internal_offsetdnext_offset() const {
  return offsetdnext_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuantizeCalcFactor::offsetdnext_offset() const {
  // @@protoc_insertion_point(field_get:domi.QuantizeCalcFactor.offsetdnext_offset)
  return _internal_offsetdnext_offset();
}
inline void QuantizeCalcFactor::_internal_set_offsetdnext_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offsetdnext_offset_ = value;
}
inline void QuantizeCalcFactor::set_offsetdnext_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offsetdnext_offset(value);
  // @@protoc_insertion_point(field_set:domi.QuantizeCalcFactor.offsetdnext_offset)
}

// -------------------------------------------------------------------

// QuantizeFactorParams

// .domi.QuantizeAlgorithm quantize_algo = 1;
inline void QuantizeFactorParams::clear_quantize_algo() {
  quantize_algo_ = 0;
}
inline ::domi::QuantizeAlgorithm QuantizeFactorParams::_internal_quantize_algo() const {
  return static_cast< ::domi::QuantizeAlgorithm >(quantize_algo_);
}
inline ::domi::QuantizeAlgorithm QuantizeFactorParams::quantize_algo() const {
  // @@protoc_insertion_point(field_get:domi.QuantizeFactorParams.quantize_algo)
  return _internal_quantize_algo();
}
inline void QuantizeFactorParams::_internal_set_quantize_algo(::domi::QuantizeAlgorithm value) {
  
  quantize_algo_ = value;
}
inline void QuantizeFactorParams::set_quantize_algo(::domi::QuantizeAlgorithm value) {
  _internal_set_quantize_algo(value);
  // @@protoc_insertion_point(field_set:domi.QuantizeFactorParams.quantize_algo)
}

// .domi.QuantizeScaleType scale_type = 2;
inline void QuantizeFactorParams::clear_scale_type() {
  scale_type_ = 0;
}
inline ::domi::QuantizeScaleType QuantizeFactorParams::_internal_scale_type() const {
  return static_cast< ::domi::QuantizeScaleType >(scale_type_);
}
inline ::domi::QuantizeScaleType QuantizeFactorParams::scale_type() const {
  // @@protoc_insertion_point(field_get:domi.QuantizeFactorParams.scale_type)
  return _internal_scale_type();
}
inline void QuantizeFactorParams::_internal_set_scale_type(::domi::QuantizeScaleType value) {
  
  scale_type_ = value;
}
inline void QuantizeFactorParams::set_scale_type(::domi::QuantizeScaleType value) {
  _internal_set_scale_type(value);
  // @@protoc_insertion_point(field_set:domi.QuantizeFactorParams.scale_type)
}

// .domi.QuantizeFactor quantize_param = 3;
inline bool QuantizeFactorParams::_internal_has_quantize_param() const {
  return this != internal_default_instance() && quantize_param_ != nullptr;
}
inline bool QuantizeFactorParams::has_quantize_param() const {
  return _internal_has_quantize_param();
}
inline void QuantizeFactorParams::clear_quantize_param() {
  if (GetArena() == nullptr && quantize_param_ != nullptr) {
    delete quantize_param_;
  }
  quantize_param_ = nullptr;
}
inline const ::domi::QuantizeFactor& QuantizeFactorParams::_internal_quantize_param() const {
  const ::domi::QuantizeFactor* p = quantize_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::domi::QuantizeFactor*>(
      &::domi::_QuantizeFactor_default_instance_);
}
inline const ::domi::QuantizeFactor& QuantizeFactorParams::quantize_param() const {
  // @@protoc_insertion_point(field_get:domi.QuantizeFactorParams.quantize_param)
  return _internal_quantize_param();
}
inline void QuantizeFactorParams::unsafe_arena_set_allocated_quantize_param(
    ::domi::QuantizeFactor* quantize_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quantize_param_);
  }
  quantize_param_ = quantize_param;
  if (quantize_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.QuantizeFactorParams.quantize_param)
}
inline ::domi::QuantizeFactor* QuantizeFactorParams::release_quantize_param() {
  
  ::domi::QuantizeFactor* temp = quantize_param_;
  quantize_param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::domi::QuantizeFactor* QuantizeFactorParams::unsafe_arena_release_quantize_param() {
  // @@protoc_insertion_point(field_release:domi.QuantizeFactorParams.quantize_param)
  
  ::domi::QuantizeFactor* temp = quantize_param_;
  quantize_param_ = nullptr;
  return temp;
}
inline ::domi::QuantizeFactor* QuantizeFactorParams::_internal_mutable_quantize_param() {
  
  if (quantize_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::domi::QuantizeFactor>(GetArena());
    quantize_param_ = p;
  }
  return quantize_param_;
}
inline ::domi::QuantizeFactor* QuantizeFactorParams::mutable_quantize_param() {
  // @@protoc_insertion_point(field_mutable:domi.QuantizeFactorParams.quantize_param)
  return _internal_mutable_quantize_param();
}
inline void QuantizeFactorParams::set_allocated_quantize_param(::domi::QuantizeFactor* quantize_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete quantize_param_;
  }
  if (quantize_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(quantize_param);
    if (message_arena != submessage_arena) {
      quantize_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quantize_param, submessage_arena);
    }
    
  } else {
    
  }
  quantize_param_ = quantize_param;
  // @@protoc_insertion_point(field_set_allocated:domi.QuantizeFactorParams.quantize_param)
}

// .domi.QuantizeFactor dequantize_param = 4;
inline bool QuantizeFactorParams::_internal_has_dequantize_param() const {
  return this != internal_default_instance() && dequantize_param_ != nullptr;
}
inline bool QuantizeFactorParams::has_dequantize_param() const {
  return _internal_has_dequantize_param();
}
inline void QuantizeFactorParams::clear_dequantize_param() {
  if (GetArena() == nullptr && dequantize_param_ != nullptr) {
    delete dequantize_param_;
  }
  dequantize_param_ = nullptr;
}
inline const ::domi::QuantizeFactor& QuantizeFactorParams::_internal_dequantize_param() const {
  const ::domi::QuantizeFactor* p = dequantize_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::domi::QuantizeFactor*>(
      &::domi::_QuantizeFactor_default_instance_);
}
inline const ::domi::QuantizeFactor& QuantizeFactorParams::dequantize_param() const {
  // @@protoc_insertion_point(field_get:domi.QuantizeFactorParams.dequantize_param)
  return _internal_dequantize_param();
}
inline void QuantizeFactorParams::unsafe_arena_set_allocated_dequantize_param(
    ::domi::QuantizeFactor* dequantize_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dequantize_param_);
  }
  dequantize_param_ = dequantize_param;
  if (dequantize_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.QuantizeFactorParams.dequantize_param)
}
inline ::domi::QuantizeFactor* QuantizeFactorParams::release_dequantize_param() {
  
  ::domi::QuantizeFactor* temp = dequantize_param_;
  dequantize_param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::domi::QuantizeFactor* QuantizeFactorParams::unsafe_arena_release_dequantize_param() {
  // @@protoc_insertion_point(field_release:domi.QuantizeFactorParams.dequantize_param)
  
  ::domi::QuantizeFactor* temp = dequantize_param_;
  dequantize_param_ = nullptr;
  return temp;
}
inline ::domi::QuantizeFactor* QuantizeFactorParams::_internal_mutable_dequantize_param() {
  
  if (dequantize_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::domi::QuantizeFactor>(GetArena());
    dequantize_param_ = p;
  }
  return dequantize_param_;
}
inline ::domi::QuantizeFactor* QuantizeFactorParams::mutable_dequantize_param() {
  // @@protoc_insertion_point(field_mutable:domi.QuantizeFactorParams.dequantize_param)
  return _internal_mutable_dequantize_param();
}
inline void QuantizeFactorParams::set_allocated_dequantize_param(::domi::QuantizeFactor* dequantize_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dequantize_param_;
  }
  if (dequantize_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dequantize_param);
    if (message_arena != submessage_arena) {
      dequantize_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dequantize_param, submessage_arena);
    }
    
  } else {
    
  }
  dequantize_param_ = dequantize_param;
  // @@protoc_insertion_point(field_set_allocated:domi.QuantizeFactorParams.dequantize_param)
}

// .domi.QuantizeFactor requantize_param = 5;
inline bool QuantizeFactorParams::_internal_has_requantize_param() const {
  return this != internal_default_instance() && requantize_param_ != nullptr;
}
inline bool QuantizeFactorParams::has_requantize_param() const {
  return _internal_has_requantize_param();
}
inline void QuantizeFactorParams::clear_requantize_param() {
  if (GetArena() == nullptr && requantize_param_ != nullptr) {
    delete requantize_param_;
  }
  requantize_param_ = nullptr;
}
inline const ::domi::QuantizeFactor& QuantizeFactorParams::_internal_requantize_param() const {
  const ::domi::QuantizeFactor* p = requantize_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::domi::QuantizeFactor*>(
      &::domi::_QuantizeFactor_default_instance_);
}
inline const ::domi::QuantizeFactor& QuantizeFactorParams::requantize_param() const {
  // @@protoc_insertion_point(field_get:domi.QuantizeFactorParams.requantize_param)
  return _internal_requantize_param();
}
inline void QuantizeFactorParams::unsafe_arena_set_allocated_requantize_param(
    ::domi::QuantizeFactor* requantize_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requantize_param_);
  }
  requantize_param_ = requantize_param;
  if (requantize_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.QuantizeFactorParams.requantize_param)
}
inline ::domi::QuantizeFactor* QuantizeFactorParams::release_requantize_param() {
  
  ::domi::QuantizeFactor* temp = requantize_param_;
  requantize_param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::domi::QuantizeFactor* QuantizeFactorParams::unsafe_arena_release_requantize_param() {
  // @@protoc_insertion_point(field_release:domi.QuantizeFactorParams.requantize_param)
  
  ::domi::QuantizeFactor* temp = requantize_param_;
  requantize_param_ = nullptr;
  return temp;
}
inline ::domi::QuantizeFactor* QuantizeFactorParams::_internal_mutable_requantize_param() {
  
  if (requantize_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::domi::QuantizeFactor>(GetArena());
    requantize_param_ = p;
  }
  return requantize_param_;
}
inline ::domi::QuantizeFactor* QuantizeFactorParams::mutable_requantize_param() {
  // @@protoc_insertion_point(field_mutable:domi.QuantizeFactorParams.requantize_param)
  return _internal_mutable_requantize_param();
}
inline void QuantizeFactorParams::set_allocated_requantize_param(::domi::QuantizeFactor* requantize_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete requantize_param_;
  }
  if (requantize_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requantize_param);
    if (message_arena != submessage_arena) {
      requantize_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requantize_param, submessage_arena);
    }
    
  } else {
    
  }
  requantize_param_ = requantize_param;
  // @@protoc_insertion_point(field_set_allocated:domi.QuantizeFactorParams.requantize_param)
}

// .domi.QuantizeCalcFactor quantizecalc_param = 6;
inline bool QuantizeFactorParams::_internal_has_quantizecalc_param() const {
  return this != internal_default_instance() && quantizecalc_param_ != nullptr;
}
inline bool QuantizeFactorParams::has_quantizecalc_param() const {
  return _internal_has_quantizecalc_param();
}
inline void QuantizeFactorParams::clear_quantizecalc_param() {
  if (GetArena() == nullptr && quantizecalc_param_ != nullptr) {
    delete quantizecalc_param_;
  }
  quantizecalc_param_ = nullptr;
}
inline const ::domi::QuantizeCalcFactor& QuantizeFactorParams::_internal_quantizecalc_param() const {
  const ::domi::QuantizeCalcFactor* p = quantizecalc_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::domi::QuantizeCalcFactor*>(
      &::domi::_QuantizeCalcFactor_default_instance_);
}
inline const ::domi::QuantizeCalcFactor& QuantizeFactorParams::quantizecalc_param() const {
  // @@protoc_insertion_point(field_get:domi.QuantizeFactorParams.quantizecalc_param)
  return _internal_quantizecalc_param();
}
inline void QuantizeFactorParams::unsafe_arena_set_allocated_quantizecalc_param(
    ::domi::QuantizeCalcFactor* quantizecalc_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quantizecalc_param_);
  }
  quantizecalc_param_ = quantizecalc_param;
  if (quantizecalc_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.QuantizeFactorParams.quantizecalc_param)
}
inline ::domi::QuantizeCalcFactor* QuantizeFactorParams::release_quantizecalc_param() {
  
  ::domi::QuantizeCalcFactor* temp = quantizecalc_param_;
  quantizecalc_param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::domi::QuantizeCalcFactor* QuantizeFactorParams::unsafe_arena_release_quantizecalc_param() {
  // @@protoc_insertion_point(field_release:domi.QuantizeFactorParams.quantizecalc_param)
  
  ::domi::QuantizeCalcFactor* temp = quantizecalc_param_;
  quantizecalc_param_ = nullptr;
  return temp;
}
inline ::domi::QuantizeCalcFactor* QuantizeFactorParams::_internal_mutable_quantizecalc_param() {
  
  if (quantizecalc_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::domi::QuantizeCalcFactor>(GetArena());
    quantizecalc_param_ = p;
  }
  return quantizecalc_param_;
}
inline ::domi::QuantizeCalcFactor* QuantizeFactorParams::mutable_quantizecalc_param() {
  // @@protoc_insertion_point(field_mutable:domi.QuantizeFactorParams.quantizecalc_param)
  return _internal_mutable_quantizecalc_param();
}
inline void QuantizeFactorParams::set_allocated_quantizecalc_param(::domi::QuantizeCalcFactor* quantizecalc_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete quantizecalc_param_;
  }
  if (quantizecalc_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(quantizecalc_param);
    if (message_arena != submessage_arena) {
      quantizecalc_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quantizecalc_param, submessage_arena);
    }
    
  } else {
    
  }
  quantizecalc_param_ = quantizecalc_param;
  // @@protoc_insertion_point(field_set_allocated:domi.QuantizeFactorParams.quantizecalc_param)
}

// -------------------------------------------------------------------

// ConvolutionOpParams

// int32 mode = 1;
inline void ConvolutionOpParams::clear_mode() {
  mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConvolutionOpParams::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConvolutionOpParams::mode() const {
  // @@protoc_insertion_point(field_get:domi.ConvolutionOpParams.mode)
  return _internal_mode();
}
inline void ConvolutionOpParams::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mode_ = value;
}
inline void ConvolutionOpParams::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:domi.ConvolutionOpParams.mode)
}

// int32 algo = 2;
inline void ConvolutionOpParams::clear_algo() {
  algo_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConvolutionOpParams::_internal_algo() const {
  return algo_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConvolutionOpParams::algo() const {
  // @@protoc_insertion_point(field_get:domi.ConvolutionOpParams.algo)
  return _internal_algo();
}
inline void ConvolutionOpParams::_internal_set_algo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  algo_ = value;
}
inline void ConvolutionOpParams::set_algo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_algo(value);
  // @@protoc_insertion_point(field_set:domi.ConvolutionOpParams.algo)
}

// int32 pad_mode = 3;
inline void ConvolutionOpParams::clear_pad_mode() {
  pad_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConvolutionOpParams::_internal_pad_mode() const {
  return pad_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConvolutionOpParams::pad_mode() const {
  // @@protoc_insertion_point(field_get:domi.ConvolutionOpParams.pad_mode)
  return _internal_pad_mode();
}
inline void ConvolutionOpParams::_internal_set_pad_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pad_mode_ = value;
}
inline void ConvolutionOpParams::set_pad_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pad_mode(value);
  // @@protoc_insertion_point(field_set:domi.ConvolutionOpParams.pad_mode)
}

// uint32 group = 4;
inline void ConvolutionOpParams::clear_group() {
  group_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionOpParams::_internal_group() const {
  return group_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionOpParams::group() const {
  // @@protoc_insertion_point(field_get:domi.ConvolutionOpParams.group)
  return _internal_group();
}
inline void ConvolutionOpParams::_internal_set_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  group_ = value;
}
inline void ConvolutionOpParams::set_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:domi.ConvolutionOpParams.group)
}

// uint32 num_output = 5;
inline void ConvolutionOpParams::clear_num_output() {
  num_output_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionOpParams::_internal_num_output() const {
  return num_output_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionOpParams::num_output() const {
  // @@protoc_insertion_point(field_get:domi.ConvolutionOpParams.num_output)
  return _internal_num_output();
}
inline void ConvolutionOpParams::_internal_set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_output_ = value;
}
inline void ConvolutionOpParams::set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_output(value);
  // @@protoc_insertion_point(field_set:domi.ConvolutionOpParams.num_output)
}

// repeated uint32 pad = 10;
inline int ConvolutionOpParams::_internal_pad_size() const {
  return pad_.size();
}
inline int ConvolutionOpParams::pad_size() const {
  return _internal_pad_size();
}
inline void ConvolutionOpParams::clear_pad() {
  pad_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionOpParams::_internal_pad(int index) const {
  return pad_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionOpParams::pad(int index) const {
  // @@protoc_insertion_point(field_get:domi.ConvolutionOpParams.pad)
  return _internal_pad(index);
}
inline void ConvolutionOpParams::set_pad(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  pad_.Set(index, value);
  // @@protoc_insertion_point(field_set:domi.ConvolutionOpParams.pad)
}
inline void ConvolutionOpParams::_internal_add_pad(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  pad_.Add(value);
}
inline void ConvolutionOpParams::add_pad(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_pad(value);
  // @@protoc_insertion_point(field_add:domi.ConvolutionOpParams.pad)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ConvolutionOpParams::_internal_pad() const {
  return pad_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ConvolutionOpParams::pad() const {
  // @@protoc_insertion_point(field_list:domi.ConvolutionOpParams.pad)
  return _internal_pad();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ConvolutionOpParams::_internal_mutable_pad() {
  return &pad_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ConvolutionOpParams::mutable_pad() {
  // @@protoc_insertion_point(field_mutable_list:domi.ConvolutionOpParams.pad)
  return _internal_mutable_pad();
}

// repeated uint32 stride = 11;
inline int ConvolutionOpParams::_internal_stride_size() const {
  return stride_.size();
}
inline int ConvolutionOpParams::stride_size() const {
  return _internal_stride_size();
}
inline void ConvolutionOpParams::clear_stride() {
  stride_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionOpParams::_internal_stride(int index) const {
  return stride_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionOpParams::stride(int index) const {
  // @@protoc_insertion_point(field_get:domi.ConvolutionOpParams.stride)
  return _internal_stride(index);
}
inline void ConvolutionOpParams::set_stride(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:domi.ConvolutionOpParams.stride)
}
inline void ConvolutionOpParams::_internal_add_stride(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  stride_.Add(value);
}
inline void ConvolutionOpParams::add_stride(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_stride(value);
  // @@protoc_insertion_point(field_add:domi.ConvolutionOpParams.stride)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ConvolutionOpParams::_internal_stride() const {
  return stride_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ConvolutionOpParams::stride() const {
  // @@protoc_insertion_point(field_list:domi.ConvolutionOpParams.stride)
  return _internal_stride();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ConvolutionOpParams::_internal_mutable_stride() {
  return &stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ConvolutionOpParams::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:domi.ConvolutionOpParams.stride)
  return _internal_mutable_stride();
}

// repeated uint32 dilation = 12;
inline int ConvolutionOpParams::_internal_dilation_size() const {
  return dilation_.size();
}
inline int ConvolutionOpParams::dilation_size() const {
  return _internal_dilation_size();
}
inline void ConvolutionOpParams::clear_dilation() {
  dilation_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionOpParams::_internal_dilation(int index) const {
  return dilation_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionOpParams::dilation(int index) const {
  // @@protoc_insertion_point(field_get:domi.ConvolutionOpParams.dilation)
  return _internal_dilation(index);
}
inline void ConvolutionOpParams::set_dilation(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  dilation_.Set(index, value);
  // @@protoc_insertion_point(field_set:domi.ConvolutionOpParams.dilation)
}
inline void ConvolutionOpParams::_internal_add_dilation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  dilation_.Add(value);
}
inline void ConvolutionOpParams::add_dilation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_dilation(value);
  // @@protoc_insertion_point(field_add:domi.ConvolutionOpParams.dilation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ConvolutionOpParams::_internal_dilation() const {
  return dilation_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ConvolutionOpParams::dilation() const {
  // @@protoc_insertion_point(field_list:domi.ConvolutionOpParams.dilation)
  return _internal_dilation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ConvolutionOpParams::_internal_mutable_dilation() {
  return &dilation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ConvolutionOpParams::mutable_dilation() {
  // @@protoc_insertion_point(field_mutable_list:domi.ConvolutionOpParams.dilation)
  return _internal_mutable_dilation();
}

// repeated uint32 kernel = 13;
inline int ConvolutionOpParams::_internal_kernel_size() const {
  return kernel_.size();
}
inline int ConvolutionOpParams::kernel_size() const {
  return _internal_kernel_size();
}
inline void ConvolutionOpParams::clear_kernel() {
  kernel_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionOpParams::_internal_kernel(int index) const {
  return kernel_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionOpParams::kernel(int index) const {
  // @@protoc_insertion_point(field_get:domi.ConvolutionOpParams.kernel)
  return _internal_kernel(index);
}
inline void ConvolutionOpParams::set_kernel(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  kernel_.Set(index, value);
  // @@protoc_insertion_point(field_set:domi.ConvolutionOpParams.kernel)
}
inline void ConvolutionOpParams::_internal_add_kernel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  kernel_.Add(value);
}
inline void ConvolutionOpParams::add_kernel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_kernel(value);
  // @@protoc_insertion_point(field_add:domi.ConvolutionOpParams.kernel)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ConvolutionOpParams::_internal_kernel() const {
  return kernel_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ConvolutionOpParams::kernel() const {
  // @@protoc_insertion_point(field_list:domi.ConvolutionOpParams.kernel)
  return _internal_kernel();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ConvolutionOpParams::_internal_mutable_kernel() {
  return &kernel_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ConvolutionOpParams::mutable_kernel() {
  // @@protoc_insertion_point(field_mutable_list:domi.ConvolutionOpParams.kernel)
  return _internal_mutable_kernel();
}

// float alpha = 20;
inline void ConvolutionOpParams::clear_alpha() {
  alpha_ = 0;
}
inline float ConvolutionOpParams::_internal_alpha() const {
  return alpha_;
}
inline float ConvolutionOpParams::alpha() const {
  // @@protoc_insertion_point(field_get:domi.ConvolutionOpParams.alpha)
  return _internal_alpha();
}
inline void ConvolutionOpParams::_internal_set_alpha(float value) {
  
  alpha_ = value;
}
inline void ConvolutionOpParams::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:domi.ConvolutionOpParams.alpha)
}

// float beta = 21;
inline void ConvolutionOpParams::clear_beta() {
  beta_ = 0;
}
inline float ConvolutionOpParams::_internal_beta() const {
  return beta_;
}
inline float ConvolutionOpParams::beta() const {
  // @@protoc_insertion_point(field_get:domi.ConvolutionOpParams.beta)
  return _internal_beta();
}
inline void ConvolutionOpParams::_internal_set_beta(float value) {
  
  beta_ = value;
}
inline void ConvolutionOpParams::set_beta(float value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:domi.ConvolutionOpParams.beta)
}

// .domi.WeightDef filter = 40;
inline bool ConvolutionOpParams::_internal_has_filter() const {
  return this != internal_default_instance() && filter_ != nullptr;
}
inline bool ConvolutionOpParams::has_filter() const {
  return _internal_has_filter();
}
inline void ConvolutionOpParams::clear_filter() {
  if (GetArena() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
}
inline const ::domi::WeightDef& ConvolutionOpParams::_internal_filter() const {
  const ::domi::WeightDef* p = filter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::domi::WeightDef*>(
      &::domi::_WeightDef_default_instance_);
}
inline const ::domi::WeightDef& ConvolutionOpParams::filter() const {
  // @@protoc_insertion_point(field_get:domi.ConvolutionOpParams.filter)
  return _internal_filter();
}
inline void ConvolutionOpParams::unsafe_arena_set_allocated_filter(
    ::domi::WeightDef* filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.ConvolutionOpParams.filter)
}
inline ::domi::WeightDef* ConvolutionOpParams::release_filter() {
  
  ::domi::WeightDef* temp = filter_;
  filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::domi::WeightDef* ConvolutionOpParams::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:domi.ConvolutionOpParams.filter)
  
  ::domi::WeightDef* temp = filter_;
  filter_ = nullptr;
  return temp;
}
inline ::domi::WeightDef* ConvolutionOpParams::_internal_mutable_filter() {
  
  if (filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::domi::WeightDef>(GetArena());
    filter_ = p;
  }
  return filter_;
}
inline ::domi::WeightDef* ConvolutionOpParams::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:domi.ConvolutionOpParams.filter)
  return _internal_mutable_filter();
}
inline void ConvolutionOpParams::set_allocated_filter(::domi::WeightDef* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete filter_;
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filter);
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    
  } else {
    
  }
  filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:domi.ConvolutionOpParams.filter)
}

// .domi.WeightDef bias = 41;
inline bool ConvolutionOpParams::_internal_has_bias() const {
  return this != internal_default_instance() && bias_ != nullptr;
}
inline bool ConvolutionOpParams::has_bias() const {
  return _internal_has_bias();
}
inline void ConvolutionOpParams::clear_bias() {
  if (GetArena() == nullptr && bias_ != nullptr) {
    delete bias_;
  }
  bias_ = nullptr;
}
inline const ::domi::WeightDef& ConvolutionOpParams::_internal_bias() const {
  const ::domi::WeightDef* p = bias_;
  return p != nullptr ? *p : *reinterpret_cast<const ::domi::WeightDef*>(
      &::domi::_WeightDef_default_instance_);
}
inline const ::domi::WeightDef& ConvolutionOpParams::bias() const {
  // @@protoc_insertion_point(field_get:domi.ConvolutionOpParams.bias)
  return _internal_bias();
}
inline void ConvolutionOpParams::unsafe_arena_set_allocated_bias(
    ::domi::WeightDef* bias) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bias_);
  }
  bias_ = bias;
  if (bias) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.ConvolutionOpParams.bias)
}
inline ::domi::WeightDef* ConvolutionOpParams::release_bias() {
  
  ::domi::WeightDef* temp = bias_;
  bias_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::domi::WeightDef* ConvolutionOpParams::unsafe_arena_release_bias() {
  // @@protoc_insertion_point(field_release:domi.ConvolutionOpParams.bias)
  
  ::domi::WeightDef* temp = bias_;
  bias_ = nullptr;
  return temp;
}
inline ::domi::WeightDef* ConvolutionOpParams::_internal_mutable_bias() {
  
  if (bias_ == nullptr) {
    auto* p = CreateMaybeMessage<::domi::WeightDef>(GetArena());
    bias_ = p;
  }
  return bias_;
}
inline ::domi::WeightDef* ConvolutionOpParams::mutable_bias() {
  // @@protoc_insertion_point(field_mutable:domi.ConvolutionOpParams.bias)
  return _internal_mutable_bias();
}
inline void ConvolutionOpParams::set_allocated_bias(::domi::WeightDef* bias) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bias_;
  }
  if (bias) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bias);
    if (message_arena != submessage_arena) {
      bias = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias, submessage_arena);
    }
    
  } else {
    
  }
  bias_ = bias;
  // @@protoc_insertion_point(field_set_allocated:domi.ConvolutionOpParams.bias)
}

// bool relu_flag = 62;
inline void ConvolutionOpParams::clear_relu_flag() {
  relu_flag_ = false;
}
inline bool ConvolutionOpParams::_internal_relu_flag() const {
  return relu_flag_;
}
inline bool ConvolutionOpParams::relu_flag() const {
  // @@protoc_insertion_point(field_get:domi.ConvolutionOpParams.relu_flag)
  return _internal_relu_flag();
}
inline void ConvolutionOpParams::_internal_set_relu_flag(bool value) {
  
  relu_flag_ = value;
}
inline void ConvolutionOpParams::set_relu_flag(bool value) {
  _internal_set_relu_flag(value);
  // @@protoc_insertion_point(field_set:domi.ConvolutionOpParams.relu_flag)
}

// repeated uint32 adj = 70;
inline int ConvolutionOpParams::_internal_adj_size() const {
  return adj_.size();
}
inline int ConvolutionOpParams::adj_size() const {
  return _internal_adj_size();
}
inline void ConvolutionOpParams::clear_adj() {
  adj_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionOpParams::_internal_adj(int index) const {
  return adj_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionOpParams::adj(int index) const {
  // @@protoc_insertion_point(field_get:domi.ConvolutionOpParams.adj)
  return _internal_adj(index);
}
inline void ConvolutionOpParams::set_adj(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  adj_.Set(index, value);
  // @@protoc_insertion_point(field_set:domi.ConvolutionOpParams.adj)
}
inline void ConvolutionOpParams::_internal_add_adj(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  adj_.Add(value);
}
inline void ConvolutionOpParams::add_adj(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_adj(value);
  // @@protoc_insertion_point(field_add:domi.ConvolutionOpParams.adj)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ConvolutionOpParams::_internal_adj() const {
  return adj_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ConvolutionOpParams::adj() const {
  // @@protoc_insertion_point(field_list:domi.ConvolutionOpParams.adj)
  return _internal_adj();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ConvolutionOpParams::_internal_mutable_adj() {
  return &adj_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ConvolutionOpParams::mutable_adj() {
  // @@protoc_insertion_point(field_mutable_list:domi.ConvolutionOpParams.adj)
  return _internal_mutable_adj();
}

// repeated uint32 target_shape = 71;
inline int ConvolutionOpParams::_internal_target_shape_size() const {
  return target_shape_.size();
}
inline int ConvolutionOpParams::target_shape_size() const {
  return _internal_target_shape_size();
}
inline void ConvolutionOpParams::clear_target_shape() {
  target_shape_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionOpParams::_internal_target_shape(int index) const {
  return target_shape_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionOpParams::target_shape(int index) const {
  // @@protoc_insertion_point(field_get:domi.ConvolutionOpParams.target_shape)
  return _internal_target_shape(index);
}
inline void ConvolutionOpParams::set_target_shape(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  target_shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:domi.ConvolutionOpParams.target_shape)
}
inline void ConvolutionOpParams::_internal_add_target_shape(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  target_shape_.Add(value);
}
inline void ConvolutionOpParams::add_target_shape(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_target_shape(value);
  // @@protoc_insertion_point(field_add:domi.ConvolutionOpParams.target_shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ConvolutionOpParams::_internal_target_shape() const {
  return target_shape_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ConvolutionOpParams::target_shape() const {
  // @@protoc_insertion_point(field_list:domi.ConvolutionOpParams.target_shape)
  return _internal_target_shape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ConvolutionOpParams::_internal_mutable_target_shape() {
  return &target_shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ConvolutionOpParams::mutable_target_shape() {
  // @@protoc_insertion_point(field_mutable_list:domi.ConvolutionOpParams.target_shape)
  return _internal_mutable_target_shape();
}

// repeated uint32 before_pad = 72;
inline int ConvolutionOpParams::_internal_before_pad_size() const {
  return before_pad_.size();
}
inline int ConvolutionOpParams::before_pad_size() const {
  return _internal_before_pad_size();
}
inline void ConvolutionOpParams::clear_before_pad() {
  before_pad_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionOpParams::_internal_before_pad(int index) const {
  return before_pad_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionOpParams::before_pad(int index) const {
  // @@protoc_insertion_point(field_get:domi.ConvolutionOpParams.before_pad)
  return _internal_before_pad(index);
}
inline void ConvolutionOpParams::set_before_pad(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  before_pad_.Set(index, value);
  // @@protoc_insertion_point(field_set:domi.ConvolutionOpParams.before_pad)
}
inline void ConvolutionOpParams::_internal_add_before_pad(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  before_pad_.Add(value);
}
inline void ConvolutionOpParams::add_before_pad(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_before_pad(value);
  // @@protoc_insertion_point(field_add:domi.ConvolutionOpParams.before_pad)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ConvolutionOpParams::_internal_before_pad() const {
  return before_pad_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ConvolutionOpParams::before_pad() const {
  // @@protoc_insertion_point(field_list:domi.ConvolutionOpParams.before_pad)
  return _internal_before_pad();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ConvolutionOpParams::_internal_mutable_before_pad() {
  return &before_pad_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ConvolutionOpParams::mutable_before_pad() {
  // @@protoc_insertion_point(field_mutable_list:domi.ConvolutionOpParams.before_pad)
  return _internal_mutable_before_pad();
}

// -------------------------------------------------------------------

// PoolingOpParams

// int32 mode = 1;
inline void PoolingOpParams::clear_mode() {
  mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoolingOpParams::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoolingOpParams::mode() const {
  // @@protoc_insertion_point(field_get:domi.PoolingOpParams.mode)
  return _internal_mode();
}
inline void PoolingOpParams::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mode_ = value;
}
inline void PoolingOpParams::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:domi.PoolingOpParams.mode)
}

// int32 nan_opt = 2;
inline void PoolingOpParams::clear_nan_opt() {
  nan_opt_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoolingOpParams::_internal_nan_opt() const {
  return nan_opt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoolingOpParams::nan_opt() const {
  // @@protoc_insertion_point(field_get:domi.PoolingOpParams.nan_opt)
  return _internal_nan_opt();
}
inline void PoolingOpParams::_internal_set_nan_opt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nan_opt_ = value;
}
inline void PoolingOpParams::set_nan_opt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nan_opt(value);
  // @@protoc_insertion_point(field_set:domi.PoolingOpParams.nan_opt)
}

// int32 pad_mode = 3;
inline void PoolingOpParams::clear_pad_mode() {
  pad_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoolingOpParams::_internal_pad_mode() const {
  return pad_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoolingOpParams::pad_mode() const {
  // @@protoc_insertion_point(field_get:domi.PoolingOpParams.pad_mode)
  return _internal_pad_mode();
}
inline void PoolingOpParams::_internal_set_pad_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pad_mode_ = value;
}
inline void PoolingOpParams::set_pad_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pad_mode(value);
  // @@protoc_insertion_point(field_set:domi.PoolingOpParams.pad_mode)
}

// bool global_pooling = 4;
inline void PoolingOpParams::clear_global_pooling() {
  global_pooling_ = false;
}
inline bool PoolingOpParams::_internal_global_pooling() const {
  return global_pooling_;
}
inline bool PoolingOpParams::global_pooling() const {
  // @@protoc_insertion_point(field_get:domi.PoolingOpParams.global_pooling)
  return _internal_global_pooling();
}
inline void PoolingOpParams::_internal_set_global_pooling(bool value) {
  
  global_pooling_ = value;
}
inline void PoolingOpParams::set_global_pooling(bool value) {
  _internal_set_global_pooling(value);
  // @@protoc_insertion_point(field_set:domi.PoolingOpParams.global_pooling)
}

// repeated uint32 window = 10;
inline int PoolingOpParams::_internal_window_size() const {
  return window_.size();
}
inline int PoolingOpParams::window_size() const {
  return _internal_window_size();
}
inline void PoolingOpParams::clear_window() {
  window_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingOpParams::_internal_window(int index) const {
  return window_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingOpParams::window(int index) const {
  // @@protoc_insertion_point(field_get:domi.PoolingOpParams.window)
  return _internal_window(index);
}
inline void PoolingOpParams::set_window(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  window_.Set(index, value);
  // @@protoc_insertion_point(field_set:domi.PoolingOpParams.window)
}
inline void PoolingOpParams::_internal_add_window(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  window_.Add(value);
}
inline void PoolingOpParams::add_window(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_window(value);
  // @@protoc_insertion_point(field_add:domi.PoolingOpParams.window)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PoolingOpParams::_internal_window() const {
  return window_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PoolingOpParams::window() const {
  // @@protoc_insertion_point(field_list:domi.PoolingOpParams.window)
  return _internal_window();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PoolingOpParams::_internal_mutable_window() {
  return &window_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PoolingOpParams::mutable_window() {
  // @@protoc_insertion_point(field_mutable_list:domi.PoolingOpParams.window)
  return _internal_mutable_window();
}

// repeated uint32 pad = 11;
inline int PoolingOpParams::_internal_pad_size() const {
  return pad_.size();
}
inline int PoolingOpParams::pad_size() const {
  return _internal_pad_size();
}
inline void PoolingOpParams::clear_pad() {
  pad_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingOpParams::_internal_pad(int index) const {
  return pad_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingOpParams::pad(int index) const {
  // @@protoc_insertion_point(field_get:domi.PoolingOpParams.pad)
  return _internal_pad(index);
}
inline void PoolingOpParams::set_pad(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  pad_.Set(index, value);
  // @@protoc_insertion_point(field_set:domi.PoolingOpParams.pad)
}
inline void PoolingOpParams::_internal_add_pad(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  pad_.Add(value);
}
inline void PoolingOpParams::add_pad(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_pad(value);
  // @@protoc_insertion_point(field_add:domi.PoolingOpParams.pad)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PoolingOpParams::_internal_pad() const {
  return pad_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PoolingOpParams::pad() const {
  // @@protoc_insertion_point(field_list:domi.PoolingOpParams.pad)
  return _internal_pad();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PoolingOpParams::_internal_mutable_pad() {
  return &pad_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PoolingOpParams::mutable_pad() {
  // @@protoc_insertion_point(field_mutable_list:domi.PoolingOpParams.pad)
  return _internal_mutable_pad();
}

// repeated uint32 stride = 12;
inline int PoolingOpParams::_internal_stride_size() const {
  return stride_.size();
}
inline int PoolingOpParams::stride_size() const {
  return _internal_stride_size();
}
inline void PoolingOpParams::clear_stride() {
  stride_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingOpParams::_internal_stride(int index) const {
  return stride_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingOpParams::stride(int index) const {
  // @@protoc_insertion_point(field_get:domi.PoolingOpParams.stride)
  return _internal_stride(index);
}
inline void PoolingOpParams::set_stride(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:domi.PoolingOpParams.stride)
}
inline void PoolingOpParams::_internal_add_stride(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  stride_.Add(value);
}
inline void PoolingOpParams::add_stride(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_stride(value);
  // @@protoc_insertion_point(field_add:domi.PoolingOpParams.stride)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PoolingOpParams::_internal_stride() const {
  return stride_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PoolingOpParams::stride() const {
  // @@protoc_insertion_point(field_list:domi.PoolingOpParams.stride)
  return _internal_stride();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PoolingOpParams::_internal_mutable_stride() {
  return &stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PoolingOpParams::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:domi.PoolingOpParams.stride)
  return _internal_mutable_stride();
}

// bool ceil_mode = 13;
inline void PoolingOpParams::clear_ceil_mode() {
  ceil_mode_ = false;
}
inline bool PoolingOpParams::_internal_ceil_mode() const {
  return ceil_mode_;
}
inline bool PoolingOpParams::ceil_mode() const {
  // @@protoc_insertion_point(field_get:domi.PoolingOpParams.ceil_mode)
  return _internal_ceil_mode();
}
inline void PoolingOpParams::_internal_set_ceil_mode(bool value) {
  
  ceil_mode_ = value;
}
inline void PoolingOpParams::set_ceil_mode(bool value) {
  _internal_set_ceil_mode(value);
  // @@protoc_insertion_point(field_set:domi.PoolingOpParams.ceil_mode)
}

// int32 data_mode = 14;
inline void PoolingOpParams::clear_data_mode() {
  data_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoolingOpParams::_internal_data_mode() const {
  return data_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoolingOpParams::data_mode() const {
  // @@protoc_insertion_point(field_get:domi.PoolingOpParams.data_mode)
  return _internal_data_mode();
}
inline void PoolingOpParams::_internal_set_data_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  data_mode_ = value;
}
inline void PoolingOpParams::set_data_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_data_mode(value);
  // @@protoc_insertion_point(field_set:domi.PoolingOpParams.data_mode)
}

// float alpha = 20;
inline void PoolingOpParams::clear_alpha() {
  alpha_ = 0;
}
inline float PoolingOpParams::_internal_alpha() const {
  return alpha_;
}
inline float PoolingOpParams::alpha() const {
  // @@protoc_insertion_point(field_get:domi.PoolingOpParams.alpha)
  return _internal_alpha();
}
inline void PoolingOpParams::_internal_set_alpha(float value) {
  
  alpha_ = value;
}
inline void PoolingOpParams::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:domi.PoolingOpParams.alpha)
}

// float beta = 21;
inline void PoolingOpParams::clear_beta() {
  beta_ = 0;
}
inline float PoolingOpParams::_internal_beta() const {
  return beta_;
}
inline float PoolingOpParams::beta() const {
  // @@protoc_insertion_point(field_get:domi.PoolingOpParams.beta)
  return _internal_beta();
}
inline void PoolingOpParams::_internal_set_beta(float value) {
  
  beta_ = value;
}
inline void PoolingOpParams::set_beta(float value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:domi.PoolingOpParams.beta)
}

// repeated uint32 before_pad = 22;
inline int PoolingOpParams::_internal_before_pad_size() const {
  return before_pad_.size();
}
inline int PoolingOpParams::before_pad_size() const {
  return _internal_before_pad_size();
}
inline void PoolingOpParams::clear_before_pad() {
  before_pad_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingOpParams::_internal_before_pad(int index) const {
  return before_pad_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingOpParams::before_pad(int index) const {
  // @@protoc_insertion_point(field_get:domi.PoolingOpParams.before_pad)
  return _internal_before_pad(index);
}
inline void PoolingOpParams::set_before_pad(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  before_pad_.Set(index, value);
  // @@protoc_insertion_point(field_set:domi.PoolingOpParams.before_pad)
}
inline void PoolingOpParams::_internal_add_before_pad(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  before_pad_.Add(value);
}
inline void PoolingOpParams::add_before_pad(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_before_pad(value);
  // @@protoc_insertion_point(field_add:domi.PoolingOpParams.before_pad)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PoolingOpParams::_internal_before_pad() const {
  return before_pad_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PoolingOpParams::before_pad() const {
  // @@protoc_insertion_point(field_list:domi.PoolingOpParams.before_pad)
  return _internal_before_pad();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PoolingOpParams::_internal_mutable_before_pad() {
  return &before_pad_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PoolingOpParams::mutable_before_pad() {
  // @@protoc_insertion_point(field_mutable_list:domi.PoolingOpParams.before_pad)
  return _internal_mutable_before_pad();
}

// -------------------------------------------------------------------

// EltwiseOpParams

// int32 mode = 1;
inline void EltwiseOpParams::clear_mode() {
  mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EltwiseOpParams::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EltwiseOpParams::mode() const {
  // @@protoc_insertion_point(field_get:domi.EltwiseOpParams.mode)
  return _internal_mode();
}
inline void EltwiseOpParams::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mode_ = value;
}
inline void EltwiseOpParams::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:domi.EltwiseOpParams.mode)
}

// repeated float coeff = 2;
inline int EltwiseOpParams::_internal_coeff_size() const {
  return coeff_.size();
}
inline int EltwiseOpParams::coeff_size() const {
  return _internal_coeff_size();
}
inline void EltwiseOpParams::clear_coeff() {
  coeff_.Clear();
}
inline float EltwiseOpParams::_internal_coeff(int index) const {
  return coeff_.Get(index);
}
inline float EltwiseOpParams::coeff(int index) const {
  // @@protoc_insertion_point(field_get:domi.EltwiseOpParams.coeff)
  return _internal_coeff(index);
}
inline void EltwiseOpParams::set_coeff(int index, float value) {
  coeff_.Set(index, value);
  // @@protoc_insertion_point(field_set:domi.EltwiseOpParams.coeff)
}
inline void EltwiseOpParams::_internal_add_coeff(float value) {
  coeff_.Add(value);
}
inline void EltwiseOpParams::add_coeff(float value) {
  _internal_add_coeff(value);
  // @@protoc_insertion_point(field_add:domi.EltwiseOpParams.coeff)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EltwiseOpParams::_internal_coeff() const {
  return coeff_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EltwiseOpParams::coeff() const {
  // @@protoc_insertion_point(field_list:domi.EltwiseOpParams.coeff)
  return _internal_coeff();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EltwiseOpParams::_internal_mutable_coeff() {
  return &coeff_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EltwiseOpParams::mutable_coeff() {
  // @@protoc_insertion_point(field_mutable_list:domi.EltwiseOpParams.coeff)
  return _internal_mutable_coeff();
}

// float alpha = 3;
inline void EltwiseOpParams::clear_alpha() {
  alpha_ = 0;
}
inline float EltwiseOpParams::_internal_alpha() const {
  return alpha_;
}
inline float EltwiseOpParams::alpha() const {
  // @@protoc_insertion_point(field_get:domi.EltwiseOpParams.alpha)
  return _internal_alpha();
}
inline void EltwiseOpParams::_internal_set_alpha(float value) {
  
  alpha_ = value;
}
inline void EltwiseOpParams::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:domi.EltwiseOpParams.alpha)
}

// float beta = 4;
inline void EltwiseOpParams::clear_beta() {
  beta_ = 0;
}
inline float EltwiseOpParams::_internal_beta() const {
  return beta_;
}
inline float EltwiseOpParams::beta() const {
  // @@protoc_insertion_point(field_get:domi.EltwiseOpParams.beta)
  return _internal_beta();
}
inline void EltwiseOpParams::_internal_set_beta(float value) {
  
  beta_ = value;
}
inline void EltwiseOpParams::set_beta(float value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:domi.EltwiseOpParams.beta)
}

// repeated .domi.WeightDef weight = 5;
inline int EltwiseOpParams::_internal_weight_size() const {
  return weight_.size();
}
inline int EltwiseOpParams::weight_size() const {
  return _internal_weight_size();
}
inline void EltwiseOpParams::clear_weight() {
  weight_.Clear();
}
inline ::domi::WeightDef* EltwiseOpParams::mutable_weight(int index) {
  // @@protoc_insertion_point(field_mutable:domi.EltwiseOpParams.weight)
  return weight_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef >*
EltwiseOpParams::mutable_weight() {
  // @@protoc_insertion_point(field_mutable_list:domi.EltwiseOpParams.weight)
  return &weight_;
}
inline const ::domi::WeightDef& EltwiseOpParams::_internal_weight(int index) const {
  return weight_.Get(index);
}
inline const ::domi::WeightDef& EltwiseOpParams::weight(int index) const {
  // @@protoc_insertion_point(field_get:domi.EltwiseOpParams.weight)
  return _internal_weight(index);
}
inline ::domi::WeightDef* EltwiseOpParams::_internal_add_weight() {
  return weight_.Add();
}
inline ::domi::WeightDef* EltwiseOpParams::add_weight() {
  // @@protoc_insertion_point(field_add:domi.EltwiseOpParams.weight)
  return _internal_add_weight();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef >&
EltwiseOpParams::weight() const {
  // @@protoc_insertion_point(field_list:domi.EltwiseOpParams.weight)
  return weight_;
}

// bool relu_flag = 6;
inline void EltwiseOpParams::clear_relu_flag() {
  relu_flag_ = false;
}
inline bool EltwiseOpParams::_internal_relu_flag() const {
  return relu_flag_;
}
inline bool EltwiseOpParams::relu_flag() const {
  // @@protoc_insertion_point(field_get:domi.EltwiseOpParams.relu_flag)
  return _internal_relu_flag();
}
inline void EltwiseOpParams::_internal_set_relu_flag(bool value) {
  
  relu_flag_ = value;
}
inline void EltwiseOpParams::set_relu_flag(bool value) {
  _internal_set_relu_flag(value);
  // @@protoc_insertion_point(field_set:domi.EltwiseOpParams.relu_flag)
}

// -------------------------------------------------------------------

// ActivationOpParams

// int32 mode = 1;
inline void ActivationOpParams::clear_mode() {
  mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivationOpParams::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivationOpParams::mode() const {
  // @@protoc_insertion_point(field_get:domi.ActivationOpParams.mode)
  return _internal_mode();
}
inline void ActivationOpParams::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mode_ = value;
}
inline void ActivationOpParams::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:domi.ActivationOpParams.mode)
}

// float coef = 2;
inline void ActivationOpParams::clear_coef() {
  coef_ = 0;
}
inline float ActivationOpParams::_internal_coef() const {
  return coef_;
}
inline float ActivationOpParams::coef() const {
  // @@protoc_insertion_point(field_get:domi.ActivationOpParams.coef)
  return _internal_coef();
}
inline void ActivationOpParams::_internal_set_coef(float value) {
  
  coef_ = value;
}
inline void ActivationOpParams::set_coef(float value) {
  _internal_set_coef(value);
  // @@protoc_insertion_point(field_set:domi.ActivationOpParams.coef)
}

// float alpha = 3;
inline void ActivationOpParams::clear_alpha() {
  alpha_ = 0;
}
inline float ActivationOpParams::_internal_alpha() const {
  return alpha_;
}
inline float ActivationOpParams::alpha() const {
  // @@protoc_insertion_point(field_get:domi.ActivationOpParams.alpha)
  return _internal_alpha();
}
inline void ActivationOpParams::_internal_set_alpha(float value) {
  
  alpha_ = value;
}
inline void ActivationOpParams::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:domi.ActivationOpParams.alpha)
}

// float beta = 4;
inline void ActivationOpParams::clear_beta() {
  beta_ = 0;
}
inline float ActivationOpParams::_internal_beta() const {
  return beta_;
}
inline float ActivationOpParams::beta() const {
  // @@protoc_insertion_point(field_get:domi.ActivationOpParams.beta)
  return _internal_beta();
}
inline void ActivationOpParams::_internal_set_beta(float value) {
  
  beta_ = value;
}
inline void ActivationOpParams::set_beta(float value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:domi.ActivationOpParams.beta)
}

// -------------------------------------------------------------------

// BatchNormOpParams

// int32 mode = 1;
inline void BatchNormOpParams::clear_mode() {
  mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BatchNormOpParams::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BatchNormOpParams::mode() const {
  // @@protoc_insertion_point(field_get:domi.BatchNormOpParams.mode)
  return _internal_mode();
}
inline void BatchNormOpParams::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mode_ = value;
}
inline void BatchNormOpParams::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:domi.BatchNormOpParams.mode)
}

// float alpha = 2;
inline void BatchNormOpParams::clear_alpha() {
  alpha_ = 0;
}
inline float BatchNormOpParams::_internal_alpha() const {
  return alpha_;
}
inline float BatchNormOpParams::alpha() const {
  // @@protoc_insertion_point(field_get:domi.BatchNormOpParams.alpha)
  return _internal_alpha();
}
inline void BatchNormOpParams::_internal_set_alpha(float value) {
  
  alpha_ = value;
}
inline void BatchNormOpParams::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:domi.BatchNormOpParams.alpha)
}

// float beta = 3;
inline void BatchNormOpParams::clear_beta() {
  beta_ = 0;
}
inline float BatchNormOpParams::_internal_beta() const {
  return beta_;
}
inline float BatchNormOpParams::beta() const {
  // @@protoc_insertion_point(field_get:domi.BatchNormOpParams.beta)
  return _internal_beta();
}
inline void BatchNormOpParams::_internal_set_beta(float value) {
  
  beta_ = value;
}
inline void BatchNormOpParams::set_beta(float value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:domi.BatchNormOpParams.beta)
}

// double epsilon = 4;
inline void BatchNormOpParams::clear_epsilon() {
  epsilon_ = 0;
}
inline double BatchNormOpParams::_internal_epsilon() const {
  return epsilon_;
}
inline double BatchNormOpParams::epsilon() const {
  // @@protoc_insertion_point(field_get:domi.BatchNormOpParams.epsilon)
  return _internal_epsilon();
}
inline void BatchNormOpParams::_internal_set_epsilon(double value) {
  
  epsilon_ = value;
}
inline void BatchNormOpParams::set_epsilon(double value) {
  _internal_set_epsilon(value);
  // @@protoc_insertion_point(field_set:domi.BatchNormOpParams.epsilon)
}

// bool use_global_stats = 5;
inline void BatchNormOpParams::clear_use_global_stats() {
  use_global_stats_ = false;
}
inline bool BatchNormOpParams::_internal_use_global_stats() const {
  return use_global_stats_;
}
inline bool BatchNormOpParams::use_global_stats() const {
  // @@protoc_insertion_point(field_get:domi.BatchNormOpParams.use_global_stats)
  return _internal_use_global_stats();
}
inline void BatchNormOpParams::_internal_set_use_global_stats(bool value) {
  
  use_global_stats_ = value;
}
inline void BatchNormOpParams::set_use_global_stats(bool value) {
  _internal_set_use_global_stats(value);
  // @@protoc_insertion_point(field_set:domi.BatchNormOpParams.use_global_stats)
}

// float moving_average_fraction = 6;
inline void BatchNormOpParams::clear_moving_average_fraction() {
  moving_average_fraction_ = 0;
}
inline float BatchNormOpParams::_internal_moving_average_fraction() const {
  return moving_average_fraction_;
}
inline float BatchNormOpParams::moving_average_fraction() const {
  // @@protoc_insertion_point(field_get:domi.BatchNormOpParams.moving_average_fraction)
  return _internal_moving_average_fraction();
}
inline void BatchNormOpParams::_internal_set_moving_average_fraction(float value) {
  
  moving_average_fraction_ = value;
}
inline void BatchNormOpParams::set_moving_average_fraction(float value) {
  _internal_set_moving_average_fraction(value);
  // @@protoc_insertion_point(field_set:domi.BatchNormOpParams.moving_average_fraction)
}

// .domi.WeightDef estimated_mean = 7;
inline bool BatchNormOpParams::_internal_has_estimated_mean() const {
  return this != internal_default_instance() && estimated_mean_ != nullptr;
}
inline bool BatchNormOpParams::has_estimated_mean() const {
  return _internal_has_estimated_mean();
}
inline void BatchNormOpParams::clear_estimated_mean() {
  if (GetArena() == nullptr && estimated_mean_ != nullptr) {
    delete estimated_mean_;
  }
  estimated_mean_ = nullptr;
}
inline const ::domi::WeightDef& BatchNormOpParams::_internal_estimated_mean() const {
  const ::domi::WeightDef* p = estimated_mean_;
  return p != nullptr ? *p : *reinterpret_cast<const ::domi::WeightDef*>(
      &::domi::_WeightDef_default_instance_);
}
inline const ::domi::WeightDef& BatchNormOpParams::estimated_mean() const {
  // @@protoc_insertion_point(field_get:domi.BatchNormOpParams.estimated_mean)
  return _internal_estimated_mean();
}
inline void BatchNormOpParams::unsafe_arena_set_allocated_estimated_mean(
    ::domi::WeightDef* estimated_mean) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(estimated_mean_);
  }
  estimated_mean_ = estimated_mean;
  if (estimated_mean) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.BatchNormOpParams.estimated_mean)
}
inline ::domi::WeightDef* BatchNormOpParams::release_estimated_mean() {
  
  ::domi::WeightDef* temp = estimated_mean_;
  estimated_mean_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::domi::WeightDef* BatchNormOpParams::unsafe_arena_release_estimated_mean() {
  // @@protoc_insertion_point(field_release:domi.BatchNormOpParams.estimated_mean)
  
  ::domi::WeightDef* temp = estimated_mean_;
  estimated_mean_ = nullptr;
  return temp;
}
inline ::domi::WeightDef* BatchNormOpParams::_internal_mutable_estimated_mean() {
  
  if (estimated_mean_ == nullptr) {
    auto* p = CreateMaybeMessage<::domi::WeightDef>(GetArena());
    estimated_mean_ = p;
  }
  return estimated_mean_;
}
inline ::domi::WeightDef* BatchNormOpParams::mutable_estimated_mean() {
  // @@protoc_insertion_point(field_mutable:domi.BatchNormOpParams.estimated_mean)
  return _internal_mutable_estimated_mean();
}
inline void BatchNormOpParams::set_allocated_estimated_mean(::domi::WeightDef* estimated_mean) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete estimated_mean_;
  }
  if (estimated_mean) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(estimated_mean);
    if (message_arena != submessage_arena) {
      estimated_mean = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, estimated_mean, submessage_arena);
    }
    
  } else {
    
  }
  estimated_mean_ = estimated_mean;
  // @@protoc_insertion_point(field_set_allocated:domi.BatchNormOpParams.estimated_mean)
}

// .domi.WeightDef estimated_variance = 8;
inline bool BatchNormOpParams::_internal_has_estimated_variance() const {
  return this != internal_default_instance() && estimated_variance_ != nullptr;
}
inline bool BatchNormOpParams::has_estimated_variance() const {
  return _internal_has_estimated_variance();
}
inline void BatchNormOpParams::clear_estimated_variance() {
  if (GetArena() == nullptr && estimated_variance_ != nullptr) {
    delete estimated_variance_;
  }
  estimated_variance_ = nullptr;
}
inline const ::domi::WeightDef& BatchNormOpParams::_internal_estimated_variance() const {
  const ::domi::WeightDef* p = estimated_variance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::domi::WeightDef*>(
      &::domi::_WeightDef_default_instance_);
}
inline const ::domi::WeightDef& BatchNormOpParams::estimated_variance() const {
  // @@protoc_insertion_point(field_get:domi.BatchNormOpParams.estimated_variance)
  return _internal_estimated_variance();
}
inline void BatchNormOpParams::unsafe_arena_set_allocated_estimated_variance(
    ::domi::WeightDef* estimated_variance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(estimated_variance_);
  }
  estimated_variance_ = estimated_variance;
  if (estimated_variance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.BatchNormOpParams.estimated_variance)
}
inline ::domi::WeightDef* BatchNormOpParams::release_estimated_variance() {
  
  ::domi::WeightDef* temp = estimated_variance_;
  estimated_variance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::domi::WeightDef* BatchNormOpParams::unsafe_arena_release_estimated_variance() {
  // @@protoc_insertion_point(field_release:domi.BatchNormOpParams.estimated_variance)
  
  ::domi::WeightDef* temp = estimated_variance_;
  estimated_variance_ = nullptr;
  return temp;
}
inline ::domi::WeightDef* BatchNormOpParams::_internal_mutable_estimated_variance() {
  
  if (estimated_variance_ == nullptr) {
    auto* p = CreateMaybeMessage<::domi::WeightDef>(GetArena());
    estimated_variance_ = p;
  }
  return estimated_variance_;
}
inline ::domi::WeightDef* BatchNormOpParams::mutable_estimated_variance() {
  // @@protoc_insertion_point(field_mutable:domi.BatchNormOpParams.estimated_variance)
  return _internal_mutable_estimated_variance();
}
inline void BatchNormOpParams::set_allocated_estimated_variance(::domi::WeightDef* estimated_variance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete estimated_variance_;
  }
  if (estimated_variance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(estimated_variance);
    if (message_arena != submessage_arena) {
      estimated_variance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, estimated_variance, submessage_arena);
    }
    
  } else {
    
  }
  estimated_variance_ = estimated_variance;
  // @@protoc_insertion_point(field_set_allocated:domi.BatchNormOpParams.estimated_variance)
}

// .domi.WeightDef scale = 9;
inline bool BatchNormOpParams::_internal_has_scale() const {
  return this != internal_default_instance() && scale_ != nullptr;
}
inline bool BatchNormOpParams::has_scale() const {
  return _internal_has_scale();
}
inline void BatchNormOpParams::clear_scale() {
  if (GetArena() == nullptr && scale_ != nullptr) {
    delete scale_;
  }
  scale_ = nullptr;
}
inline const ::domi::WeightDef& BatchNormOpParams::_internal_scale() const {
  const ::domi::WeightDef* p = scale_;
  return p != nullptr ? *p : *reinterpret_cast<const ::domi::WeightDef*>(
      &::domi::_WeightDef_default_instance_);
}
inline const ::domi::WeightDef& BatchNormOpParams::scale() const {
  // @@protoc_insertion_point(field_get:domi.BatchNormOpParams.scale)
  return _internal_scale();
}
inline void BatchNormOpParams::unsafe_arena_set_allocated_scale(
    ::domi::WeightDef* scale) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale_);
  }
  scale_ = scale;
  if (scale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.BatchNormOpParams.scale)
}
inline ::domi::WeightDef* BatchNormOpParams::release_scale() {
  
  ::domi::WeightDef* temp = scale_;
  scale_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::domi::WeightDef* BatchNormOpParams::unsafe_arena_release_scale() {
  // @@protoc_insertion_point(field_release:domi.BatchNormOpParams.scale)
  
  ::domi::WeightDef* temp = scale_;
  scale_ = nullptr;
  return temp;
}
inline ::domi::WeightDef* BatchNormOpParams::_internal_mutable_scale() {
  
  if (scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::domi::WeightDef>(GetArena());
    scale_ = p;
  }
  return scale_;
}
inline ::domi::WeightDef* BatchNormOpParams::mutable_scale() {
  // @@protoc_insertion_point(field_mutable:domi.BatchNormOpParams.scale)
  return _internal_mutable_scale();
}
inline void BatchNormOpParams::set_allocated_scale(::domi::WeightDef* scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete scale_;
  }
  if (scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scale);
    if (message_arena != submessage_arena) {
      scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    
  } else {
    
  }
  scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:domi.BatchNormOpParams.scale)
}

// .domi.WeightDef bias = 10;
inline bool BatchNormOpParams::_internal_has_bias() const {
  return this != internal_default_instance() && bias_ != nullptr;
}
inline bool BatchNormOpParams::has_bias() const {
  return _internal_has_bias();
}
inline void BatchNormOpParams::clear_bias() {
  if (GetArena() == nullptr && bias_ != nullptr) {
    delete bias_;
  }
  bias_ = nullptr;
}
inline const ::domi::WeightDef& BatchNormOpParams::_internal_bias() const {
  const ::domi::WeightDef* p = bias_;
  return p != nullptr ? *p : *reinterpret_cast<const ::domi::WeightDef*>(
      &::domi::_WeightDef_default_instance_);
}
inline const ::domi::WeightDef& BatchNormOpParams::bias() const {
  // @@protoc_insertion_point(field_get:domi.BatchNormOpParams.bias)
  return _internal_bias();
}
inline void BatchNormOpParams::unsafe_arena_set_allocated_bias(
    ::domi::WeightDef* bias) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bias_);
  }
  bias_ = bias;
  if (bias) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.BatchNormOpParams.bias)
}
inline ::domi::WeightDef* BatchNormOpParams::release_bias() {
  
  ::domi::WeightDef* temp = bias_;
  bias_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::domi::WeightDef* BatchNormOpParams::unsafe_arena_release_bias() {
  // @@protoc_insertion_point(field_release:domi.BatchNormOpParams.bias)
  
  ::domi::WeightDef* temp = bias_;
  bias_ = nullptr;
  return temp;
}
inline ::domi::WeightDef* BatchNormOpParams::_internal_mutable_bias() {
  
  if (bias_ == nullptr) {
    auto* p = CreateMaybeMessage<::domi::WeightDef>(GetArena());
    bias_ = p;
  }
  return bias_;
}
inline ::domi::WeightDef* BatchNormOpParams::mutable_bias() {
  // @@protoc_insertion_point(field_mutable:domi.BatchNormOpParams.bias)
  return _internal_mutable_bias();
}
inline void BatchNormOpParams::set_allocated_bias(::domi::WeightDef* bias) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bias_;
  }
  if (bias) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bias);
    if (message_arena != submessage_arena) {
      bias = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias, submessage_arena);
    }
    
  } else {
    
  }
  bias_ = bias;
  // @@protoc_insertion_point(field_set_allocated:domi.BatchNormOpParams.bias)
}

// -------------------------------------------------------------------

// ScaleOpParams

// .domi.WeightDef scale = 1;
inline bool ScaleOpParams::_internal_has_scale() const {
  return this != internal_default_instance() && scale_ != nullptr;
}
inline bool ScaleOpParams::has_scale() const {
  return _internal_has_scale();
}
inline void ScaleOpParams::clear_scale() {
  if (GetArena() == nullptr && scale_ != nullptr) {
    delete scale_;
  }
  scale_ = nullptr;
}
inline const ::domi::WeightDef& ScaleOpParams::_internal_scale() const {
  const ::domi::WeightDef* p = scale_;
  return p != nullptr ? *p : *reinterpret_cast<const ::domi::WeightDef*>(
      &::domi::_WeightDef_default_instance_);
}
inline const ::domi::WeightDef& ScaleOpParams::scale() const {
  // @@protoc_insertion_point(field_get:domi.ScaleOpParams.scale)
  return _internal_scale();
}
inline void ScaleOpParams::unsafe_arena_set_allocated_scale(
    ::domi::WeightDef* scale) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale_);
  }
  scale_ = scale;
  if (scale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.ScaleOpParams.scale)
}
inline ::domi::WeightDef* ScaleOpParams::release_scale() {
  
  ::domi::WeightDef* temp = scale_;
  scale_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::domi::WeightDef* ScaleOpParams::unsafe_arena_release_scale() {
  // @@protoc_insertion_point(field_release:domi.ScaleOpParams.scale)
  
  ::domi::WeightDef* temp = scale_;
  scale_ = nullptr;
  return temp;
}
inline ::domi::WeightDef* ScaleOpParams::_internal_mutable_scale() {
  
  if (scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::domi::WeightDef>(GetArena());
    scale_ = p;
  }
  return scale_;
}
inline ::domi::WeightDef* ScaleOpParams::mutable_scale() {
  // @@protoc_insertion_point(field_mutable:domi.ScaleOpParams.scale)
  return _internal_mutable_scale();
}
inline void ScaleOpParams::set_allocated_scale(::domi::WeightDef* scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete scale_;
  }
  if (scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scale);
    if (message_arena != submessage_arena) {
      scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    
  } else {
    
  }
  scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:domi.ScaleOpParams.scale)
}

// .domi.WeightDef bias = 2;
inline bool ScaleOpParams::_internal_has_bias() const {
  return this != internal_default_instance() && bias_ != nullptr;
}
inline bool ScaleOpParams::has_bias() const {
  return _internal_has_bias();
}
inline void ScaleOpParams::clear_bias() {
  if (GetArena() == nullptr && bias_ != nullptr) {
    delete bias_;
  }
  bias_ = nullptr;
}
inline const ::domi::WeightDef& ScaleOpParams::_internal_bias() const {
  const ::domi::WeightDef* p = bias_;
  return p != nullptr ? *p : *reinterpret_cast<const ::domi::WeightDef*>(
      &::domi::_WeightDef_default_instance_);
}
inline const ::domi::WeightDef& ScaleOpParams::bias() const {
  // @@protoc_insertion_point(field_get:domi.ScaleOpParams.bias)
  return _internal_bias();
}
inline void ScaleOpParams::unsafe_arena_set_allocated_bias(
    ::domi::WeightDef* bias) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bias_);
  }
  bias_ = bias;
  if (bias) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.ScaleOpParams.bias)
}
inline ::domi::WeightDef* ScaleOpParams::release_bias() {
  
  ::domi::WeightDef* temp = bias_;
  bias_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::domi::WeightDef* ScaleOpParams::unsafe_arena_release_bias() {
  // @@protoc_insertion_point(field_release:domi.ScaleOpParams.bias)
  
  ::domi::WeightDef* temp = bias_;
  bias_ = nullptr;
  return temp;
}
inline ::domi::WeightDef* ScaleOpParams::_internal_mutable_bias() {
  
  if (bias_ == nullptr) {
    auto* p = CreateMaybeMessage<::domi::WeightDef>(GetArena());
    bias_ = p;
  }
  return bias_;
}
inline ::domi::WeightDef* ScaleOpParams::mutable_bias() {
  // @@protoc_insertion_point(field_mutable:domi.ScaleOpParams.bias)
  return _internal_mutable_bias();
}
inline void ScaleOpParams::set_allocated_bias(::domi::WeightDef* bias) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bias_;
  }
  if (bias) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bias);
    if (message_arena != submessage_arena) {
      bias = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias, submessage_arena);
    }
    
  } else {
    
  }
  bias_ = bias;
  // @@protoc_insertion_point(field_set_allocated:domi.ScaleOpParams.bias)
}

// -------------------------------------------------------------------

// ReshapeOpParams

// float alpha = 1;
inline void ReshapeOpParams::clear_alpha() {
  alpha_ = 0;
}
inline float ReshapeOpParams::_internal_alpha() const {
  return alpha_;
}
inline float ReshapeOpParams::alpha() const {
  // @@protoc_insertion_point(field_get:domi.ReshapeOpParams.alpha)
  return _internal_alpha();
}
inline void ReshapeOpParams::_internal_set_alpha(float value) {
  
  alpha_ = value;
}
inline void ReshapeOpParams::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:domi.ReshapeOpParams.alpha)
}

// float beta = 2;
inline void ReshapeOpParams::clear_beta() {
  beta_ = 0;
}
inline float ReshapeOpParams::_internal_beta() const {
  return beta_;
}
inline float ReshapeOpParams::beta() const {
  // @@protoc_insertion_point(field_get:domi.ReshapeOpParams.beta)
  return _internal_beta();
}
inline void ReshapeOpParams::_internal_set_beta(float value) {
  
  beta_ = value;
}
inline void ReshapeOpParams::set_beta(float value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:domi.ReshapeOpParams.beta)
}

// .domi.ShapeDef shape = 3;
inline bool ReshapeOpParams::_internal_has_shape() const {
  return this != internal_default_instance() && shape_ != nullptr;
}
inline bool ReshapeOpParams::has_shape() const {
  return _internal_has_shape();
}
inline void ReshapeOpParams::clear_shape() {
  if (GetArena() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
}
inline const ::domi::ShapeDef& ReshapeOpParams::_internal_shape() const {
  const ::domi::ShapeDef* p = shape_;
  return p != nullptr ? *p : *reinterpret_cast<const ::domi::ShapeDef*>(
      &::domi::_ShapeDef_default_instance_);
}
inline const ::domi::ShapeDef& ReshapeOpParams::shape() const {
  // @@protoc_insertion_point(field_get:domi.ReshapeOpParams.shape)
  return _internal_shape();
}
inline void ReshapeOpParams::unsafe_arena_set_allocated_shape(
    ::domi::ShapeDef* shape) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.ReshapeOpParams.shape)
}
inline ::domi::ShapeDef* ReshapeOpParams::release_shape() {
  
  ::domi::ShapeDef* temp = shape_;
  shape_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::domi::ShapeDef* ReshapeOpParams::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_release:domi.ReshapeOpParams.shape)
  
  ::domi::ShapeDef* temp = shape_;
  shape_ = nullptr;
  return temp;
}
inline ::domi::ShapeDef* ReshapeOpParams::_internal_mutable_shape() {
  
  if (shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::domi::ShapeDef>(GetArena());
    shape_ = p;
  }
  return shape_;
}
inline ::domi::ShapeDef* ReshapeOpParams::mutable_shape() {
  // @@protoc_insertion_point(field_mutable:domi.ReshapeOpParams.shape)
  return _internal_mutable_shape();
}
inline void ReshapeOpParams::set_allocated_shape(::domi::ShapeDef* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shape_;
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shape);
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    
  } else {
    
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:domi.ReshapeOpParams.shape)
}

// int32 axis = 4;
inline void ReshapeOpParams::clear_axis() {
  axis_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReshapeOpParams::_internal_axis() const {
  return axis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReshapeOpParams::axis() const {
  // @@protoc_insertion_point(field_get:domi.ReshapeOpParams.axis)
  return _internal_axis();
}
inline void ReshapeOpParams::_internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  axis_ = value;
}
inline void ReshapeOpParams::set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:domi.ReshapeOpParams.axis)
}

// int32 num_axes = 5;
inline void ReshapeOpParams::clear_num_axes() {
  num_axes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReshapeOpParams::_internal_num_axes() const {
  return num_axes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReshapeOpParams::num_axes() const {
  // @@protoc_insertion_point(field_get:domi.ReshapeOpParams.num_axes)
  return _internal_num_axes();
}
inline void ReshapeOpParams::_internal_set_num_axes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_axes_ = value;
}
inline void ReshapeOpParams::set_num_axes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_axes(value);
  // @@protoc_insertion_point(field_set:domi.ReshapeOpParams.num_axes)
}

// int32 format = 6;
inline void ReshapeOpParams::clear_format() {
  format_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReshapeOpParams::_internal_format() const {
  return format_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReshapeOpParams::format() const {
  // @@protoc_insertion_point(field_get:domi.ReshapeOpParams.format)
  return _internal_format();
}
inline void ReshapeOpParams::_internal_set_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  format_ = value;
}
inline void ReshapeOpParams::set_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:domi.ReshapeOpParams.format)
}

// -------------------------------------------------------------------

// SoftmaxOpParams

// int32 algo = 1;
inline void SoftmaxOpParams::clear_algo() {
  algo_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SoftmaxOpParams::_internal_algo() const {
  return algo_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SoftmaxOpParams::algo() const {
  // @@protoc_insertion_point(field_get:domi.SoftmaxOpParams.algo)
  return _internal_algo();
}
inline void SoftmaxOpParams::_internal_set_algo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  algo_ = value;
}
inline void SoftmaxOpParams::set_algo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_algo(value);
  // @@protoc_insertion_point(field_set:domi.SoftmaxOpParams.algo)
}

// int32 mode = 2;
inline void SoftmaxOpParams::clear_mode() {
  mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SoftmaxOpParams::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SoftmaxOpParams::mode() const {
  // @@protoc_insertion_point(field_get:domi.SoftmaxOpParams.mode)
  return _internal_mode();
}
inline void SoftmaxOpParams::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mode_ = value;
}
inline void SoftmaxOpParams::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:domi.SoftmaxOpParams.mode)
}

// float alpha = 3;
inline void SoftmaxOpParams::clear_alpha() {
  alpha_ = 0;
}
inline float SoftmaxOpParams::_internal_alpha() const {
  return alpha_;
}
inline float SoftmaxOpParams::alpha() const {
  // @@protoc_insertion_point(field_get:domi.SoftmaxOpParams.alpha)
  return _internal_alpha();
}
inline void SoftmaxOpParams::_internal_set_alpha(float value) {
  
  alpha_ = value;
}
inline void SoftmaxOpParams::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:domi.SoftmaxOpParams.alpha)
}

// float beta = 4;
inline void SoftmaxOpParams::clear_beta() {
  beta_ = 0;
}
inline float SoftmaxOpParams::_internal_beta() const {
  return beta_;
}
inline float SoftmaxOpParams::beta() const {
  // @@protoc_insertion_point(field_get:domi.SoftmaxOpParams.beta)
  return _internal_beta();
}
inline void SoftmaxOpParams::_internal_set_beta(float value) {
  
  beta_ = value;
}
inline void SoftmaxOpParams::set_beta(float value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:domi.SoftmaxOpParams.beta)
}

// -------------------------------------------------------------------

// FullConnectionOpParams

// .domi.WeightDef filter = 1;
inline bool FullConnectionOpParams::_internal_has_filter() const {
  return this != internal_default_instance() && filter_ != nullptr;
}
inline bool FullConnectionOpParams::has_filter() const {
  return _internal_has_filter();
}
inline void FullConnectionOpParams::clear_filter() {
  if (GetArena() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
}
inline const ::domi::WeightDef& FullConnectionOpParams::_internal_filter() const {
  const ::domi::WeightDef* p = filter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::domi::WeightDef*>(
      &::domi::_WeightDef_default_instance_);
}
inline const ::domi::WeightDef& FullConnectionOpParams::filter() const {
  // @@protoc_insertion_point(field_get:domi.FullConnectionOpParams.filter)
  return _internal_filter();
}
inline void FullConnectionOpParams::unsafe_arena_set_allocated_filter(
    ::domi::WeightDef* filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.FullConnectionOpParams.filter)
}
inline ::domi::WeightDef* FullConnectionOpParams::release_filter() {
  
  ::domi::WeightDef* temp = filter_;
  filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::domi::WeightDef* FullConnectionOpParams::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:domi.FullConnectionOpParams.filter)
  
  ::domi::WeightDef* temp = filter_;
  filter_ = nullptr;
  return temp;
}
inline ::domi::WeightDef* FullConnectionOpParams::_internal_mutable_filter() {
  
  if (filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::domi::WeightDef>(GetArena());
    filter_ = p;
  }
  return filter_;
}
inline ::domi::WeightDef* FullConnectionOpParams::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:domi.FullConnectionOpParams.filter)
  return _internal_mutable_filter();
}
inline void FullConnectionOpParams::set_allocated_filter(::domi::WeightDef* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete filter_;
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filter);
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    
  } else {
    
  }
  filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:domi.FullConnectionOpParams.filter)
}

// .domi.WeightDef bias = 2;
inline bool FullConnectionOpParams::_internal_has_bias() const {
  return this != internal_default_instance() && bias_ != nullptr;
}
inline bool FullConnectionOpParams::has_bias() const {
  return _internal_has_bias();
}
inline void FullConnectionOpParams::clear_bias() {
  if (GetArena() == nullptr && bias_ != nullptr) {
    delete bias_;
  }
  bias_ = nullptr;
}
inline const ::domi::WeightDef& FullConnectionOpParams::_internal_bias() const {
  const ::domi::WeightDef* p = bias_;
  return p != nullptr ? *p : *reinterpret_cast<const ::domi::WeightDef*>(
      &::domi::_WeightDef_default_instance_);
}
inline const ::domi::WeightDef& FullConnectionOpParams::bias() const {
  // @@protoc_insertion_point(field_get:domi.FullConnectionOpParams.bias)
  return _internal_bias();
}
inline void FullConnectionOpParams::unsafe_arena_set_allocated_bias(
    ::domi::WeightDef* bias) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bias_);
  }
  bias_ = bias;
  if (bias) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.FullConnectionOpParams.bias)
}
inline ::domi::WeightDef* FullConnectionOpParams::release_bias() {
  
  ::domi::WeightDef* temp = bias_;
  bias_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::domi::WeightDef* FullConnectionOpParams::unsafe_arena_release_bias() {
  // @@protoc_insertion_point(field_release:domi.FullConnectionOpParams.bias)
  
  ::domi::WeightDef* temp = bias_;
  bias_ = nullptr;
  return temp;
}
inline ::domi::WeightDef* FullConnectionOpParams::_internal_mutable_bias() {
  
  if (bias_ == nullptr) {
    auto* p = CreateMaybeMessage<::domi::WeightDef>(GetArena());
    bias_ = p;
  }
  return bias_;
}
inline ::domi::WeightDef* FullConnectionOpParams::mutable_bias() {
  // @@protoc_insertion_point(field_mutable:domi.FullConnectionOpParams.bias)
  return _internal_mutable_bias();
}
inline void FullConnectionOpParams::set_allocated_bias(::domi::WeightDef* bias) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bias_;
  }
  if (bias) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bias);
    if (message_arena != submessage_arena) {
      bias = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias, submessage_arena);
    }
    
  } else {
    
  }
  bias_ = bias;
  // @@protoc_insertion_point(field_set_allocated:domi.FullConnectionOpParams.bias)
}

// uint32 num_output = 3;
inline void FullConnectionOpParams::clear_num_output() {
  num_output_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FullConnectionOpParams::_internal_num_output() const {
  return num_output_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FullConnectionOpParams::num_output() const {
  // @@protoc_insertion_point(field_get:domi.FullConnectionOpParams.num_output)
  return _internal_num_output();
}
inline void FullConnectionOpParams::_internal_set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_output_ = value;
}
inline void FullConnectionOpParams::set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_output(value);
  // @@protoc_insertion_point(field_set:domi.FullConnectionOpParams.num_output)
}

// bool relu_flag = 12;
inline void FullConnectionOpParams::clear_relu_flag() {
  relu_flag_ = false;
}
inline bool FullConnectionOpParams::_internal_relu_flag() const {
  return relu_flag_;
}
inline bool FullConnectionOpParams::relu_flag() const {
  // @@protoc_insertion_point(field_get:domi.FullConnectionOpParams.relu_flag)
  return _internal_relu_flag();
}
inline void FullConnectionOpParams::_internal_set_relu_flag(bool value) {
  
  relu_flag_ = value;
}
inline void FullConnectionOpParams::set_relu_flag(bool value) {
  _internal_set_relu_flag(value);
  // @@protoc_insertion_point(field_set:domi.FullConnectionOpParams.relu_flag)
}

// -------------------------------------------------------------------

// FlattenOpParams

// float alpha = 1;
inline void FlattenOpParams::clear_alpha() {
  alpha_ = 0;
}
inline float FlattenOpParams::_internal_alpha() const {
  return alpha_;
}
inline float FlattenOpParams::alpha() const {
  // @@protoc_insertion_point(field_get:domi.FlattenOpParams.alpha)
  return _internal_alpha();
}
inline void FlattenOpParams::_internal_set_alpha(float value) {
  
  alpha_ = value;
}
inline void FlattenOpParams::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:domi.FlattenOpParams.alpha)
}

// float beta = 2;
inline void FlattenOpParams::clear_beta() {
  beta_ = 0;
}
inline float FlattenOpParams::_internal_beta() const {
  return beta_;
}
inline float FlattenOpParams::beta() const {
  // @@protoc_insertion_point(field_get:domi.FlattenOpParams.beta)
  return _internal_beta();
}
inline void FlattenOpParams::_internal_set_beta(float value) {
  
  beta_ = value;
}
inline void FlattenOpParams::set_beta(float value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:domi.FlattenOpParams.beta)
}

// int32 start_axis = 3;
inline void FlattenOpParams::clear_start_axis() {
  start_axis_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlattenOpParams::_internal_start_axis() const {
  return start_axis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlattenOpParams::start_axis() const {
  // @@protoc_insertion_point(field_get:domi.FlattenOpParams.start_axis)
  return _internal_start_axis();
}
inline void FlattenOpParams::_internal_set_start_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_axis_ = value;
}
inline void FlattenOpParams::set_start_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_axis(value);
  // @@protoc_insertion_point(field_set:domi.FlattenOpParams.start_axis)
}

// int32 end_axis = 4;
inline void FlattenOpParams::clear_end_axis() {
  end_axis_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlattenOpParams::_internal_end_axis() const {
  return end_axis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlattenOpParams::end_axis() const {
  // @@protoc_insertion_point(field_get:domi.FlattenOpParams.end_axis)
  return _internal_end_axis();
}
inline void FlattenOpParams::_internal_set_end_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_axis_ = value;
}
inline void FlattenOpParams::set_end_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end_axis(value);
  // @@protoc_insertion_point(field_set:domi.FlattenOpParams.end_axis)
}

// -------------------------------------------------------------------

// AddLimitedOpParams

// float alpha = 1;
inline void AddLimitedOpParams::clear_alpha() {
  alpha_ = 0;
}
inline float AddLimitedOpParams::_internal_alpha() const {
  return alpha_;
}
inline float AddLimitedOpParams::alpha() const {
  // @@protoc_insertion_point(field_get:domi.AddLimitedOpParams.alpha)
  return _internal_alpha();
}
inline void AddLimitedOpParams::_internal_set_alpha(float value) {
  
  alpha_ = value;
}
inline void AddLimitedOpParams::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:domi.AddLimitedOpParams.alpha)
}

// float beta = 2;
inline void AddLimitedOpParams::clear_beta() {
  beta_ = 0;
}
inline float AddLimitedOpParams::_internal_beta() const {
  return beta_;
}
inline float AddLimitedOpParams::beta() const {
  // @@protoc_insertion_point(field_get:domi.AddLimitedOpParams.beta)
  return _internal_beta();
}
inline void AddLimitedOpParams::_internal_set_beta(float value) {
  
  beta_ = value;
}
inline void AddLimitedOpParams::set_beta(float value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:domi.AddLimitedOpParams.beta)
}

// int32 axis = 3;
inline void AddLimitedOpParams::clear_axis() {
  axis_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddLimitedOpParams::_internal_axis() const {
  return axis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddLimitedOpParams::axis() const {
  // @@protoc_insertion_point(field_get:domi.AddLimitedOpParams.axis)
  return _internal_axis();
}
inline void AddLimitedOpParams::_internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  axis_ = value;
}
inline void AddLimitedOpParams::set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:domi.AddLimitedOpParams.axis)
}

// bool broadcast = 4;
inline void AddLimitedOpParams::clear_broadcast() {
  broadcast_ = false;
}
inline bool AddLimitedOpParams::_internal_broadcast() const {
  return broadcast_;
}
inline bool AddLimitedOpParams::broadcast() const {
  // @@protoc_insertion_point(field_get:domi.AddLimitedOpParams.broadcast)
  return _internal_broadcast();
}
inline void AddLimitedOpParams::_internal_set_broadcast(bool value) {
  
  broadcast_ = value;
}
inline void AddLimitedOpParams::set_broadcast(bool value) {
  _internal_set_broadcast(value);
  // @@protoc_insertion_point(field_set:domi.AddLimitedOpParams.broadcast)
}

// repeated .domi.WeightDef weight = 10;
inline int AddLimitedOpParams::_internal_weight_size() const {
  return weight_.size();
}
inline int AddLimitedOpParams::weight_size() const {
  return _internal_weight_size();
}
inline void AddLimitedOpParams::clear_weight() {
  weight_.Clear();
}
inline ::domi::WeightDef* AddLimitedOpParams::mutable_weight(int index) {
  // @@protoc_insertion_point(field_mutable:domi.AddLimitedOpParams.weight)
  return weight_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef >*
AddLimitedOpParams::mutable_weight() {
  // @@protoc_insertion_point(field_mutable_list:domi.AddLimitedOpParams.weight)
  return &weight_;
}
inline const ::domi::WeightDef& AddLimitedOpParams::_internal_weight(int index) const {
  return weight_.Get(index);
}
inline const ::domi::WeightDef& AddLimitedOpParams::weight(int index) const {
  // @@protoc_insertion_point(field_get:domi.AddLimitedOpParams.weight)
  return _internal_weight(index);
}
inline ::domi::WeightDef* AddLimitedOpParams::_internal_add_weight() {
  return weight_.Add();
}
inline ::domi::WeightDef* AddLimitedOpParams::add_weight() {
  // @@protoc_insertion_point(field_add:domi.AddLimitedOpParams.weight)
  return _internal_add_weight();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef >&
AddLimitedOpParams::weight() const {
  // @@protoc_insertion_point(field_list:domi.AddLimitedOpParams.weight)
  return weight_;
}

// -------------------------------------------------------------------

// MulLimitedOpParams

// float alpha = 1;
inline void MulLimitedOpParams::clear_alpha() {
  alpha_ = 0;
}
inline float MulLimitedOpParams::_internal_alpha() const {
  return alpha_;
}
inline float MulLimitedOpParams::alpha() const {
  // @@protoc_insertion_point(field_get:domi.MulLimitedOpParams.alpha)
  return _internal_alpha();
}
inline void MulLimitedOpParams::_internal_set_alpha(float value) {
  
  alpha_ = value;
}
inline void MulLimitedOpParams::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:domi.MulLimitedOpParams.alpha)
}

// float beta = 2;
inline void MulLimitedOpParams::clear_beta() {
  beta_ = 0;
}
inline float MulLimitedOpParams::_internal_beta() const {
  return beta_;
}
inline float MulLimitedOpParams::beta() const {
  // @@protoc_insertion_point(field_get:domi.MulLimitedOpParams.beta)
  return _internal_beta();
}
inline void MulLimitedOpParams::_internal_set_beta(float value) {
  
  beta_ = value;
}
inline void MulLimitedOpParams::set_beta(float value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:domi.MulLimitedOpParams.beta)
}

// int32 axis = 3;
inline void MulLimitedOpParams::clear_axis() {
  axis_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MulLimitedOpParams::_internal_axis() const {
  return axis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MulLimitedOpParams::axis() const {
  // @@protoc_insertion_point(field_get:domi.MulLimitedOpParams.axis)
  return _internal_axis();
}
inline void MulLimitedOpParams::_internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  axis_ = value;
}
inline void MulLimitedOpParams::set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:domi.MulLimitedOpParams.axis)
}

// bool broadcast = 4;
inline void MulLimitedOpParams::clear_broadcast() {
  broadcast_ = false;
}
inline bool MulLimitedOpParams::_internal_broadcast() const {
  return broadcast_;
}
inline bool MulLimitedOpParams::broadcast() const {
  // @@protoc_insertion_point(field_get:domi.MulLimitedOpParams.broadcast)
  return _internal_broadcast();
}
inline void MulLimitedOpParams::_internal_set_broadcast(bool value) {
  
  broadcast_ = value;
}
inline void MulLimitedOpParams::set_broadcast(bool value) {
  _internal_set_broadcast(value);
  // @@protoc_insertion_point(field_set:domi.MulLimitedOpParams.broadcast)
}

// repeated .domi.WeightDef weight = 10;
inline int MulLimitedOpParams::_internal_weight_size() const {
  return weight_.size();
}
inline int MulLimitedOpParams::weight_size() const {
  return _internal_weight_size();
}
inline void MulLimitedOpParams::clear_weight() {
  weight_.Clear();
}
inline ::domi::WeightDef* MulLimitedOpParams::mutable_weight(int index) {
  // @@protoc_insertion_point(field_mutable:domi.MulLimitedOpParams.weight)
  return weight_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef >*
MulLimitedOpParams::mutable_weight() {
  // @@protoc_insertion_point(field_mutable_list:domi.MulLimitedOpParams.weight)
  return &weight_;
}
inline const ::domi::WeightDef& MulLimitedOpParams::_internal_weight(int index) const {
  return weight_.Get(index);
}
inline const ::domi::WeightDef& MulLimitedOpParams::weight(int index) const {
  // @@protoc_insertion_point(field_get:domi.MulLimitedOpParams.weight)
  return _internal_weight(index);
}
inline ::domi::WeightDef* MulLimitedOpParams::_internal_add_weight() {
  return weight_.Add();
}
inline ::domi::WeightDef* MulLimitedOpParams::add_weight() {
  // @@protoc_insertion_point(field_add:domi.MulLimitedOpParams.weight)
  return _internal_add_weight();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef >&
MulLimitedOpParams::weight() const {
  // @@protoc_insertion_point(field_list:domi.MulLimitedOpParams.weight)
  return weight_;
}

// -------------------------------------------------------------------

// AddOpParams

// float alpha = 1;
inline void AddOpParams::clear_alpha() {
  alpha_ = 0;
}
inline float AddOpParams::_internal_alpha() const {
  return alpha_;
}
inline float AddOpParams::alpha() const {
  // @@protoc_insertion_point(field_get:domi.AddOpParams.alpha)
  return _internal_alpha();
}
inline void AddOpParams::_internal_set_alpha(float value) {
  
  alpha_ = value;
}
inline void AddOpParams::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:domi.AddOpParams.alpha)
}

// float beta = 2;
inline void AddOpParams::clear_beta() {
  beta_ = 0;
}
inline float AddOpParams::_internal_beta() const {
  return beta_;
}
inline float AddOpParams::beta() const {
  // @@protoc_insertion_point(field_get:domi.AddOpParams.beta)
  return _internal_beta();
}
inline void AddOpParams::_internal_set_beta(float value) {
  
  beta_ = value;
}
inline void AddOpParams::set_beta(float value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:domi.AddOpParams.beta)
}

// repeated .domi.WeightDef weight = 10;
inline int AddOpParams::_internal_weight_size() const {
  return weight_.size();
}
inline int AddOpParams::weight_size() const {
  return _internal_weight_size();
}
inline void AddOpParams::clear_weight() {
  weight_.Clear();
}
inline ::domi::WeightDef* AddOpParams::mutable_weight(int index) {
  // @@protoc_insertion_point(field_mutable:domi.AddOpParams.weight)
  return weight_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef >*
AddOpParams::mutable_weight() {
  // @@protoc_insertion_point(field_mutable_list:domi.AddOpParams.weight)
  return &weight_;
}
inline const ::domi::WeightDef& AddOpParams::_internal_weight(int index) const {
  return weight_.Get(index);
}
inline const ::domi::WeightDef& AddOpParams::weight(int index) const {
  // @@protoc_insertion_point(field_get:domi.AddOpParams.weight)
  return _internal_weight(index);
}
inline ::domi::WeightDef* AddOpParams::_internal_add_weight() {
  return weight_.Add();
}
inline ::domi::WeightDef* AddOpParams::add_weight() {
  // @@protoc_insertion_point(field_add:domi.AddOpParams.weight)
  return _internal_add_weight();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef >&
AddOpParams::weight() const {
  // @@protoc_insertion_point(field_list:domi.AddOpParams.weight)
  return weight_;
}

// -------------------------------------------------------------------

// MulOpParams

// float alpha = 1;
inline void MulOpParams::clear_alpha() {
  alpha_ = 0;
}
inline float MulOpParams::_internal_alpha() const {
  return alpha_;
}
inline float MulOpParams::alpha() const {
  // @@protoc_insertion_point(field_get:domi.MulOpParams.alpha)
  return _internal_alpha();
}
inline void MulOpParams::_internal_set_alpha(float value) {
  
  alpha_ = value;
}
inline void MulOpParams::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:domi.MulOpParams.alpha)
}

// float beta = 2;
inline void MulOpParams::clear_beta() {
  beta_ = 0;
}
inline float MulOpParams::_internal_beta() const {
  return beta_;
}
inline float MulOpParams::beta() const {
  // @@protoc_insertion_point(field_get:domi.MulOpParams.beta)
  return _internal_beta();
}
inline void MulOpParams::_internal_set_beta(float value) {
  
  beta_ = value;
}
inline void MulOpParams::set_beta(float value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:domi.MulOpParams.beta)
}

// repeated .domi.WeightDef weight = 10;
inline int MulOpParams::_internal_weight_size() const {
  return weight_.size();
}
inline int MulOpParams::weight_size() const {
  return _internal_weight_size();
}
inline void MulOpParams::clear_weight() {
  weight_.Clear();
}
inline ::domi::WeightDef* MulOpParams::mutable_weight(int index) {
  // @@protoc_insertion_point(field_mutable:domi.MulOpParams.weight)
  return weight_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef >*
MulOpParams::mutable_weight() {
  // @@protoc_insertion_point(field_mutable_list:domi.MulOpParams.weight)
  return &weight_;
}
inline const ::domi::WeightDef& MulOpParams::_internal_weight(int index) const {
  return weight_.Get(index);
}
inline const ::domi::WeightDef& MulOpParams::weight(int index) const {
  // @@protoc_insertion_point(field_get:domi.MulOpParams.weight)
  return _internal_weight(index);
}
inline ::domi::WeightDef* MulOpParams::_internal_add_weight() {
  return weight_.Add();
}
inline ::domi::WeightDef* MulOpParams::add_weight() {
  // @@protoc_insertion_point(field_add:domi.MulOpParams.weight)
  return _internal_add_weight();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef >&
MulOpParams::weight() const {
  // @@protoc_insertion_point(field_list:domi.MulOpParams.weight)
  return weight_;
}

// -------------------------------------------------------------------

// SubOpParams

// float alpha = 1;
inline void SubOpParams::clear_alpha() {
  alpha_ = 0;
}
inline float SubOpParams::_internal_alpha() const {
  return alpha_;
}
inline float SubOpParams::alpha() const {
  // @@protoc_insertion_point(field_get:domi.SubOpParams.alpha)
  return _internal_alpha();
}
inline void SubOpParams::_internal_set_alpha(float value) {
  
  alpha_ = value;
}
inline void SubOpParams::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:domi.SubOpParams.alpha)
}

// float beta = 2;
inline void SubOpParams::clear_beta() {
  beta_ = 0;
}
inline float SubOpParams::_internal_beta() const {
  return beta_;
}
inline float SubOpParams::beta() const {
  // @@protoc_insertion_point(field_get:domi.SubOpParams.beta)
  return _internal_beta();
}
inline void SubOpParams::_internal_set_beta(float value) {
  
  beta_ = value;
}
inline void SubOpParams::set_beta(float value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:domi.SubOpParams.beta)
}

// repeated .domi.WeightDef weight = 10;
inline int SubOpParams::_internal_weight_size() const {
  return weight_.size();
}
inline int SubOpParams::weight_size() const {
  return _internal_weight_size();
}
inline void SubOpParams::clear_weight() {
  weight_.Clear();
}
inline ::domi::WeightDef* SubOpParams::mutable_weight(int index) {
  // @@protoc_insertion_point(field_mutable:domi.SubOpParams.weight)
  return weight_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef >*
SubOpParams::mutable_weight() {
  // @@protoc_insertion_point(field_mutable_list:domi.SubOpParams.weight)
  return &weight_;
}
inline const ::domi::WeightDef& SubOpParams::_internal_weight(int index) const {
  return weight_.Get(index);
}
inline const ::domi::WeightDef& SubOpParams::weight(int index) const {
  // @@protoc_insertion_point(field_get:domi.SubOpParams.weight)
  return _internal_weight(index);
}
inline ::domi::WeightDef* SubOpParams::_internal_add_weight() {
  return weight_.Add();
}
inline ::domi::WeightDef* SubOpParams::add_weight() {
  // @@protoc_insertion_point(field_add:domi.SubOpParams.weight)
  return _internal_add_weight();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::domi::WeightDef >&
SubOpParams::weight() const {
  // @@protoc_insertion_point(field_list:domi.SubOpParams.weight)
  return weight_;
}

// -------------------------------------------------------------------

// BiasAddOpParams

// float alpha = 1;
inline void BiasAddOpParams::clear_alpha() {
  alpha_ = 0;
}
inline float BiasAddOpParams::_internal_alpha() const {
  return alpha_;
}
inline float BiasAddOpParams::alpha() const {
  // @@protoc_insertion_point(field_get:domi.BiasAddOpParams.alpha)
  return _internal_alpha();
}
inline void BiasAddOpParams::_internal_set_alpha(float value) {
  
  alpha_ = value;
}
inline void BiasAddOpParams::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:domi.BiasAddOpParams.alpha)
}

// float beta = 2;
inline void BiasAddOpParams::clear_beta() {
  beta_ = 0;
}
inline float BiasAddOpParams::_internal_beta() const {
  return beta_;
}
inline float BiasAddOpParams::beta() const {
  // @@protoc_insertion_point(field_get:domi.BiasAddOpParams.beta)
  return _internal_beta();
}
inline void BiasAddOpParams::_internal_set_beta(float value) {
  
  beta_ = value;
}
inline void BiasAddOpParams::set_beta(float value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:domi.BiasAddOpParams.beta)
}

// .domi.WeightDef bias = 10;
inline bool BiasAddOpParams::_internal_has_bias() const {
  return this != internal_default_instance() && bias_ != nullptr;
}
inline bool BiasAddOpParams::has_bias() const {
  return _internal_has_bias();
}
inline void BiasAddOpParams::clear_bias() {
  if (GetArena() == nullptr && bias_ != nullptr) {
    delete bias_;
  }
  bias_ = nullptr;
}
inline const ::domi::WeightDef& BiasAddOpParams::_internal_bias() const {
  const ::domi::WeightDef* p = bias_;
  return p != nullptr ? *p : *reinterpret_cast<const ::domi::WeightDef*>(
      &::domi::_WeightDef_default_instance_);
}
inline const ::domi::WeightDef& BiasAddOpParams::bias() const {
  // @@protoc_insertion_point(field_get:domi.BiasAddOpParams.bias)
  return _internal_bias();
}
inline void BiasAddOpParams::unsafe_arena_set_allocated_bias(
    ::domi::WeightDef* bias) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bias_);
  }
  bias_ = bias;
  if (bias) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.BiasAddOpParams.bias)
}
inline ::domi::WeightDef* BiasAddOpParams::release_bias() {
  
  ::domi::WeightDef* temp = bias_;
  bias_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::domi::WeightDef* BiasAddOpParams::unsafe_arena_release_bias() {
  // @@protoc_insertion_point(field_release:domi.BiasAddOpParams.bias)
  
  ::domi::WeightDef* temp = bias_;
  bias_ = nullptr;
  return temp;
}
inline ::domi::WeightDef* BiasAddOpParams::_internal_mutable_bias() {
  
  if (bias_ == nullptr) {
    auto* p = CreateMaybeMessage<::domi::WeightDef>(GetArena());
    bias_ = p;
  }
  return bias_;
}
inline ::domi::WeightDef* BiasAddOpParams::mutable_bias() {
  // @@protoc_insertion_point(field_mutable:domi.BiasAddOpParams.bias)
  return _internal_mutable_bias();
}
inline void BiasAddOpParams::set_allocated_bias(::domi::WeightDef* bias) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bias_;
  }
  if (bias) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bias);
    if (message_arena != submessage_arena) {
      bias = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias, submessage_arena);
    }
    
  } else {
    
  }
  bias_ = bias;
  // @@protoc_insertion_point(field_set_allocated:domi.BiasAddOpParams.bias)
}

// -------------------------------------------------------------------

// MatMulOpParams

// float alpha = 1;
inline void MatMulOpParams::clear_alpha() {
  alpha_ = 0;
}
inline float MatMulOpParams::_internal_alpha() const {
  return alpha_;
}
inline float MatMulOpParams::alpha() const {
  // @@protoc_insertion_point(field_get:domi.MatMulOpParams.alpha)
  return _internal_alpha();
}
inline void MatMulOpParams::_internal_set_alpha(float value) {
  
  alpha_ = value;
}
inline void MatMulOpParams::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:domi.MatMulOpParams.alpha)
}

// float beta = 2;
inline void MatMulOpParams::clear_beta() {
  beta_ = 0;
}
inline float MatMulOpParams::_internal_beta() const {
  return beta_;
}
inline float MatMulOpParams::beta() const {
  // @@protoc_insertion_point(field_get:domi.MatMulOpParams.beta)
  return _internal_beta();
}
inline void MatMulOpParams::_internal_set_beta(float value) {
  
  beta_ = value;
}
inline void MatMulOpParams::set_beta(float value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:domi.MatMulOpParams.beta)
}

// bool transposeX = 3;
inline void MatMulOpParams::clear_transposex() {
  transposex_ = false;
}
inline bool MatMulOpParams::_internal_transposex() const {
  return transposex_;
}
inline bool MatMulOpParams::transposex() const {
  // @@protoc_insertion_point(field_get:domi.MatMulOpParams.transposeX)
  return _internal_transposex();
}
inline void MatMulOpParams::_internal_set_transposex(bool value) {
  
  transposex_ = value;
}
inline void MatMulOpParams::set_transposex(bool value) {
  _internal_set_transposex(value);
  // @@protoc_insertion_point(field_set:domi.MatMulOpParams.transposeX)
}

// bool transposeW = 4;
inline void MatMulOpParams::clear_transposew() {
  transposew_ = false;
}
inline bool MatMulOpParams::_internal_transposew() const {
  return transposew_;
}
inline bool MatMulOpParams::transposew() const {
  // @@protoc_insertion_point(field_get:domi.MatMulOpParams.transposeW)
  return _internal_transposew();
}
inline void MatMulOpParams::_internal_set_transposew(bool value) {
  
  transposew_ = value;
}
inline void MatMulOpParams::set_transposew(bool value) {
  _internal_set_transposew(value);
  // @@protoc_insertion_point(field_set:domi.MatMulOpParams.transposeW)
}

// .domi.WeightDef filter = 10;
inline bool MatMulOpParams::_internal_has_filter() const {
  return this != internal_default_instance() && filter_ != nullptr;
}
inline bool MatMulOpParams::has_filter() const {
  return _internal_has_filter();
}
inline void MatMulOpParams::clear_filter() {
  if (GetArena() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
}
inline const ::domi::WeightDef& MatMulOpParams::_internal_filter() const {
  const ::domi::WeightDef* p = filter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::domi::WeightDef*>(
      &::domi::_WeightDef_default_instance_);
}
inline const ::domi::WeightDef& MatMulOpParams::filter() const {
  // @@protoc_insertion_point(field_get:domi.MatMulOpParams.filter)
  return _internal_filter();
}
inline void MatMulOpParams::unsafe_arena_set_allocated_filter(
    ::domi::WeightDef* filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.MatMulOpParams.filter)
}
inline ::domi::WeightDef* MatMulOpParams::release_filter() {
  
  ::domi::WeightDef* temp = filter_;
  filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::domi::WeightDef* MatMulOpParams::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:domi.MatMulOpParams.filter)
  
  ::domi::WeightDef* temp = filter_;
  filter_ = nullptr;
  return temp;
}
inline ::domi::WeightDef* MatMulOpParams::_internal_mutable_filter() {
  
  if (filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::domi::WeightDef>(GetArena());
    filter_ = p;
  }
  return filter_;
}
inline ::domi::WeightDef* MatMulOpParams::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:domi.MatMulOpParams.filter)
  return _internal_mutable_filter();
}
inline void MatMulOpParams::set_allocated_filter(::domi::WeightDef* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete filter_;
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filter);
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    
  } else {
    
  }
  filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:domi.MatMulOpParams.filter)
}

// .domi.WeightDef bias = 12;
inline bool MatMulOpParams::_internal_has_bias() const {
  return this != internal_default_instance() && bias_ != nullptr;
}
inline bool MatMulOpParams::has_bias() const {
  return _internal_has_bias();
}
inline void MatMulOpParams::clear_bias() {
  if (GetArena() == nullptr && bias_ != nullptr) {
    delete bias_;
  }
  bias_ = nullptr;
}
inline const ::domi::WeightDef& MatMulOpParams::_internal_bias() const {
  const ::domi::WeightDef* p = bias_;
  return p != nullptr ? *p : *reinterpret_cast<const ::domi::WeightDef*>(
      &::domi::_WeightDef_default_instance_);
}
inline const ::domi::WeightDef& MatMulOpParams::bias() const {
  // @@protoc_insertion_point(field_get:domi.MatMulOpParams.bias)
  return _internal_bias();
}
inline void MatMulOpParams::unsafe_arena_set_allocated_bias(
    ::domi::WeightDef* bias) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bias_);
  }
  bias_ = bias;
  if (bias) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.MatMulOpParams.bias)
}
inline ::domi::WeightDef* MatMulOpParams::release_bias() {
  
  ::domi::WeightDef* temp = bias_;
  bias_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::domi::WeightDef* MatMulOpParams::unsafe_arena_release_bias() {
  // @@protoc_insertion_point(field_release:domi.MatMulOpParams.bias)
  
  ::domi::WeightDef* temp = bias_;
  bias_ = nullptr;
  return temp;
}
inline ::domi::WeightDef* MatMulOpParams::_internal_mutable_bias() {
  
  if (bias_ == nullptr) {
    auto* p = CreateMaybeMessage<::domi::WeightDef>(GetArena());
    bias_ = p;
  }
  return bias_;
}
inline ::domi::WeightDef* MatMulOpParams::mutable_bias() {
  // @@protoc_insertion_point(field_mutable:domi.MatMulOpParams.bias)
  return _internal_mutable_bias();
}
inline void MatMulOpParams::set_allocated_bias(::domi::WeightDef* bias) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bias_;
  }
  if (bias) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bias);
    if (message_arena != submessage_arena) {
      bias = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias, submessage_arena);
    }
    
  } else {
    
  }
  bias_ = bias;
  // @@protoc_insertion_point(field_set_allocated:domi.MatMulOpParams.bias)
}

// -------------------------------------------------------------------

// RsqrtOpParams

// float alpha = 1;
inline void RsqrtOpParams::clear_alpha() {
  alpha_ = 0;
}
inline float RsqrtOpParams::_internal_alpha() const {
  return alpha_;
}
inline float RsqrtOpParams::alpha() const {
  // @@protoc_insertion_point(field_get:domi.RsqrtOpParams.alpha)
  return _internal_alpha();
}
inline void RsqrtOpParams::_internal_set_alpha(float value) {
  
  alpha_ = value;
}
inline void RsqrtOpParams::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:domi.RsqrtOpParams.alpha)
}

// float beta = 2;
inline void RsqrtOpParams::clear_beta() {
  beta_ = 0;
}
inline float RsqrtOpParams::_internal_beta() const {
  return beta_;
}
inline float RsqrtOpParams::beta() const {
  // @@protoc_insertion_point(field_get:domi.RsqrtOpParams.beta)
  return _internal_beta();
}
inline void RsqrtOpParams::_internal_set_beta(float value) {
  
  beta_ = value;
}
inline void RsqrtOpParams::set_beta(float value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:domi.RsqrtOpParams.beta)
}

// -------------------------------------------------------------------

// WeightDef

// int32 format = 1;
inline void WeightDef::clear_format() {
  format_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeightDef::_internal_format() const {
  return format_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeightDef::format() const {
  // @@protoc_insertion_point(field_get:domi.WeightDef.format)
  return _internal_format();
}
inline void WeightDef::_internal_set_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  format_ = value;
}
inline void WeightDef::set_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:domi.WeightDef.format)
}

// int32 data_type = 2;
inline void WeightDef::clear_data_type() {
  data_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeightDef::_internal_data_type() const {
  return data_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeightDef::data_type() const {
  // @@protoc_insertion_point(field_get:domi.WeightDef.data_type)
  return _internal_data_type();
}
inline void WeightDef::_internal_set_data_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  data_type_ = value;
}
inline void WeightDef::set_data_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:domi.WeightDef.data_type)
}

// .domi.ShapeDef shape = 3;
inline bool WeightDef::_internal_has_shape() const {
  return this != internal_default_instance() && shape_ != nullptr;
}
inline bool WeightDef::has_shape() const {
  return _internal_has_shape();
}
inline void WeightDef::clear_shape() {
  if (GetArena() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
}
inline const ::domi::ShapeDef& WeightDef::_internal_shape() const {
  const ::domi::ShapeDef* p = shape_;
  return p != nullptr ? *p : *reinterpret_cast<const ::domi::ShapeDef*>(
      &::domi::_ShapeDef_default_instance_);
}
inline const ::domi::ShapeDef& WeightDef::shape() const {
  // @@protoc_insertion_point(field_get:domi.WeightDef.shape)
  return _internal_shape();
}
inline void WeightDef::unsafe_arena_set_allocated_shape(
    ::domi::ShapeDef* shape) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.WeightDef.shape)
}
inline ::domi::ShapeDef* WeightDef::release_shape() {
  
  ::domi::ShapeDef* temp = shape_;
  shape_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::domi::ShapeDef* WeightDef::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_release:domi.WeightDef.shape)
  
  ::domi::ShapeDef* temp = shape_;
  shape_ = nullptr;
  return temp;
}
inline ::domi::ShapeDef* WeightDef::_internal_mutable_shape() {
  
  if (shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::domi::ShapeDef>(GetArena());
    shape_ = p;
  }
  return shape_;
}
inline ::domi::ShapeDef* WeightDef::mutable_shape() {
  // @@protoc_insertion_point(field_mutable:domi.WeightDef.shape)
  return _internal_mutable_shape();
}
inline void WeightDef::set_allocated_shape(::domi::ShapeDef* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shape_;
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shape);
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    
  } else {
    
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:domi.WeightDef.shape)
}

// bytes data = 4;
inline void WeightDef::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WeightDef::data() const {
  // @@protoc_insertion_point(field_get:domi.WeightDef.data)
  return _internal_data();
}
inline void WeightDef::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:domi.WeightDef.data)
}
inline std::string* WeightDef::mutable_data() {
  // @@protoc_insertion_point(field_mutable:domi.WeightDef.data)
  return _internal_mutable_data();
}
inline const std::string& WeightDef::_internal_data() const {
  return data_.Get();
}
inline void WeightDef::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WeightDef::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:domi.WeightDef.data)
}
inline void WeightDef::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:domi.WeightDef.data)
}
inline void WeightDef::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:domi.WeightDef.data)
}
inline std::string* WeightDef::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WeightDef::release_data() {
  // @@protoc_insertion_point(field_release:domi.WeightDef.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WeightDef::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:domi.WeightDef.data)
}

// int64 data_offset = 5;
inline void WeightDef::clear_data_offset() {
  data_offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WeightDef::_internal_data_offset() const {
  return data_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WeightDef::data_offset() const {
  // @@protoc_insertion_point(field_get:domi.WeightDef.data_offset)
  return _internal_data_offset();
}
inline void WeightDef::_internal_set_data_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  data_offset_ = value;
}
inline void WeightDef::set_data_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_data_offset(value);
  // @@protoc_insertion_point(field_set:domi.WeightDef.data_offset)
}

// uint32 cmps_size = 6;
inline void WeightDef::clear_cmps_size() {
  cmps_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WeightDef::_internal_cmps_size() const {
  return cmps_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WeightDef::cmps_size() const {
  // @@protoc_insertion_point(field_get:domi.WeightDef.cmps_size)
  return _internal_cmps_size();
}
inline void WeightDef::_internal_set_cmps_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cmps_size_ = value;
}
inline void WeightDef::set_cmps_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cmps_size(value);
  // @@protoc_insertion_point(field_set:domi.WeightDef.cmps_size)
}

// bytes cmps_tab = 7;
inline void WeightDef::clear_cmps_tab() {
  cmps_tab_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WeightDef::cmps_tab() const {
  // @@protoc_insertion_point(field_get:domi.WeightDef.cmps_tab)
  return _internal_cmps_tab();
}
inline void WeightDef::set_cmps_tab(const std::string& value) {
  _internal_set_cmps_tab(value);
  // @@protoc_insertion_point(field_set:domi.WeightDef.cmps_tab)
}
inline std::string* WeightDef::mutable_cmps_tab() {
  // @@protoc_insertion_point(field_mutable:domi.WeightDef.cmps_tab)
  return _internal_mutable_cmps_tab();
}
inline const std::string& WeightDef::_internal_cmps_tab() const {
  return cmps_tab_.Get();
}
inline void WeightDef::_internal_set_cmps_tab(const std::string& value) {
  
  cmps_tab_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WeightDef::set_cmps_tab(std::string&& value) {
  
  cmps_tab_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:domi.WeightDef.cmps_tab)
}
inline void WeightDef::set_cmps_tab(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cmps_tab_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:domi.WeightDef.cmps_tab)
}
inline void WeightDef::set_cmps_tab(const void* value,
    size_t size) {
  
  cmps_tab_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:domi.WeightDef.cmps_tab)
}
inline std::string* WeightDef::_internal_mutable_cmps_tab() {
  
  return cmps_tab_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WeightDef::release_cmps_tab() {
  // @@protoc_insertion_point(field_release:domi.WeightDef.cmps_tab)
  return cmps_tab_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WeightDef::set_allocated_cmps_tab(std::string* cmps_tab) {
  if (cmps_tab != nullptr) {
    
  } else {
    
  }
  cmps_tab_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmps_tab,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:domi.WeightDef.cmps_tab)
}

// int64 cmps_tab_offset = 10;
inline void WeightDef::clear_cmps_tab_offset() {
  cmps_tab_offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WeightDef::_internal_cmps_tab_offset() const {
  return cmps_tab_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WeightDef::cmps_tab_offset() const {
  // @@protoc_insertion_point(field_get:domi.WeightDef.cmps_tab_offset)
  return _internal_cmps_tab_offset();
}
inline void WeightDef::_internal_set_cmps_tab_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  cmps_tab_offset_ = value;
}
inline void WeightDef::set_cmps_tab_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cmps_tab_offset(value);
  // @@protoc_insertion_point(field_set:domi.WeightDef.cmps_tab_offset)
}

// .domi.CompressInfo cmps_info = 8;
inline bool WeightDef::_internal_has_cmps_info() const {
  return this != internal_default_instance() && cmps_info_ != nullptr;
}
inline bool WeightDef::has_cmps_info() const {
  return _internal_has_cmps_info();
}
inline void WeightDef::clear_cmps_info() {
  if (GetArena() == nullptr && cmps_info_ != nullptr) {
    delete cmps_info_;
  }
  cmps_info_ = nullptr;
}
inline const ::domi::CompressInfo& WeightDef::_internal_cmps_info() const {
  const ::domi::CompressInfo* p = cmps_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::domi::CompressInfo*>(
      &::domi::_CompressInfo_default_instance_);
}
inline const ::domi::CompressInfo& WeightDef::cmps_info() const {
  // @@protoc_insertion_point(field_get:domi.WeightDef.cmps_info)
  return _internal_cmps_info();
}
inline void WeightDef::unsafe_arena_set_allocated_cmps_info(
    ::domi::CompressInfo* cmps_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cmps_info_);
  }
  cmps_info_ = cmps_info;
  if (cmps_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.WeightDef.cmps_info)
}
inline ::domi::CompressInfo* WeightDef::release_cmps_info() {
  
  ::domi::CompressInfo* temp = cmps_info_;
  cmps_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::domi::CompressInfo* WeightDef::unsafe_arena_release_cmps_info() {
  // @@protoc_insertion_point(field_release:domi.WeightDef.cmps_info)
  
  ::domi::CompressInfo* temp = cmps_info_;
  cmps_info_ = nullptr;
  return temp;
}
inline ::domi::CompressInfo* WeightDef::_internal_mutable_cmps_info() {
  
  if (cmps_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::domi::CompressInfo>(GetArena());
    cmps_info_ = p;
  }
  return cmps_info_;
}
inline ::domi::CompressInfo* WeightDef::mutable_cmps_info() {
  // @@protoc_insertion_point(field_mutable:domi.WeightDef.cmps_info)
  return _internal_mutable_cmps_info();
}
inline void WeightDef::set_allocated_cmps_info(::domi::CompressInfo* cmps_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cmps_info_;
  }
  if (cmps_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cmps_info);
    if (message_arena != submessage_arena) {
      cmps_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cmps_info, submessage_arena);
    }
    
  } else {
    
  }
  cmps_info_ = cmps_info;
  // @@protoc_insertion_point(field_set_allocated:domi.WeightDef.cmps_info)
}

// .domi.AllOffsetQuantizeInfo alloffset_quantize_info = 11;
inline bool WeightDef::_internal_has_alloffset_quantize_info() const {
  return this != internal_default_instance() && alloffset_quantize_info_ != nullptr;
}
inline bool WeightDef::has_alloffset_quantize_info() const {
  return _internal_has_alloffset_quantize_info();
}
inline void WeightDef::clear_alloffset_quantize_info() {
  if (GetArena() == nullptr && alloffset_quantize_info_ != nullptr) {
    delete alloffset_quantize_info_;
  }
  alloffset_quantize_info_ = nullptr;
}
inline const ::domi::AllOffsetQuantizeInfo& WeightDef::_internal_alloffset_quantize_info() const {
  const ::domi::AllOffsetQuantizeInfo* p = alloffset_quantize_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::domi::AllOffsetQuantizeInfo*>(
      &::domi::_AllOffsetQuantizeInfo_default_instance_);
}
inline const ::domi::AllOffsetQuantizeInfo& WeightDef::alloffset_quantize_info() const {
  // @@protoc_insertion_point(field_get:domi.WeightDef.alloffset_quantize_info)
  return _internal_alloffset_quantize_info();
}
inline void WeightDef::unsafe_arena_set_allocated_alloffset_quantize_info(
    ::domi::AllOffsetQuantizeInfo* alloffset_quantize_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alloffset_quantize_info_);
  }
  alloffset_quantize_info_ = alloffset_quantize_info;
  if (alloffset_quantize_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.WeightDef.alloffset_quantize_info)
}
inline ::domi::AllOffsetQuantizeInfo* WeightDef::release_alloffset_quantize_info() {
  
  ::domi::AllOffsetQuantizeInfo* temp = alloffset_quantize_info_;
  alloffset_quantize_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::domi::AllOffsetQuantizeInfo* WeightDef::unsafe_arena_release_alloffset_quantize_info() {
  // @@protoc_insertion_point(field_release:domi.WeightDef.alloffset_quantize_info)
  
  ::domi::AllOffsetQuantizeInfo* temp = alloffset_quantize_info_;
  alloffset_quantize_info_ = nullptr;
  return temp;
}
inline ::domi::AllOffsetQuantizeInfo* WeightDef::_internal_mutable_alloffset_quantize_info() {
  
  if (alloffset_quantize_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::domi::AllOffsetQuantizeInfo>(GetArena());
    alloffset_quantize_info_ = p;
  }
  return alloffset_quantize_info_;
}
inline ::domi::AllOffsetQuantizeInfo* WeightDef::mutable_alloffset_quantize_info() {
  // @@protoc_insertion_point(field_mutable:domi.WeightDef.alloffset_quantize_info)
  return _internal_mutable_alloffset_quantize_info();
}
inline void WeightDef::set_allocated_alloffset_quantize_info(::domi::AllOffsetQuantizeInfo* alloffset_quantize_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete alloffset_quantize_info_;
  }
  if (alloffset_quantize_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(alloffset_quantize_info);
    if (message_arena != submessage_arena) {
      alloffset_quantize_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alloffset_quantize_info, submessage_arena);
    }
    
  } else {
    
  }
  alloffset_quantize_info_ = alloffset_quantize_info;
  // @@protoc_insertion_point(field_set_allocated:domi.WeightDef.alloffset_quantize_info)
}

// -------------------------------------------------------------------

// ShapeDef

// repeated int64 dim = 1;
inline int ShapeDef::_internal_dim_size() const {
  return dim_.size();
}
inline int ShapeDef::dim_size() const {
  return _internal_dim_size();
}
inline void ShapeDef::clear_dim() {
  dim_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShapeDef::_internal_dim(int index) const {
  return dim_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShapeDef::dim(int index) const {
  // @@protoc_insertion_point(field_get:domi.ShapeDef.dim)
  return _internal_dim(index);
}
inline void ShapeDef::set_dim(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:domi.ShapeDef.dim)
}
inline void ShapeDef::_internal_add_dim(::PROTOBUF_NAMESPACE_ID::int64 value) {
  dim_.Add(value);
}
inline void ShapeDef::add_dim(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_dim(value);
  // @@protoc_insertion_point(field_add:domi.ShapeDef.dim)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ShapeDef::_internal_dim() const {
  return dim_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ShapeDef::dim() const {
  // @@protoc_insertion_point(field_list:domi.ShapeDef.dim)
  return _internal_dim();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ShapeDef::_internal_mutable_dim() {
  return &dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ShapeDef::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:domi.ShapeDef.dim)
  return _internal_mutable_dim();
}

// -------------------------------------------------------------------

// AllOffsetQuantizeInfo

// float scale = 1;
inline void AllOffsetQuantizeInfo::clear_scale() {
  scale_ = 0;
}
inline float AllOffsetQuantizeInfo::_internal_scale() const {
  return scale_;
}
inline float AllOffsetQuantizeInfo::scale() const {
  // @@protoc_insertion_point(field_get:domi.AllOffsetQuantizeInfo.scale)
  return _internal_scale();
}
inline void AllOffsetQuantizeInfo::_internal_set_scale(float value) {
  
  scale_ = value;
}
inline void AllOffsetQuantizeInfo::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:domi.AllOffsetQuantizeInfo.scale)
}

// int32 offset = 2;
inline void AllOffsetQuantizeInfo::clear_offset() {
  offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AllOffsetQuantizeInfo::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AllOffsetQuantizeInfo::offset() const {
  // @@protoc_insertion_point(field_get:domi.AllOffsetQuantizeInfo.offset)
  return _internal_offset();
}
inline void AllOffsetQuantizeInfo::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  offset_ = value;
}
inline void AllOffsetQuantizeInfo::set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:domi.AllOffsetQuantizeInfo.offset)
}

// -------------------------------------------------------------------

// TensorDescriptor

// int32 format = 1;
inline void TensorDescriptor::clear_format() {
  format_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorDescriptor::_internal_format() const {
  return format_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorDescriptor::format() const {
  // @@protoc_insertion_point(field_get:domi.TensorDescriptor.format)
  return _internal_format();
}
inline void TensorDescriptor::_internal_set_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  format_ = value;
}
inline void TensorDescriptor::set_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:domi.TensorDescriptor.format)
}

// int32 data_type = 2;
inline void TensorDescriptor::clear_data_type() {
  data_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorDescriptor::_internal_data_type() const {
  return data_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorDescriptor::data_type() const {
  // @@protoc_insertion_point(field_get:domi.TensorDescriptor.data_type)
  return _internal_data_type();
}
inline void TensorDescriptor::_internal_set_data_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  data_type_ = value;
}
inline void TensorDescriptor::set_data_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:domi.TensorDescriptor.data_type)
}

// repeated int64 dim = 3;
inline int TensorDescriptor::_internal_dim_size() const {
  return dim_.size();
}
inline int TensorDescriptor::dim_size() const {
  return _internal_dim_size();
}
inline void TensorDescriptor::clear_dim() {
  dim_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorDescriptor::_internal_dim(int index) const {
  return dim_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorDescriptor::dim(int index) const {
  // @@protoc_insertion_point(field_get:domi.TensorDescriptor.dim)
  return _internal_dim(index);
}
inline void TensorDescriptor::set_dim(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:domi.TensorDescriptor.dim)
}
inline void TensorDescriptor::_internal_add_dim(::PROTOBUF_NAMESPACE_ID::int64 value) {
  dim_.Add(value);
}
inline void TensorDescriptor::add_dim(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_dim(value);
  // @@protoc_insertion_point(field_add:domi.TensorDescriptor.dim)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TensorDescriptor::_internal_dim() const {
  return dim_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TensorDescriptor::dim() const {
  // @@protoc_insertion_point(field_list:domi.TensorDescriptor.dim)
  return _internal_dim();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TensorDescriptor::_internal_mutable_dim() {
  return &dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TensorDescriptor::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:domi.TensorDescriptor.dim)
  return _internal_mutable_dim();
}

// uint32 size = 4;
inline void TensorDescriptor::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TensorDescriptor::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TensorDescriptor::size() const {
  // @@protoc_insertion_point(field_get:domi.TensorDescriptor.size)
  return _internal_size();
}
inline void TensorDescriptor::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void TensorDescriptor::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:domi.TensorDescriptor.size)
}

// bool reuse_input = 5;
inline void TensorDescriptor::clear_reuse_input() {
  reuse_input_ = false;
}
inline bool TensorDescriptor::_internal_reuse_input() const {
  return reuse_input_;
}
inline bool TensorDescriptor::reuse_input() const {
  // @@protoc_insertion_point(field_get:domi.TensorDescriptor.reuse_input)
  return _internal_reuse_input();
}
inline void TensorDescriptor::_internal_set_reuse_input(bool value) {
  
  reuse_input_ = value;
}
inline void TensorDescriptor::set_reuse_input(bool value) {
  _internal_set_reuse_input(value);
  // @@protoc_insertion_point(field_set:domi.TensorDescriptor.reuse_input)
}

// bool output_tensor = 7;
inline void TensorDescriptor::clear_output_tensor() {
  output_tensor_ = false;
}
inline bool TensorDescriptor::_internal_output_tensor() const {
  return output_tensor_;
}
inline bool TensorDescriptor::output_tensor() const {
  // @@protoc_insertion_point(field_get:domi.TensorDescriptor.output_tensor)
  return _internal_output_tensor();
}
inline void TensorDescriptor::_internal_set_output_tensor(bool value) {
  
  output_tensor_ = value;
}
inline void TensorDescriptor::set_output_tensor(bool value) {
  _internal_set_output_tensor(value);
  // @@protoc_insertion_point(field_set:domi.TensorDescriptor.output_tensor)
}

// .domi.DeviceType device_type = 8;
inline void TensorDescriptor::clear_device_type() {
  device_type_ = 0;
}
inline ::domi::DeviceType TensorDescriptor::_internal_device_type() const {
  return static_cast< ::domi::DeviceType >(device_type_);
}
inline ::domi::DeviceType TensorDescriptor::device_type() const {
  // @@protoc_insertion_point(field_get:domi.TensorDescriptor.device_type)
  return _internal_device_type();
}
inline void TensorDescriptor::_internal_set_device_type(::domi::DeviceType value) {
  
  device_type_ = value;
}
inline void TensorDescriptor::set_device_type(::domi::DeviceType value) {
  _internal_set_device_type(value);
  // @@protoc_insertion_point(field_set:domi.TensorDescriptor.device_type)
}

// bool input_tensor = 9;
inline void TensorDescriptor::clear_input_tensor() {
  input_tensor_ = false;
}
inline bool TensorDescriptor::_internal_input_tensor() const {
  return input_tensor_;
}
inline bool TensorDescriptor::input_tensor() const {
  // @@protoc_insertion_point(field_get:domi.TensorDescriptor.input_tensor)
  return _internal_input_tensor();
}
inline void TensorDescriptor::_internal_set_input_tensor(bool value) {
  
  input_tensor_ = value;
}
inline void TensorDescriptor::set_input_tensor(bool value) {
  _internal_set_input_tensor(value);
  // @@protoc_insertion_point(field_set:domi.TensorDescriptor.input_tensor)
}

// uint32 real_dim_cnt = 10;
inline void TensorDescriptor::clear_real_dim_cnt() {
  real_dim_cnt_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TensorDescriptor::_internal_real_dim_cnt() const {
  return real_dim_cnt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TensorDescriptor::real_dim_cnt() const {
  // @@protoc_insertion_point(field_get:domi.TensorDescriptor.real_dim_cnt)
  return _internal_real_dim_cnt();
}
inline void TensorDescriptor::_internal_set_real_dim_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  real_dim_cnt_ = value;
}
inline void TensorDescriptor::set_real_dim_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_real_dim_cnt(value);
  // @@protoc_insertion_point(field_set:domi.TensorDescriptor.real_dim_cnt)
}

// uint32 reuse_input_index = 11;
inline void TensorDescriptor::clear_reuse_input_index() {
  reuse_input_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TensorDescriptor::_internal_reuse_input_index() const {
  return reuse_input_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TensorDescriptor::reuse_input_index() const {
  // @@protoc_insertion_point(field_get:domi.TensorDescriptor.reuse_input_index)
  return _internal_reuse_input_index();
}
inline void TensorDescriptor::_internal_set_reuse_input_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  reuse_input_index_ = value;
}
inline void TensorDescriptor::set_reuse_input_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reuse_input_index(value);
  // @@protoc_insertion_point(field_set:domi.TensorDescriptor.reuse_input_index)
}

// .domi.AllOffsetQuantizeInfo alloffset_quantize_info = 12;
inline bool TensorDescriptor::_internal_has_alloffset_quantize_info() const {
  return this != internal_default_instance() && alloffset_quantize_info_ != nullptr;
}
inline bool TensorDescriptor::has_alloffset_quantize_info() const {
  return _internal_has_alloffset_quantize_info();
}
inline void TensorDescriptor::clear_alloffset_quantize_info() {
  if (GetArena() == nullptr && alloffset_quantize_info_ != nullptr) {
    delete alloffset_quantize_info_;
  }
  alloffset_quantize_info_ = nullptr;
}
inline const ::domi::AllOffsetQuantizeInfo& TensorDescriptor::_internal_alloffset_quantize_info() const {
  const ::domi::AllOffsetQuantizeInfo* p = alloffset_quantize_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::domi::AllOffsetQuantizeInfo*>(
      &::domi::_AllOffsetQuantizeInfo_default_instance_);
}
inline const ::domi::AllOffsetQuantizeInfo& TensorDescriptor::alloffset_quantize_info() const {
  // @@protoc_insertion_point(field_get:domi.TensorDescriptor.alloffset_quantize_info)
  return _internal_alloffset_quantize_info();
}
inline void TensorDescriptor::unsafe_arena_set_allocated_alloffset_quantize_info(
    ::domi::AllOffsetQuantizeInfo* alloffset_quantize_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alloffset_quantize_info_);
  }
  alloffset_quantize_info_ = alloffset_quantize_info;
  if (alloffset_quantize_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.TensorDescriptor.alloffset_quantize_info)
}
inline ::domi::AllOffsetQuantizeInfo* TensorDescriptor::release_alloffset_quantize_info() {
  
  ::domi::AllOffsetQuantizeInfo* temp = alloffset_quantize_info_;
  alloffset_quantize_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::domi::AllOffsetQuantizeInfo* TensorDescriptor::unsafe_arena_release_alloffset_quantize_info() {
  // @@protoc_insertion_point(field_release:domi.TensorDescriptor.alloffset_quantize_info)
  
  ::domi::AllOffsetQuantizeInfo* temp = alloffset_quantize_info_;
  alloffset_quantize_info_ = nullptr;
  return temp;
}
inline ::domi::AllOffsetQuantizeInfo* TensorDescriptor::_internal_mutable_alloffset_quantize_info() {
  
  if (alloffset_quantize_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::domi::AllOffsetQuantizeInfo>(GetArena());
    alloffset_quantize_info_ = p;
  }
  return alloffset_quantize_info_;
}
inline ::domi::AllOffsetQuantizeInfo* TensorDescriptor::mutable_alloffset_quantize_info() {
  // @@protoc_insertion_point(field_mutable:domi.TensorDescriptor.alloffset_quantize_info)
  return _internal_mutable_alloffset_quantize_info();
}
inline void TensorDescriptor::set_allocated_alloffset_quantize_info(::domi::AllOffsetQuantizeInfo* alloffset_quantize_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete alloffset_quantize_info_;
  }
  if (alloffset_quantize_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(alloffset_quantize_info);
    if (message_arena != submessage_arena) {
      alloffset_quantize_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alloffset_quantize_info, submessage_arena);
    }
    
  } else {
    
  }
  alloffset_quantize_info_ = alloffset_quantize_info;
  // @@protoc_insertion_point(field_set_allocated:domi.TensorDescriptor.alloffset_quantize_info)
}

// -------------------------------------------------------------------

// CompressInfo

// int32 blockRow = 1;
inline void CompressInfo::clear_blockrow() {
  blockrow_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompressInfo::_internal_blockrow() const {
  return blockrow_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompressInfo::blockrow() const {
  // @@protoc_insertion_point(field_get:domi.CompressInfo.blockRow)
  return _internal_blockrow();
}
inline void CompressInfo::_internal_set_blockrow(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  blockrow_ = value;
}
inline void CompressInfo::set_blockrow(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_blockrow(value);
  // @@protoc_insertion_point(field_set:domi.CompressInfo.blockRow)
}

// int32 blockCol = 2;
inline void CompressInfo::clear_blockcol() {
  blockcol_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompressInfo::_internal_blockcol() const {
  return blockcol_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompressInfo::blockcol() const {
  // @@protoc_insertion_point(field_get:domi.CompressInfo.blockCol)
  return _internal_blockcol();
}
inline void CompressInfo::_internal_set_blockcol(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  blockcol_ = value;
}
inline void CompressInfo::set_blockcol(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_blockcol(value);
  // @@protoc_insertion_point(field_set:domi.CompressInfo.blockCol)
}

// int32 fractalK = 3;
inline void CompressInfo::clear_fractalk() {
  fractalk_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompressInfo::_internal_fractalk() const {
  return fractalk_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompressInfo::fractalk() const {
  // @@protoc_insertion_point(field_get:domi.CompressInfo.fractalK)
  return _internal_fractalk();
}
inline void CompressInfo::_internal_set_fractalk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fractalk_ = value;
}
inline void CompressInfo::set_fractalk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fractalk(value);
  // @@protoc_insertion_point(field_set:domi.CompressInfo.fractalK)
}

// int32 fractalN = 4;
inline void CompressInfo::clear_fractaln() {
  fractaln_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompressInfo::_internal_fractaln() const {
  return fractaln_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompressInfo::fractaln() const {
  // @@protoc_insertion_point(field_get:domi.CompressInfo.fractalN)
  return _internal_fractaln();
}
inline void CompressInfo::_internal_set_fractaln(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fractaln_ = value;
}
inline void CompressInfo::set_fractaln(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fractaln(value);
  // @@protoc_insertion_point(field_set:domi.CompressInfo.fractalN)
}

// int32 lastFractalK = 5;
inline void CompressInfo::clear_lastfractalk() {
  lastfractalk_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompressInfo::_internal_lastfractalk() const {
  return lastfractalk_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompressInfo::lastfractalk() const {
  // @@protoc_insertion_point(field_get:domi.CompressInfo.lastFractalK)
  return _internal_lastfractalk();
}
inline void CompressInfo::_internal_set_lastfractalk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lastfractalk_ = value;
}
inline void CompressInfo::set_lastfractalk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lastfractalk(value);
  // @@protoc_insertion_point(field_set:domi.CompressInfo.lastFractalK)
}

// int32 lastFractalN = 6;
inline void CompressInfo::clear_lastfractaln() {
  lastfractaln_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompressInfo::_internal_lastfractaln() const {
  return lastfractaln_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompressInfo::lastfractaln() const {
  // @@protoc_insertion_point(field_get:domi.CompressInfo.lastFractalN)
  return _internal_lastfractaln();
}
inline void CompressInfo::_internal_set_lastfractaln(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lastfractaln_ = value;
}
inline void CompressInfo::set_lastfractaln(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lastfractaln(value);
  // @@protoc_insertion_point(field_set:domi.CompressInfo.lastFractalN)
}

// int32 cubeSize = 7;
inline void CompressInfo::clear_cubesize() {
  cubesize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompressInfo::_internal_cubesize() const {
  return cubesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompressInfo::cubesize() const {
  // @@protoc_insertion_point(field_get:domi.CompressInfo.cubeSize)
  return _internal_cubesize();
}
inline void CompressInfo::_internal_set_cubesize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cubesize_ = value;
}
inline void CompressInfo::set_cubesize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cubesize(value);
  // @@protoc_insertion_point(field_set:domi.CompressInfo.cubeSize)
}

// int32 loadDir = 8;
inline void CompressInfo::clear_loaddir() {
  loaddir_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompressInfo::_internal_loaddir() const {
  return loaddir_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompressInfo::loaddir() const {
  // @@protoc_insertion_point(field_get:domi.CompressInfo.loadDir)
  return _internal_loaddir();
}
inline void CompressInfo::_internal_set_loaddir(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  loaddir_ = value;
}
inline void CompressInfo::set_loaddir(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_loaddir(value);
  // @@protoc_insertion_point(field_set:domi.CompressInfo.loadDir)
}

// -------------------------------------------------------------------

// AttrDef_ListValue

// repeated string s = 2;
inline int AttrDef_ListValue::_internal_s_size() const {
  return s_.size();
}
inline int AttrDef_ListValue::s_size() const {
  return _internal_s_size();
}
inline void AttrDef_ListValue::clear_s() {
  s_.Clear();
}
inline std::string* AttrDef_ListValue::add_s() {
  // @@protoc_insertion_point(field_add_mutable:domi.AttrDef.ListValue.s)
  return _internal_add_s();
}
inline const std::string& AttrDef_ListValue::_internal_s(int index) const {
  return s_.Get(index);
}
inline const std::string& AttrDef_ListValue::s(int index) const {
  // @@protoc_insertion_point(field_get:domi.AttrDef.ListValue.s)
  return _internal_s(index);
}
inline std::string* AttrDef_ListValue::mutable_s(int index) {
  // @@protoc_insertion_point(field_mutable:domi.AttrDef.ListValue.s)
  return s_.Mutable(index);
}
inline void AttrDef_ListValue::set_s(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:domi.AttrDef.ListValue.s)
  s_.Mutable(index)->assign(value);
}
inline void AttrDef_ListValue::set_s(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:domi.AttrDef.ListValue.s)
  s_.Mutable(index)->assign(std::move(value));
}
inline void AttrDef_ListValue::set_s(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  s_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:domi.AttrDef.ListValue.s)
}
inline void AttrDef_ListValue::set_s(int index, const char* value, size_t size) {
  s_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:domi.AttrDef.ListValue.s)
}
inline std::string* AttrDef_ListValue::_internal_add_s() {
  return s_.Add();
}
inline void AttrDef_ListValue::add_s(const std::string& value) {
  s_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:domi.AttrDef.ListValue.s)
}
inline void AttrDef_ListValue::add_s(std::string&& value) {
  s_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:domi.AttrDef.ListValue.s)
}
inline void AttrDef_ListValue::add_s(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  s_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:domi.AttrDef.ListValue.s)
}
inline void AttrDef_ListValue::add_s(const char* value, size_t size) {
  s_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:domi.AttrDef.ListValue.s)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AttrDef_ListValue::s() const {
  // @@protoc_insertion_point(field_list:domi.AttrDef.ListValue.s)
  return s_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AttrDef_ListValue::mutable_s() {
  // @@protoc_insertion_point(field_mutable_list:domi.AttrDef.ListValue.s)
  return &s_;
}

// repeated int64 i = 3 [packed = true];
inline int AttrDef_ListValue::_internal_i_size() const {
  return i_.size();
}
inline int AttrDef_ListValue::i_size() const {
  return _internal_i_size();
}
inline void AttrDef_ListValue::clear_i() {
  i_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AttrDef_ListValue::_internal_i(int index) const {
  return i_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AttrDef_ListValue::i(int index) const {
  // @@protoc_insertion_point(field_get:domi.AttrDef.ListValue.i)
  return _internal_i(index);
}
inline void AttrDef_ListValue::set_i(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  i_.Set(index, value);
  // @@protoc_insertion_point(field_set:domi.AttrDef.ListValue.i)
}
inline void AttrDef_ListValue::_internal_add_i(::PROTOBUF_NAMESPACE_ID::int64 value) {
  i_.Add(value);
}
inline void AttrDef_ListValue::add_i(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_i(value);
  // @@protoc_insertion_point(field_add:domi.AttrDef.ListValue.i)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
AttrDef_ListValue::_internal_i() const {
  return i_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
AttrDef_ListValue::i() const {
  // @@protoc_insertion_point(field_list:domi.AttrDef.ListValue.i)
  return _internal_i();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
AttrDef_ListValue::_internal_mutable_i() {
  return &i_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
AttrDef_ListValue::mutable_i() {
  // @@protoc_insertion_point(field_mutable_list:domi.AttrDef.ListValue.i)
  return _internal_mutable_i();
}

// repeated float f = 4 [packed = true];
inline int AttrDef_ListValue::_internal_f_size() const {
  return f_.size();
}
inline int AttrDef_ListValue::f_size() const {
  return _internal_f_size();
}
inline void AttrDef_ListValue::clear_f() {
  f_.Clear();
}
inline float AttrDef_ListValue::_internal_f(int index) const {
  return f_.Get(index);
}
inline float AttrDef_ListValue::f(int index) const {
  // @@protoc_insertion_point(field_get:domi.AttrDef.ListValue.f)
  return _internal_f(index);
}
inline void AttrDef_ListValue::set_f(int index, float value) {
  f_.Set(index, value);
  // @@protoc_insertion_point(field_set:domi.AttrDef.ListValue.f)
}
inline void AttrDef_ListValue::_internal_add_f(float value) {
  f_.Add(value);
}
inline void AttrDef_ListValue::add_f(float value) {
  _internal_add_f(value);
  // @@protoc_insertion_point(field_add:domi.AttrDef.ListValue.f)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AttrDef_ListValue::_internal_f() const {
  return f_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AttrDef_ListValue::f() const {
  // @@protoc_insertion_point(field_list:domi.AttrDef.ListValue.f)
  return _internal_f();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AttrDef_ListValue::_internal_mutable_f() {
  return &f_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AttrDef_ListValue::mutable_f() {
  // @@protoc_insertion_point(field_mutable_list:domi.AttrDef.ListValue.f)
  return _internal_mutable_f();
}

// repeated bool b = 5 [packed = true];
inline int AttrDef_ListValue::_internal_b_size() const {
  return b_.size();
}
inline int AttrDef_ListValue::b_size() const {
  return _internal_b_size();
}
inline void AttrDef_ListValue::clear_b() {
  b_.Clear();
}
inline bool AttrDef_ListValue::_internal_b(int index) const {
  return b_.Get(index);
}
inline bool AttrDef_ListValue::b(int index) const {
  // @@protoc_insertion_point(field_get:domi.AttrDef.ListValue.b)
  return _internal_b(index);
}
inline void AttrDef_ListValue::set_b(int index, bool value) {
  b_.Set(index, value);
  // @@protoc_insertion_point(field_set:domi.AttrDef.ListValue.b)
}
inline void AttrDef_ListValue::_internal_add_b(bool value) {
  b_.Add(value);
}
inline void AttrDef_ListValue::add_b(bool value) {
  _internal_add_b(value);
  // @@protoc_insertion_point(field_add:domi.AttrDef.ListValue.b)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
AttrDef_ListValue::_internal_b() const {
  return b_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
AttrDef_ListValue::b() const {
  // @@protoc_insertion_point(field_list:domi.AttrDef.ListValue.b)
  return _internal_b();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
AttrDef_ListValue::_internal_mutable_b() {
  return &b_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
AttrDef_ListValue::mutable_b() {
  // @@protoc_insertion_point(field_mutable_list:domi.AttrDef.ListValue.b)
  return _internal_mutable_b();
}

// repeated uint32 u = 6 [packed = true];
inline int AttrDef_ListValue::_internal_u_size() const {
  return u_.size();
}
inline int AttrDef_ListValue::u_size() const {
  return _internal_u_size();
}
inline void AttrDef_ListValue::clear_u() {
  u_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AttrDef_ListValue::_internal_u(int index) const {
  return u_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AttrDef_ListValue::u(int index) const {
  // @@protoc_insertion_point(field_get:domi.AttrDef.ListValue.u)
  return _internal_u(index);
}
inline void AttrDef_ListValue::set_u(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  u_.Set(index, value);
  // @@protoc_insertion_point(field_set:domi.AttrDef.ListValue.u)
}
inline void AttrDef_ListValue::_internal_add_u(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  u_.Add(value);
}
inline void AttrDef_ListValue::add_u(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_u(value);
  // @@protoc_insertion_point(field_add:domi.AttrDef.ListValue.u)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
AttrDef_ListValue::_internal_u() const {
  return u_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
AttrDef_ListValue::u() const {
  // @@protoc_insertion_point(field_list:domi.AttrDef.ListValue.u)
  return _internal_u();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
AttrDef_ListValue::_internal_mutable_u() {
  return &u_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
AttrDef_ListValue::mutable_u() {
  // @@protoc_insertion_point(field_mutable_list:domi.AttrDef.ListValue.u)
  return _internal_mutable_u();
}

// repeated bytes bt = 7;
inline int AttrDef_ListValue::_internal_bt_size() const {
  return bt_.size();
}
inline int AttrDef_ListValue::bt_size() const {
  return _internal_bt_size();
}
inline void AttrDef_ListValue::clear_bt() {
  bt_.Clear();
}
inline std::string* AttrDef_ListValue::add_bt() {
  // @@protoc_insertion_point(field_add_mutable:domi.AttrDef.ListValue.bt)
  return _internal_add_bt();
}
inline const std::string& AttrDef_ListValue::_internal_bt(int index) const {
  return bt_.Get(index);
}
inline const std::string& AttrDef_ListValue::bt(int index) const {
  // @@protoc_insertion_point(field_get:domi.AttrDef.ListValue.bt)
  return _internal_bt(index);
}
inline std::string* AttrDef_ListValue::mutable_bt(int index) {
  // @@protoc_insertion_point(field_mutable:domi.AttrDef.ListValue.bt)
  return bt_.Mutable(index);
}
inline void AttrDef_ListValue::set_bt(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:domi.AttrDef.ListValue.bt)
  bt_.Mutable(index)->assign(value);
}
inline void AttrDef_ListValue::set_bt(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:domi.AttrDef.ListValue.bt)
  bt_.Mutable(index)->assign(std::move(value));
}
inline void AttrDef_ListValue::set_bt(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bt_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:domi.AttrDef.ListValue.bt)
}
inline void AttrDef_ListValue::set_bt(int index, const void* value, size_t size) {
  bt_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:domi.AttrDef.ListValue.bt)
}
inline std::string* AttrDef_ListValue::_internal_add_bt() {
  return bt_.Add();
}
inline void AttrDef_ListValue::add_bt(const std::string& value) {
  bt_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:domi.AttrDef.ListValue.bt)
}
inline void AttrDef_ListValue::add_bt(std::string&& value) {
  bt_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:domi.AttrDef.ListValue.bt)
}
inline void AttrDef_ListValue::add_bt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bt_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:domi.AttrDef.ListValue.bt)
}
inline void AttrDef_ListValue::add_bt(const void* value, size_t size) {
  bt_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:domi.AttrDef.ListValue.bt)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AttrDef_ListValue::bt() const {
  // @@protoc_insertion_point(field_list:domi.AttrDef.ListValue.bt)
  return bt_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AttrDef_ListValue::mutable_bt() {
  // @@protoc_insertion_point(field_mutable_list:domi.AttrDef.ListValue.bt)
  return &bt_;
}

// -------------------------------------------------------------------

// AttrDef

// string s = 2;
inline bool AttrDef::_internal_has_s() const {
  return value_case() == kS;
}
inline void AttrDef::set_has_s() {
  _oneof_case_[0] = kS;
}
inline void AttrDef::clear_s() {
  if (_internal_has_s()) {
    value_.s_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_value();
  }
}
inline const std::string& AttrDef::s() const {
  // @@protoc_insertion_point(field_get:domi.AttrDef.s)
  return _internal_s();
}
inline void AttrDef::set_s(const std::string& value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:domi.AttrDef.s)
}
inline std::string* AttrDef::mutable_s() {
  // @@protoc_insertion_point(field_mutable:domi.AttrDef.s)
  return _internal_mutable_s();
}
inline const std::string& AttrDef::_internal_s() const {
  if (_internal_has_s()) {
    return value_.s_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void AttrDef::_internal_set_s(const std::string& value) {
  if (!_internal_has_s()) {
    clear_value();
    set_has_s();
    value_.s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.s_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AttrDef::set_s(std::string&& value) {
  // @@protoc_insertion_point(field_set:domi.AttrDef.s)
  if (!_internal_has_s()) {
    clear_value();
    set_has_s();
    value_.s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.s_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:domi.AttrDef.s)
}
inline void AttrDef::set_s(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_s()) {
    clear_value();
    set_has_s();
    value_.s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.s_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:domi.AttrDef.s)
}
inline void AttrDef::set_s(const char* value,
                             size_t size) {
  if (!_internal_has_s()) {
    clear_value();
    set_has_s();
    value_.s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.s_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:domi.AttrDef.s)
}
inline std::string* AttrDef::_internal_mutable_s() {
  if (!_internal_has_s()) {
    clear_value();
    set_has_s();
    value_.s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.s_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AttrDef::release_s() {
  // @@protoc_insertion_point(field_release:domi.AttrDef.s)
  if (_internal_has_s()) {
    clear_has_value();
    return value_.s_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void AttrDef::set_allocated_s(std::string* s) {
  if (has_value()) {
    clear_value();
  }
  if (s != nullptr) {
    set_has_s();
    value_.s_.UnsafeSetDefault(s);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(s);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:domi.AttrDef.s)
}

// int64 i = 3;
inline bool AttrDef::_internal_has_i() const {
  return value_case() == kI;
}
inline void AttrDef::set_has_i() {
  _oneof_case_[0] = kI;
}
inline void AttrDef::clear_i() {
  if (_internal_has_i()) {
    value_.i_ = PROTOBUF_LONGLONG(0);
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AttrDef::_internal_i() const {
  if (_internal_has_i()) {
    return value_.i_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void AttrDef::_internal_set_i(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_i()) {
    clear_value();
    set_has_i();
  }
  value_.i_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AttrDef::i() const {
  // @@protoc_insertion_point(field_get:domi.AttrDef.i)
  return _internal_i();
}
inline void AttrDef::set_i(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_i(value);
  // @@protoc_insertion_point(field_set:domi.AttrDef.i)
}

// float f = 4;
inline bool AttrDef::_internal_has_f() const {
  return value_case() == kF;
}
inline void AttrDef::set_has_f() {
  _oneof_case_[0] = kF;
}
inline void AttrDef::clear_f() {
  if (_internal_has_f()) {
    value_.f_ = 0;
    clear_has_value();
  }
}
inline float AttrDef::_internal_f() const {
  if (_internal_has_f()) {
    return value_.f_;
  }
  return 0;
}
inline void AttrDef::_internal_set_f(float value) {
  if (!_internal_has_f()) {
    clear_value();
    set_has_f();
  }
  value_.f_ = value;
}
inline float AttrDef::f() const {
  // @@protoc_insertion_point(field_get:domi.AttrDef.f)
  return _internal_f();
}
inline void AttrDef::set_f(float value) {
  _internal_set_f(value);
  // @@protoc_insertion_point(field_set:domi.AttrDef.f)
}

// bool b = 5;
inline bool AttrDef::_internal_has_b() const {
  return value_case() == kB;
}
inline void AttrDef::set_has_b() {
  _oneof_case_[0] = kB;
}
inline void AttrDef::clear_b() {
  if (_internal_has_b()) {
    value_.b_ = false;
    clear_has_value();
  }
}
inline bool AttrDef::_internal_b() const {
  if (_internal_has_b()) {
    return value_.b_;
  }
  return false;
}
inline void AttrDef::_internal_set_b(bool value) {
  if (!_internal_has_b()) {
    clear_value();
    set_has_b();
  }
  value_.b_ = value;
}
inline bool AttrDef::b() const {
  // @@protoc_insertion_point(field_get:domi.AttrDef.b)
  return _internal_b();
}
inline void AttrDef::set_b(bool value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:domi.AttrDef.b)
}

// uint32 u = 6;
inline bool AttrDef::_internal_has_u() const {
  return value_case() == kU;
}
inline void AttrDef::set_has_u() {
  _oneof_case_[0] = kU;
}
inline void AttrDef::clear_u() {
  if (_internal_has_u()) {
    value_.u_ = 0u;
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AttrDef::_internal_u() const {
  if (_internal_has_u()) {
    return value_.u_;
  }
  return 0u;
}
inline void AttrDef::_internal_set_u(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_u()) {
    clear_value();
    set_has_u();
  }
  value_.u_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AttrDef::u() const {
  // @@protoc_insertion_point(field_get:domi.AttrDef.u)
  return _internal_u();
}
inline void AttrDef::set_u(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_u(value);
  // @@protoc_insertion_point(field_set:domi.AttrDef.u)
}

// bytes bt = 7;
inline bool AttrDef::_internal_has_bt() const {
  return value_case() == kBt;
}
inline void AttrDef::set_has_bt() {
  _oneof_case_[0] = kBt;
}
inline void AttrDef::clear_bt() {
  if (_internal_has_bt()) {
    value_.bt_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_value();
  }
}
inline const std::string& AttrDef::bt() const {
  // @@protoc_insertion_point(field_get:domi.AttrDef.bt)
  return _internal_bt();
}
inline void AttrDef::set_bt(const std::string& value) {
  _internal_set_bt(value);
  // @@protoc_insertion_point(field_set:domi.AttrDef.bt)
}
inline std::string* AttrDef::mutable_bt() {
  // @@protoc_insertion_point(field_mutable:domi.AttrDef.bt)
  return _internal_mutable_bt();
}
inline const std::string& AttrDef::_internal_bt() const {
  if (_internal_has_bt()) {
    return value_.bt_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void AttrDef::_internal_set_bt(const std::string& value) {
  if (!_internal_has_bt()) {
    clear_value();
    set_has_bt();
    value_.bt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.bt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AttrDef::set_bt(std::string&& value) {
  // @@protoc_insertion_point(field_set:domi.AttrDef.bt)
  if (!_internal_has_bt()) {
    clear_value();
    set_has_bt();
    value_.bt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.bt_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:domi.AttrDef.bt)
}
inline void AttrDef::set_bt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_bt()) {
    clear_value();
    set_has_bt();
    value_.bt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.bt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:domi.AttrDef.bt)
}
inline void AttrDef::set_bt(const void* value,
                             size_t size) {
  if (!_internal_has_bt()) {
    clear_value();
    set_has_bt();
    value_.bt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.bt_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:domi.AttrDef.bt)
}
inline std::string* AttrDef::_internal_mutable_bt() {
  if (!_internal_has_bt()) {
    clear_value();
    set_has_bt();
    value_.bt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.bt_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AttrDef::release_bt() {
  // @@protoc_insertion_point(field_release:domi.AttrDef.bt)
  if (_internal_has_bt()) {
    clear_has_value();
    return value_.bt_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void AttrDef::set_allocated_bt(std::string* bt) {
  if (has_value()) {
    clear_value();
  }
  if (bt != nullptr) {
    set_has_bt();
    value_.bt_.UnsafeSetDefault(bt);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(bt);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:domi.AttrDef.bt)
}

// .domi.AttrDef.ListValue list = 1;
inline bool AttrDef::_internal_has_list() const {
  return value_case() == kList;
}
inline bool AttrDef::has_list() const {
  return _internal_has_list();
}
inline void AttrDef::set_has_list() {
  _oneof_case_[0] = kList;
}
inline void AttrDef::clear_list() {
  if (_internal_has_list()) {
    if (GetArena() == nullptr) {
      delete value_.list_;
    }
    clear_has_value();
  }
}
inline ::domi::AttrDef_ListValue* AttrDef::release_list() {
  // @@protoc_insertion_point(field_release:domi.AttrDef.list)
  if (_internal_has_list()) {
    clear_has_value();
      ::domi::AttrDef_ListValue* temp = value_.list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::domi::AttrDef_ListValue& AttrDef::_internal_list() const {
  return _internal_has_list()
      ? *value_.list_
      : *reinterpret_cast< ::domi::AttrDef_ListValue*>(&::domi::_AttrDef_ListValue_default_instance_);
}
inline const ::domi::AttrDef_ListValue& AttrDef::list() const {
  // @@protoc_insertion_point(field_get:domi.AttrDef.list)
  return _internal_list();
}
inline ::domi::AttrDef_ListValue* AttrDef::unsafe_arena_release_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:domi.AttrDef.list)
  if (_internal_has_list()) {
    clear_has_value();
    ::domi::AttrDef_ListValue* temp = value_.list_;
    value_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AttrDef::unsafe_arena_set_allocated_list(::domi::AttrDef_ListValue* list) {
  clear_value();
  if (list) {
    set_has_list();
    value_.list_ = list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.AttrDef.list)
}
inline ::domi::AttrDef_ListValue* AttrDef::_internal_mutable_list() {
  if (!_internal_has_list()) {
    clear_value();
    set_has_list();
    value_.list_ = CreateMaybeMessage< ::domi::AttrDef_ListValue >(GetArena());
  }
  return value_.list_;
}
inline ::domi::AttrDef_ListValue* AttrDef::mutable_list() {
  // @@protoc_insertion_point(field_mutable:domi.AttrDef.list)
  return _internal_mutable_list();
}

// .domi.NamedAttrs func = 10;
inline bool AttrDef::_internal_has_func() const {
  return value_case() == kFunc;
}
inline bool AttrDef::has_func() const {
  return _internal_has_func();
}
inline void AttrDef::set_has_func() {
  _oneof_case_[0] = kFunc;
}
inline void AttrDef::clear_func() {
  if (_internal_has_func()) {
    if (GetArena() == nullptr) {
      delete value_.func_;
    }
    clear_has_value();
  }
}
inline ::domi::NamedAttrs* AttrDef::release_func() {
  // @@protoc_insertion_point(field_release:domi.AttrDef.func)
  if (_internal_has_func()) {
    clear_has_value();
      ::domi::NamedAttrs* temp = value_.func_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.func_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::domi::NamedAttrs& AttrDef::_internal_func() const {
  return _internal_has_func()
      ? *value_.func_
      : *reinterpret_cast< ::domi::NamedAttrs*>(&::domi::_NamedAttrs_default_instance_);
}
inline const ::domi::NamedAttrs& AttrDef::func() const {
  // @@protoc_insertion_point(field_get:domi.AttrDef.func)
  return _internal_func();
}
inline ::domi::NamedAttrs* AttrDef::unsafe_arena_release_func() {
  // @@protoc_insertion_point(field_unsafe_arena_release:domi.AttrDef.func)
  if (_internal_has_func()) {
    clear_has_value();
    ::domi::NamedAttrs* temp = value_.func_;
    value_.func_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AttrDef::unsafe_arena_set_allocated_func(::domi::NamedAttrs* func) {
  clear_value();
  if (func) {
    set_has_func();
    value_.func_ = func;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:domi.AttrDef.func)
}
inline ::domi::NamedAttrs* AttrDef::_internal_mutable_func() {
  if (!_internal_has_func()) {
    clear_value();
    set_has_func();
    value_.func_ = CreateMaybeMessage< ::domi::NamedAttrs >(GetArena());
  }
  return value_.func_;
}
inline ::domi::NamedAttrs* AttrDef::mutable_func() {
  // @@protoc_insertion_point(field_mutable:domi.AttrDef.func)
  return _internal_mutable_func();
}

inline bool AttrDef::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void AttrDef::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline AttrDef::ValueCase AttrDef::value_case() const {
  return AttrDef::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NamedAttrs

// string name = 1;
inline void NamedAttrs::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NamedAttrs::name() const {
  // @@protoc_insertion_point(field_get:domi.NamedAttrs.name)
  return _internal_name();
}
inline void NamedAttrs::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:domi.NamedAttrs.name)
}
inline std::string* NamedAttrs::mutable_name() {
  // @@protoc_insertion_point(field_mutable:domi.NamedAttrs.name)
  return _internal_mutable_name();
}
inline const std::string& NamedAttrs::_internal_name() const {
  return name_.Get();
}
inline void NamedAttrs::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NamedAttrs::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:domi.NamedAttrs.name)
}
inline void NamedAttrs::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:domi.NamedAttrs.name)
}
inline void NamedAttrs::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:domi.NamedAttrs.name)
}
inline std::string* NamedAttrs::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NamedAttrs::release_name() {
  // @@protoc_insertion_point(field_release:domi.NamedAttrs.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NamedAttrs::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:domi.NamedAttrs.name)
}

// map<string, .domi.AttrDef> attr = 2;
inline int NamedAttrs::_internal_attr_size() const {
  return attr_.size();
}
inline int NamedAttrs::attr_size() const {
  return _internal_attr_size();
}
inline void NamedAttrs::clear_attr() {
  attr_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >&
NamedAttrs::_internal_attr() const {
  return attr_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >&
NamedAttrs::attr() const {
  // @@protoc_insertion_point(field_map:domi.NamedAttrs.attr)
  return _internal_attr();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >*
NamedAttrs::_internal_mutable_attr() {
  return attr_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::domi::AttrDef >*
NamedAttrs::mutable_attr() {
  // @@protoc_insertion_point(field_mutable_map:domi.NamedAttrs.attr)
  return _internal_mutable_attr();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace domi

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::domi::TargetType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::domi::TargetType>() {
  return ::domi::TargetType_descriptor();
}
template <> struct is_proto_enum< ::domi::QuantizeScaleType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::domi::QuantizeScaleType>() {
  return ::domi::QuantizeScaleType_descriptor();
}
template <> struct is_proto_enum< ::domi::QuantizeScaleMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::domi::QuantizeScaleMode>() {
  return ::domi::QuantizeScaleMode_descriptor();
}
template <> struct is_proto_enum< ::domi::QuantizeAlgorithm> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::domi::QuantizeAlgorithm>() {
  return ::domi::QuantizeAlgorithm_descriptor();
}
template <> struct is_proto_enum< ::domi::DeviceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::domi::DeviceType>() {
  return ::domi::DeviceType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_om_2eproto
