// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: op_mapping.proto

#include "op_mapping.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_op_5fmapping_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Context_op_5fmapping_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_op_5fmapping_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Input_op_5fmapping_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_op_5fmapping_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Op_op_5fmapping_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_op_5fmapping_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpAttr_op_5fmapping_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_op_5fmapping_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpBuffer_op_5fmapping_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_op_5fmapping_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Output_op_5fmapping_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_op_5fmapping_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RealAddressAndSize_op_5fmapping_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_op_5fmapping_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Shape_op_5fmapping_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_op_5fmapping_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Task_op_5fmapping_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_op_5fmapping_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Workspace_op_5fmapping_2eproto;
namespace toolkit {
namespace aicpu {
namespace dump {
class ShapeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Shape> _instance;
} _Shape_default_instance_;
class OutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Output> _instance;
} _Output_default_instance_;
class InputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Input> _instance;
} _Input_default_instance_;
class OpBufferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpBuffer> _instance;
} _OpBuffer_default_instance_;
class OpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Op> _instance;
} _Op_default_instance_;
class OpAttrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpAttr> _instance;
} _OpAttr_default_instance_;
class WorkspaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Workspace> _instance;
} _Workspace_default_instance_;
class RealAddressAndSizeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RealAddressAndSize> _instance;
} _RealAddressAndSize_default_instance_;
class ContextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Context> _instance;
} _Context_default_instance_;
class TaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Task> _instance;
} _Task_default_instance_;
class OpMappingInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpMappingInfo> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 model_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 step_id_addr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 iterations_per_loop_addr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 loop_cond_addr_;
} _OpMappingInfo_default_instance_;
}  // namespace dump
}  // namespace aicpu
}  // namespace toolkit
static void InitDefaultsscc_info_Context_op_5fmapping_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::toolkit::aicpu::dump::_Context_default_instance_;
    new (ptr) ::toolkit::aicpu::dump::Context();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::toolkit::aicpu::dump::Context::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Context_op_5fmapping_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Context_op_5fmapping_2eproto}, {
      &scc_info_RealAddressAndSize_op_5fmapping_2eproto.base,}};

static void InitDefaultsscc_info_Input_op_5fmapping_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::toolkit::aicpu::dump::_Input_default_instance_;
    new (ptr) ::toolkit::aicpu::dump::Input();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::toolkit::aicpu::dump::Input::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Input_op_5fmapping_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Input_op_5fmapping_2eproto}, {
      &scc_info_Shape_op_5fmapping_2eproto.base,}};

static void InitDefaultsscc_info_Op_op_5fmapping_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::toolkit::aicpu::dump::_Op_default_instance_;
    new (ptr) ::toolkit::aicpu::dump::Op();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::toolkit::aicpu::dump::Op::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Op_op_5fmapping_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Op_op_5fmapping_2eproto}, {}};

static void InitDefaultsscc_info_OpAttr_op_5fmapping_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::toolkit::aicpu::dump::_OpAttr_default_instance_;
    new (ptr) ::toolkit::aicpu::dump::OpAttr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::toolkit::aicpu::dump::OpAttr::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpAttr_op_5fmapping_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OpAttr_op_5fmapping_2eproto}, {}};

static void InitDefaultsscc_info_OpBuffer_op_5fmapping_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::toolkit::aicpu::dump::_OpBuffer_default_instance_;
    new (ptr) ::toolkit::aicpu::dump::OpBuffer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::toolkit::aicpu::dump::OpBuffer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpBuffer_op_5fmapping_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OpBuffer_op_5fmapping_2eproto}, {}};

static void InitDefaultsscc_info_OpMappingInfo_op_5fmapping_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::toolkit::aicpu::dump::_OpMappingInfo_default_instance_;
    new (ptr) ::toolkit::aicpu::dump::OpMappingInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::toolkit::aicpu::dump::OpMappingInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpMappingInfo_op_5fmapping_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OpMappingInfo_op_5fmapping_2eproto}, {
      &scc_info_Task_op_5fmapping_2eproto.base,}};

static void InitDefaultsscc_info_Output_op_5fmapping_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::toolkit::aicpu::dump::_Output_default_instance_;
    new (ptr) ::toolkit::aicpu::dump::Output();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::toolkit::aicpu::dump::Output::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Output_op_5fmapping_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Output_op_5fmapping_2eproto}, {
      &scc_info_Shape_op_5fmapping_2eproto.base,}};

static void InitDefaultsscc_info_RealAddressAndSize_op_5fmapping_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::toolkit::aicpu::dump::_RealAddressAndSize_default_instance_;
    new (ptr) ::toolkit::aicpu::dump::RealAddressAndSize();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::toolkit::aicpu::dump::RealAddressAndSize::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RealAddressAndSize_op_5fmapping_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RealAddressAndSize_op_5fmapping_2eproto}, {}};

static void InitDefaultsscc_info_Shape_op_5fmapping_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::toolkit::aicpu::dump::_Shape_default_instance_;
    new (ptr) ::toolkit::aicpu::dump::Shape();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::toolkit::aicpu::dump::Shape::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Shape_op_5fmapping_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Shape_op_5fmapping_2eproto}, {}};

static void InitDefaultsscc_info_Task_op_5fmapping_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::toolkit::aicpu::dump::_Task_default_instance_;
    new (ptr) ::toolkit::aicpu::dump::Task();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::toolkit::aicpu::dump::Task::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Task_op_5fmapping_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_Task_op_5fmapping_2eproto}, {
      &scc_info_Op_op_5fmapping_2eproto.base,
      &scc_info_Output_op_5fmapping_2eproto.base,
      &scc_info_Input_op_5fmapping_2eproto.base,
      &scc_info_OpBuffer_op_5fmapping_2eproto.base,
      &scc_info_OpAttr_op_5fmapping_2eproto.base,
      &scc_info_Workspace_op_5fmapping_2eproto.base,
      &scc_info_Context_op_5fmapping_2eproto.base,}};

static void InitDefaultsscc_info_Workspace_op_5fmapping_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::toolkit::aicpu::dump::_Workspace_default_instance_;
    new (ptr) ::toolkit::aicpu::dump::Workspace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::toolkit::aicpu::dump::Workspace::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Workspace_op_5fmapping_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Workspace_op_5fmapping_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_op_5fmapping_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_op_5fmapping_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_op_5fmapping_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_op_5fmapping_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Shape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Shape, dim_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Output, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Output, data_type_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Output, format_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Output, shape_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Output, address_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Output, original_name_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Output, original_output_index_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Output, original_output_data_type_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Output, original_output_format_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Output, size_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Output, origin_shape_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Output, addr_type_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Output, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Input, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Input, data_type_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Input, format_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Input, shape_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Input, address_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Input, size_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Input, origin_shape_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Input, addr_type_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Input, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::OpBuffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::OpBuffer, buffer_type_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::OpBuffer, address_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::OpBuffer, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Op, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Op, op_name_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Op, op_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::OpAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::OpAttr, name_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::OpAttr, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Workspace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Workspace, type_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Workspace, data_addr_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Workspace, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::RealAddressAndSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::RealAddressAndSize, address_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::RealAddressAndSize, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Context, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Context, context_id_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Context, thread_id_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Context, input_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Context, output_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Task, task_id_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Task, stream_id_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Task, op_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Task, output_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Task, end_graph_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Task, input_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Task, buffer_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Task, task_type_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Task, context_id_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Task, attr_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Task, space_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Task, context_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::Task, thread_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::OpMappingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::OpMappingInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::OpMappingInfo, dump_path_),
  offsetof(::toolkit::aicpu::dump::OpMappingInfoDefaultTypeInternal, model_name_),
  offsetof(::toolkit::aicpu::dump::OpMappingInfoDefaultTypeInternal, model_id_),
  offsetof(::toolkit::aicpu::dump::OpMappingInfoDefaultTypeInternal, step_id_addr_),
  offsetof(::toolkit::aicpu::dump::OpMappingInfoDefaultTypeInternal, iterations_per_loop_addr_),
  offsetof(::toolkit::aicpu::dump::OpMappingInfoDefaultTypeInternal, loop_cond_addr_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::OpMappingInfo, flag_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::OpMappingInfo, task_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::OpMappingInfo, dump_step_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::OpMappingInfo, dump_data_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::OpMappingInfo, model_name_param_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::OpMappingInfo, model_id_param_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::OpMappingInfo, step_id_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::OpMappingInfo, iterations_per_loop_),
  PROTOBUF_FIELD_OFFSET(::toolkit::aicpu::dump::OpMappingInfo, loop_cond_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::toolkit::aicpu::dump::Shape)},
  { 6, -1, sizeof(::toolkit::aicpu::dump::Output)},
  { 23, -1, sizeof(::toolkit::aicpu::dump::Input)},
  { 36, -1, sizeof(::toolkit::aicpu::dump::OpBuffer)},
  { 44, -1, sizeof(::toolkit::aicpu::dump::Op)},
  { 51, -1, sizeof(::toolkit::aicpu::dump::OpAttr)},
  { 58, -1, sizeof(::toolkit::aicpu::dump::Workspace)},
  { 66, -1, sizeof(::toolkit::aicpu::dump::RealAddressAndSize)},
  { 73, -1, sizeof(::toolkit::aicpu::dump::Context)},
  { 82, -1, sizeof(::toolkit::aicpu::dump::Task)},
  { 100, -1, sizeof(::toolkit::aicpu::dump::OpMappingInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toolkit::aicpu::dump::_Shape_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toolkit::aicpu::dump::_Output_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toolkit::aicpu::dump::_Input_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toolkit::aicpu::dump::_OpBuffer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toolkit::aicpu::dump::_Op_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toolkit::aicpu::dump::_OpAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toolkit::aicpu::dump::_Workspace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toolkit::aicpu::dump::_RealAddressAndSize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toolkit::aicpu::dump::_Context_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toolkit::aicpu::dump::_Task_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toolkit::aicpu::dump::_OpMappingInfo_default_instance_),
};

const char descriptor_table_protodef_op_5fmapping_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020op_mapping.proto\022\022toolkit.aicpu.dump\"\024"
  "\n\005Shape\022\013\n\003dim\030\001 \003(\004\"\342\002\n\006Output\022\021\n\tdata_"
  "type\030\001 \001(\005\022\016\n\006format\030\002 \001(\005\022(\n\005shape\030\003 \001("
  "\0132\031.toolkit.aicpu.dump.Shape\022\017\n\007address\030"
  "\004 \001(\004\022\025\n\roriginal_name\030\005 \001(\t\022\035\n\025original"
  "_output_index\030\006 \001(\005\022!\n\031original_output_d"
  "ata_type\030\007 \001(\005\022\036\n\026original_output_format"
  "\030\010 \001(\005\022\014\n\004size\030\t \001(\004\022/\n\014origin_shape\030\n \001"
  "(\0132\031.toolkit.aicpu.dump.Shape\0222\n\taddr_ty"
  "pe\030\013 \001(\0162\037.toolkit.aicpu.dump.AddressTyp"
  "e\022\016\n\006offset\030\014 \001(\004\"\350\001\n\005Input\022\021\n\tdata_type"
  "\030\001 \001(\005\022\016\n\006format\030\002 \001(\005\022(\n\005shape\030\003 \001(\0132\031."
  "toolkit.aicpu.dump.Shape\022\017\n\007address\030\004 \001("
  "\004\022\014\n\004size\030\005 \001(\004\022/\n\014origin_shape\030\006 \001(\0132\031."
  "toolkit.aicpu.dump.Shape\0222\n\taddr_type\030\007 "
  "\001(\0162\037.toolkit.aicpu.dump.AddressType\022\016\n\006"
  "offset\030\010 \001(\004\"^\n\010OpBuffer\0223\n\013buffer_type\030"
  "\001 \001(\0162\036.toolkit.aicpu.dump.BufferType\022\017\n"
  "\007address\030\002 \001(\004\022\014\n\004size\030\003 \001(\004\"&\n\002Op\022\017\n\007op"
  "_name\030\001 \001(\t\022\017\n\007op_type\030\002 \001(\t\"%\n\006OpAttr\022\014"
  "\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"y\n\tWorkspace"
  "\0225\n\004type\030\001 \001(\0162\'.toolkit.aicpu.dump.Work"
  "space.SpaceType\022\021\n\tdata_addr\030\002 \001(\004\022\014\n\004si"
  "ze\030\003 \001(\004\"\024\n\tSpaceType\022\007\n\003LOG\020\000\"3\n\022RealAd"
  "dressAndSize\022\017\n\007address\030\001 \001(\004\022\014\n\004size\030\002 "
  "\001(\004\"\237\001\n\007Context\022\022\n\ncontext_id\030\001 \001(\r\022\021\n\tt"
  "hread_id\030\002 \001(\r\0225\n\005input\030\003 \003(\0132&.toolkit."
  "aicpu.dump.RealAddressAndSize\0226\n\006output\030"
  "\004 \003(\0132&.toolkit.aicpu.dump.RealAddressAn"
  "dSize\"\227\004\n\004Task\022\017\n\007task_id\030\001 \001(\r\022\021\n\tstrea"
  "m_id\030\002 \001(\r\022\"\n\002op\030\003 \001(\0132\026.toolkit.aicpu.d"
  "ump.Op\022*\n\006output\030\004 \003(\0132\032.toolkit.aicpu.d"
  "ump.Output\022\021\n\tend_graph\030\005 \001(\010\022(\n\005input\030\006"
  " \003(\0132\031.toolkit.aicpu.dump.Input\022,\n\006buffe"
  "r\030\007 \003(\0132\034.toolkit.aicpu.dump.OpBuffer\0224\n"
  "\ttask_type\030\010 \001(\0162!.toolkit.aicpu.dump.Ta"
  "sk.TaskType\022\022\n\ncontext_id\030\t \001(\r\022(\n\004attr\030"
  "\n \003(\0132\032.toolkit.aicpu.dump.OpAttr\022,\n\005spa"
  "ce\030\013 \003(\0132\035.toolkit.aicpu.dump.Workspace\022"
  ",\n\007context\030\014 \003(\0132\033.toolkit.aicpu.dump.Co"
  "ntext\022\021\n\tthread_id\030\r \001(\r\"M\n\010TaskType\022\n\n\006"
  "AICORE\020\000\022\t\n\005AICPU\020\001\022\t\n\005DEBUG\020\002\022\010\n\004SDMA\020\003"
  "\022\014\n\010FFTSPLUS\020\004\022\007\n\003DSA\020\005\"\361\002\n\rOpMappingInf"
  "o\022\021\n\tdump_path\030\001 \001(\t\022\024\n\nmodel_name\030\002 \001(\t"
  "H\000\022\022\n\010model_id\030\003 \001(\rH\001\022\026\n\014step_id_addr\030\004"
  " \001(\004H\002\022\"\n\030iterations_per_loop_addr\030\005 \001(\004"
  "H\003\022\030\n\016loop_cond_addr\030\006 \001(\004H\004\022\014\n\004flag\030\007 \001"
  "(\r\022&\n\004task\030\010 \003(\0132\030.toolkit.aicpu.dump.Ta"
  "sk\022\021\n\tdump_step\030\t \001(\t\022/\n\tdump_data\030\n \001(\016"
  "2\034.toolkit.aicpu.dump.DumpDataB\022\n\020model_"
  "name_paramB\020\n\016model_id_paramB\t\n\007step_idB"
  "\025\n\023iterations_per_loopB\013\n\tloop_cond*D\n\013A"
  "ddressType\022\024\n\020TRADITIONAL_ADDR\020\000\022\021\n\rNOTI"
  "LING_ADDR\020\001\022\014\n\010RAW_ADDR\020\002*\024\n\nBufferType\022"
  "\006\n\002L1\020\000*5\n\010DumpData\022\024\n\020TENSOR_DUMP_DATA\020"
  "\000\022\023\n\017STATS_DUMP_DATA\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_op_5fmapping_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_op_5fmapping_2eproto_sccs[11] = {
  &scc_info_Context_op_5fmapping_2eproto.base,
  &scc_info_Input_op_5fmapping_2eproto.base,
  &scc_info_Op_op_5fmapping_2eproto.base,
  &scc_info_OpAttr_op_5fmapping_2eproto.base,
  &scc_info_OpBuffer_op_5fmapping_2eproto.base,
  &scc_info_OpMappingInfo_op_5fmapping_2eproto.base,
  &scc_info_Output_op_5fmapping_2eproto.base,
  &scc_info_RealAddressAndSize_op_5fmapping_2eproto.base,
  &scc_info_Shape_op_5fmapping_2eproto.base,
  &scc_info_Task_op_5fmapping_2eproto.base,
  &scc_info_Workspace_op_5fmapping_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_op_5fmapping_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_op_5fmapping_2eproto = {
  false, false, descriptor_table_protodef_op_5fmapping_2eproto, "op_mapping.proto", 2230,
  &descriptor_table_op_5fmapping_2eproto_once, descriptor_table_op_5fmapping_2eproto_sccs, descriptor_table_op_5fmapping_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_op_5fmapping_2eproto::offsets,
  file_level_metadata_op_5fmapping_2eproto, 11, file_level_enum_descriptors_op_5fmapping_2eproto, file_level_service_descriptors_op_5fmapping_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_op_5fmapping_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_op_5fmapping_2eproto)), true);
namespace toolkit {
namespace aicpu {
namespace dump {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Workspace_SpaceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_op_5fmapping_2eproto);
  return file_level_enum_descriptors_op_5fmapping_2eproto[0];
}
bool Workspace_SpaceType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Workspace_SpaceType Workspace::LOG;
constexpr Workspace_SpaceType Workspace::SpaceType_MIN;
constexpr Workspace_SpaceType Workspace::SpaceType_MAX;
constexpr int Workspace::SpaceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Task_TaskType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_op_5fmapping_2eproto);
  return file_level_enum_descriptors_op_5fmapping_2eproto[1];
}
bool Task_TaskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Task_TaskType Task::AICORE;
constexpr Task_TaskType Task::AICPU;
constexpr Task_TaskType Task::DEBUG;
constexpr Task_TaskType Task::SDMA;
constexpr Task_TaskType Task::FFTSPLUS;
constexpr Task_TaskType Task::DSA;
constexpr Task_TaskType Task::TaskType_MIN;
constexpr Task_TaskType Task::TaskType_MAX;
constexpr int Task::TaskType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AddressType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_op_5fmapping_2eproto);
  return file_level_enum_descriptors_op_5fmapping_2eproto[2];
}
bool AddressType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BufferType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_op_5fmapping_2eproto);
  return file_level_enum_descriptors_op_5fmapping_2eproto[3];
}
bool BufferType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DumpData_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_op_5fmapping_2eproto);
  return file_level_enum_descriptors_op_5fmapping_2eproto[4];
}
bool DumpData_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Shape::InitAsDefaultInstance() {
}
class Shape::_Internal {
 public:
};

Shape::Shape(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dim_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:toolkit.aicpu.dump.Shape)
}
Shape::Shape(const Shape& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dim_(from.dim_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:toolkit.aicpu.dump.Shape)
}

void Shape::SharedCtor() {
}

Shape::~Shape() {
  // @@protoc_insertion_point(destructor:toolkit.aicpu.dump.Shape)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Shape::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Shape::ArenaDtor(void* object) {
  Shape* _this = reinterpret_cast< Shape* >(object);
  (void)_this;
}
void Shape::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Shape::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Shape& Shape::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Shape_op_5fmapping_2eproto.base);
  return *internal_default_instance();
}


void Shape::Clear() {
// @@protoc_insertion_point(message_clear_start:toolkit.aicpu.dump.Shape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dim_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Shape::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 dim = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_dim(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_dim(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Shape::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:toolkit.aicpu.dump.Shape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 dim = 1;
  {
    int byte_size = _dim_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_dim(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toolkit.aicpu.dump.Shape)
  return target;
}

size_t Shape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:toolkit.aicpu.dump.Shape)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 dim = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->dim_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dim_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Shape::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:toolkit.aicpu.dump.Shape)
  GOOGLE_DCHECK_NE(&from, this);
  const Shape* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Shape>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:toolkit.aicpu.dump.Shape)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:toolkit.aicpu.dump.Shape)
    MergeFrom(*source);
  }
}

void Shape::MergeFrom(const Shape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:toolkit.aicpu.dump.Shape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dim_.MergeFrom(from.dim_);
}

void Shape::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:toolkit.aicpu.dump.Shape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shape::CopyFrom(const Shape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:toolkit.aicpu.dump.Shape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shape::IsInitialized() const {
  return true;
}

void Shape::InternalSwap(Shape* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dim_.InternalSwap(&other->dim_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Shape::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Output::InitAsDefaultInstance() {
  ::toolkit::aicpu::dump::_Output_default_instance_._instance.get_mutable()->shape_ = const_cast< ::toolkit::aicpu::dump::Shape*>(
      ::toolkit::aicpu::dump::Shape::internal_default_instance());
  ::toolkit::aicpu::dump::_Output_default_instance_._instance.get_mutable()->origin_shape_ = const_cast< ::toolkit::aicpu::dump::Shape*>(
      ::toolkit::aicpu::dump::Shape::internal_default_instance());
}
class Output::_Internal {
 public:
  static const ::toolkit::aicpu::dump::Shape& shape(const Output* msg);
  static const ::toolkit::aicpu::dump::Shape& origin_shape(const Output* msg);
};

const ::toolkit::aicpu::dump::Shape&
Output::_Internal::shape(const Output* msg) {
  return *msg->shape_;
}
const ::toolkit::aicpu::dump::Shape&
Output::_Internal::origin_shape(const Output* msg) {
  return *msg->origin_shape_;
}
Output::Output(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:toolkit.aicpu.dump.Output)
}
Output::Output(const Output& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  original_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_original_name().empty()) {
    original_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_original_name(),
      GetArena());
  }
  if (from._internal_has_shape()) {
    shape_ = new ::toolkit::aicpu::dump::Shape(*from.shape_);
  } else {
    shape_ = nullptr;
  }
  if (from._internal_has_origin_shape()) {
    origin_shape_ = new ::toolkit::aicpu::dump::Shape(*from.origin_shape_);
  } else {
    origin_shape_ = nullptr;
  }
  ::memcpy(&data_type_, &from.data_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&data_type_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:toolkit.aicpu.dump.Output)
}

void Output::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Output_op_5fmapping_2eproto.base);
  original_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&shape_)) + sizeof(offset_));
}

Output::~Output() {
  // @@protoc_insertion_point(destructor:toolkit.aicpu.dump.Output)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Output::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  original_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete shape_;
  if (this != internal_default_instance()) delete origin_shape_;
}

void Output::ArenaDtor(void* object) {
  Output* _this = reinterpret_cast< Output* >(object);
  (void)_this;
}
void Output::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Output::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Output& Output::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Output_op_5fmapping_2eproto.base);
  return *internal_default_instance();
}


void Output::Clear() {
// @@protoc_insertion_point(message_clear_start:toolkit.aicpu.dump.Output)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  original_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
  if (GetArena() == nullptr && origin_shape_ != nullptr) {
    delete origin_shape_;
  }
  origin_shape_ = nullptr;
  ::memset(&data_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&data_type_)) + sizeof(offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Output::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 data_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          data_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .toolkit.aicpu.dump.Shape shape = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string original_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_original_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "toolkit.aicpu.dump.Output.original_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 original_output_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          original_output_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 original_output_data_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          original_output_data_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 original_output_format = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          original_output_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .toolkit.aicpu.dump.Shape origin_shape = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .toolkit.aicpu.dump.AddressType addr_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_addr_type(static_cast<::toolkit::aicpu::dump::AddressType>(val));
        } else goto handle_unusual;
        continue;
      // uint64 offset = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Output::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:toolkit.aicpu.dump.Output)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 data_type = 1;
  if (this->data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_data_type(), target);
  }

  // int32 format = 2;
  if (this->format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_format(), target);
  }

  // .toolkit.aicpu.dump.Shape shape = 3;
  if (this->has_shape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::shape(this), target, stream);
  }

  // uint64 address = 4;
  if (this->address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_address(), target);
  }

  // string original_name = 5;
  if (this->original_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_original_name().data(), static_cast<int>(this->_internal_original_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "toolkit.aicpu.dump.Output.original_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_original_name(), target);
  }

  // int32 original_output_index = 6;
  if (this->original_output_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_original_output_index(), target);
  }

  // int32 original_output_data_type = 7;
  if (this->original_output_data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_original_output_data_type(), target);
  }

  // int32 original_output_format = 8;
  if (this->original_output_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_original_output_format(), target);
  }

  // uint64 size = 9;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_size(), target);
  }

  // .toolkit.aicpu.dump.Shape origin_shape = 10;
  if (this->has_origin_shape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::origin_shape(this), target, stream);
  }

  // .toolkit.aicpu.dump.AddressType addr_type = 11;
  if (this->addr_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_addr_type(), target);
  }

  // uint64 offset = 12;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toolkit.aicpu.dump.Output)
  return target;
}

size_t Output::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:toolkit.aicpu.dump.Output)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string original_name = 5;
  if (this->original_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_original_name());
  }

  // .toolkit.aicpu.dump.Shape shape = 3;
  if (this->has_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  // .toolkit.aicpu.dump.Shape origin_shape = 10;
  if (this->has_origin_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *origin_shape_);
  }

  // int32 data_type = 1;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_data_type());
  }

  // int32 format = 2;
  if (this->format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_format());
  }

  // uint64 address = 4;
  if (this->address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_address());
  }

  // int32 original_output_index = 6;
  if (this->original_output_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_original_output_index());
  }

  // int32 original_output_data_type = 7;
  if (this->original_output_data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_original_output_data_type());
  }

  // uint64 size = 9;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  // int32 original_output_format = 8;
  if (this->original_output_format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_original_output_format());
  }

  // .toolkit.aicpu.dump.AddressType addr_type = 11;
  if (this->addr_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_addr_type());
  }

  // uint64 offset = 12;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Output::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:toolkit.aicpu.dump.Output)
  GOOGLE_DCHECK_NE(&from, this);
  const Output* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Output>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:toolkit.aicpu.dump.Output)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:toolkit.aicpu.dump.Output)
    MergeFrom(*source);
  }
}

void Output::MergeFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:toolkit.aicpu.dump.Output)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.original_name().size() > 0) {
    _internal_set_original_name(from._internal_original_name());
  }
  if (from.has_shape()) {
    _internal_mutable_shape()->::toolkit::aicpu::dump::Shape::MergeFrom(from._internal_shape());
  }
  if (from.has_origin_shape()) {
    _internal_mutable_origin_shape()->::toolkit::aicpu::dump::Shape::MergeFrom(from._internal_origin_shape());
  }
  if (from.data_type() != 0) {
    _internal_set_data_type(from._internal_data_type());
  }
  if (from.format() != 0) {
    _internal_set_format(from._internal_format());
  }
  if (from.address() != 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.original_output_index() != 0) {
    _internal_set_original_output_index(from._internal_original_output_index());
  }
  if (from.original_output_data_type() != 0) {
    _internal_set_original_output_data_type(from._internal_original_output_data_type());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.original_output_format() != 0) {
    _internal_set_original_output_format(from._internal_original_output_format());
  }
  if (from.addr_type() != 0) {
    _internal_set_addr_type(from._internal_addr_type());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void Output::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:toolkit.aicpu.dump.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Output::CopyFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:toolkit.aicpu.dump.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Output::IsInitialized() const {
  return true;
}

void Output::InternalSwap(Output* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  original_name_.Swap(&other->original_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Output, offset_)
      + sizeof(Output::offset_)
      - PROTOBUF_FIELD_OFFSET(Output, shape_)>(
          reinterpret_cast<char*>(&shape_),
          reinterpret_cast<char*>(&other->shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Output::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Input::InitAsDefaultInstance() {
  ::toolkit::aicpu::dump::_Input_default_instance_._instance.get_mutable()->shape_ = const_cast< ::toolkit::aicpu::dump::Shape*>(
      ::toolkit::aicpu::dump::Shape::internal_default_instance());
  ::toolkit::aicpu::dump::_Input_default_instance_._instance.get_mutable()->origin_shape_ = const_cast< ::toolkit::aicpu::dump::Shape*>(
      ::toolkit::aicpu::dump::Shape::internal_default_instance());
}
class Input::_Internal {
 public:
  static const ::toolkit::aicpu::dump::Shape& shape(const Input* msg);
  static const ::toolkit::aicpu::dump::Shape& origin_shape(const Input* msg);
};

const ::toolkit::aicpu::dump::Shape&
Input::_Internal::shape(const Input* msg) {
  return *msg->shape_;
}
const ::toolkit::aicpu::dump::Shape&
Input::_Internal::origin_shape(const Input* msg) {
  return *msg->origin_shape_;
}
Input::Input(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:toolkit.aicpu.dump.Input)
}
Input::Input(const Input& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shape()) {
    shape_ = new ::toolkit::aicpu::dump::Shape(*from.shape_);
  } else {
    shape_ = nullptr;
  }
  if (from._internal_has_origin_shape()) {
    origin_shape_ = new ::toolkit::aicpu::dump::Shape(*from.origin_shape_);
  } else {
    origin_shape_ = nullptr;
  }
  ::memcpy(&data_type_, &from.data_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&addr_type_) -
    reinterpret_cast<char*>(&data_type_)) + sizeof(addr_type_));
  // @@protoc_insertion_point(copy_constructor:toolkit.aicpu.dump.Input)
}

void Input::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Input_op_5fmapping_2eproto.base);
  ::memset(&shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&addr_type_) -
      reinterpret_cast<char*>(&shape_)) + sizeof(addr_type_));
}

Input::~Input() {
  // @@protoc_insertion_point(destructor:toolkit.aicpu.dump.Input)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Input::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete shape_;
  if (this != internal_default_instance()) delete origin_shape_;
}

void Input::ArenaDtor(void* object) {
  Input* _this = reinterpret_cast< Input* >(object);
  (void)_this;
}
void Input::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Input::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Input& Input::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Input_op_5fmapping_2eproto.base);
  return *internal_default_instance();
}


void Input::Clear() {
// @@protoc_insertion_point(message_clear_start:toolkit.aicpu.dump.Input)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
  if (GetArena() == nullptr && origin_shape_ != nullptr) {
    delete origin_shape_;
  }
  origin_shape_ = nullptr;
  ::memset(&data_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&addr_type_) -
      reinterpret_cast<char*>(&data_type_)) + sizeof(addr_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Input::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 data_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          data_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .toolkit.aicpu.dump.Shape shape = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .toolkit.aicpu.dump.Shape origin_shape = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .toolkit.aicpu.dump.AddressType addr_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_addr_type(static_cast<::toolkit::aicpu::dump::AddressType>(val));
        } else goto handle_unusual;
        continue;
      // uint64 offset = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Input::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:toolkit.aicpu.dump.Input)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 data_type = 1;
  if (this->data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_data_type(), target);
  }

  // int32 format = 2;
  if (this->format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_format(), target);
  }

  // .toolkit.aicpu.dump.Shape shape = 3;
  if (this->has_shape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::shape(this), target, stream);
  }

  // uint64 address = 4;
  if (this->address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_address(), target);
  }

  // uint64 size = 5;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_size(), target);
  }

  // .toolkit.aicpu.dump.Shape origin_shape = 6;
  if (this->has_origin_shape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::origin_shape(this), target, stream);
  }

  // .toolkit.aicpu.dump.AddressType addr_type = 7;
  if (this->addr_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_addr_type(), target);
  }

  // uint64 offset = 8;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toolkit.aicpu.dump.Input)
  return target;
}

size_t Input::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:toolkit.aicpu.dump.Input)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .toolkit.aicpu.dump.Shape shape = 3;
  if (this->has_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  // .toolkit.aicpu.dump.Shape origin_shape = 6;
  if (this->has_origin_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *origin_shape_);
  }

  // int32 data_type = 1;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_data_type());
  }

  // int32 format = 2;
  if (this->format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_format());
  }

  // uint64 address = 4;
  if (this->address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_address());
  }

  // uint64 size = 5;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  // uint64 offset = 8;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_offset());
  }

  // .toolkit.aicpu.dump.AddressType addr_type = 7;
  if (this->addr_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_addr_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Input::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:toolkit.aicpu.dump.Input)
  GOOGLE_DCHECK_NE(&from, this);
  const Input* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Input>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:toolkit.aicpu.dump.Input)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:toolkit.aicpu.dump.Input)
    MergeFrom(*source);
  }
}

void Input::MergeFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:toolkit.aicpu.dump.Input)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_shape()) {
    _internal_mutable_shape()->::toolkit::aicpu::dump::Shape::MergeFrom(from._internal_shape());
  }
  if (from.has_origin_shape()) {
    _internal_mutable_origin_shape()->::toolkit::aicpu::dump::Shape::MergeFrom(from._internal_origin_shape());
  }
  if (from.data_type() != 0) {
    _internal_set_data_type(from._internal_data_type());
  }
  if (from.format() != 0) {
    _internal_set_format(from._internal_format());
  }
  if (from.address() != 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.addr_type() != 0) {
    _internal_set_addr_type(from._internal_addr_type());
  }
}

void Input::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:toolkit.aicpu.dump.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Input::CopyFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:toolkit.aicpu.dump.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input::IsInitialized() const {
  return true;
}

void Input::InternalSwap(Input* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Input, addr_type_)
      + sizeof(Input::addr_type_)
      - PROTOBUF_FIELD_OFFSET(Input, shape_)>(
          reinterpret_cast<char*>(&shape_),
          reinterpret_cast<char*>(&other->shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Input::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OpBuffer::InitAsDefaultInstance() {
}
class OpBuffer::_Internal {
 public:
};

OpBuffer::OpBuffer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:toolkit.aicpu.dump.OpBuffer)
}
OpBuffer::OpBuffer(const OpBuffer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&address_, &from.address_,
    static_cast<size_t>(reinterpret_cast<char*>(&buffer_type_) -
    reinterpret_cast<char*>(&address_)) + sizeof(buffer_type_));
  // @@protoc_insertion_point(copy_constructor:toolkit.aicpu.dump.OpBuffer)
}

void OpBuffer::SharedCtor() {
  ::memset(&address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buffer_type_) -
      reinterpret_cast<char*>(&address_)) + sizeof(buffer_type_));
}

OpBuffer::~OpBuffer() {
  // @@protoc_insertion_point(destructor:toolkit.aicpu.dump.OpBuffer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpBuffer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OpBuffer::ArenaDtor(void* object) {
  OpBuffer* _this = reinterpret_cast< OpBuffer* >(object);
  (void)_this;
}
void OpBuffer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpBuffer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpBuffer& OpBuffer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpBuffer_op_5fmapping_2eproto.base);
  return *internal_default_instance();
}


void OpBuffer::Clear() {
// @@protoc_insertion_point(message_clear_start:toolkit.aicpu.dump.OpBuffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buffer_type_) -
      reinterpret_cast<char*>(&address_)) + sizeof(buffer_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpBuffer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .toolkit.aicpu.dump.BufferType buffer_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_buffer_type(static_cast<::toolkit::aicpu::dump::BufferType>(val));
        } else goto handle_unusual;
        continue;
      // uint64 address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpBuffer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:toolkit.aicpu.dump.OpBuffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .toolkit.aicpu.dump.BufferType buffer_type = 1;
  if (this->buffer_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_buffer_type(), target);
  }

  // uint64 address = 2;
  if (this->address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_address(), target);
  }

  // uint64 size = 3;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toolkit.aicpu.dump.OpBuffer)
  return target;
}

size_t OpBuffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:toolkit.aicpu.dump.OpBuffer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 address = 2;
  if (this->address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_address());
  }

  // uint64 size = 3;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  // .toolkit.aicpu.dump.BufferType buffer_type = 1;
  if (this->buffer_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_buffer_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpBuffer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:toolkit.aicpu.dump.OpBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  const OpBuffer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpBuffer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:toolkit.aicpu.dump.OpBuffer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:toolkit.aicpu.dump.OpBuffer)
    MergeFrom(*source);
  }
}

void OpBuffer::MergeFrom(const OpBuffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:toolkit.aicpu.dump.OpBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address() != 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.buffer_type() != 0) {
    _internal_set_buffer_type(from._internal_buffer_type());
  }
}

void OpBuffer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:toolkit.aicpu.dump.OpBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpBuffer::CopyFrom(const OpBuffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:toolkit.aicpu.dump.OpBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpBuffer::IsInitialized() const {
  return true;
}

void OpBuffer::InternalSwap(OpBuffer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpBuffer, buffer_type_)
      + sizeof(OpBuffer::buffer_type_)
      - PROTOBUF_FIELD_OFFSET(OpBuffer, address_)>(
          reinterpret_cast<char*>(&address_),
          reinterpret_cast<char*>(&other->address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpBuffer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Op::InitAsDefaultInstance() {
}
class Op::_Internal {
 public:
};

Op::Op(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:toolkit.aicpu.dump.Op)
}
Op::Op(const Op& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  op_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_op_name().empty()) {
    op_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_op_name(),
      GetArena());
  }
  op_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_op_type().empty()) {
    op_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_op_type(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:toolkit.aicpu.dump.Op)
}

void Op::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Op_op_5fmapping_2eproto.base);
  op_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Op::~Op() {
  // @@protoc_insertion_point(destructor:toolkit.aicpu.dump.Op)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Op::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  op_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Op::ArenaDtor(void* object) {
  Op* _this = reinterpret_cast< Op* >(object);
  (void)_this;
}
void Op::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Op::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Op& Op::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Op_op_5fmapping_2eproto.base);
  return *internal_default_instance();
}


void Op::Clear() {
// @@protoc_insertion_point(message_clear_start:toolkit.aicpu.dump.Op)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  op_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  op_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Op::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string op_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_op_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "toolkit.aicpu.dump.Op.op_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string op_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_op_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "toolkit.aicpu.dump.Op.op_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Op::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:toolkit.aicpu.dump.Op)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string op_name = 1;
  if (this->op_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_op_name().data(), static_cast<int>(this->_internal_op_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "toolkit.aicpu.dump.Op.op_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_op_name(), target);
  }

  // string op_type = 2;
  if (this->op_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_op_type().data(), static_cast<int>(this->_internal_op_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "toolkit.aicpu.dump.Op.op_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_op_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toolkit.aicpu.dump.Op)
  return target;
}

size_t Op::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:toolkit.aicpu.dump.Op)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string op_name = 1;
  if (this->op_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_op_name());
  }

  // string op_type = 2;
  if (this->op_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_op_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Op::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:toolkit.aicpu.dump.Op)
  GOOGLE_DCHECK_NE(&from, this);
  const Op* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Op>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:toolkit.aicpu.dump.Op)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:toolkit.aicpu.dump.Op)
    MergeFrom(*source);
  }
}

void Op::MergeFrom(const Op& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:toolkit.aicpu.dump.Op)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.op_name().size() > 0) {
    _internal_set_op_name(from._internal_op_name());
  }
  if (from.op_type().size() > 0) {
    _internal_set_op_type(from._internal_op_type());
  }
}

void Op::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:toolkit.aicpu.dump.Op)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Op::CopyFrom(const Op& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:toolkit.aicpu.dump.Op)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Op::IsInitialized() const {
  return true;
}

void Op::InternalSwap(Op* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  op_name_.Swap(&other->op_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  op_type_.Swap(&other->op_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Op::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OpAttr::InitAsDefaultInstance() {
}
class OpAttr::_Internal {
 public:
};

OpAttr::OpAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:toolkit.aicpu.dump.OpAttr)
}
OpAttr::OpAttr(const OpAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:toolkit.aicpu.dump.OpAttr)
}

void OpAttr::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpAttr_op_5fmapping_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OpAttr::~OpAttr() {
  // @@protoc_insertion_point(destructor:toolkit.aicpu.dump.OpAttr)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OpAttr::ArenaDtor(void* object) {
  OpAttr* _this = reinterpret_cast< OpAttr* >(object);
  (void)_this;
}
void OpAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpAttr& OpAttr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpAttr_op_5fmapping_2eproto.base);
  return *internal_default_instance();
}


void OpAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:toolkit.aicpu.dump.OpAttr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "toolkit.aicpu.dump.OpAttr.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "toolkit.aicpu.dump.OpAttr.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpAttr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:toolkit.aicpu.dump.OpAttr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "toolkit.aicpu.dump.OpAttr.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "toolkit.aicpu.dump.OpAttr.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toolkit.aicpu.dump.OpAttr)
  return target;
}

size_t OpAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:toolkit.aicpu.dump.OpAttr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpAttr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:toolkit.aicpu.dump.OpAttr)
  GOOGLE_DCHECK_NE(&from, this);
  const OpAttr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpAttr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:toolkit.aicpu.dump.OpAttr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:toolkit.aicpu.dump.OpAttr)
    MergeFrom(*source);
  }
}

void OpAttr::MergeFrom(const OpAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:toolkit.aicpu.dump.OpAttr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void OpAttr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:toolkit.aicpu.dump.OpAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpAttr::CopyFrom(const OpAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:toolkit.aicpu.dump.OpAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpAttr::IsInitialized() const {
  return true;
}

void OpAttr::InternalSwap(OpAttr* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata OpAttr::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Workspace::InitAsDefaultInstance() {
}
class Workspace::_Internal {
 public:
};

Workspace::Workspace(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:toolkit.aicpu.dump.Workspace)
}
Workspace::Workspace(const Workspace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&data_addr_, &from.data_addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&data_addr_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:toolkit.aicpu.dump.Workspace)
}

void Workspace::SharedCtor() {
  ::memset(&data_addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&data_addr_)) + sizeof(type_));
}

Workspace::~Workspace() {
  // @@protoc_insertion_point(destructor:toolkit.aicpu.dump.Workspace)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Workspace::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Workspace::ArenaDtor(void* object) {
  Workspace* _this = reinterpret_cast< Workspace* >(object);
  (void)_this;
}
void Workspace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Workspace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Workspace& Workspace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Workspace_op_5fmapping_2eproto.base);
  return *internal_default_instance();
}


void Workspace::Clear() {
// @@protoc_insertion_point(message_clear_start:toolkit.aicpu.dump.Workspace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&data_addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&data_addr_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Workspace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .toolkit.aicpu.dump.Workspace.SpaceType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::toolkit::aicpu::dump::Workspace_SpaceType>(val));
        } else goto handle_unusual;
        continue;
      // uint64 data_addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          data_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Workspace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:toolkit.aicpu.dump.Workspace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .toolkit.aicpu.dump.Workspace.SpaceType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // uint64 data_addr = 2;
  if (this->data_addr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_data_addr(), target);
  }

  // uint64 size = 3;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toolkit.aicpu.dump.Workspace)
  return target;
}

size_t Workspace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:toolkit.aicpu.dump.Workspace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 data_addr = 2;
  if (this->data_addr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_data_addr());
  }

  // uint64 size = 3;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  // .toolkit.aicpu.dump.Workspace.SpaceType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Workspace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:toolkit.aicpu.dump.Workspace)
  GOOGLE_DCHECK_NE(&from, this);
  const Workspace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Workspace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:toolkit.aicpu.dump.Workspace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:toolkit.aicpu.dump.Workspace)
    MergeFrom(*source);
  }
}

void Workspace::MergeFrom(const Workspace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:toolkit.aicpu.dump.Workspace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data_addr() != 0) {
    _internal_set_data_addr(from._internal_data_addr());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Workspace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:toolkit.aicpu.dump.Workspace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Workspace::CopyFrom(const Workspace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:toolkit.aicpu.dump.Workspace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Workspace::IsInitialized() const {
  return true;
}

void Workspace::InternalSwap(Workspace* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Workspace, type_)
      + sizeof(Workspace::type_)
      - PROTOBUF_FIELD_OFFSET(Workspace, data_addr_)>(
          reinterpret_cast<char*>(&data_addr_),
          reinterpret_cast<char*>(&other->data_addr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Workspace::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RealAddressAndSize::InitAsDefaultInstance() {
}
class RealAddressAndSize::_Internal {
 public:
};

RealAddressAndSize::RealAddressAndSize(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:toolkit.aicpu.dump.RealAddressAndSize)
}
RealAddressAndSize::RealAddressAndSize(const RealAddressAndSize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&address_, &from.address_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&address_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:toolkit.aicpu.dump.RealAddressAndSize)
}

void RealAddressAndSize::SharedCtor() {
  ::memset(&address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&address_)) + sizeof(size_));
}

RealAddressAndSize::~RealAddressAndSize() {
  // @@protoc_insertion_point(destructor:toolkit.aicpu.dump.RealAddressAndSize)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RealAddressAndSize::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RealAddressAndSize::ArenaDtor(void* object) {
  RealAddressAndSize* _this = reinterpret_cast< RealAddressAndSize* >(object);
  (void)_this;
}
void RealAddressAndSize::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RealAddressAndSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RealAddressAndSize& RealAddressAndSize::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RealAddressAndSize_op_5fmapping_2eproto.base);
  return *internal_default_instance();
}


void RealAddressAndSize::Clear() {
// @@protoc_insertion_point(message_clear_start:toolkit.aicpu.dump.RealAddressAndSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&address_)) + sizeof(size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RealAddressAndSize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RealAddressAndSize::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:toolkit.aicpu.dump.RealAddressAndSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 address = 1;
  if (this->address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_address(), target);
  }

  // uint64 size = 2;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toolkit.aicpu.dump.RealAddressAndSize)
  return target;
}

size_t RealAddressAndSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:toolkit.aicpu.dump.RealAddressAndSize)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 address = 1;
  if (this->address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_address());
  }

  // uint64 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RealAddressAndSize::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:toolkit.aicpu.dump.RealAddressAndSize)
  GOOGLE_DCHECK_NE(&from, this);
  const RealAddressAndSize* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RealAddressAndSize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:toolkit.aicpu.dump.RealAddressAndSize)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:toolkit.aicpu.dump.RealAddressAndSize)
    MergeFrom(*source);
  }
}

void RealAddressAndSize::MergeFrom(const RealAddressAndSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:toolkit.aicpu.dump.RealAddressAndSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address() != 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void RealAddressAndSize::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:toolkit.aicpu.dump.RealAddressAndSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealAddressAndSize::CopyFrom(const RealAddressAndSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:toolkit.aicpu.dump.RealAddressAndSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealAddressAndSize::IsInitialized() const {
  return true;
}

void RealAddressAndSize::InternalSwap(RealAddressAndSize* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RealAddressAndSize, size_)
      + sizeof(RealAddressAndSize::size_)
      - PROTOBUF_FIELD_OFFSET(RealAddressAndSize, address_)>(
          reinterpret_cast<char*>(&address_),
          reinterpret_cast<char*>(&other->address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RealAddressAndSize::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Context::InitAsDefaultInstance() {
}
class Context::_Internal {
 public:
};

Context::Context(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  input_(arena),
  output_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:toolkit.aicpu.dump.Context)
}
Context::Context(const Context& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      input_(from.input_),
      output_(from.output_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&context_id_, &from.context_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&thread_id_) -
    reinterpret_cast<char*>(&context_id_)) + sizeof(thread_id_));
  // @@protoc_insertion_point(copy_constructor:toolkit.aicpu.dump.Context)
}

void Context::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Context_op_5fmapping_2eproto.base);
  ::memset(&context_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thread_id_) -
      reinterpret_cast<char*>(&context_id_)) + sizeof(thread_id_));
}

Context::~Context() {
  // @@protoc_insertion_point(destructor:toolkit.aicpu.dump.Context)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Context::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Context::ArenaDtor(void* object) {
  Context* _this = reinterpret_cast< Context* >(object);
  (void)_this;
}
void Context::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Context::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Context& Context::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Context_op_5fmapping_2eproto.base);
  return *internal_default_instance();
}


void Context::Clear() {
// @@protoc_insertion_point(message_clear_start:toolkit.aicpu.dump.Context)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_.Clear();
  output_.Clear();
  ::memset(&context_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thread_id_) -
      reinterpret_cast<char*>(&context_id_)) + sizeof(thread_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Context::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 context_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          context_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 thread_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          thread_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .toolkit.aicpu.dump.RealAddressAndSize input = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_input(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .toolkit.aicpu.dump.RealAddressAndSize output = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_output(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Context::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:toolkit.aicpu.dump.Context)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 context_id = 1;
  if (this->context_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_context_id(), target);
  }

  // uint32 thread_id = 2;
  if (this->thread_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_thread_id(), target);
  }

  // repeated .toolkit.aicpu.dump.RealAddressAndSize input = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_input_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_input(i), target, stream);
  }

  // repeated .toolkit.aicpu.dump.RealAddressAndSize output = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_output_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_output(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toolkit.aicpu.dump.Context)
  return target;
}

size_t Context::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:toolkit.aicpu.dump.Context)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .toolkit.aicpu.dump.RealAddressAndSize input = 3;
  total_size += 1UL * this->_internal_input_size();
  for (const auto& msg : this->input_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .toolkit.aicpu.dump.RealAddressAndSize output = 4;
  total_size += 1UL * this->_internal_output_size();
  for (const auto& msg : this->output_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 context_id = 1;
  if (this->context_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_context_id());
  }

  // uint32 thread_id = 2;
  if (this->thread_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thread_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Context::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:toolkit.aicpu.dump.Context)
  GOOGLE_DCHECK_NE(&from, this);
  const Context* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Context>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:toolkit.aicpu.dump.Context)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:toolkit.aicpu.dump.Context)
    MergeFrom(*source);
  }
}

void Context::MergeFrom(const Context& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:toolkit.aicpu.dump.Context)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_.MergeFrom(from.input_);
  output_.MergeFrom(from.output_);
  if (from.context_id() != 0) {
    _internal_set_context_id(from._internal_context_id());
  }
  if (from.thread_id() != 0) {
    _internal_set_thread_id(from._internal_thread_id());
  }
}

void Context::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:toolkit.aicpu.dump.Context)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Context::CopyFrom(const Context& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:toolkit.aicpu.dump.Context)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Context::IsInitialized() const {
  return true;
}

void Context::InternalSwap(Context* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  input_.InternalSwap(&other->input_);
  output_.InternalSwap(&other->output_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Context, thread_id_)
      + sizeof(Context::thread_id_)
      - PROTOBUF_FIELD_OFFSET(Context, context_id_)>(
          reinterpret_cast<char*>(&context_id_),
          reinterpret_cast<char*>(&other->context_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Context::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Task::InitAsDefaultInstance() {
  ::toolkit::aicpu::dump::_Task_default_instance_._instance.get_mutable()->op_ = const_cast< ::toolkit::aicpu::dump::Op*>(
      ::toolkit::aicpu::dump::Op::internal_default_instance());
}
class Task::_Internal {
 public:
  static const ::toolkit::aicpu::dump::Op& op(const Task* msg);
};

const ::toolkit::aicpu::dump::Op&
Task::_Internal::op(const Task* msg) {
  return *msg->op_;
}
Task::Task(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  output_(arena),
  input_(arena),
  buffer_(arena),
  attr_(arena),
  space_(arena),
  context_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:toolkit.aicpu.dump.Task)
}
Task::Task(const Task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      output_(from.output_),
      input_(from.input_),
      buffer_(from.buffer_),
      attr_(from.attr_),
      space_(from.space_),
      context_(from.context_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_op()) {
    op_ = new ::toolkit::aicpu::dump::Op(*from.op_);
  } else {
    op_ = nullptr;
  }
  ::memcpy(&task_id_, &from.task_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&thread_id_) -
    reinterpret_cast<char*>(&task_id_)) + sizeof(thread_id_));
  // @@protoc_insertion_point(copy_constructor:toolkit.aicpu.dump.Task)
}

void Task::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Task_op_5fmapping_2eproto.base);
  ::memset(&op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thread_id_) -
      reinterpret_cast<char*>(&op_)) + sizeof(thread_id_));
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:toolkit.aicpu.dump.Task)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Task::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete op_;
}

void Task::ArenaDtor(void* object) {
  Task* _this = reinterpret_cast< Task* >(object);
  (void)_this;
}
void Task::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Task& Task::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Task_op_5fmapping_2eproto.base);
  return *internal_default_instance();
}


void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:toolkit.aicpu.dump.Task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  output_.Clear();
  input_.Clear();
  buffer_.Clear();
  attr_.Clear();
  space_.Clear();
  context_.Clear();
  if (GetArena() == nullptr && op_ != nullptr) {
    delete op_;
  }
  op_ = nullptr;
  ::memset(&task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thread_id_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(thread_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Task::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 stream_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .toolkit.aicpu.dump.Op op = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_op(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .toolkit.aicpu.dump.Output output = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_output(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // bool end_graph = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          end_graph_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .toolkit.aicpu.dump.Input input = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_input(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .toolkit.aicpu.dump.OpBuffer buffer = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buffer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // .toolkit.aicpu.dump.Task.TaskType task_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_task_type(static_cast<::toolkit::aicpu::dump::Task_TaskType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 context_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          context_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .toolkit.aicpu.dump.OpAttr attr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .toolkit.aicpu.dump.Workspace space = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_space(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .toolkit.aicpu.dump.Context context = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_context(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 thread_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          thread_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Task::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:toolkit.aicpu.dump.Task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 task_id = 1;
  if (this->task_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_task_id(), target);
  }

  // uint32 stream_id = 2;
  if (this->stream_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stream_id(), target);
  }

  // .toolkit.aicpu.dump.Op op = 3;
  if (this->has_op()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::op(this), target, stream);
  }

  // repeated .toolkit.aicpu.dump.Output output = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_output_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_output(i), target, stream);
  }

  // bool end_graph = 5;
  if (this->end_graph() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_end_graph(), target);
  }

  // repeated .toolkit.aicpu.dump.Input input = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_input_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_input(i), target, stream);
  }

  // repeated .toolkit.aicpu.dump.OpBuffer buffer = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buffer_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_buffer(i), target, stream);
  }

  // .toolkit.aicpu.dump.Task.TaskType task_type = 8;
  if (this->task_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_task_type(), target);
  }

  // uint32 context_id = 9;
  if (this->context_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_context_id(), target);
  }

  // repeated .toolkit.aicpu.dump.OpAttr attr = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attr_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_attr(i), target, stream);
  }

  // repeated .toolkit.aicpu.dump.Workspace space = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_space_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_space(i), target, stream);
  }

  // repeated .toolkit.aicpu.dump.Context context = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_context_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_context(i), target, stream);
  }

  // uint32 thread_id = 13;
  if (this->thread_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_thread_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toolkit.aicpu.dump.Task)
  return target;
}

size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:toolkit.aicpu.dump.Task)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .toolkit.aicpu.dump.Output output = 4;
  total_size += 1UL * this->_internal_output_size();
  for (const auto& msg : this->output_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .toolkit.aicpu.dump.Input input = 6;
  total_size += 1UL * this->_internal_input_size();
  for (const auto& msg : this->input_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .toolkit.aicpu.dump.OpBuffer buffer = 7;
  total_size += 1UL * this->_internal_buffer_size();
  for (const auto& msg : this->buffer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .toolkit.aicpu.dump.OpAttr attr = 10;
  total_size += 1UL * this->_internal_attr_size();
  for (const auto& msg : this->attr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .toolkit.aicpu.dump.Workspace space = 11;
  total_size += 1UL * this->_internal_space_size();
  for (const auto& msg : this->space_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .toolkit.aicpu.dump.Context context = 12;
  total_size += 1UL * this->_internal_context_size();
  for (const auto& msg : this->context_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .toolkit.aicpu.dump.Op op = 3;
  if (this->has_op()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *op_);
  }

  // uint32 task_id = 1;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_task_id());
  }

  // uint32 stream_id = 2;
  if (this->stream_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stream_id());
  }

  // bool end_graph = 5;
  if (this->end_graph() != 0) {
    total_size += 1 + 1;
  }

  // .toolkit.aicpu.dump.Task.TaskType task_type = 8;
  if (this->task_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_task_type());
  }

  // uint32 context_id = 9;
  if (this->context_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_context_id());
  }

  // uint32 thread_id = 13;
  if (this->thread_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thread_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Task::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:toolkit.aicpu.dump.Task)
  GOOGLE_DCHECK_NE(&from, this);
  const Task* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Task>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:toolkit.aicpu.dump.Task)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:toolkit.aicpu.dump.Task)
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:toolkit.aicpu.dump.Task)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output_.MergeFrom(from.output_);
  input_.MergeFrom(from.input_);
  buffer_.MergeFrom(from.buffer_);
  attr_.MergeFrom(from.attr_);
  space_.MergeFrom(from.space_);
  context_.MergeFrom(from.context_);
  if (from.has_op()) {
    _internal_mutable_op()->::toolkit::aicpu::dump::Op::MergeFrom(from._internal_op());
  }
  if (from.task_id() != 0) {
    _internal_set_task_id(from._internal_task_id());
  }
  if (from.stream_id() != 0) {
    _internal_set_stream_id(from._internal_stream_id());
  }
  if (from.end_graph() != 0) {
    _internal_set_end_graph(from._internal_end_graph());
  }
  if (from.task_type() != 0) {
    _internal_set_task_type(from._internal_task_type());
  }
  if (from.context_id() != 0) {
    _internal_set_context_id(from._internal_context_id());
  }
  if (from.thread_id() != 0) {
    _internal_set_thread_id(from._internal_thread_id());
  }
}

void Task::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:toolkit.aicpu.dump.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:toolkit.aicpu.dump.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  return true;
}

void Task::InternalSwap(Task* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  output_.InternalSwap(&other->output_);
  input_.InternalSwap(&other->input_);
  buffer_.InternalSwap(&other->buffer_);
  attr_.InternalSwap(&other->attr_);
  space_.InternalSwap(&other->space_);
  context_.InternalSwap(&other->context_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Task, thread_id_)
      + sizeof(Task::thread_id_)
      - PROTOBUF_FIELD_OFFSET(Task, op_)>(
          reinterpret_cast<char*>(&op_),
          reinterpret_cast<char*>(&other->op_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Task::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OpMappingInfo::InitAsDefaultInstance() {
  ::toolkit::aicpu::dump::_OpMappingInfo_default_instance_.model_name_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::toolkit::aicpu::dump::_OpMappingInfo_default_instance_.model_id_ = 0u;
  ::toolkit::aicpu::dump::_OpMappingInfo_default_instance_.step_id_addr_ = PROTOBUF_ULONGLONG(0);
  ::toolkit::aicpu::dump::_OpMappingInfo_default_instance_.iterations_per_loop_addr_ = PROTOBUF_ULONGLONG(0);
  ::toolkit::aicpu::dump::_OpMappingInfo_default_instance_.loop_cond_addr_ = PROTOBUF_ULONGLONG(0);
}
class OpMappingInfo::_Internal {
 public:
};

OpMappingInfo::OpMappingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  task_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:toolkit.aicpu.dump.OpMappingInfo)
}
OpMappingInfo::OpMappingInfo(const OpMappingInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      task_(from.task_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dump_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dump_path().empty()) {
    dump_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dump_path(),
      GetArena());
  }
  dump_step_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dump_step().empty()) {
    dump_step_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dump_step(),
      GetArena());
  }
  ::memcpy(&flag_, &from.flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&dump_data_) -
    reinterpret_cast<char*>(&flag_)) + sizeof(dump_data_));
  clear_has_model_name_param();
  switch (from.model_name_param_case()) {
    case kModelName: {
      _internal_set_model_name(from._internal_model_name());
      break;
    }
    case MODEL_NAME_PARAM_NOT_SET: {
      break;
    }
  }
  clear_has_model_id_param();
  switch (from.model_id_param_case()) {
    case kModelId: {
      _internal_set_model_id(from._internal_model_id());
      break;
    }
    case MODEL_ID_PARAM_NOT_SET: {
      break;
    }
  }
  clear_has_step_id();
  switch (from.step_id_case()) {
    case kStepIdAddr: {
      _internal_set_step_id_addr(from._internal_step_id_addr());
      break;
    }
    case STEP_ID_NOT_SET: {
      break;
    }
  }
  clear_has_iterations_per_loop();
  switch (from.iterations_per_loop_case()) {
    case kIterationsPerLoopAddr: {
      _internal_set_iterations_per_loop_addr(from._internal_iterations_per_loop_addr());
      break;
    }
    case ITERATIONS_PER_LOOP_NOT_SET: {
      break;
    }
  }
  clear_has_loop_cond();
  switch (from.loop_cond_case()) {
    case kLoopCondAddr: {
      _internal_set_loop_cond_addr(from._internal_loop_cond_addr());
      break;
    }
    case LOOP_COND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:toolkit.aicpu.dump.OpMappingInfo)
}

void OpMappingInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpMappingInfo_op_5fmapping_2eproto.base);
  dump_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dump_step_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dump_data_) -
      reinterpret_cast<char*>(&flag_)) + sizeof(dump_data_));
  clear_has_model_name_param();
  clear_has_model_id_param();
  clear_has_step_id();
  clear_has_iterations_per_loop();
  clear_has_loop_cond();
}

OpMappingInfo::~OpMappingInfo() {
  // @@protoc_insertion_point(destructor:toolkit.aicpu.dump.OpMappingInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpMappingInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dump_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dump_step_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_model_name_param()) {
    clear_model_name_param();
  }
  if (has_model_id_param()) {
    clear_model_id_param();
  }
  if (has_step_id()) {
    clear_step_id();
  }
  if (has_iterations_per_loop()) {
    clear_iterations_per_loop();
  }
  if (has_loop_cond()) {
    clear_loop_cond();
  }
}

void OpMappingInfo::ArenaDtor(void* object) {
  OpMappingInfo* _this = reinterpret_cast< OpMappingInfo* >(object);
  (void)_this;
}
void OpMappingInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpMappingInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpMappingInfo& OpMappingInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpMappingInfo_op_5fmapping_2eproto.base);
  return *internal_default_instance();
}


void OpMappingInfo::clear_model_name_param() {
// @@protoc_insertion_point(one_of_clear_start:toolkit.aicpu.dump.OpMappingInfo)
  switch (model_name_param_case()) {
    case kModelName: {
      model_name_param_.model_name_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case MODEL_NAME_PARAM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MODEL_NAME_PARAM_NOT_SET;
}

void OpMappingInfo::clear_model_id_param() {
// @@protoc_insertion_point(one_of_clear_start:toolkit.aicpu.dump.OpMappingInfo)
  switch (model_id_param_case()) {
    case kModelId: {
      // No need to clear
      break;
    }
    case MODEL_ID_PARAM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = MODEL_ID_PARAM_NOT_SET;
}

void OpMappingInfo::clear_step_id() {
// @@protoc_insertion_point(one_of_clear_start:toolkit.aicpu.dump.OpMappingInfo)
  switch (step_id_case()) {
    case kStepIdAddr: {
      // No need to clear
      break;
    }
    case STEP_ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = STEP_ID_NOT_SET;
}

void OpMappingInfo::clear_iterations_per_loop() {
// @@protoc_insertion_point(one_of_clear_start:toolkit.aicpu.dump.OpMappingInfo)
  switch (iterations_per_loop_case()) {
    case kIterationsPerLoopAddr: {
      // No need to clear
      break;
    }
    case ITERATIONS_PER_LOOP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[3] = ITERATIONS_PER_LOOP_NOT_SET;
}

void OpMappingInfo::clear_loop_cond() {
// @@protoc_insertion_point(one_of_clear_start:toolkit.aicpu.dump.OpMappingInfo)
  switch (loop_cond_case()) {
    case kLoopCondAddr: {
      // No need to clear
      break;
    }
    case LOOP_COND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[4] = LOOP_COND_NOT_SET;
}


void OpMappingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:toolkit.aicpu.dump.OpMappingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_.Clear();
  dump_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dump_step_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dump_data_) -
      reinterpret_cast<char*>(&flag_)) + sizeof(dump_data_));
  clear_model_name_param();
  clear_model_id_param();
  clear_step_id();
  clear_iterations_per_loop();
  clear_loop_cond();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpMappingInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dump_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dump_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "toolkit.aicpu.dump.OpMappingInfo.dump_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "toolkit.aicpu.dump.OpMappingInfo.model_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 model_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_model_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 step_id_addr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_step_id_addr(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 iterations_per_loop_addr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_iterations_per_loop_addr(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 loop_cond_addr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _internal_set_loop_cond_addr(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 flag = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .toolkit.aicpu.dump.Task task = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_task(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // string dump_step = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_dump_step();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "toolkit.aicpu.dump.OpMappingInfo.dump_step"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .toolkit.aicpu.dump.DumpData dump_data = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dump_data(static_cast<::toolkit::aicpu::dump::DumpData>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpMappingInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:toolkit.aicpu.dump.OpMappingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dump_path = 1;
  if (this->dump_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dump_path().data(), static_cast<int>(this->_internal_dump_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "toolkit.aicpu.dump.OpMappingInfo.dump_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dump_path(), target);
  }

  // string model_name = 2;
  if (_internal_has_model_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_name().data(), static_cast<int>(this->_internal_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "toolkit.aicpu.dump.OpMappingInfo.model_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_name(), target);
  }

  // uint32 model_id = 3;
  if (_internal_has_model_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_model_id(), target);
  }

  // uint64 step_id_addr = 4;
  if (_internal_has_step_id_addr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_step_id_addr(), target);
  }

  // uint64 iterations_per_loop_addr = 5;
  if (_internal_has_iterations_per_loop_addr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_iterations_per_loop_addr(), target);
  }

  // uint64 loop_cond_addr = 6;
  if (_internal_has_loop_cond_addr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_loop_cond_addr(), target);
  }

  // uint32 flag = 7;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_flag(), target);
  }

  // repeated .toolkit.aicpu.dump.Task task = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_task_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_task(i), target, stream);
  }

  // string dump_step = 9;
  if (this->dump_step().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dump_step().data(), static_cast<int>(this->_internal_dump_step().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "toolkit.aicpu.dump.OpMappingInfo.dump_step");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_dump_step(), target);
  }

  // .toolkit.aicpu.dump.DumpData dump_data = 10;
  if (this->dump_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_dump_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toolkit.aicpu.dump.OpMappingInfo)
  return target;
}

size_t OpMappingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:toolkit.aicpu.dump.OpMappingInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .toolkit.aicpu.dump.Task task = 8;
  total_size += 1UL * this->_internal_task_size();
  for (const auto& msg : this->task_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string dump_path = 1;
  if (this->dump_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dump_path());
  }

  // string dump_step = 9;
  if (this->dump_step().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dump_step());
  }

  // uint32 flag = 7;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flag());
  }

  // .toolkit.aicpu.dump.DumpData dump_data = 10;
  if (this->dump_data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dump_data());
  }

  switch (model_name_param_case()) {
    // string model_name = 2;
    case kModelName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model_name());
      break;
    }
    case MODEL_NAME_PARAM_NOT_SET: {
      break;
    }
  }
  switch (model_id_param_case()) {
    // uint32 model_id = 3;
    case kModelId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_model_id());
      break;
    }
    case MODEL_ID_PARAM_NOT_SET: {
      break;
    }
  }
  switch (step_id_case()) {
    // uint64 step_id_addr = 4;
    case kStepIdAddr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_step_id_addr());
      break;
    }
    case STEP_ID_NOT_SET: {
      break;
    }
  }
  switch (iterations_per_loop_case()) {
    // uint64 iterations_per_loop_addr = 5;
    case kIterationsPerLoopAddr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_iterations_per_loop_addr());
      break;
    }
    case ITERATIONS_PER_LOOP_NOT_SET: {
      break;
    }
  }
  switch (loop_cond_case()) {
    // uint64 loop_cond_addr = 6;
    case kLoopCondAddr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_loop_cond_addr());
      break;
    }
    case LOOP_COND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpMappingInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:toolkit.aicpu.dump.OpMappingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const OpMappingInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpMappingInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:toolkit.aicpu.dump.OpMappingInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:toolkit.aicpu.dump.OpMappingInfo)
    MergeFrom(*source);
  }
}

void OpMappingInfo::MergeFrom(const OpMappingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:toolkit.aicpu.dump.OpMappingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  task_.MergeFrom(from.task_);
  if (from.dump_path().size() > 0) {
    _internal_set_dump_path(from._internal_dump_path());
  }
  if (from.dump_step().size() > 0) {
    _internal_set_dump_step(from._internal_dump_step());
  }
  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
  if (from.dump_data() != 0) {
    _internal_set_dump_data(from._internal_dump_data());
  }
  switch (from.model_name_param_case()) {
    case kModelName: {
      _internal_set_model_name(from._internal_model_name());
      break;
    }
    case MODEL_NAME_PARAM_NOT_SET: {
      break;
    }
  }
  switch (from.model_id_param_case()) {
    case kModelId: {
      _internal_set_model_id(from._internal_model_id());
      break;
    }
    case MODEL_ID_PARAM_NOT_SET: {
      break;
    }
  }
  switch (from.step_id_case()) {
    case kStepIdAddr: {
      _internal_set_step_id_addr(from._internal_step_id_addr());
      break;
    }
    case STEP_ID_NOT_SET: {
      break;
    }
  }
  switch (from.iterations_per_loop_case()) {
    case kIterationsPerLoopAddr: {
      _internal_set_iterations_per_loop_addr(from._internal_iterations_per_loop_addr());
      break;
    }
    case ITERATIONS_PER_LOOP_NOT_SET: {
      break;
    }
  }
  switch (from.loop_cond_case()) {
    case kLoopCondAddr: {
      _internal_set_loop_cond_addr(from._internal_loop_cond_addr());
      break;
    }
    case LOOP_COND_NOT_SET: {
      break;
    }
  }
}

void OpMappingInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:toolkit.aicpu.dump.OpMappingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpMappingInfo::CopyFrom(const OpMappingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:toolkit.aicpu.dump.OpMappingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpMappingInfo::IsInitialized() const {
  return true;
}

void OpMappingInfo::InternalSwap(OpMappingInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  task_.InternalSwap(&other->task_);
  dump_path_.Swap(&other->dump_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dump_step_.Swap(&other->dump_step_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpMappingInfo, dump_data_)
      + sizeof(OpMappingInfo::dump_data_)
      - PROTOBUF_FIELD_OFFSET(OpMappingInfo, flag_)>(
          reinterpret_cast<char*>(&flag_),
          reinterpret_cast<char*>(&other->flag_));
  swap(model_name_param_, other->model_name_param_);
  swap(model_id_param_, other->model_id_param_);
  swap(step_id_, other->step_id_);
  swap(iterations_per_loop_, other->iterations_per_loop_);
  swap(loop_cond_, other->loop_cond_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
  swap(_oneof_case_[3], other->_oneof_case_[3]);
  swap(_oneof_case_[4], other->_oneof_case_[4]);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpMappingInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dump
}  // namespace aicpu
}  // namespace toolkit
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::toolkit::aicpu::dump::Shape* Arena::CreateMaybeMessage< ::toolkit::aicpu::dump::Shape >(Arena* arena) {
  return Arena::CreateMessageInternal< ::toolkit::aicpu::dump::Shape >(arena);
}
template<> PROTOBUF_NOINLINE ::toolkit::aicpu::dump::Output* Arena::CreateMaybeMessage< ::toolkit::aicpu::dump::Output >(Arena* arena) {
  return Arena::CreateMessageInternal< ::toolkit::aicpu::dump::Output >(arena);
}
template<> PROTOBUF_NOINLINE ::toolkit::aicpu::dump::Input* Arena::CreateMaybeMessage< ::toolkit::aicpu::dump::Input >(Arena* arena) {
  return Arena::CreateMessageInternal< ::toolkit::aicpu::dump::Input >(arena);
}
template<> PROTOBUF_NOINLINE ::toolkit::aicpu::dump::OpBuffer* Arena::CreateMaybeMessage< ::toolkit::aicpu::dump::OpBuffer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::toolkit::aicpu::dump::OpBuffer >(arena);
}
template<> PROTOBUF_NOINLINE ::toolkit::aicpu::dump::Op* Arena::CreateMaybeMessage< ::toolkit::aicpu::dump::Op >(Arena* arena) {
  return Arena::CreateMessageInternal< ::toolkit::aicpu::dump::Op >(arena);
}
template<> PROTOBUF_NOINLINE ::toolkit::aicpu::dump::OpAttr* Arena::CreateMaybeMessage< ::toolkit::aicpu::dump::OpAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::toolkit::aicpu::dump::OpAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::toolkit::aicpu::dump::Workspace* Arena::CreateMaybeMessage< ::toolkit::aicpu::dump::Workspace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::toolkit::aicpu::dump::Workspace >(arena);
}
template<> PROTOBUF_NOINLINE ::toolkit::aicpu::dump::RealAddressAndSize* Arena::CreateMaybeMessage< ::toolkit::aicpu::dump::RealAddressAndSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::toolkit::aicpu::dump::RealAddressAndSize >(arena);
}
template<> PROTOBUF_NOINLINE ::toolkit::aicpu::dump::Context* Arena::CreateMaybeMessage< ::toolkit::aicpu::dump::Context >(Arena* arena) {
  return Arena::CreateMessageInternal< ::toolkit::aicpu::dump::Context >(arena);
}
template<> PROTOBUF_NOINLINE ::toolkit::aicpu::dump::Task* Arena::CreateMaybeMessage< ::toolkit::aicpu::dump::Task >(Arena* arena) {
  return Arena::CreateMessageInternal< ::toolkit::aicpu::dump::Task >(arena);
}
template<> PROTOBUF_NOINLINE ::toolkit::aicpu::dump::OpMappingInfo* Arena::CreateMaybeMessage< ::toolkit::aicpu::dump::OpMappingInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::toolkit::aicpu::dump::OpMappingInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
