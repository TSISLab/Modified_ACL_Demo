// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: op_mapping.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_op_5fmapping_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_op_5fmapping_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_op_5fmapping_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_op_5fmapping_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_op_5fmapping_2eproto;
namespace toolkit {
namespace aicpu {
namespace dump {
class Context;
class ContextDefaultTypeInternal;
extern ContextDefaultTypeInternal _Context_default_instance_;
class Input;
class InputDefaultTypeInternal;
extern InputDefaultTypeInternal _Input_default_instance_;
class Op;
class OpDefaultTypeInternal;
extern OpDefaultTypeInternal _Op_default_instance_;
class OpAttr;
class OpAttrDefaultTypeInternal;
extern OpAttrDefaultTypeInternal _OpAttr_default_instance_;
class OpBuffer;
class OpBufferDefaultTypeInternal;
extern OpBufferDefaultTypeInternal _OpBuffer_default_instance_;
class OpMappingInfo;
class OpMappingInfoDefaultTypeInternal;
extern OpMappingInfoDefaultTypeInternal _OpMappingInfo_default_instance_;
class Output;
class OutputDefaultTypeInternal;
extern OutputDefaultTypeInternal _Output_default_instance_;
class RealAddressAndSize;
class RealAddressAndSizeDefaultTypeInternal;
extern RealAddressAndSizeDefaultTypeInternal _RealAddressAndSize_default_instance_;
class Shape;
class ShapeDefaultTypeInternal;
extern ShapeDefaultTypeInternal _Shape_default_instance_;
class Task;
class TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
class Workspace;
class WorkspaceDefaultTypeInternal;
extern WorkspaceDefaultTypeInternal _Workspace_default_instance_;
}  // namespace dump
}  // namespace aicpu
}  // namespace toolkit
PROTOBUF_NAMESPACE_OPEN
template<> ::toolkit::aicpu::dump::Context* Arena::CreateMaybeMessage<::toolkit::aicpu::dump::Context>(Arena*);
template<> ::toolkit::aicpu::dump::Input* Arena::CreateMaybeMessage<::toolkit::aicpu::dump::Input>(Arena*);
template<> ::toolkit::aicpu::dump::Op* Arena::CreateMaybeMessage<::toolkit::aicpu::dump::Op>(Arena*);
template<> ::toolkit::aicpu::dump::OpAttr* Arena::CreateMaybeMessage<::toolkit::aicpu::dump::OpAttr>(Arena*);
template<> ::toolkit::aicpu::dump::OpBuffer* Arena::CreateMaybeMessage<::toolkit::aicpu::dump::OpBuffer>(Arena*);
template<> ::toolkit::aicpu::dump::OpMappingInfo* Arena::CreateMaybeMessage<::toolkit::aicpu::dump::OpMappingInfo>(Arena*);
template<> ::toolkit::aicpu::dump::Output* Arena::CreateMaybeMessage<::toolkit::aicpu::dump::Output>(Arena*);
template<> ::toolkit::aicpu::dump::RealAddressAndSize* Arena::CreateMaybeMessage<::toolkit::aicpu::dump::RealAddressAndSize>(Arena*);
template<> ::toolkit::aicpu::dump::Shape* Arena::CreateMaybeMessage<::toolkit::aicpu::dump::Shape>(Arena*);
template<> ::toolkit::aicpu::dump::Task* Arena::CreateMaybeMessage<::toolkit::aicpu::dump::Task>(Arena*);
template<> ::toolkit::aicpu::dump::Workspace* Arena::CreateMaybeMessage<::toolkit::aicpu::dump::Workspace>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace toolkit {
namespace aicpu {
namespace dump {

enum Workspace_SpaceType : int {
  Workspace_SpaceType_LOG = 0,
  Workspace_SpaceType_Workspace_SpaceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Workspace_SpaceType_Workspace_SpaceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Workspace_SpaceType_IsValid(int value);
constexpr Workspace_SpaceType Workspace_SpaceType_SpaceType_MIN = Workspace_SpaceType_LOG;
constexpr Workspace_SpaceType Workspace_SpaceType_SpaceType_MAX = Workspace_SpaceType_LOG;
constexpr int Workspace_SpaceType_SpaceType_ARRAYSIZE = Workspace_SpaceType_SpaceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Workspace_SpaceType_descriptor();
template<typename T>
inline const std::string& Workspace_SpaceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Workspace_SpaceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Workspace_SpaceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Workspace_SpaceType_descriptor(), enum_t_value);
}
inline bool Workspace_SpaceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Workspace_SpaceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Workspace_SpaceType>(
    Workspace_SpaceType_descriptor(), name, value);
}
enum Task_TaskType : int {
  Task_TaskType_AICORE = 0,
  Task_TaskType_AICPU = 1,
  Task_TaskType_DEBUG = 2,
  Task_TaskType_SDMA = 3,
  Task_TaskType_FFTSPLUS = 4,
  Task_TaskType_DSA = 5,
  Task_TaskType_Task_TaskType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Task_TaskType_Task_TaskType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Task_TaskType_IsValid(int value);
constexpr Task_TaskType Task_TaskType_TaskType_MIN = Task_TaskType_AICORE;
constexpr Task_TaskType Task_TaskType_TaskType_MAX = Task_TaskType_DSA;
constexpr int Task_TaskType_TaskType_ARRAYSIZE = Task_TaskType_TaskType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Task_TaskType_descriptor();
template<typename T>
inline const std::string& Task_TaskType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Task_TaskType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Task_TaskType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Task_TaskType_descriptor(), enum_t_value);
}
inline bool Task_TaskType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Task_TaskType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Task_TaskType>(
    Task_TaskType_descriptor(), name, value);
}
enum AddressType : int {
  TRADITIONAL_ADDR = 0,
  NOTILING_ADDR = 1,
  RAW_ADDR = 2,
  AddressType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AddressType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AddressType_IsValid(int value);
constexpr AddressType AddressType_MIN = TRADITIONAL_ADDR;
constexpr AddressType AddressType_MAX = RAW_ADDR;
constexpr int AddressType_ARRAYSIZE = AddressType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AddressType_descriptor();
template<typename T>
inline const std::string& AddressType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AddressType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AddressType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AddressType_descriptor(), enum_t_value);
}
inline bool AddressType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AddressType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AddressType>(
    AddressType_descriptor(), name, value);
}
enum BufferType : int {
  L1 = 0,
  BufferType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BufferType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BufferType_IsValid(int value);
constexpr BufferType BufferType_MIN = L1;
constexpr BufferType BufferType_MAX = L1;
constexpr int BufferType_ARRAYSIZE = BufferType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BufferType_descriptor();
template<typename T>
inline const std::string& BufferType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BufferType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BufferType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BufferType_descriptor(), enum_t_value);
}
inline bool BufferType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BufferType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BufferType>(
    BufferType_descriptor(), name, value);
}
enum DumpData : int {
  TENSOR_DUMP_DATA = 0,
  STATS_DUMP_DATA = 1,
  DumpData_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DumpData_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DumpData_IsValid(int value);
constexpr DumpData DumpData_MIN = TENSOR_DUMP_DATA;
constexpr DumpData DumpData_MAX = STATS_DUMP_DATA;
constexpr int DumpData_ARRAYSIZE = DumpData_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DumpData_descriptor();
template<typename T>
inline const std::string& DumpData_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DumpData>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DumpData_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DumpData_descriptor(), enum_t_value);
}
inline bool DumpData_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DumpData* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DumpData>(
    DumpData_descriptor(), name, value);
}
// ===================================================================

class Shape PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:toolkit.aicpu.dump.Shape) */ {
 public:
  inline Shape() : Shape(nullptr) {}
  virtual ~Shape();

  Shape(const Shape& from);
  Shape(Shape&& from) noexcept
    : Shape() {
    *this = ::std::move(from);
  }

  inline Shape& operator=(const Shape& from) {
    CopyFrom(from);
    return *this;
  }
  inline Shape& operator=(Shape&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Shape& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Shape* internal_default_instance() {
    return reinterpret_cast<const Shape*>(
               &_Shape_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Shape& a, Shape& b) {
    a.Swap(&b);
  }
  inline void Swap(Shape* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Shape* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Shape* New() const final {
    return CreateMaybeMessage<Shape>(nullptr);
  }

  Shape* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Shape>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Shape& from);
  void MergeFrom(const Shape& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Shape* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "toolkit.aicpu.dump.Shape";
  }
  protected:
  explicit Shape(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_op_5fmapping_2eproto);
    return ::descriptor_table_op_5fmapping_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimFieldNumber = 1,
  };
  // repeated uint64 dim = 1;
  int dim_size() const;
  private:
  int _internal_dim_size() const;
  public:
  void clear_dim();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dim(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_dim() const;
  void _internal_add_dim(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_dim();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 dim(int index) const;
  void set_dim(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_dim(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      dim() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_dim();

  // @@protoc_insertion_point(class_scope:toolkit.aicpu.dump.Shape)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > dim_;
  mutable std::atomic<int> _dim_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_op_5fmapping_2eproto;
};
// -------------------------------------------------------------------

class Output PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:toolkit.aicpu.dump.Output) */ {
 public:
  inline Output() : Output(nullptr) {}
  virtual ~Output();

  Output(const Output& from);
  Output(Output&& from) noexcept
    : Output() {
    *this = ::std::move(from);
  }

  inline Output& operator=(const Output& from) {
    CopyFrom(from);
    return *this;
  }
  inline Output& operator=(Output&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Output& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Output* internal_default_instance() {
    return reinterpret_cast<const Output*>(
               &_Output_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Output& a, Output& b) {
    a.Swap(&b);
  }
  inline void Swap(Output* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Output* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Output* New() const final {
    return CreateMaybeMessage<Output>(nullptr);
  }

  Output* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Output>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Output& from);
  void MergeFrom(const Output& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Output* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "toolkit.aicpu.dump.Output";
  }
  protected:
  explicit Output(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_op_5fmapping_2eproto);
    return ::descriptor_table_op_5fmapping_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginalNameFieldNumber = 5,
    kShapeFieldNumber = 3,
    kOriginShapeFieldNumber = 10,
    kDataTypeFieldNumber = 1,
    kFormatFieldNumber = 2,
    kAddressFieldNumber = 4,
    kOriginalOutputIndexFieldNumber = 6,
    kOriginalOutputDataTypeFieldNumber = 7,
    kSizeFieldNumber = 9,
    kOriginalOutputFormatFieldNumber = 8,
    kAddrTypeFieldNumber = 11,
    kOffsetFieldNumber = 12,
  };
  // string original_name = 5;
  void clear_original_name();
  const std::string& original_name() const;
  void set_original_name(const std::string& value);
  void set_original_name(std::string&& value);
  void set_original_name(const char* value);
  void set_original_name(const char* value, size_t size);
  std::string* mutable_original_name();
  std::string* release_original_name();
  void set_allocated_original_name(std::string* original_name);
  private:
  const std::string& _internal_original_name() const;
  void _internal_set_original_name(const std::string& value);
  std::string* _internal_mutable_original_name();
  public:

  // .toolkit.aicpu.dump.Shape shape = 3;
  bool has_shape() const;
  private:
  bool _internal_has_shape() const;
  public:
  void clear_shape();
  const ::toolkit::aicpu::dump::Shape& shape() const;
  ::toolkit::aicpu::dump::Shape* release_shape();
  ::toolkit::aicpu::dump::Shape* mutable_shape();
  void set_allocated_shape(::toolkit::aicpu::dump::Shape* shape);
  private:
  const ::toolkit::aicpu::dump::Shape& _internal_shape() const;
  ::toolkit::aicpu::dump::Shape* _internal_mutable_shape();
  public:
  void unsafe_arena_set_allocated_shape(
      ::toolkit::aicpu::dump::Shape* shape);
  ::toolkit::aicpu::dump::Shape* unsafe_arena_release_shape();

  // .toolkit.aicpu.dump.Shape origin_shape = 10;
  bool has_origin_shape() const;
  private:
  bool _internal_has_origin_shape() const;
  public:
  void clear_origin_shape();
  const ::toolkit::aicpu::dump::Shape& origin_shape() const;
  ::toolkit::aicpu::dump::Shape* release_origin_shape();
  ::toolkit::aicpu::dump::Shape* mutable_origin_shape();
  void set_allocated_origin_shape(::toolkit::aicpu::dump::Shape* origin_shape);
  private:
  const ::toolkit::aicpu::dump::Shape& _internal_origin_shape() const;
  ::toolkit::aicpu::dump::Shape* _internal_mutable_origin_shape();
  public:
  void unsafe_arena_set_allocated_origin_shape(
      ::toolkit::aicpu::dump::Shape* origin_shape);
  ::toolkit::aicpu::dump::Shape* unsafe_arena_release_origin_shape();

  // int32 data_type = 1;
  void clear_data_type();
  ::PROTOBUF_NAMESPACE_ID::int32 data_type() const;
  void set_data_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data_type() const;
  void _internal_set_data_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 format = 2;
  void clear_format();
  ::PROTOBUF_NAMESPACE_ID::int32 format() const;
  void set_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_format() const;
  void _internal_set_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 address = 4;
  void clear_address();
  ::PROTOBUF_NAMESPACE_ID::uint64 address() const;
  void set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_address() const;
  void _internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 original_output_index = 6;
  void clear_original_output_index();
  ::PROTOBUF_NAMESPACE_ID::int32 original_output_index() const;
  void set_original_output_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_original_output_index() const;
  void _internal_set_original_output_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 original_output_data_type = 7;
  void clear_original_output_data_type();
  ::PROTOBUF_NAMESPACE_ID::int32 original_output_data_type() const;
  void set_original_output_data_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_original_output_data_type() const;
  void _internal_set_original_output_data_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 size = 9;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 original_output_format = 8;
  void clear_original_output_format();
  ::PROTOBUF_NAMESPACE_ID::int32 original_output_format() const;
  void set_original_output_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_original_output_format() const;
  void _internal_set_original_output_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .toolkit.aicpu.dump.AddressType addr_type = 11;
  void clear_addr_type();
  ::toolkit::aicpu::dump::AddressType addr_type() const;
  void set_addr_type(::toolkit::aicpu::dump::AddressType value);
  private:
  ::toolkit::aicpu::dump::AddressType _internal_addr_type() const;
  void _internal_set_addr_type(::toolkit::aicpu::dump::AddressType value);
  public:

  // uint64 offset = 12;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:toolkit.aicpu.dump.Output)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr original_name_;
  ::toolkit::aicpu::dump::Shape* shape_;
  ::toolkit::aicpu::dump::Shape* origin_shape_;
  ::PROTOBUF_NAMESPACE_ID::int32 data_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 format_;
  ::PROTOBUF_NAMESPACE_ID::uint64 address_;
  ::PROTOBUF_NAMESPACE_ID::int32 original_output_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 original_output_data_type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  ::PROTOBUF_NAMESPACE_ID::int32 original_output_format_;
  int addr_type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_op_5fmapping_2eproto;
};
// -------------------------------------------------------------------

class Input PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:toolkit.aicpu.dump.Input) */ {
 public:
  inline Input() : Input(nullptr) {}
  virtual ~Input();

  Input(const Input& from);
  Input(Input&& from) noexcept
    : Input() {
    *this = ::std::move(from);
  }

  inline Input& operator=(const Input& from) {
    CopyFrom(from);
    return *this;
  }
  inline Input& operator=(Input&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Input& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Input* internal_default_instance() {
    return reinterpret_cast<const Input*>(
               &_Input_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Input& a, Input& b) {
    a.Swap(&b);
  }
  inline void Swap(Input* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Input* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Input* New() const final {
    return CreateMaybeMessage<Input>(nullptr);
  }

  Input* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Input>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Input& from);
  void MergeFrom(const Input& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Input* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "toolkit.aicpu.dump.Input";
  }
  protected:
  explicit Input(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_op_5fmapping_2eproto);
    return ::descriptor_table_op_5fmapping_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 3,
    kOriginShapeFieldNumber = 6,
    kDataTypeFieldNumber = 1,
    kFormatFieldNumber = 2,
    kAddressFieldNumber = 4,
    kSizeFieldNumber = 5,
    kOffsetFieldNumber = 8,
    kAddrTypeFieldNumber = 7,
  };
  // .toolkit.aicpu.dump.Shape shape = 3;
  bool has_shape() const;
  private:
  bool _internal_has_shape() const;
  public:
  void clear_shape();
  const ::toolkit::aicpu::dump::Shape& shape() const;
  ::toolkit::aicpu::dump::Shape* release_shape();
  ::toolkit::aicpu::dump::Shape* mutable_shape();
  void set_allocated_shape(::toolkit::aicpu::dump::Shape* shape);
  private:
  const ::toolkit::aicpu::dump::Shape& _internal_shape() const;
  ::toolkit::aicpu::dump::Shape* _internal_mutable_shape();
  public:
  void unsafe_arena_set_allocated_shape(
      ::toolkit::aicpu::dump::Shape* shape);
  ::toolkit::aicpu::dump::Shape* unsafe_arena_release_shape();

  // .toolkit.aicpu.dump.Shape origin_shape = 6;
  bool has_origin_shape() const;
  private:
  bool _internal_has_origin_shape() const;
  public:
  void clear_origin_shape();
  const ::toolkit::aicpu::dump::Shape& origin_shape() const;
  ::toolkit::aicpu::dump::Shape* release_origin_shape();
  ::toolkit::aicpu::dump::Shape* mutable_origin_shape();
  void set_allocated_origin_shape(::toolkit::aicpu::dump::Shape* origin_shape);
  private:
  const ::toolkit::aicpu::dump::Shape& _internal_origin_shape() const;
  ::toolkit::aicpu::dump::Shape* _internal_mutable_origin_shape();
  public:
  void unsafe_arena_set_allocated_origin_shape(
      ::toolkit::aicpu::dump::Shape* origin_shape);
  ::toolkit::aicpu::dump::Shape* unsafe_arena_release_origin_shape();

  // int32 data_type = 1;
  void clear_data_type();
  ::PROTOBUF_NAMESPACE_ID::int32 data_type() const;
  void set_data_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data_type() const;
  void _internal_set_data_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 format = 2;
  void clear_format();
  ::PROTOBUF_NAMESPACE_ID::int32 format() const;
  void set_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_format() const;
  void _internal_set_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 address = 4;
  void clear_address();
  ::PROTOBUF_NAMESPACE_ID::uint64 address() const;
  void set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_address() const;
  void _internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 size = 5;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 offset = 8;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .toolkit.aicpu.dump.AddressType addr_type = 7;
  void clear_addr_type();
  ::toolkit::aicpu::dump::AddressType addr_type() const;
  void set_addr_type(::toolkit::aicpu::dump::AddressType value);
  private:
  ::toolkit::aicpu::dump::AddressType _internal_addr_type() const;
  void _internal_set_addr_type(::toolkit::aicpu::dump::AddressType value);
  public:

  // @@protoc_insertion_point(class_scope:toolkit.aicpu.dump.Input)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::toolkit::aicpu::dump::Shape* shape_;
  ::toolkit::aicpu::dump::Shape* origin_shape_;
  ::PROTOBUF_NAMESPACE_ID::int32 data_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 format_;
  ::PROTOBUF_NAMESPACE_ID::uint64 address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offset_;
  int addr_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_op_5fmapping_2eproto;
};
// -------------------------------------------------------------------

class OpBuffer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:toolkit.aicpu.dump.OpBuffer) */ {
 public:
  inline OpBuffer() : OpBuffer(nullptr) {}
  virtual ~OpBuffer();

  OpBuffer(const OpBuffer& from);
  OpBuffer(OpBuffer&& from) noexcept
    : OpBuffer() {
    *this = ::std::move(from);
  }

  inline OpBuffer& operator=(const OpBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpBuffer& operator=(OpBuffer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpBuffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpBuffer* internal_default_instance() {
    return reinterpret_cast<const OpBuffer*>(
               &_OpBuffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OpBuffer& a, OpBuffer& b) {
    a.Swap(&b);
  }
  inline void Swap(OpBuffer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpBuffer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpBuffer* New() const final {
    return CreateMaybeMessage<OpBuffer>(nullptr);
  }

  OpBuffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpBuffer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpBuffer& from);
  void MergeFrom(const OpBuffer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpBuffer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "toolkit.aicpu.dump.OpBuffer";
  }
  protected:
  explicit OpBuffer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_op_5fmapping_2eproto);
    return ::descriptor_table_op_5fmapping_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kSizeFieldNumber = 3,
    kBufferTypeFieldNumber = 1,
  };
  // uint64 address = 2;
  void clear_address();
  ::PROTOBUF_NAMESPACE_ID::uint64 address() const;
  void set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_address() const;
  void _internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .toolkit.aicpu.dump.BufferType buffer_type = 1;
  void clear_buffer_type();
  ::toolkit::aicpu::dump::BufferType buffer_type() const;
  void set_buffer_type(::toolkit::aicpu::dump::BufferType value);
  private:
  ::toolkit::aicpu::dump::BufferType _internal_buffer_type() const;
  void _internal_set_buffer_type(::toolkit::aicpu::dump::BufferType value);
  public:

  // @@protoc_insertion_point(class_scope:toolkit.aicpu.dump.OpBuffer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  int buffer_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_op_5fmapping_2eproto;
};
// -------------------------------------------------------------------

class Op PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:toolkit.aicpu.dump.Op) */ {
 public:
  inline Op() : Op(nullptr) {}
  virtual ~Op();

  Op(const Op& from);
  Op(Op&& from) noexcept
    : Op() {
    *this = ::std::move(from);
  }

  inline Op& operator=(const Op& from) {
    CopyFrom(from);
    return *this;
  }
  inline Op& operator=(Op&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Op& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Op* internal_default_instance() {
    return reinterpret_cast<const Op*>(
               &_Op_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Op& a, Op& b) {
    a.Swap(&b);
  }
  inline void Swap(Op* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Op* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Op* New() const final {
    return CreateMaybeMessage<Op>(nullptr);
  }

  Op* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Op>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Op& from);
  void MergeFrom(const Op& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Op* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "toolkit.aicpu.dump.Op";
  }
  protected:
  explicit Op(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_op_5fmapping_2eproto);
    return ::descriptor_table_op_5fmapping_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpNameFieldNumber = 1,
    kOpTypeFieldNumber = 2,
  };
  // string op_name = 1;
  void clear_op_name();
  const std::string& op_name() const;
  void set_op_name(const std::string& value);
  void set_op_name(std::string&& value);
  void set_op_name(const char* value);
  void set_op_name(const char* value, size_t size);
  std::string* mutable_op_name();
  std::string* release_op_name();
  void set_allocated_op_name(std::string* op_name);
  private:
  const std::string& _internal_op_name() const;
  void _internal_set_op_name(const std::string& value);
  std::string* _internal_mutable_op_name();
  public:

  // string op_type = 2;
  void clear_op_type();
  const std::string& op_type() const;
  void set_op_type(const std::string& value);
  void set_op_type(std::string&& value);
  void set_op_type(const char* value);
  void set_op_type(const char* value, size_t size);
  std::string* mutable_op_type();
  std::string* release_op_type();
  void set_allocated_op_type(std::string* op_type);
  private:
  const std::string& _internal_op_type() const;
  void _internal_set_op_type(const std::string& value);
  std::string* _internal_mutable_op_type();
  public:

  // @@protoc_insertion_point(class_scope:toolkit.aicpu.dump.Op)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr op_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr op_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_op_5fmapping_2eproto;
};
// -------------------------------------------------------------------

class OpAttr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:toolkit.aicpu.dump.OpAttr) */ {
 public:
  inline OpAttr() : OpAttr(nullptr) {}
  virtual ~OpAttr();

  OpAttr(const OpAttr& from);
  OpAttr(OpAttr&& from) noexcept
    : OpAttr() {
    *this = ::std::move(from);
  }

  inline OpAttr& operator=(const OpAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpAttr& operator=(OpAttr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpAttr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpAttr* internal_default_instance() {
    return reinterpret_cast<const OpAttr*>(
               &_OpAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OpAttr& a, OpAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(OpAttr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpAttr* New() const final {
    return CreateMaybeMessage<OpAttr>(nullptr);
  }

  OpAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpAttr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpAttr& from);
  void MergeFrom(const OpAttr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpAttr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "toolkit.aicpu.dump.OpAttr";
  }
  protected:
  explicit OpAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_op_5fmapping_2eproto);
    return ::descriptor_table_op_5fmapping_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:toolkit.aicpu.dump.OpAttr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_op_5fmapping_2eproto;
};
// -------------------------------------------------------------------

class Workspace PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:toolkit.aicpu.dump.Workspace) */ {
 public:
  inline Workspace() : Workspace(nullptr) {}
  virtual ~Workspace();

  Workspace(const Workspace& from);
  Workspace(Workspace&& from) noexcept
    : Workspace() {
    *this = ::std::move(from);
  }

  inline Workspace& operator=(const Workspace& from) {
    CopyFrom(from);
    return *this;
  }
  inline Workspace& operator=(Workspace&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Workspace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Workspace* internal_default_instance() {
    return reinterpret_cast<const Workspace*>(
               &_Workspace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Workspace& a, Workspace& b) {
    a.Swap(&b);
  }
  inline void Swap(Workspace* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Workspace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Workspace* New() const final {
    return CreateMaybeMessage<Workspace>(nullptr);
  }

  Workspace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Workspace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Workspace& from);
  void MergeFrom(const Workspace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Workspace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "toolkit.aicpu.dump.Workspace";
  }
  protected:
  explicit Workspace(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_op_5fmapping_2eproto);
    return ::descriptor_table_op_5fmapping_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Workspace_SpaceType SpaceType;
  static constexpr SpaceType LOG =
    Workspace_SpaceType_LOG;
  static inline bool SpaceType_IsValid(int value) {
    return Workspace_SpaceType_IsValid(value);
  }
  static constexpr SpaceType SpaceType_MIN =
    Workspace_SpaceType_SpaceType_MIN;
  static constexpr SpaceType SpaceType_MAX =
    Workspace_SpaceType_SpaceType_MAX;
  static constexpr int SpaceType_ARRAYSIZE =
    Workspace_SpaceType_SpaceType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SpaceType_descriptor() {
    return Workspace_SpaceType_descriptor();
  }
  template<typename T>
  static inline const std::string& SpaceType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SpaceType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SpaceType_Name.");
    return Workspace_SpaceType_Name(enum_t_value);
  }
  static inline bool SpaceType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SpaceType* value) {
    return Workspace_SpaceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDataAddrFieldNumber = 2,
    kSizeFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // uint64 data_addr = 2;
  void clear_data_addr();
  ::PROTOBUF_NAMESPACE_ID::uint64 data_addr() const;
  void set_data_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_data_addr() const;
  void _internal_set_data_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .toolkit.aicpu.dump.Workspace.SpaceType type = 1;
  void clear_type();
  ::toolkit::aicpu::dump::Workspace_SpaceType type() const;
  void set_type(::toolkit::aicpu::dump::Workspace_SpaceType value);
  private:
  ::toolkit::aicpu::dump::Workspace_SpaceType _internal_type() const;
  void _internal_set_type(::toolkit::aicpu::dump::Workspace_SpaceType value);
  public:

  // @@protoc_insertion_point(class_scope:toolkit.aicpu.dump.Workspace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 data_addr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_op_5fmapping_2eproto;
};
// -------------------------------------------------------------------

class RealAddressAndSize PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:toolkit.aicpu.dump.RealAddressAndSize) */ {
 public:
  inline RealAddressAndSize() : RealAddressAndSize(nullptr) {}
  virtual ~RealAddressAndSize();

  RealAddressAndSize(const RealAddressAndSize& from);
  RealAddressAndSize(RealAddressAndSize&& from) noexcept
    : RealAddressAndSize() {
    *this = ::std::move(from);
  }

  inline RealAddressAndSize& operator=(const RealAddressAndSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline RealAddressAndSize& operator=(RealAddressAndSize&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RealAddressAndSize& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RealAddressAndSize* internal_default_instance() {
    return reinterpret_cast<const RealAddressAndSize*>(
               &_RealAddressAndSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RealAddressAndSize& a, RealAddressAndSize& b) {
    a.Swap(&b);
  }
  inline void Swap(RealAddressAndSize* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RealAddressAndSize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RealAddressAndSize* New() const final {
    return CreateMaybeMessage<RealAddressAndSize>(nullptr);
  }

  RealAddressAndSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RealAddressAndSize>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RealAddressAndSize& from);
  void MergeFrom(const RealAddressAndSize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RealAddressAndSize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "toolkit.aicpu.dump.RealAddressAndSize";
  }
  protected:
  explicit RealAddressAndSize(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_op_5fmapping_2eproto);
    return ::descriptor_table_op_5fmapping_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // uint64 address = 1;
  void clear_address();
  ::PROTOBUF_NAMESPACE_ID::uint64 address() const;
  void set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_address() const;
  void _internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:toolkit.aicpu.dump.RealAddressAndSize)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_op_5fmapping_2eproto;
};
// -------------------------------------------------------------------

class Context PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:toolkit.aicpu.dump.Context) */ {
 public:
  inline Context() : Context(nullptr) {}
  virtual ~Context();

  Context(const Context& from);
  Context(Context&& from) noexcept
    : Context() {
    *this = ::std::move(from);
  }

  inline Context& operator=(const Context& from) {
    CopyFrom(from);
    return *this;
  }
  inline Context& operator=(Context&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Context& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Context* internal_default_instance() {
    return reinterpret_cast<const Context*>(
               &_Context_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Context& a, Context& b) {
    a.Swap(&b);
  }
  inline void Swap(Context* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Context* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Context* New() const final {
    return CreateMaybeMessage<Context>(nullptr);
  }

  Context* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Context>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Context& from);
  void MergeFrom(const Context& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Context* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "toolkit.aicpu.dump.Context";
  }
  protected:
  explicit Context(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_op_5fmapping_2eproto);
    return ::descriptor_table_op_5fmapping_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 3,
    kOutputFieldNumber = 4,
    kContextIdFieldNumber = 1,
    kThreadIdFieldNumber = 2,
  };
  // repeated .toolkit.aicpu.dump.RealAddressAndSize input = 3;
  int input_size() const;
  private:
  int _internal_input_size() const;
  public:
  void clear_input();
  ::toolkit::aicpu::dump::RealAddressAndSize* mutable_input(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::RealAddressAndSize >*
      mutable_input();
  private:
  const ::toolkit::aicpu::dump::RealAddressAndSize& _internal_input(int index) const;
  ::toolkit::aicpu::dump::RealAddressAndSize* _internal_add_input();
  public:
  const ::toolkit::aicpu::dump::RealAddressAndSize& input(int index) const;
  ::toolkit::aicpu::dump::RealAddressAndSize* add_input();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::RealAddressAndSize >&
      input() const;

  // repeated .toolkit.aicpu.dump.RealAddressAndSize output = 4;
  int output_size() const;
  private:
  int _internal_output_size() const;
  public:
  void clear_output();
  ::toolkit::aicpu::dump::RealAddressAndSize* mutable_output(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::RealAddressAndSize >*
      mutable_output();
  private:
  const ::toolkit::aicpu::dump::RealAddressAndSize& _internal_output(int index) const;
  ::toolkit::aicpu::dump::RealAddressAndSize* _internal_add_output();
  public:
  const ::toolkit::aicpu::dump::RealAddressAndSize& output(int index) const;
  ::toolkit::aicpu::dump::RealAddressAndSize* add_output();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::RealAddressAndSize >&
      output() const;

  // uint32 context_id = 1;
  void clear_context_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 context_id() const;
  void set_context_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_context_id() const;
  void _internal_set_context_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 thread_id = 2;
  void clear_thread_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 thread_id() const;
  void set_thread_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_thread_id() const;
  void _internal_set_thread_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:toolkit.aicpu.dump.Context)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::RealAddressAndSize > input_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::RealAddressAndSize > output_;
  ::PROTOBUF_NAMESPACE_ID::uint32 context_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 thread_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_op_5fmapping_2eproto;
};
// -------------------------------------------------------------------

class Task PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:toolkit.aicpu.dump.Task) */ {
 public:
  inline Task() : Task(nullptr) {}
  virtual ~Task();

  Task(const Task& from);
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline Task& operator=(Task&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }
  inline void Swap(Task* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Task* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Task* New() const final {
    return CreateMaybeMessage<Task>(nullptr);
  }

  Task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "toolkit.aicpu.dump.Task";
  }
  protected:
  explicit Task(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_op_5fmapping_2eproto);
    return ::descriptor_table_op_5fmapping_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Task_TaskType TaskType;
  static constexpr TaskType AICORE =
    Task_TaskType_AICORE;
  static constexpr TaskType AICPU =
    Task_TaskType_AICPU;
  static constexpr TaskType DEBUG =
    Task_TaskType_DEBUG;
  static constexpr TaskType SDMA =
    Task_TaskType_SDMA;
  static constexpr TaskType FFTSPLUS =
    Task_TaskType_FFTSPLUS;
  static constexpr TaskType DSA =
    Task_TaskType_DSA;
  static inline bool TaskType_IsValid(int value) {
    return Task_TaskType_IsValid(value);
  }
  static constexpr TaskType TaskType_MIN =
    Task_TaskType_TaskType_MIN;
  static constexpr TaskType TaskType_MAX =
    Task_TaskType_TaskType_MAX;
  static constexpr int TaskType_ARRAYSIZE =
    Task_TaskType_TaskType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TaskType_descriptor() {
    return Task_TaskType_descriptor();
  }
  template<typename T>
  static inline const std::string& TaskType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TaskType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TaskType_Name.");
    return Task_TaskType_Name(enum_t_value);
  }
  static inline bool TaskType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TaskType* value) {
    return Task_TaskType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOutputFieldNumber = 4,
    kInputFieldNumber = 6,
    kBufferFieldNumber = 7,
    kAttrFieldNumber = 10,
    kSpaceFieldNumber = 11,
    kContextFieldNumber = 12,
    kOpFieldNumber = 3,
    kTaskIdFieldNumber = 1,
    kStreamIdFieldNumber = 2,
    kEndGraphFieldNumber = 5,
    kTaskTypeFieldNumber = 8,
    kContextIdFieldNumber = 9,
    kThreadIdFieldNumber = 13,
  };
  // repeated .toolkit.aicpu.dump.Output output = 4;
  int output_size() const;
  private:
  int _internal_output_size() const;
  public:
  void clear_output();
  ::toolkit::aicpu::dump::Output* mutable_output(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::Output >*
      mutable_output();
  private:
  const ::toolkit::aicpu::dump::Output& _internal_output(int index) const;
  ::toolkit::aicpu::dump::Output* _internal_add_output();
  public:
  const ::toolkit::aicpu::dump::Output& output(int index) const;
  ::toolkit::aicpu::dump::Output* add_output();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::Output >&
      output() const;

  // repeated .toolkit.aicpu.dump.Input input = 6;
  int input_size() const;
  private:
  int _internal_input_size() const;
  public:
  void clear_input();
  ::toolkit::aicpu::dump::Input* mutable_input(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::Input >*
      mutable_input();
  private:
  const ::toolkit::aicpu::dump::Input& _internal_input(int index) const;
  ::toolkit::aicpu::dump::Input* _internal_add_input();
  public:
  const ::toolkit::aicpu::dump::Input& input(int index) const;
  ::toolkit::aicpu::dump::Input* add_input();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::Input >&
      input() const;

  // repeated .toolkit.aicpu.dump.OpBuffer buffer = 7;
  int buffer_size() const;
  private:
  int _internal_buffer_size() const;
  public:
  void clear_buffer();
  ::toolkit::aicpu::dump::OpBuffer* mutable_buffer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::OpBuffer >*
      mutable_buffer();
  private:
  const ::toolkit::aicpu::dump::OpBuffer& _internal_buffer(int index) const;
  ::toolkit::aicpu::dump::OpBuffer* _internal_add_buffer();
  public:
  const ::toolkit::aicpu::dump::OpBuffer& buffer(int index) const;
  ::toolkit::aicpu::dump::OpBuffer* add_buffer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::OpBuffer >&
      buffer() const;

  // repeated .toolkit.aicpu.dump.OpAttr attr = 10;
  int attr_size() const;
  private:
  int _internal_attr_size() const;
  public:
  void clear_attr();
  ::toolkit::aicpu::dump::OpAttr* mutable_attr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::OpAttr >*
      mutable_attr();
  private:
  const ::toolkit::aicpu::dump::OpAttr& _internal_attr(int index) const;
  ::toolkit::aicpu::dump::OpAttr* _internal_add_attr();
  public:
  const ::toolkit::aicpu::dump::OpAttr& attr(int index) const;
  ::toolkit::aicpu::dump::OpAttr* add_attr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::OpAttr >&
      attr() const;

  // repeated .toolkit.aicpu.dump.Workspace space = 11;
  int space_size() const;
  private:
  int _internal_space_size() const;
  public:
  void clear_space();
  ::toolkit::aicpu::dump::Workspace* mutable_space(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::Workspace >*
      mutable_space();
  private:
  const ::toolkit::aicpu::dump::Workspace& _internal_space(int index) const;
  ::toolkit::aicpu::dump::Workspace* _internal_add_space();
  public:
  const ::toolkit::aicpu::dump::Workspace& space(int index) const;
  ::toolkit::aicpu::dump::Workspace* add_space();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::Workspace >&
      space() const;

  // repeated .toolkit.aicpu.dump.Context context = 12;
  int context_size() const;
  private:
  int _internal_context_size() const;
  public:
  void clear_context();
  ::toolkit::aicpu::dump::Context* mutable_context(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::Context >*
      mutable_context();
  private:
  const ::toolkit::aicpu::dump::Context& _internal_context(int index) const;
  ::toolkit::aicpu::dump::Context* _internal_add_context();
  public:
  const ::toolkit::aicpu::dump::Context& context(int index) const;
  ::toolkit::aicpu::dump::Context* add_context();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::Context >&
      context() const;

  // .toolkit.aicpu.dump.Op op = 3;
  bool has_op() const;
  private:
  bool _internal_has_op() const;
  public:
  void clear_op();
  const ::toolkit::aicpu::dump::Op& op() const;
  ::toolkit::aicpu::dump::Op* release_op();
  ::toolkit::aicpu::dump::Op* mutable_op();
  void set_allocated_op(::toolkit::aicpu::dump::Op* op);
  private:
  const ::toolkit::aicpu::dump::Op& _internal_op() const;
  ::toolkit::aicpu::dump::Op* _internal_mutable_op();
  public:
  void unsafe_arena_set_allocated_op(
      ::toolkit::aicpu::dump::Op* op);
  ::toolkit::aicpu::dump::Op* unsafe_arena_release_op();

  // uint32 task_id = 1;
  void clear_task_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 task_id() const;
  void set_task_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_task_id() const;
  void _internal_set_task_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 stream_id = 2;
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool end_graph = 5;
  void clear_end_graph();
  bool end_graph() const;
  void set_end_graph(bool value);
  private:
  bool _internal_end_graph() const;
  void _internal_set_end_graph(bool value);
  public:

  // .toolkit.aicpu.dump.Task.TaskType task_type = 8;
  void clear_task_type();
  ::toolkit::aicpu::dump::Task_TaskType task_type() const;
  void set_task_type(::toolkit::aicpu::dump::Task_TaskType value);
  private:
  ::toolkit::aicpu::dump::Task_TaskType _internal_task_type() const;
  void _internal_set_task_type(::toolkit::aicpu::dump::Task_TaskType value);
  public:

  // uint32 context_id = 9;
  void clear_context_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 context_id() const;
  void set_context_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_context_id() const;
  void _internal_set_context_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 thread_id = 13;
  void clear_thread_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 thread_id() const;
  void set_thread_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_thread_id() const;
  void _internal_set_thread_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:toolkit.aicpu.dump.Task)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::Output > output_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::Input > input_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::OpBuffer > buffer_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::OpAttr > attr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::Workspace > space_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::Context > context_;
  ::toolkit::aicpu::dump::Op* op_;
  ::PROTOBUF_NAMESPACE_ID::uint32 task_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stream_id_;
  bool end_graph_;
  int task_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 context_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 thread_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_op_5fmapping_2eproto;
};
// -------------------------------------------------------------------

class OpMappingInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:toolkit.aicpu.dump.OpMappingInfo) */ {
 public:
  inline OpMappingInfo() : OpMappingInfo(nullptr) {}
  virtual ~OpMappingInfo();

  OpMappingInfo(const OpMappingInfo& from);
  OpMappingInfo(OpMappingInfo&& from) noexcept
    : OpMappingInfo() {
    *this = ::std::move(from);
  }

  inline OpMappingInfo& operator=(const OpMappingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpMappingInfo& operator=(OpMappingInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpMappingInfo& default_instance();

  enum ModelNameParamCase {
    kModelName = 2,
    MODEL_NAME_PARAM_NOT_SET = 0,
  };

  enum ModelIdParamCase {
    kModelId = 3,
    MODEL_ID_PARAM_NOT_SET = 0,
  };

  enum StepIdCase {
    kStepIdAddr = 4,
    STEP_ID_NOT_SET = 0,
  };

  enum IterationsPerLoopCase {
    kIterationsPerLoopAddr = 5,
    ITERATIONS_PER_LOOP_NOT_SET = 0,
  };

  enum LoopCondCase {
    kLoopCondAddr = 6,
    LOOP_COND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpMappingInfo* internal_default_instance() {
    return reinterpret_cast<const OpMappingInfo*>(
               &_OpMappingInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(OpMappingInfo& a, OpMappingInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(OpMappingInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpMappingInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpMappingInfo* New() const final {
    return CreateMaybeMessage<OpMappingInfo>(nullptr);
  }

  OpMappingInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpMappingInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpMappingInfo& from);
  void MergeFrom(const OpMappingInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpMappingInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "toolkit.aicpu.dump.OpMappingInfo";
  }
  protected:
  explicit OpMappingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_op_5fmapping_2eproto);
    return ::descriptor_table_op_5fmapping_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskFieldNumber = 8,
    kDumpPathFieldNumber = 1,
    kDumpStepFieldNumber = 9,
    kFlagFieldNumber = 7,
    kDumpDataFieldNumber = 10,
    kModelNameFieldNumber = 2,
    kModelIdFieldNumber = 3,
    kStepIdAddrFieldNumber = 4,
    kIterationsPerLoopAddrFieldNumber = 5,
    kLoopCondAddrFieldNumber = 6,
  };
  // repeated .toolkit.aicpu.dump.Task task = 8;
  int task_size() const;
  private:
  int _internal_task_size() const;
  public:
  void clear_task();
  ::toolkit::aicpu::dump::Task* mutable_task(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::Task >*
      mutable_task();
  private:
  const ::toolkit::aicpu::dump::Task& _internal_task(int index) const;
  ::toolkit::aicpu::dump::Task* _internal_add_task();
  public:
  const ::toolkit::aicpu::dump::Task& task(int index) const;
  ::toolkit::aicpu::dump::Task* add_task();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::Task >&
      task() const;

  // string dump_path = 1;
  void clear_dump_path();
  const std::string& dump_path() const;
  void set_dump_path(const std::string& value);
  void set_dump_path(std::string&& value);
  void set_dump_path(const char* value);
  void set_dump_path(const char* value, size_t size);
  std::string* mutable_dump_path();
  std::string* release_dump_path();
  void set_allocated_dump_path(std::string* dump_path);
  private:
  const std::string& _internal_dump_path() const;
  void _internal_set_dump_path(const std::string& value);
  std::string* _internal_mutable_dump_path();
  public:

  // string dump_step = 9;
  void clear_dump_step();
  const std::string& dump_step() const;
  void set_dump_step(const std::string& value);
  void set_dump_step(std::string&& value);
  void set_dump_step(const char* value);
  void set_dump_step(const char* value, size_t size);
  std::string* mutable_dump_step();
  std::string* release_dump_step();
  void set_allocated_dump_step(std::string* dump_step);
  private:
  const std::string& _internal_dump_step() const;
  void _internal_set_dump_step(const std::string& value);
  std::string* _internal_mutable_dump_step();
  public:

  // uint32 flag = 7;
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::uint32 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .toolkit.aicpu.dump.DumpData dump_data = 10;
  void clear_dump_data();
  ::toolkit::aicpu::dump::DumpData dump_data() const;
  void set_dump_data(::toolkit::aicpu::dump::DumpData value);
  private:
  ::toolkit::aicpu::dump::DumpData _internal_dump_data() const;
  void _internal_set_dump_data(::toolkit::aicpu::dump::DumpData value);
  public:

  // string model_name = 2;
  private:
  bool _internal_has_model_name() const;
  public:
  void clear_model_name();
  const std::string& model_name() const;
  void set_model_name(const std::string& value);
  void set_model_name(std::string&& value);
  void set_model_name(const char* value);
  void set_model_name(const char* value, size_t size);
  std::string* mutable_model_name();
  std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // uint32 model_id = 3;
  private:
  bool _internal_has_model_id() const;
  public:
  void clear_model_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 model_id() const;
  void set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_model_id() const;
  void _internal_set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 step_id_addr = 4;
  private:
  bool _internal_has_step_id_addr() const;
  public:
  void clear_step_id_addr();
  ::PROTOBUF_NAMESPACE_ID::uint64 step_id_addr() const;
  void set_step_id_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_step_id_addr() const;
  void _internal_set_step_id_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 iterations_per_loop_addr = 5;
  private:
  bool _internal_has_iterations_per_loop_addr() const;
  public:
  void clear_iterations_per_loop_addr();
  ::PROTOBUF_NAMESPACE_ID::uint64 iterations_per_loop_addr() const;
  void set_iterations_per_loop_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_iterations_per_loop_addr() const;
  void _internal_set_iterations_per_loop_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 loop_cond_addr = 6;
  private:
  bool _internal_has_loop_cond_addr() const;
  public:
  void clear_loop_cond_addr();
  ::PROTOBUF_NAMESPACE_ID::uint64 loop_cond_addr() const;
  void set_loop_cond_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_loop_cond_addr() const;
  void _internal_set_loop_cond_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  void clear_model_name_param();
  ModelNameParamCase model_name_param_case() const;
  void clear_model_id_param();
  ModelIdParamCase model_id_param_case() const;
  void clear_step_id();
  StepIdCase step_id_case() const;
  void clear_iterations_per_loop();
  IterationsPerLoopCase iterations_per_loop_case() const;
  void clear_loop_cond();
  LoopCondCase loop_cond_case() const;
  // @@protoc_insertion_point(class_scope:toolkit.aicpu.dump.OpMappingInfo)
 private:
  class _Internal;
  void set_has_model_name();
  void set_has_model_id();
  void set_has_step_id_addr();
  void set_has_iterations_per_loop_addr();
  void set_has_loop_cond_addr();

  inline bool has_model_name_param() const;
  inline void clear_has_model_name_param();

  inline bool has_model_id_param() const;
  inline void clear_has_model_id_param();

  inline bool has_step_id() const;
  inline void clear_has_step_id();

  inline bool has_iterations_per_loop() const;
  inline void clear_has_iterations_per_loop();

  inline bool has_loop_cond() const;
  inline void clear_has_loop_cond();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::Task > task_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dump_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dump_step_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flag_;
  int dump_data_;
  union ModelNameParamUnion {
    ModelNameParamUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
  } model_name_param_;
  union ModelIdParamUnion {
    ModelIdParamUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 model_id_;
  } model_id_param_;
  union StepIdUnion {
    StepIdUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 step_id_addr_;
  } step_id_;
  union IterationsPerLoopUnion {
    IterationsPerLoopUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 iterations_per_loop_addr_;
  } iterations_per_loop_;
  union LoopCondUnion {
    LoopCondUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 loop_cond_addr_;
  } loop_cond_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[5];

  friend struct ::TableStruct_op_5fmapping_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Shape

// repeated uint64 dim = 1;
inline int Shape::_internal_dim_size() const {
  return dim_.size();
}
inline int Shape::dim_size() const {
  return _internal_dim_size();
}
inline void Shape::clear_dim() {
  dim_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Shape::_internal_dim(int index) const {
  return dim_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Shape::dim(int index) const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Shape.dim)
  return _internal_dim(index);
}
inline void Shape::set_dim(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.Shape.dim)
}
inline void Shape::_internal_add_dim(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  dim_.Add(value);
}
inline void Shape::add_dim(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_dim(value);
  // @@protoc_insertion_point(field_add:toolkit.aicpu.dump.Shape.dim)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Shape::_internal_dim() const {
  return dim_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Shape::dim() const {
  // @@protoc_insertion_point(field_list:toolkit.aicpu.dump.Shape.dim)
  return _internal_dim();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Shape::_internal_mutable_dim() {
  return &dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Shape::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:toolkit.aicpu.dump.Shape.dim)
  return _internal_mutable_dim();
}

// -------------------------------------------------------------------

// Output

// int32 data_type = 1;
inline void Output::clear_data_type() {
  data_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Output::_internal_data_type() const {
  return data_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Output::data_type() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Output.data_type)
  return _internal_data_type();
}
inline void Output::_internal_set_data_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  data_type_ = value;
}
inline void Output::set_data_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.Output.data_type)
}

// int32 format = 2;
inline void Output::clear_format() {
  format_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Output::_internal_format() const {
  return format_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Output::format() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Output.format)
  return _internal_format();
}
inline void Output::_internal_set_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  format_ = value;
}
inline void Output::set_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.Output.format)
}

// .toolkit.aicpu.dump.Shape shape = 3;
inline bool Output::_internal_has_shape() const {
  return this != internal_default_instance() && shape_ != nullptr;
}
inline bool Output::has_shape() const {
  return _internal_has_shape();
}
inline void Output::clear_shape() {
  if (GetArena() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
}
inline const ::toolkit::aicpu::dump::Shape& Output::_internal_shape() const {
  const ::toolkit::aicpu::dump::Shape* p = shape_;
  return p != nullptr ? *p : *reinterpret_cast<const ::toolkit::aicpu::dump::Shape*>(
      &::toolkit::aicpu::dump::_Shape_default_instance_);
}
inline const ::toolkit::aicpu::dump::Shape& Output::shape() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Output.shape)
  return _internal_shape();
}
inline void Output::unsafe_arena_set_allocated_shape(
    ::toolkit::aicpu::dump::Shape* shape) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:toolkit.aicpu.dump.Output.shape)
}
inline ::toolkit::aicpu::dump::Shape* Output::release_shape() {
  
  ::toolkit::aicpu::dump::Shape* temp = shape_;
  shape_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::toolkit::aicpu::dump::Shape* Output::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_release:toolkit.aicpu.dump.Output.shape)
  
  ::toolkit::aicpu::dump::Shape* temp = shape_;
  shape_ = nullptr;
  return temp;
}
inline ::toolkit::aicpu::dump::Shape* Output::_internal_mutable_shape() {
  
  if (shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::toolkit::aicpu::dump::Shape>(GetArena());
    shape_ = p;
  }
  return shape_;
}
inline ::toolkit::aicpu::dump::Shape* Output::mutable_shape() {
  // @@protoc_insertion_point(field_mutable:toolkit.aicpu.dump.Output.shape)
  return _internal_mutable_shape();
}
inline void Output::set_allocated_shape(::toolkit::aicpu::dump::Shape* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shape_;
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shape);
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    
  } else {
    
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:toolkit.aicpu.dump.Output.shape)
}

// uint64 address = 4;
inline void Output::clear_address() {
  address_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Output::_internal_address() const {
  return address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Output::address() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Output.address)
  return _internal_address();
}
inline void Output::_internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  address_ = value;
}
inline void Output::set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.Output.address)
}

// string original_name = 5;
inline void Output::clear_original_name() {
  original_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Output::original_name() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Output.original_name)
  return _internal_original_name();
}
inline void Output::set_original_name(const std::string& value) {
  _internal_set_original_name(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.Output.original_name)
}
inline std::string* Output::mutable_original_name() {
  // @@protoc_insertion_point(field_mutable:toolkit.aicpu.dump.Output.original_name)
  return _internal_mutable_original_name();
}
inline const std::string& Output::_internal_original_name() const {
  return original_name_.Get();
}
inline void Output::_internal_set_original_name(const std::string& value) {
  
  original_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Output::set_original_name(std::string&& value) {
  
  original_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:toolkit.aicpu.dump.Output.original_name)
}
inline void Output::set_original_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  original_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:toolkit.aicpu.dump.Output.original_name)
}
inline void Output::set_original_name(const char* value,
    size_t size) {
  
  original_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:toolkit.aicpu.dump.Output.original_name)
}
inline std::string* Output::_internal_mutable_original_name() {
  
  return original_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Output::release_original_name() {
  // @@protoc_insertion_point(field_release:toolkit.aicpu.dump.Output.original_name)
  return original_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Output::set_allocated_original_name(std::string* original_name) {
  if (original_name != nullptr) {
    
  } else {
    
  }
  original_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), original_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:toolkit.aicpu.dump.Output.original_name)
}

// int32 original_output_index = 6;
inline void Output::clear_original_output_index() {
  original_output_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Output::_internal_original_output_index() const {
  return original_output_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Output::original_output_index() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Output.original_output_index)
  return _internal_original_output_index();
}
inline void Output::_internal_set_original_output_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  original_output_index_ = value;
}
inline void Output::set_original_output_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_original_output_index(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.Output.original_output_index)
}

// int32 original_output_data_type = 7;
inline void Output::clear_original_output_data_type() {
  original_output_data_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Output::_internal_original_output_data_type() const {
  return original_output_data_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Output::original_output_data_type() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Output.original_output_data_type)
  return _internal_original_output_data_type();
}
inline void Output::_internal_set_original_output_data_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  original_output_data_type_ = value;
}
inline void Output::set_original_output_data_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_original_output_data_type(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.Output.original_output_data_type)
}

// int32 original_output_format = 8;
inline void Output::clear_original_output_format() {
  original_output_format_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Output::_internal_original_output_format() const {
  return original_output_format_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Output::original_output_format() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Output.original_output_format)
  return _internal_original_output_format();
}
inline void Output::_internal_set_original_output_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  original_output_format_ = value;
}
inline void Output::set_original_output_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_original_output_format(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.Output.original_output_format)
}

// uint64 size = 9;
inline void Output::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Output::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Output::size() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Output.size)
  return _internal_size();
}
inline void Output::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void Output::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.Output.size)
}

// .toolkit.aicpu.dump.Shape origin_shape = 10;
inline bool Output::_internal_has_origin_shape() const {
  return this != internal_default_instance() && origin_shape_ != nullptr;
}
inline bool Output::has_origin_shape() const {
  return _internal_has_origin_shape();
}
inline void Output::clear_origin_shape() {
  if (GetArena() == nullptr && origin_shape_ != nullptr) {
    delete origin_shape_;
  }
  origin_shape_ = nullptr;
}
inline const ::toolkit::aicpu::dump::Shape& Output::_internal_origin_shape() const {
  const ::toolkit::aicpu::dump::Shape* p = origin_shape_;
  return p != nullptr ? *p : *reinterpret_cast<const ::toolkit::aicpu::dump::Shape*>(
      &::toolkit::aicpu::dump::_Shape_default_instance_);
}
inline const ::toolkit::aicpu::dump::Shape& Output::origin_shape() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Output.origin_shape)
  return _internal_origin_shape();
}
inline void Output::unsafe_arena_set_allocated_origin_shape(
    ::toolkit::aicpu::dump::Shape* origin_shape) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin_shape_);
  }
  origin_shape_ = origin_shape;
  if (origin_shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:toolkit.aicpu.dump.Output.origin_shape)
}
inline ::toolkit::aicpu::dump::Shape* Output::release_origin_shape() {
  
  ::toolkit::aicpu::dump::Shape* temp = origin_shape_;
  origin_shape_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::toolkit::aicpu::dump::Shape* Output::unsafe_arena_release_origin_shape() {
  // @@protoc_insertion_point(field_release:toolkit.aicpu.dump.Output.origin_shape)
  
  ::toolkit::aicpu::dump::Shape* temp = origin_shape_;
  origin_shape_ = nullptr;
  return temp;
}
inline ::toolkit::aicpu::dump::Shape* Output::_internal_mutable_origin_shape() {
  
  if (origin_shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::toolkit::aicpu::dump::Shape>(GetArena());
    origin_shape_ = p;
  }
  return origin_shape_;
}
inline ::toolkit::aicpu::dump::Shape* Output::mutable_origin_shape() {
  // @@protoc_insertion_point(field_mutable:toolkit.aicpu.dump.Output.origin_shape)
  return _internal_mutable_origin_shape();
}
inline void Output::set_allocated_origin_shape(::toolkit::aicpu::dump::Shape* origin_shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete origin_shape_;
  }
  if (origin_shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(origin_shape);
    if (message_arena != submessage_arena) {
      origin_shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin_shape, submessage_arena);
    }
    
  } else {
    
  }
  origin_shape_ = origin_shape;
  // @@protoc_insertion_point(field_set_allocated:toolkit.aicpu.dump.Output.origin_shape)
}

// .toolkit.aicpu.dump.AddressType addr_type = 11;
inline void Output::clear_addr_type() {
  addr_type_ = 0;
}
inline ::toolkit::aicpu::dump::AddressType Output::_internal_addr_type() const {
  return static_cast< ::toolkit::aicpu::dump::AddressType >(addr_type_);
}
inline ::toolkit::aicpu::dump::AddressType Output::addr_type() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Output.addr_type)
  return _internal_addr_type();
}
inline void Output::_internal_set_addr_type(::toolkit::aicpu::dump::AddressType value) {
  
  addr_type_ = value;
}
inline void Output::set_addr_type(::toolkit::aicpu::dump::AddressType value) {
  _internal_set_addr_type(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.Output.addr_type)
}

// uint64 offset = 12;
inline void Output::clear_offset() {
  offset_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Output::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Output::offset() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Output.offset)
  return _internal_offset();
}
inline void Output::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  offset_ = value;
}
inline void Output::set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.Output.offset)
}

// -------------------------------------------------------------------

// Input

// int32 data_type = 1;
inline void Input::clear_data_type() {
  data_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Input::_internal_data_type() const {
  return data_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Input::data_type() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Input.data_type)
  return _internal_data_type();
}
inline void Input::_internal_set_data_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  data_type_ = value;
}
inline void Input::set_data_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.Input.data_type)
}

// int32 format = 2;
inline void Input::clear_format() {
  format_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Input::_internal_format() const {
  return format_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Input::format() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Input.format)
  return _internal_format();
}
inline void Input::_internal_set_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  format_ = value;
}
inline void Input::set_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.Input.format)
}

// .toolkit.aicpu.dump.Shape shape = 3;
inline bool Input::_internal_has_shape() const {
  return this != internal_default_instance() && shape_ != nullptr;
}
inline bool Input::has_shape() const {
  return _internal_has_shape();
}
inline void Input::clear_shape() {
  if (GetArena() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
}
inline const ::toolkit::aicpu::dump::Shape& Input::_internal_shape() const {
  const ::toolkit::aicpu::dump::Shape* p = shape_;
  return p != nullptr ? *p : *reinterpret_cast<const ::toolkit::aicpu::dump::Shape*>(
      &::toolkit::aicpu::dump::_Shape_default_instance_);
}
inline const ::toolkit::aicpu::dump::Shape& Input::shape() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Input.shape)
  return _internal_shape();
}
inline void Input::unsafe_arena_set_allocated_shape(
    ::toolkit::aicpu::dump::Shape* shape) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:toolkit.aicpu.dump.Input.shape)
}
inline ::toolkit::aicpu::dump::Shape* Input::release_shape() {
  
  ::toolkit::aicpu::dump::Shape* temp = shape_;
  shape_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::toolkit::aicpu::dump::Shape* Input::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_release:toolkit.aicpu.dump.Input.shape)
  
  ::toolkit::aicpu::dump::Shape* temp = shape_;
  shape_ = nullptr;
  return temp;
}
inline ::toolkit::aicpu::dump::Shape* Input::_internal_mutable_shape() {
  
  if (shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::toolkit::aicpu::dump::Shape>(GetArena());
    shape_ = p;
  }
  return shape_;
}
inline ::toolkit::aicpu::dump::Shape* Input::mutable_shape() {
  // @@protoc_insertion_point(field_mutable:toolkit.aicpu.dump.Input.shape)
  return _internal_mutable_shape();
}
inline void Input::set_allocated_shape(::toolkit::aicpu::dump::Shape* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shape_;
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shape);
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    
  } else {
    
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:toolkit.aicpu.dump.Input.shape)
}

// uint64 address = 4;
inline void Input::clear_address() {
  address_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Input::_internal_address() const {
  return address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Input::address() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Input.address)
  return _internal_address();
}
inline void Input::_internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  address_ = value;
}
inline void Input::set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.Input.address)
}

// uint64 size = 5;
inline void Input::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Input::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Input::size() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Input.size)
  return _internal_size();
}
inline void Input::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void Input::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.Input.size)
}

// .toolkit.aicpu.dump.Shape origin_shape = 6;
inline bool Input::_internal_has_origin_shape() const {
  return this != internal_default_instance() && origin_shape_ != nullptr;
}
inline bool Input::has_origin_shape() const {
  return _internal_has_origin_shape();
}
inline void Input::clear_origin_shape() {
  if (GetArena() == nullptr && origin_shape_ != nullptr) {
    delete origin_shape_;
  }
  origin_shape_ = nullptr;
}
inline const ::toolkit::aicpu::dump::Shape& Input::_internal_origin_shape() const {
  const ::toolkit::aicpu::dump::Shape* p = origin_shape_;
  return p != nullptr ? *p : *reinterpret_cast<const ::toolkit::aicpu::dump::Shape*>(
      &::toolkit::aicpu::dump::_Shape_default_instance_);
}
inline const ::toolkit::aicpu::dump::Shape& Input::origin_shape() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Input.origin_shape)
  return _internal_origin_shape();
}
inline void Input::unsafe_arena_set_allocated_origin_shape(
    ::toolkit::aicpu::dump::Shape* origin_shape) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin_shape_);
  }
  origin_shape_ = origin_shape;
  if (origin_shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:toolkit.aicpu.dump.Input.origin_shape)
}
inline ::toolkit::aicpu::dump::Shape* Input::release_origin_shape() {
  
  ::toolkit::aicpu::dump::Shape* temp = origin_shape_;
  origin_shape_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::toolkit::aicpu::dump::Shape* Input::unsafe_arena_release_origin_shape() {
  // @@protoc_insertion_point(field_release:toolkit.aicpu.dump.Input.origin_shape)
  
  ::toolkit::aicpu::dump::Shape* temp = origin_shape_;
  origin_shape_ = nullptr;
  return temp;
}
inline ::toolkit::aicpu::dump::Shape* Input::_internal_mutable_origin_shape() {
  
  if (origin_shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::toolkit::aicpu::dump::Shape>(GetArena());
    origin_shape_ = p;
  }
  return origin_shape_;
}
inline ::toolkit::aicpu::dump::Shape* Input::mutable_origin_shape() {
  // @@protoc_insertion_point(field_mutable:toolkit.aicpu.dump.Input.origin_shape)
  return _internal_mutable_origin_shape();
}
inline void Input::set_allocated_origin_shape(::toolkit::aicpu::dump::Shape* origin_shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete origin_shape_;
  }
  if (origin_shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(origin_shape);
    if (message_arena != submessage_arena) {
      origin_shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin_shape, submessage_arena);
    }
    
  } else {
    
  }
  origin_shape_ = origin_shape;
  // @@protoc_insertion_point(field_set_allocated:toolkit.aicpu.dump.Input.origin_shape)
}

// .toolkit.aicpu.dump.AddressType addr_type = 7;
inline void Input::clear_addr_type() {
  addr_type_ = 0;
}
inline ::toolkit::aicpu::dump::AddressType Input::_internal_addr_type() const {
  return static_cast< ::toolkit::aicpu::dump::AddressType >(addr_type_);
}
inline ::toolkit::aicpu::dump::AddressType Input::addr_type() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Input.addr_type)
  return _internal_addr_type();
}
inline void Input::_internal_set_addr_type(::toolkit::aicpu::dump::AddressType value) {
  
  addr_type_ = value;
}
inline void Input::set_addr_type(::toolkit::aicpu::dump::AddressType value) {
  _internal_set_addr_type(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.Input.addr_type)
}

// uint64 offset = 8;
inline void Input::clear_offset() {
  offset_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Input::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Input::offset() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Input.offset)
  return _internal_offset();
}
inline void Input::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  offset_ = value;
}
inline void Input::set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.Input.offset)
}

// -------------------------------------------------------------------

// OpBuffer

// .toolkit.aicpu.dump.BufferType buffer_type = 1;
inline void OpBuffer::clear_buffer_type() {
  buffer_type_ = 0;
}
inline ::toolkit::aicpu::dump::BufferType OpBuffer::_internal_buffer_type() const {
  return static_cast< ::toolkit::aicpu::dump::BufferType >(buffer_type_);
}
inline ::toolkit::aicpu::dump::BufferType OpBuffer::buffer_type() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.OpBuffer.buffer_type)
  return _internal_buffer_type();
}
inline void OpBuffer::_internal_set_buffer_type(::toolkit::aicpu::dump::BufferType value) {
  
  buffer_type_ = value;
}
inline void OpBuffer::set_buffer_type(::toolkit::aicpu::dump::BufferType value) {
  _internal_set_buffer_type(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.OpBuffer.buffer_type)
}

// uint64 address = 2;
inline void OpBuffer::clear_address() {
  address_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OpBuffer::_internal_address() const {
  return address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OpBuffer::address() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.OpBuffer.address)
  return _internal_address();
}
inline void OpBuffer::_internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  address_ = value;
}
inline void OpBuffer::set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.OpBuffer.address)
}

// uint64 size = 3;
inline void OpBuffer::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OpBuffer::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OpBuffer::size() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.OpBuffer.size)
  return _internal_size();
}
inline void OpBuffer::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void OpBuffer::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.OpBuffer.size)
}

// -------------------------------------------------------------------

// Op

// string op_name = 1;
inline void Op::clear_op_name() {
  op_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Op::op_name() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Op.op_name)
  return _internal_op_name();
}
inline void Op::set_op_name(const std::string& value) {
  _internal_set_op_name(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.Op.op_name)
}
inline std::string* Op::mutable_op_name() {
  // @@protoc_insertion_point(field_mutable:toolkit.aicpu.dump.Op.op_name)
  return _internal_mutable_op_name();
}
inline const std::string& Op::_internal_op_name() const {
  return op_name_.Get();
}
inline void Op::_internal_set_op_name(const std::string& value) {
  
  op_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Op::set_op_name(std::string&& value) {
  
  op_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:toolkit.aicpu.dump.Op.op_name)
}
inline void Op::set_op_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  op_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:toolkit.aicpu.dump.Op.op_name)
}
inline void Op::set_op_name(const char* value,
    size_t size) {
  
  op_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:toolkit.aicpu.dump.Op.op_name)
}
inline std::string* Op::_internal_mutable_op_name() {
  
  return op_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Op::release_op_name() {
  // @@protoc_insertion_point(field_release:toolkit.aicpu.dump.Op.op_name)
  return op_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Op::set_allocated_op_name(std::string* op_name) {
  if (op_name != nullptr) {
    
  } else {
    
  }
  op_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), op_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:toolkit.aicpu.dump.Op.op_name)
}

// string op_type = 2;
inline void Op::clear_op_type() {
  op_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Op::op_type() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Op.op_type)
  return _internal_op_type();
}
inline void Op::set_op_type(const std::string& value) {
  _internal_set_op_type(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.Op.op_type)
}
inline std::string* Op::mutable_op_type() {
  // @@protoc_insertion_point(field_mutable:toolkit.aicpu.dump.Op.op_type)
  return _internal_mutable_op_type();
}
inline const std::string& Op::_internal_op_type() const {
  return op_type_.Get();
}
inline void Op::_internal_set_op_type(const std::string& value) {
  
  op_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Op::set_op_type(std::string&& value) {
  
  op_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:toolkit.aicpu.dump.Op.op_type)
}
inline void Op::set_op_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  op_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:toolkit.aicpu.dump.Op.op_type)
}
inline void Op::set_op_type(const char* value,
    size_t size) {
  
  op_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:toolkit.aicpu.dump.Op.op_type)
}
inline std::string* Op::_internal_mutable_op_type() {
  
  return op_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Op::release_op_type() {
  // @@protoc_insertion_point(field_release:toolkit.aicpu.dump.Op.op_type)
  return op_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Op::set_allocated_op_type(std::string* op_type) {
  if (op_type != nullptr) {
    
  } else {
    
  }
  op_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), op_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:toolkit.aicpu.dump.Op.op_type)
}

// -------------------------------------------------------------------

// OpAttr

// string name = 1;
inline void OpAttr::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OpAttr::name() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.OpAttr.name)
  return _internal_name();
}
inline void OpAttr::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.OpAttr.name)
}
inline std::string* OpAttr::mutable_name() {
  // @@protoc_insertion_point(field_mutable:toolkit.aicpu.dump.OpAttr.name)
  return _internal_mutable_name();
}
inline const std::string& OpAttr::_internal_name() const {
  return name_.Get();
}
inline void OpAttr::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OpAttr::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:toolkit.aicpu.dump.OpAttr.name)
}
inline void OpAttr::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:toolkit.aicpu.dump.OpAttr.name)
}
inline void OpAttr::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:toolkit.aicpu.dump.OpAttr.name)
}
inline std::string* OpAttr::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OpAttr::release_name() {
  // @@protoc_insertion_point(field_release:toolkit.aicpu.dump.OpAttr.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpAttr::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:toolkit.aicpu.dump.OpAttr.name)
}

// string value = 2;
inline void OpAttr::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OpAttr::value() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.OpAttr.value)
  return _internal_value();
}
inline void OpAttr::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.OpAttr.value)
}
inline std::string* OpAttr::mutable_value() {
  // @@protoc_insertion_point(field_mutable:toolkit.aicpu.dump.OpAttr.value)
  return _internal_mutable_value();
}
inline const std::string& OpAttr::_internal_value() const {
  return value_.Get();
}
inline void OpAttr::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OpAttr::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:toolkit.aicpu.dump.OpAttr.value)
}
inline void OpAttr::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:toolkit.aicpu.dump.OpAttr.value)
}
inline void OpAttr::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:toolkit.aicpu.dump.OpAttr.value)
}
inline std::string* OpAttr::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OpAttr::release_value() {
  // @@protoc_insertion_point(field_release:toolkit.aicpu.dump.OpAttr.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpAttr::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:toolkit.aicpu.dump.OpAttr.value)
}

// -------------------------------------------------------------------

// Workspace

// .toolkit.aicpu.dump.Workspace.SpaceType type = 1;
inline void Workspace::clear_type() {
  type_ = 0;
}
inline ::toolkit::aicpu::dump::Workspace_SpaceType Workspace::_internal_type() const {
  return static_cast< ::toolkit::aicpu::dump::Workspace_SpaceType >(type_);
}
inline ::toolkit::aicpu::dump::Workspace_SpaceType Workspace::type() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Workspace.type)
  return _internal_type();
}
inline void Workspace::_internal_set_type(::toolkit::aicpu::dump::Workspace_SpaceType value) {
  
  type_ = value;
}
inline void Workspace::set_type(::toolkit::aicpu::dump::Workspace_SpaceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.Workspace.type)
}

// uint64 data_addr = 2;
inline void Workspace::clear_data_addr() {
  data_addr_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Workspace::_internal_data_addr() const {
  return data_addr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Workspace::data_addr() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Workspace.data_addr)
  return _internal_data_addr();
}
inline void Workspace::_internal_set_data_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  data_addr_ = value;
}
inline void Workspace::set_data_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_data_addr(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.Workspace.data_addr)
}

// uint64 size = 3;
inline void Workspace::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Workspace::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Workspace::size() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Workspace.size)
  return _internal_size();
}
inline void Workspace::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void Workspace::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.Workspace.size)
}

// -------------------------------------------------------------------

// RealAddressAndSize

// uint64 address = 1;
inline void RealAddressAndSize::clear_address() {
  address_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RealAddressAndSize::_internal_address() const {
  return address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RealAddressAndSize::address() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.RealAddressAndSize.address)
  return _internal_address();
}
inline void RealAddressAndSize::_internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  address_ = value;
}
inline void RealAddressAndSize::set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.RealAddressAndSize.address)
}

// uint64 size = 2;
inline void RealAddressAndSize::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RealAddressAndSize::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RealAddressAndSize::size() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.RealAddressAndSize.size)
  return _internal_size();
}
inline void RealAddressAndSize::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void RealAddressAndSize::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.RealAddressAndSize.size)
}

// -------------------------------------------------------------------

// Context

// uint32 context_id = 1;
inline void Context::clear_context_id() {
  context_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Context::_internal_context_id() const {
  return context_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Context::context_id() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Context.context_id)
  return _internal_context_id();
}
inline void Context::_internal_set_context_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  context_id_ = value;
}
inline void Context::set_context_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_context_id(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.Context.context_id)
}

// uint32 thread_id = 2;
inline void Context::clear_thread_id() {
  thread_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Context::_internal_thread_id() const {
  return thread_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Context::thread_id() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Context.thread_id)
  return _internal_thread_id();
}
inline void Context::_internal_set_thread_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  thread_id_ = value;
}
inline void Context::set_thread_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_thread_id(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.Context.thread_id)
}

// repeated .toolkit.aicpu.dump.RealAddressAndSize input = 3;
inline int Context::_internal_input_size() const {
  return input_.size();
}
inline int Context::input_size() const {
  return _internal_input_size();
}
inline void Context::clear_input() {
  input_.Clear();
}
inline ::toolkit::aicpu::dump::RealAddressAndSize* Context::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:toolkit.aicpu.dump.Context.input)
  return input_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::RealAddressAndSize >*
Context::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:toolkit.aicpu.dump.Context.input)
  return &input_;
}
inline const ::toolkit::aicpu::dump::RealAddressAndSize& Context::_internal_input(int index) const {
  return input_.Get(index);
}
inline const ::toolkit::aicpu::dump::RealAddressAndSize& Context::input(int index) const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Context.input)
  return _internal_input(index);
}
inline ::toolkit::aicpu::dump::RealAddressAndSize* Context::_internal_add_input() {
  return input_.Add();
}
inline ::toolkit::aicpu::dump::RealAddressAndSize* Context::add_input() {
  // @@protoc_insertion_point(field_add:toolkit.aicpu.dump.Context.input)
  return _internal_add_input();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::RealAddressAndSize >&
Context::input() const {
  // @@protoc_insertion_point(field_list:toolkit.aicpu.dump.Context.input)
  return input_;
}

// repeated .toolkit.aicpu.dump.RealAddressAndSize output = 4;
inline int Context::_internal_output_size() const {
  return output_.size();
}
inline int Context::output_size() const {
  return _internal_output_size();
}
inline void Context::clear_output() {
  output_.Clear();
}
inline ::toolkit::aicpu::dump::RealAddressAndSize* Context::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:toolkit.aicpu.dump.Context.output)
  return output_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::RealAddressAndSize >*
Context::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:toolkit.aicpu.dump.Context.output)
  return &output_;
}
inline const ::toolkit::aicpu::dump::RealAddressAndSize& Context::_internal_output(int index) const {
  return output_.Get(index);
}
inline const ::toolkit::aicpu::dump::RealAddressAndSize& Context::output(int index) const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Context.output)
  return _internal_output(index);
}
inline ::toolkit::aicpu::dump::RealAddressAndSize* Context::_internal_add_output() {
  return output_.Add();
}
inline ::toolkit::aicpu::dump::RealAddressAndSize* Context::add_output() {
  // @@protoc_insertion_point(field_add:toolkit.aicpu.dump.Context.output)
  return _internal_add_output();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::RealAddressAndSize >&
Context::output() const {
  // @@protoc_insertion_point(field_list:toolkit.aicpu.dump.Context.output)
  return output_;
}

// -------------------------------------------------------------------

// Task

// uint32 task_id = 1;
inline void Task::clear_task_id() {
  task_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Task::_internal_task_id() const {
  return task_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Task::task_id() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Task.task_id)
  return _internal_task_id();
}
inline void Task::_internal_set_task_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  task_id_ = value;
}
inline void Task::set_task_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.Task.task_id)
}

// uint32 stream_id = 2;
inline void Task::clear_stream_id() {
  stream_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Task::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Task::stream_id() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Task.stream_id)
  return _internal_stream_id();
}
inline void Task::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stream_id_ = value;
}
inline void Task::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.Task.stream_id)
}

// .toolkit.aicpu.dump.Op op = 3;
inline bool Task::_internal_has_op() const {
  return this != internal_default_instance() && op_ != nullptr;
}
inline bool Task::has_op() const {
  return _internal_has_op();
}
inline void Task::clear_op() {
  if (GetArena() == nullptr && op_ != nullptr) {
    delete op_;
  }
  op_ = nullptr;
}
inline const ::toolkit::aicpu::dump::Op& Task::_internal_op() const {
  const ::toolkit::aicpu::dump::Op* p = op_;
  return p != nullptr ? *p : *reinterpret_cast<const ::toolkit::aicpu::dump::Op*>(
      &::toolkit::aicpu::dump::_Op_default_instance_);
}
inline const ::toolkit::aicpu::dump::Op& Task::op() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Task.op)
  return _internal_op();
}
inline void Task::unsafe_arena_set_allocated_op(
    ::toolkit::aicpu::dump::Op* op) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(op_);
  }
  op_ = op;
  if (op) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:toolkit.aicpu.dump.Task.op)
}
inline ::toolkit::aicpu::dump::Op* Task::release_op() {
  
  ::toolkit::aicpu::dump::Op* temp = op_;
  op_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::toolkit::aicpu::dump::Op* Task::unsafe_arena_release_op() {
  // @@protoc_insertion_point(field_release:toolkit.aicpu.dump.Task.op)
  
  ::toolkit::aicpu::dump::Op* temp = op_;
  op_ = nullptr;
  return temp;
}
inline ::toolkit::aicpu::dump::Op* Task::_internal_mutable_op() {
  
  if (op_ == nullptr) {
    auto* p = CreateMaybeMessage<::toolkit::aicpu::dump::Op>(GetArena());
    op_ = p;
  }
  return op_;
}
inline ::toolkit::aicpu::dump::Op* Task::mutable_op() {
  // @@protoc_insertion_point(field_mutable:toolkit.aicpu.dump.Task.op)
  return _internal_mutable_op();
}
inline void Task::set_allocated_op(::toolkit::aicpu::dump::Op* op) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete op_;
  }
  if (op) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(op);
    if (message_arena != submessage_arena) {
      op = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op, submessage_arena);
    }
    
  } else {
    
  }
  op_ = op;
  // @@protoc_insertion_point(field_set_allocated:toolkit.aicpu.dump.Task.op)
}

// repeated .toolkit.aicpu.dump.Output output = 4;
inline int Task::_internal_output_size() const {
  return output_.size();
}
inline int Task::output_size() const {
  return _internal_output_size();
}
inline void Task::clear_output() {
  output_.Clear();
}
inline ::toolkit::aicpu::dump::Output* Task::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:toolkit.aicpu.dump.Task.output)
  return output_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::Output >*
Task::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:toolkit.aicpu.dump.Task.output)
  return &output_;
}
inline const ::toolkit::aicpu::dump::Output& Task::_internal_output(int index) const {
  return output_.Get(index);
}
inline const ::toolkit::aicpu::dump::Output& Task::output(int index) const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Task.output)
  return _internal_output(index);
}
inline ::toolkit::aicpu::dump::Output* Task::_internal_add_output() {
  return output_.Add();
}
inline ::toolkit::aicpu::dump::Output* Task::add_output() {
  // @@protoc_insertion_point(field_add:toolkit.aicpu.dump.Task.output)
  return _internal_add_output();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::Output >&
Task::output() const {
  // @@protoc_insertion_point(field_list:toolkit.aicpu.dump.Task.output)
  return output_;
}

// bool end_graph = 5;
inline void Task::clear_end_graph() {
  end_graph_ = false;
}
inline bool Task::_internal_end_graph() const {
  return end_graph_;
}
inline bool Task::end_graph() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Task.end_graph)
  return _internal_end_graph();
}
inline void Task::_internal_set_end_graph(bool value) {
  
  end_graph_ = value;
}
inline void Task::set_end_graph(bool value) {
  _internal_set_end_graph(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.Task.end_graph)
}

// repeated .toolkit.aicpu.dump.Input input = 6;
inline int Task::_internal_input_size() const {
  return input_.size();
}
inline int Task::input_size() const {
  return _internal_input_size();
}
inline void Task::clear_input() {
  input_.Clear();
}
inline ::toolkit::aicpu::dump::Input* Task::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:toolkit.aicpu.dump.Task.input)
  return input_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::Input >*
Task::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:toolkit.aicpu.dump.Task.input)
  return &input_;
}
inline const ::toolkit::aicpu::dump::Input& Task::_internal_input(int index) const {
  return input_.Get(index);
}
inline const ::toolkit::aicpu::dump::Input& Task::input(int index) const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Task.input)
  return _internal_input(index);
}
inline ::toolkit::aicpu::dump::Input* Task::_internal_add_input() {
  return input_.Add();
}
inline ::toolkit::aicpu::dump::Input* Task::add_input() {
  // @@protoc_insertion_point(field_add:toolkit.aicpu.dump.Task.input)
  return _internal_add_input();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::Input >&
Task::input() const {
  // @@protoc_insertion_point(field_list:toolkit.aicpu.dump.Task.input)
  return input_;
}

// repeated .toolkit.aicpu.dump.OpBuffer buffer = 7;
inline int Task::_internal_buffer_size() const {
  return buffer_.size();
}
inline int Task::buffer_size() const {
  return _internal_buffer_size();
}
inline void Task::clear_buffer() {
  buffer_.Clear();
}
inline ::toolkit::aicpu::dump::OpBuffer* Task::mutable_buffer(int index) {
  // @@protoc_insertion_point(field_mutable:toolkit.aicpu.dump.Task.buffer)
  return buffer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::OpBuffer >*
Task::mutable_buffer() {
  // @@protoc_insertion_point(field_mutable_list:toolkit.aicpu.dump.Task.buffer)
  return &buffer_;
}
inline const ::toolkit::aicpu::dump::OpBuffer& Task::_internal_buffer(int index) const {
  return buffer_.Get(index);
}
inline const ::toolkit::aicpu::dump::OpBuffer& Task::buffer(int index) const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Task.buffer)
  return _internal_buffer(index);
}
inline ::toolkit::aicpu::dump::OpBuffer* Task::_internal_add_buffer() {
  return buffer_.Add();
}
inline ::toolkit::aicpu::dump::OpBuffer* Task::add_buffer() {
  // @@protoc_insertion_point(field_add:toolkit.aicpu.dump.Task.buffer)
  return _internal_add_buffer();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::OpBuffer >&
Task::buffer() const {
  // @@protoc_insertion_point(field_list:toolkit.aicpu.dump.Task.buffer)
  return buffer_;
}

// .toolkit.aicpu.dump.Task.TaskType task_type = 8;
inline void Task::clear_task_type() {
  task_type_ = 0;
}
inline ::toolkit::aicpu::dump::Task_TaskType Task::_internal_task_type() const {
  return static_cast< ::toolkit::aicpu::dump::Task_TaskType >(task_type_);
}
inline ::toolkit::aicpu::dump::Task_TaskType Task::task_type() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Task.task_type)
  return _internal_task_type();
}
inline void Task::_internal_set_task_type(::toolkit::aicpu::dump::Task_TaskType value) {
  
  task_type_ = value;
}
inline void Task::set_task_type(::toolkit::aicpu::dump::Task_TaskType value) {
  _internal_set_task_type(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.Task.task_type)
}

// uint32 context_id = 9;
inline void Task::clear_context_id() {
  context_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Task::_internal_context_id() const {
  return context_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Task::context_id() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Task.context_id)
  return _internal_context_id();
}
inline void Task::_internal_set_context_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  context_id_ = value;
}
inline void Task::set_context_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_context_id(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.Task.context_id)
}

// repeated .toolkit.aicpu.dump.OpAttr attr = 10;
inline int Task::_internal_attr_size() const {
  return attr_.size();
}
inline int Task::attr_size() const {
  return _internal_attr_size();
}
inline void Task::clear_attr() {
  attr_.Clear();
}
inline ::toolkit::aicpu::dump::OpAttr* Task::mutable_attr(int index) {
  // @@protoc_insertion_point(field_mutable:toolkit.aicpu.dump.Task.attr)
  return attr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::OpAttr >*
Task::mutable_attr() {
  // @@protoc_insertion_point(field_mutable_list:toolkit.aicpu.dump.Task.attr)
  return &attr_;
}
inline const ::toolkit::aicpu::dump::OpAttr& Task::_internal_attr(int index) const {
  return attr_.Get(index);
}
inline const ::toolkit::aicpu::dump::OpAttr& Task::attr(int index) const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Task.attr)
  return _internal_attr(index);
}
inline ::toolkit::aicpu::dump::OpAttr* Task::_internal_add_attr() {
  return attr_.Add();
}
inline ::toolkit::aicpu::dump::OpAttr* Task::add_attr() {
  // @@protoc_insertion_point(field_add:toolkit.aicpu.dump.Task.attr)
  return _internal_add_attr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::OpAttr >&
Task::attr() const {
  // @@protoc_insertion_point(field_list:toolkit.aicpu.dump.Task.attr)
  return attr_;
}

// repeated .toolkit.aicpu.dump.Workspace space = 11;
inline int Task::_internal_space_size() const {
  return space_.size();
}
inline int Task::space_size() const {
  return _internal_space_size();
}
inline void Task::clear_space() {
  space_.Clear();
}
inline ::toolkit::aicpu::dump::Workspace* Task::mutable_space(int index) {
  // @@protoc_insertion_point(field_mutable:toolkit.aicpu.dump.Task.space)
  return space_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::Workspace >*
Task::mutable_space() {
  // @@protoc_insertion_point(field_mutable_list:toolkit.aicpu.dump.Task.space)
  return &space_;
}
inline const ::toolkit::aicpu::dump::Workspace& Task::_internal_space(int index) const {
  return space_.Get(index);
}
inline const ::toolkit::aicpu::dump::Workspace& Task::space(int index) const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Task.space)
  return _internal_space(index);
}
inline ::toolkit::aicpu::dump::Workspace* Task::_internal_add_space() {
  return space_.Add();
}
inline ::toolkit::aicpu::dump::Workspace* Task::add_space() {
  // @@protoc_insertion_point(field_add:toolkit.aicpu.dump.Task.space)
  return _internal_add_space();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::Workspace >&
Task::space() const {
  // @@protoc_insertion_point(field_list:toolkit.aicpu.dump.Task.space)
  return space_;
}

// repeated .toolkit.aicpu.dump.Context context = 12;
inline int Task::_internal_context_size() const {
  return context_.size();
}
inline int Task::context_size() const {
  return _internal_context_size();
}
inline void Task::clear_context() {
  context_.Clear();
}
inline ::toolkit::aicpu::dump::Context* Task::mutable_context(int index) {
  // @@protoc_insertion_point(field_mutable:toolkit.aicpu.dump.Task.context)
  return context_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::Context >*
Task::mutable_context() {
  // @@protoc_insertion_point(field_mutable_list:toolkit.aicpu.dump.Task.context)
  return &context_;
}
inline const ::toolkit::aicpu::dump::Context& Task::_internal_context(int index) const {
  return context_.Get(index);
}
inline const ::toolkit::aicpu::dump::Context& Task::context(int index) const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Task.context)
  return _internal_context(index);
}
inline ::toolkit::aicpu::dump::Context* Task::_internal_add_context() {
  return context_.Add();
}
inline ::toolkit::aicpu::dump::Context* Task::add_context() {
  // @@protoc_insertion_point(field_add:toolkit.aicpu.dump.Task.context)
  return _internal_add_context();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::Context >&
Task::context() const {
  // @@protoc_insertion_point(field_list:toolkit.aicpu.dump.Task.context)
  return context_;
}

// uint32 thread_id = 13;
inline void Task::clear_thread_id() {
  thread_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Task::_internal_thread_id() const {
  return thread_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Task::thread_id() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.Task.thread_id)
  return _internal_thread_id();
}
inline void Task::_internal_set_thread_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  thread_id_ = value;
}
inline void Task::set_thread_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_thread_id(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.Task.thread_id)
}

// -------------------------------------------------------------------

// OpMappingInfo

// string dump_path = 1;
inline void OpMappingInfo::clear_dump_path() {
  dump_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OpMappingInfo::dump_path() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.OpMappingInfo.dump_path)
  return _internal_dump_path();
}
inline void OpMappingInfo::set_dump_path(const std::string& value) {
  _internal_set_dump_path(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.OpMappingInfo.dump_path)
}
inline std::string* OpMappingInfo::mutable_dump_path() {
  // @@protoc_insertion_point(field_mutable:toolkit.aicpu.dump.OpMappingInfo.dump_path)
  return _internal_mutable_dump_path();
}
inline const std::string& OpMappingInfo::_internal_dump_path() const {
  return dump_path_.Get();
}
inline void OpMappingInfo::_internal_set_dump_path(const std::string& value) {
  
  dump_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OpMappingInfo::set_dump_path(std::string&& value) {
  
  dump_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:toolkit.aicpu.dump.OpMappingInfo.dump_path)
}
inline void OpMappingInfo::set_dump_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dump_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:toolkit.aicpu.dump.OpMappingInfo.dump_path)
}
inline void OpMappingInfo::set_dump_path(const char* value,
    size_t size) {
  
  dump_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:toolkit.aicpu.dump.OpMappingInfo.dump_path)
}
inline std::string* OpMappingInfo::_internal_mutable_dump_path() {
  
  return dump_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OpMappingInfo::release_dump_path() {
  // @@protoc_insertion_point(field_release:toolkit.aicpu.dump.OpMappingInfo.dump_path)
  return dump_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpMappingInfo::set_allocated_dump_path(std::string* dump_path) {
  if (dump_path != nullptr) {
    
  } else {
    
  }
  dump_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dump_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:toolkit.aicpu.dump.OpMappingInfo.dump_path)
}

// string model_name = 2;
inline bool OpMappingInfo::_internal_has_model_name() const {
  return model_name_param_case() == kModelName;
}
inline void OpMappingInfo::set_has_model_name() {
  _oneof_case_[0] = kModelName;
}
inline void OpMappingInfo::clear_model_name() {
  if (_internal_has_model_name()) {
    model_name_param_.model_name_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_model_name_param();
  }
}
inline const std::string& OpMappingInfo::model_name() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.OpMappingInfo.model_name)
  return _internal_model_name();
}
inline void OpMappingInfo::set_model_name(const std::string& value) {
  _internal_set_model_name(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.OpMappingInfo.model_name)
}
inline std::string* OpMappingInfo::mutable_model_name() {
  // @@protoc_insertion_point(field_mutable:toolkit.aicpu.dump.OpMappingInfo.model_name)
  return _internal_mutable_model_name();
}
inline const std::string& OpMappingInfo::_internal_model_name() const {
  if (_internal_has_model_name()) {
    return model_name_param_.model_name_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void OpMappingInfo::_internal_set_model_name(const std::string& value) {
  if (!_internal_has_model_name()) {
    clear_model_name_param();
    set_has_model_name();
    model_name_param_.model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  model_name_param_.model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OpMappingInfo::set_model_name(std::string&& value) {
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.OpMappingInfo.model_name)
  if (!_internal_has_model_name()) {
    clear_model_name_param();
    set_has_model_name();
    model_name_param_.model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  model_name_param_.model_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:toolkit.aicpu.dump.OpMappingInfo.model_name)
}
inline void OpMappingInfo::set_model_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_model_name()) {
    clear_model_name_param();
    set_has_model_name();
    model_name_param_.model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  model_name_param_.model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:toolkit.aicpu.dump.OpMappingInfo.model_name)
}
inline void OpMappingInfo::set_model_name(const char* value,
                             size_t size) {
  if (!_internal_has_model_name()) {
    clear_model_name_param();
    set_has_model_name();
    model_name_param_.model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  model_name_param_.model_name_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:toolkit.aicpu.dump.OpMappingInfo.model_name)
}
inline std::string* OpMappingInfo::_internal_mutable_model_name() {
  if (!_internal_has_model_name()) {
    clear_model_name_param();
    set_has_model_name();
    model_name_param_.model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return model_name_param_.model_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OpMappingInfo::release_model_name() {
  // @@protoc_insertion_point(field_release:toolkit.aicpu.dump.OpMappingInfo.model_name)
  if (_internal_has_model_name()) {
    clear_has_model_name_param();
    return model_name_param_.model_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void OpMappingInfo::set_allocated_model_name(std::string* model_name) {
  if (has_model_name_param()) {
    clear_model_name_param();
  }
  if (model_name != nullptr) {
    set_has_model_name();
    model_name_param_.model_name_.UnsafeSetDefault(model_name);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(model_name);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:toolkit.aicpu.dump.OpMappingInfo.model_name)
}

// uint32 model_id = 3;
inline bool OpMappingInfo::_internal_has_model_id() const {
  return model_id_param_case() == kModelId;
}
inline void OpMappingInfo::set_has_model_id() {
  _oneof_case_[1] = kModelId;
}
inline void OpMappingInfo::clear_model_id() {
  if (_internal_has_model_id()) {
    model_id_param_.model_id_ = 0u;
    clear_has_model_id_param();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OpMappingInfo::_internal_model_id() const {
  if (_internal_has_model_id()) {
    return model_id_param_.model_id_;
  }
  return 0u;
}
inline void OpMappingInfo::_internal_set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_model_id()) {
    clear_model_id_param();
    set_has_model_id();
  }
  model_id_param_.model_id_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OpMappingInfo::model_id() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.OpMappingInfo.model_id)
  return _internal_model_id();
}
inline void OpMappingInfo::set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.OpMappingInfo.model_id)
}

// uint64 step_id_addr = 4;
inline bool OpMappingInfo::_internal_has_step_id_addr() const {
  return step_id_case() == kStepIdAddr;
}
inline void OpMappingInfo::set_has_step_id_addr() {
  _oneof_case_[2] = kStepIdAddr;
}
inline void OpMappingInfo::clear_step_id_addr() {
  if (_internal_has_step_id_addr()) {
    step_id_.step_id_addr_ = PROTOBUF_ULONGLONG(0);
    clear_has_step_id();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OpMappingInfo::_internal_step_id_addr() const {
  if (_internal_has_step_id_addr()) {
    return step_id_.step_id_addr_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void OpMappingInfo::_internal_set_step_id_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_step_id_addr()) {
    clear_step_id();
    set_has_step_id_addr();
  }
  step_id_.step_id_addr_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OpMappingInfo::step_id_addr() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.OpMappingInfo.step_id_addr)
  return _internal_step_id_addr();
}
inline void OpMappingInfo::set_step_id_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_step_id_addr(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.OpMappingInfo.step_id_addr)
}

// uint64 iterations_per_loop_addr = 5;
inline bool OpMappingInfo::_internal_has_iterations_per_loop_addr() const {
  return iterations_per_loop_case() == kIterationsPerLoopAddr;
}
inline void OpMappingInfo::set_has_iterations_per_loop_addr() {
  _oneof_case_[3] = kIterationsPerLoopAddr;
}
inline void OpMappingInfo::clear_iterations_per_loop_addr() {
  if (_internal_has_iterations_per_loop_addr()) {
    iterations_per_loop_.iterations_per_loop_addr_ = PROTOBUF_ULONGLONG(0);
    clear_has_iterations_per_loop();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OpMappingInfo::_internal_iterations_per_loop_addr() const {
  if (_internal_has_iterations_per_loop_addr()) {
    return iterations_per_loop_.iterations_per_loop_addr_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void OpMappingInfo::_internal_set_iterations_per_loop_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_iterations_per_loop_addr()) {
    clear_iterations_per_loop();
    set_has_iterations_per_loop_addr();
  }
  iterations_per_loop_.iterations_per_loop_addr_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OpMappingInfo::iterations_per_loop_addr() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.OpMappingInfo.iterations_per_loop_addr)
  return _internal_iterations_per_loop_addr();
}
inline void OpMappingInfo::set_iterations_per_loop_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_iterations_per_loop_addr(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.OpMappingInfo.iterations_per_loop_addr)
}

// uint64 loop_cond_addr = 6;
inline bool OpMappingInfo::_internal_has_loop_cond_addr() const {
  return loop_cond_case() == kLoopCondAddr;
}
inline void OpMappingInfo::set_has_loop_cond_addr() {
  _oneof_case_[4] = kLoopCondAddr;
}
inline void OpMappingInfo::clear_loop_cond_addr() {
  if (_internal_has_loop_cond_addr()) {
    loop_cond_.loop_cond_addr_ = PROTOBUF_ULONGLONG(0);
    clear_has_loop_cond();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OpMappingInfo::_internal_loop_cond_addr() const {
  if (_internal_has_loop_cond_addr()) {
    return loop_cond_.loop_cond_addr_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void OpMappingInfo::_internal_set_loop_cond_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_loop_cond_addr()) {
    clear_loop_cond();
    set_has_loop_cond_addr();
  }
  loop_cond_.loop_cond_addr_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OpMappingInfo::loop_cond_addr() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.OpMappingInfo.loop_cond_addr)
  return _internal_loop_cond_addr();
}
inline void OpMappingInfo::set_loop_cond_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_loop_cond_addr(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.OpMappingInfo.loop_cond_addr)
}

// uint32 flag = 7;
inline void OpMappingInfo::clear_flag() {
  flag_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OpMappingInfo::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OpMappingInfo::flag() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.OpMappingInfo.flag)
  return _internal_flag();
}
inline void OpMappingInfo::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flag_ = value;
}
inline void OpMappingInfo::set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.OpMappingInfo.flag)
}

// repeated .toolkit.aicpu.dump.Task task = 8;
inline int OpMappingInfo::_internal_task_size() const {
  return task_.size();
}
inline int OpMappingInfo::task_size() const {
  return _internal_task_size();
}
inline void OpMappingInfo::clear_task() {
  task_.Clear();
}
inline ::toolkit::aicpu::dump::Task* OpMappingInfo::mutable_task(int index) {
  // @@protoc_insertion_point(field_mutable:toolkit.aicpu.dump.OpMappingInfo.task)
  return task_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::Task >*
OpMappingInfo::mutable_task() {
  // @@protoc_insertion_point(field_mutable_list:toolkit.aicpu.dump.OpMappingInfo.task)
  return &task_;
}
inline const ::toolkit::aicpu::dump::Task& OpMappingInfo::_internal_task(int index) const {
  return task_.Get(index);
}
inline const ::toolkit::aicpu::dump::Task& OpMappingInfo::task(int index) const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.OpMappingInfo.task)
  return _internal_task(index);
}
inline ::toolkit::aicpu::dump::Task* OpMappingInfo::_internal_add_task() {
  return task_.Add();
}
inline ::toolkit::aicpu::dump::Task* OpMappingInfo::add_task() {
  // @@protoc_insertion_point(field_add:toolkit.aicpu.dump.OpMappingInfo.task)
  return _internal_add_task();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toolkit::aicpu::dump::Task >&
OpMappingInfo::task() const {
  // @@protoc_insertion_point(field_list:toolkit.aicpu.dump.OpMappingInfo.task)
  return task_;
}

// string dump_step = 9;
inline void OpMappingInfo::clear_dump_step() {
  dump_step_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OpMappingInfo::dump_step() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.OpMappingInfo.dump_step)
  return _internal_dump_step();
}
inline void OpMappingInfo::set_dump_step(const std::string& value) {
  _internal_set_dump_step(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.OpMappingInfo.dump_step)
}
inline std::string* OpMappingInfo::mutable_dump_step() {
  // @@protoc_insertion_point(field_mutable:toolkit.aicpu.dump.OpMappingInfo.dump_step)
  return _internal_mutable_dump_step();
}
inline const std::string& OpMappingInfo::_internal_dump_step() const {
  return dump_step_.Get();
}
inline void OpMappingInfo::_internal_set_dump_step(const std::string& value) {
  
  dump_step_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OpMappingInfo::set_dump_step(std::string&& value) {
  
  dump_step_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:toolkit.aicpu.dump.OpMappingInfo.dump_step)
}
inline void OpMappingInfo::set_dump_step(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dump_step_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:toolkit.aicpu.dump.OpMappingInfo.dump_step)
}
inline void OpMappingInfo::set_dump_step(const char* value,
    size_t size) {
  
  dump_step_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:toolkit.aicpu.dump.OpMappingInfo.dump_step)
}
inline std::string* OpMappingInfo::_internal_mutable_dump_step() {
  
  return dump_step_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OpMappingInfo::release_dump_step() {
  // @@protoc_insertion_point(field_release:toolkit.aicpu.dump.OpMappingInfo.dump_step)
  return dump_step_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpMappingInfo::set_allocated_dump_step(std::string* dump_step) {
  if (dump_step != nullptr) {
    
  } else {
    
  }
  dump_step_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dump_step,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:toolkit.aicpu.dump.OpMappingInfo.dump_step)
}

// .toolkit.aicpu.dump.DumpData dump_data = 10;
inline void OpMappingInfo::clear_dump_data() {
  dump_data_ = 0;
}
inline ::toolkit::aicpu::dump::DumpData OpMappingInfo::_internal_dump_data() const {
  return static_cast< ::toolkit::aicpu::dump::DumpData >(dump_data_);
}
inline ::toolkit::aicpu::dump::DumpData OpMappingInfo::dump_data() const {
  // @@protoc_insertion_point(field_get:toolkit.aicpu.dump.OpMappingInfo.dump_data)
  return _internal_dump_data();
}
inline void OpMappingInfo::_internal_set_dump_data(::toolkit::aicpu::dump::DumpData value) {
  
  dump_data_ = value;
}
inline void OpMappingInfo::set_dump_data(::toolkit::aicpu::dump::DumpData value) {
  _internal_set_dump_data(value);
  // @@protoc_insertion_point(field_set:toolkit.aicpu.dump.OpMappingInfo.dump_data)
}

inline bool OpMappingInfo::has_model_name_param() const {
  return model_name_param_case() != MODEL_NAME_PARAM_NOT_SET;
}
inline void OpMappingInfo::clear_has_model_name_param() {
  _oneof_case_[0] = MODEL_NAME_PARAM_NOT_SET;
}
inline bool OpMappingInfo::has_model_id_param() const {
  return model_id_param_case() != MODEL_ID_PARAM_NOT_SET;
}
inline void OpMappingInfo::clear_has_model_id_param() {
  _oneof_case_[1] = MODEL_ID_PARAM_NOT_SET;
}
inline bool OpMappingInfo::has_step_id() const {
  return step_id_case() != STEP_ID_NOT_SET;
}
inline void OpMappingInfo::clear_has_step_id() {
  _oneof_case_[2] = STEP_ID_NOT_SET;
}
inline bool OpMappingInfo::has_iterations_per_loop() const {
  return iterations_per_loop_case() != ITERATIONS_PER_LOOP_NOT_SET;
}
inline void OpMappingInfo::clear_has_iterations_per_loop() {
  _oneof_case_[3] = ITERATIONS_PER_LOOP_NOT_SET;
}
inline bool OpMappingInfo::has_loop_cond() const {
  return loop_cond_case() != LOOP_COND_NOT_SET;
}
inline void OpMappingInfo::clear_has_loop_cond() {
  _oneof_case_[4] = LOOP_COND_NOT_SET;
}
inline OpMappingInfo::ModelNameParamCase OpMappingInfo::model_name_param_case() const {
  return OpMappingInfo::ModelNameParamCase(_oneof_case_[0]);
}
inline OpMappingInfo::ModelIdParamCase OpMappingInfo::model_id_param_case() const {
  return OpMappingInfo::ModelIdParamCase(_oneof_case_[1]);
}
inline OpMappingInfo::StepIdCase OpMappingInfo::step_id_case() const {
  return OpMappingInfo::StepIdCase(_oneof_case_[2]);
}
inline OpMappingInfo::IterationsPerLoopCase OpMappingInfo::iterations_per_loop_case() const {
  return OpMappingInfo::IterationsPerLoopCase(_oneof_case_[3]);
}
inline OpMappingInfo::LoopCondCase OpMappingInfo::loop_cond_case() const {
  return OpMappingInfo::LoopCondCase(_oneof_case_[4]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dump
}  // namespace aicpu
}  // namespace toolkit

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::toolkit::aicpu::dump::Workspace_SpaceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::toolkit::aicpu::dump::Workspace_SpaceType>() {
  return ::toolkit::aicpu::dump::Workspace_SpaceType_descriptor();
}
template <> struct is_proto_enum< ::toolkit::aicpu::dump::Task_TaskType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::toolkit::aicpu::dump::Task_TaskType>() {
  return ::toolkit::aicpu::dump::Task_TaskType_descriptor();
}
template <> struct is_proto_enum< ::toolkit::aicpu::dump::AddressType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::toolkit::aicpu::dump::AddressType>() {
  return ::toolkit::aicpu::dump::AddressType_descriptor();
}
template <> struct is_proto_enum< ::toolkit::aicpu::dump::BufferType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::toolkit::aicpu::dump::BufferType>() {
  return ::toolkit::aicpu::dump::BufferType_descriptor();
}
template <> struct is_proto_enum< ::toolkit::aicpu::dump::DumpData> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::toolkit::aicpu::dump::DumpData>() {
  return ::toolkit::aicpu::dump::DumpData_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_op_5fmapping_2eproto
