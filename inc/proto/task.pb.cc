// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto

#include "task.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdditionalDataDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArgsInfo_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AutoThreadAicAivDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutoThreadCacheDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutoThreadPrefetchDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CmoBarrierInfoDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CmoBarrierTaskDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CmoTaskDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DSATaskArgsDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DSATaskDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DvppTaskDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EventExDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FftsDescInfoDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FftsPlusAicAivCtxDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FftsPlusAicpuCtxDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FftsPlusAtEndCtxDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FftsPlusAtStartCtxDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FftsPlusCachePersistCtxDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FftsPlusCaseDefaultCtxDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FftsPlusCaseSwitchCtxDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FftsPlusCondSwitchCtxDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<15> scc_info_FftsPlusCtxDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FftsPlusDataCtxDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FftsPlusDsaCtxDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FftsPlusLabelCtxDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FftsPlusMixAicAivCtxDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FftsPlusNotifyCtxDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FftsPlusSdmaCtxDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FftsPlusSqeDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FftsPlusTaskDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FftsPlusWriteValueCtxDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FftsSubTaskDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FftsTaskDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KernelContext_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_KernelDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_KernelDefWithHandle_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KernelExDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KernelHcclDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelGotoExDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelSetDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelSwitchByIndexDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogTimeStampDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ManualThreadAicAivDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ManualThreadCacheDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ManualThreadDependencyDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ManualThreadDmuDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ManualThreadNopDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemcpyAsyncDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelTaskDef_AttrEntry_DoNotUse_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NpuClearFloatStatusDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NpuGetFloatStatusDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StarsSqeHeaderDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamActiveDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamSwitchDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamSwitchNDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<21> scc_info_TaskDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TicketCacheDef_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_aicpuKernelDef_task_2eproto;
namespace domi {
class ModelTaskDef_AttrEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelTaskDef_AttrEntry_DoNotUse> _instance;
} _ModelTaskDef_AttrEntry_DoNotUse_default_instance_;
class ModelTaskDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelTaskDef> _instance;
} _ModelTaskDef_default_instance_;
class TaskDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskDef> _instance;
} _TaskDef_default_instance_;
class KernelDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KernelDef> _instance;
} _KernelDef_default_instance_;
class KernelDefWithHandleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KernelDefWithHandle> _instance;
} _KernelDefWithHandle_default_instance_;
class KernelContextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KernelContext> _instance;
} _KernelContext_default_instance_;
class ArgsInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArgsInfo> _instance;
} _ArgsInfo_default_instance_;
class KernelExDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KernelExDef> _instance;
} _KernelExDef_default_instance_;
class KernelHcclDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KernelHcclDef> _instance;
} _KernelHcclDef_default_instance_;
class EventExDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventExDef> _instance;
} _EventExDef_default_instance_;
class LogTimeStampDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogTimeStampDef> _instance;
} _LogTimeStampDef_default_instance_;
class MemcpyAsyncDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemcpyAsyncDef> _instance;
} _MemcpyAsyncDef_default_instance_;
class StreamSwitchDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamSwitchDef> _instance;
} _StreamSwitchDef_default_instance_;
class StreamActiveDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamActiveDef> _instance;
} _StreamActiveDef_default_instance_;
class StreamSwitchNDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamSwitchNDef> _instance;
} _StreamSwitchNDef_default_instance_;
class LabelSetDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabelSetDef> _instance;
} _LabelSetDef_default_instance_;
class LabelGotoExDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabelGotoExDef> _instance;
} _LabelGotoExDef_default_instance_;
class LabelSwitchByIndexDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabelSwitchByIndexDef> _instance;
} _LabelSwitchByIndexDef_default_instance_;
class FftsTaskDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FftsTaskDef> _instance;
} _FftsTaskDef_default_instance_;
class FftsDescInfoDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FftsDescInfoDef> _instance;
} _FftsDescInfoDef_default_instance_;
class FftsSubTaskDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FftsSubTaskDef> _instance;
} _FftsSubTaskDef_default_instance_;
class TicketCacheDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TicketCacheDef> _instance;
} _TicketCacheDef_default_instance_;
class AutoThreadAicAivDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutoThreadAicAivDef> _instance;
} _AutoThreadAicAivDef_default_instance_;
class AutoThreadCacheDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutoThreadCacheDef> _instance;
} _AutoThreadCacheDef_default_instance_;
class AutoThreadPrefetchDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutoThreadPrefetchDef> _instance;
} _AutoThreadPrefetchDef_default_instance_;
class ManualThreadAicAivDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ManualThreadAicAivDef> _instance;
} _ManualThreadAicAivDef_default_instance_;
class ManualThreadNopDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ManualThreadNopDef> _instance;
} _ManualThreadNopDef_default_instance_;
class ManualThreadCacheDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ManualThreadCacheDef> _instance;
} _ManualThreadCacheDef_default_instance_;
class ManualThreadDmuDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ManualThreadDmuDef> _instance;
} _ManualThreadDmuDef_default_instance_;
class ManualThreadDependencyDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ManualThreadDependencyDef> _instance;
} _ManualThreadDependencyDef_default_instance_;
class DSATaskDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DSATaskDef> _instance;
} _DSATaskDef_default_instance_;
class DSATaskArgsDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DSATaskArgsDef> _instance;
} _DSATaskArgsDef_default_instance_;
class FftsPlusTaskDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FftsPlusTaskDef> _instance;
} _FftsPlusTaskDef_default_instance_;
class AdditionalDataDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdditionalDataDef> _instance;
} _AdditionalDataDef_default_instance_;
class FftsPlusSqeDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FftsPlusSqeDef> _instance;
} _FftsPlusSqeDef_default_instance_;
class StarsSqeHeaderDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StarsSqeHeaderDef> _instance;
} _StarsSqeHeaderDef_default_instance_;
class FftsPlusCtxDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FftsPlusCtxDef> _instance;
} _FftsPlusCtxDef_default_instance_;
class FftsPlusAicAivCtxDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FftsPlusAicAivCtxDef> _instance;
} _FftsPlusAicAivCtxDef_default_instance_;
class FftsPlusMixAicAivCtxDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FftsPlusMixAicAivCtxDef> _instance;
} _FftsPlusMixAicAivCtxDef_default_instance_;
class FftsPlusSdmaCtxDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FftsPlusSdmaCtxDef> _instance;
} _FftsPlusSdmaCtxDef_default_instance_;
class FftsPlusNotifyCtxDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FftsPlusNotifyCtxDef> _instance;
} _FftsPlusNotifyCtxDef_default_instance_;
class FftsPlusWriteValueCtxDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FftsPlusWriteValueCtxDef> _instance;
} _FftsPlusWriteValueCtxDef_default_instance_;
class FftsPlusAicpuCtxDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FftsPlusAicpuCtxDef> _instance;
} _FftsPlusAicpuCtxDef_default_instance_;
class aicpuKernelDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<aicpuKernelDef> _instance;
} _aicpuKernelDef_default_instance_;
class FftsPlusDataCtxDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FftsPlusDataCtxDef> _instance;
} _FftsPlusDataCtxDef_default_instance_;
class FftsPlusAtStartCtxDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FftsPlusAtStartCtxDef> _instance;
} _FftsPlusAtStartCtxDef_default_instance_;
class FftsPlusAtEndCtxDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FftsPlusAtEndCtxDef> _instance;
} _FftsPlusAtEndCtxDef_default_instance_;
class FftsPlusLabelCtxDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FftsPlusLabelCtxDef> _instance;
} _FftsPlusLabelCtxDef_default_instance_;
class FftsPlusCaseSwitchCtxDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FftsPlusCaseSwitchCtxDef> _instance;
} _FftsPlusCaseSwitchCtxDef_default_instance_;
class FftsPlusCaseDefaultCtxDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FftsPlusCaseDefaultCtxDef> _instance;
} _FftsPlusCaseDefaultCtxDef_default_instance_;
class FftsPlusCondSwitchCtxDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FftsPlusCondSwitchCtxDef> _instance;
} _FftsPlusCondSwitchCtxDef_default_instance_;
class FftsPlusCachePersistCtxDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FftsPlusCachePersistCtxDef> _instance;
} _FftsPlusCachePersistCtxDef_default_instance_;
class FftsPlusDsaCtxDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FftsPlusDsaCtxDef> _instance;
} _FftsPlusDsaCtxDef_default_instance_;
class CmoTaskDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CmoTaskDef> _instance;
} _CmoTaskDef_default_instance_;
class CmoBarrierTaskDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CmoBarrierTaskDef> _instance;
} _CmoBarrierTaskDef_default_instance_;
class CmoBarrierInfoDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CmoBarrierInfoDef> _instance;
} _CmoBarrierInfoDef_default_instance_;
class NpuGetFloatStatusDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NpuGetFloatStatusDef> _instance;
} _NpuGetFloatStatusDef_default_instance_;
class NpuClearFloatStatusDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NpuClearFloatStatusDef> _instance;
} _NpuClearFloatStatusDef_default_instance_;
class DvppTaskDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DvppTaskDef> _instance;
} _DvppTaskDef_default_instance_;
}  // namespace domi
static void InitDefaultsscc_info_AdditionalDataDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_AdditionalDataDef_default_instance_;
    new (ptr) ::domi::AdditionalDataDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::AdditionalDataDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdditionalDataDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdditionalDataDef_task_2eproto}, {}};

static void InitDefaultsscc_info_ArgsInfo_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_ArgsInfo_default_instance_;
    new (ptr) ::domi::ArgsInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::ArgsInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArgsInfo_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ArgsInfo_task_2eproto}, {}};

static void InitDefaultsscc_info_AutoThreadAicAivDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_AutoThreadAicAivDef_default_instance_;
    new (ptr) ::domi::AutoThreadAicAivDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::AutoThreadAicAivDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AutoThreadAicAivDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AutoThreadAicAivDef_task_2eproto}, {
      &scc_info_AutoThreadPrefetchDef_task_2eproto.base,}};

static void InitDefaultsscc_info_AutoThreadCacheDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_AutoThreadCacheDef_default_instance_;
    new (ptr) ::domi::AutoThreadCacheDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::AutoThreadCacheDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutoThreadCacheDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AutoThreadCacheDef_task_2eproto}, {}};

static void InitDefaultsscc_info_AutoThreadPrefetchDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_AutoThreadPrefetchDef_default_instance_;
    new (ptr) ::domi::AutoThreadPrefetchDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::AutoThreadPrefetchDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutoThreadPrefetchDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AutoThreadPrefetchDef_task_2eproto}, {}};

static void InitDefaultsscc_info_CmoBarrierInfoDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_CmoBarrierInfoDef_default_instance_;
    new (ptr) ::domi::CmoBarrierInfoDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::CmoBarrierInfoDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CmoBarrierInfoDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CmoBarrierInfoDef_task_2eproto}, {}};

static void InitDefaultsscc_info_CmoBarrierTaskDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_CmoBarrierTaskDef_default_instance_;
    new (ptr) ::domi::CmoBarrierTaskDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::CmoBarrierTaskDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CmoBarrierTaskDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CmoBarrierTaskDef_task_2eproto}, {
      &scc_info_CmoBarrierInfoDef_task_2eproto.base,}};

static void InitDefaultsscc_info_CmoTaskDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_CmoTaskDef_default_instance_;
    new (ptr) ::domi::CmoTaskDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::CmoTaskDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CmoTaskDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CmoTaskDef_task_2eproto}, {}};

static void InitDefaultsscc_info_DSATaskArgsDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_DSATaskArgsDef_default_instance_;
    new (ptr) ::domi::DSATaskArgsDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::DSATaskArgsDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DSATaskArgsDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DSATaskArgsDef_task_2eproto}, {}};

static void InitDefaultsscc_info_DSATaskDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_DSATaskDef_default_instance_;
    new (ptr) ::domi::DSATaskDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::DSATaskDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DSATaskDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DSATaskDef_task_2eproto}, {
      &scc_info_DSATaskArgsDef_task_2eproto.base,}};

static void InitDefaultsscc_info_DvppTaskDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_DvppTaskDef_default_instance_;
    new (ptr) ::domi::DvppTaskDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::DvppTaskDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DvppTaskDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DvppTaskDef_task_2eproto}, {}};

static void InitDefaultsscc_info_EventExDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_EventExDef_default_instance_;
    new (ptr) ::domi::EventExDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::EventExDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EventExDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EventExDef_task_2eproto}, {}};

static void InitDefaultsscc_info_FftsDescInfoDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_FftsDescInfoDef_default_instance_;
    new (ptr) ::domi::FftsDescInfoDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::FftsDescInfoDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FftsDescInfoDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FftsDescInfoDef_task_2eproto}, {}};

static void InitDefaultsscc_info_FftsPlusAicAivCtxDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_FftsPlusAicAivCtxDef_default_instance_;
    new (ptr) ::domi::FftsPlusAicAivCtxDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::FftsPlusAicAivCtxDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FftsPlusAicAivCtxDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FftsPlusAicAivCtxDef_task_2eproto}, {}};

static void InitDefaultsscc_info_FftsPlusAicpuCtxDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_FftsPlusAicpuCtxDef_default_instance_;
    new (ptr) ::domi::FftsPlusAicpuCtxDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::FftsPlusAicpuCtxDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FftsPlusAicpuCtxDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FftsPlusAicpuCtxDef_task_2eproto}, {
      &scc_info_aicpuKernelDef_task_2eproto.base,}};

static void InitDefaultsscc_info_FftsPlusAtEndCtxDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_FftsPlusAtEndCtxDef_default_instance_;
    new (ptr) ::domi::FftsPlusAtEndCtxDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::FftsPlusAtEndCtxDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FftsPlusAtEndCtxDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FftsPlusAtEndCtxDef_task_2eproto}, {}};

static void InitDefaultsscc_info_FftsPlusAtStartCtxDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_FftsPlusAtStartCtxDef_default_instance_;
    new (ptr) ::domi::FftsPlusAtStartCtxDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::FftsPlusAtStartCtxDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FftsPlusAtStartCtxDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FftsPlusAtStartCtxDef_task_2eproto}, {}};

static void InitDefaultsscc_info_FftsPlusCachePersistCtxDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_FftsPlusCachePersistCtxDef_default_instance_;
    new (ptr) ::domi::FftsPlusCachePersistCtxDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::FftsPlusCachePersistCtxDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FftsPlusCachePersistCtxDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FftsPlusCachePersistCtxDef_task_2eproto}, {}};

static void InitDefaultsscc_info_FftsPlusCaseDefaultCtxDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_FftsPlusCaseDefaultCtxDef_default_instance_;
    new (ptr) ::domi::FftsPlusCaseDefaultCtxDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::FftsPlusCaseDefaultCtxDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FftsPlusCaseDefaultCtxDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FftsPlusCaseDefaultCtxDef_task_2eproto}, {}};

static void InitDefaultsscc_info_FftsPlusCaseSwitchCtxDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_FftsPlusCaseSwitchCtxDef_default_instance_;
    new (ptr) ::domi::FftsPlusCaseSwitchCtxDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::FftsPlusCaseSwitchCtxDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FftsPlusCaseSwitchCtxDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FftsPlusCaseSwitchCtxDef_task_2eproto}, {}};

static void InitDefaultsscc_info_FftsPlusCondSwitchCtxDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_FftsPlusCondSwitchCtxDef_default_instance_;
    new (ptr) ::domi::FftsPlusCondSwitchCtxDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::FftsPlusCondSwitchCtxDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FftsPlusCondSwitchCtxDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FftsPlusCondSwitchCtxDef_task_2eproto}, {}};

static void InitDefaultsscc_info_FftsPlusCtxDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_FftsPlusCtxDef_default_instance_;
    new (ptr) ::domi::FftsPlusCtxDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::FftsPlusCtxDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<15> scc_info_FftsPlusCtxDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 15, 0, InitDefaultsscc_info_FftsPlusCtxDef_task_2eproto}, {
      &scc_info_FftsPlusAicAivCtxDef_task_2eproto.base,
      &scc_info_FftsPlusMixAicAivCtxDef_task_2eproto.base,
      &scc_info_FftsPlusSdmaCtxDef_task_2eproto.base,
      &scc_info_FftsPlusNotifyCtxDef_task_2eproto.base,
      &scc_info_FftsPlusWriteValueCtxDef_task_2eproto.base,
      &scc_info_FftsPlusAicpuCtxDef_task_2eproto.base,
      &scc_info_FftsPlusDataCtxDef_task_2eproto.base,
      &scc_info_FftsPlusAtStartCtxDef_task_2eproto.base,
      &scc_info_FftsPlusAtEndCtxDef_task_2eproto.base,
      &scc_info_FftsPlusLabelCtxDef_task_2eproto.base,
      &scc_info_FftsPlusCaseSwitchCtxDef_task_2eproto.base,
      &scc_info_FftsPlusCaseDefaultCtxDef_task_2eproto.base,
      &scc_info_FftsPlusCondSwitchCtxDef_task_2eproto.base,
      &scc_info_FftsPlusCachePersistCtxDef_task_2eproto.base,
      &scc_info_FftsPlusDsaCtxDef_task_2eproto.base,}};

static void InitDefaultsscc_info_FftsPlusDataCtxDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_FftsPlusDataCtxDef_default_instance_;
    new (ptr) ::domi::FftsPlusDataCtxDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::FftsPlusDataCtxDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FftsPlusDataCtxDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FftsPlusDataCtxDef_task_2eproto}, {}};

static void InitDefaultsscc_info_FftsPlusDsaCtxDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_FftsPlusDsaCtxDef_default_instance_;
    new (ptr) ::domi::FftsPlusDsaCtxDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::FftsPlusDsaCtxDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FftsPlusDsaCtxDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FftsPlusDsaCtxDef_task_2eproto}, {
      &scc_info_DSATaskArgsDef_task_2eproto.base,}};

static void InitDefaultsscc_info_FftsPlusLabelCtxDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_FftsPlusLabelCtxDef_default_instance_;
    new (ptr) ::domi::FftsPlusLabelCtxDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::FftsPlusLabelCtxDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FftsPlusLabelCtxDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FftsPlusLabelCtxDef_task_2eproto}, {}};

static void InitDefaultsscc_info_FftsPlusMixAicAivCtxDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_FftsPlusMixAicAivCtxDef_default_instance_;
    new (ptr) ::domi::FftsPlusMixAicAivCtxDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::FftsPlusMixAicAivCtxDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FftsPlusMixAicAivCtxDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FftsPlusMixAicAivCtxDef_task_2eproto}, {}};

static void InitDefaultsscc_info_FftsPlusNotifyCtxDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_FftsPlusNotifyCtxDef_default_instance_;
    new (ptr) ::domi::FftsPlusNotifyCtxDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::FftsPlusNotifyCtxDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FftsPlusNotifyCtxDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FftsPlusNotifyCtxDef_task_2eproto}, {}};

static void InitDefaultsscc_info_FftsPlusSdmaCtxDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_FftsPlusSdmaCtxDef_default_instance_;
    new (ptr) ::domi::FftsPlusSdmaCtxDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::FftsPlusSdmaCtxDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FftsPlusSdmaCtxDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FftsPlusSdmaCtxDef_task_2eproto}, {}};

static void InitDefaultsscc_info_FftsPlusSqeDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_FftsPlusSqeDef_default_instance_;
    new (ptr) ::domi::FftsPlusSqeDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::FftsPlusSqeDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FftsPlusSqeDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FftsPlusSqeDef_task_2eproto}, {
      &scc_info_StarsSqeHeaderDef_task_2eproto.base,}};

static void InitDefaultsscc_info_FftsPlusTaskDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_FftsPlusTaskDef_default_instance_;
    new (ptr) ::domi::FftsPlusTaskDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::FftsPlusTaskDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FftsPlusTaskDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_FftsPlusTaskDef_task_2eproto}, {
      &scc_info_FftsPlusSqeDef_task_2eproto.base,
      &scc_info_FftsPlusCtxDef_task_2eproto.base,
      &scc_info_AdditionalDataDef_task_2eproto.base,}};

static void InitDefaultsscc_info_FftsPlusWriteValueCtxDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_FftsPlusWriteValueCtxDef_default_instance_;
    new (ptr) ::domi::FftsPlusWriteValueCtxDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::FftsPlusWriteValueCtxDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FftsPlusWriteValueCtxDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FftsPlusWriteValueCtxDef_task_2eproto}, {}};

static void InitDefaultsscc_info_FftsSubTaskDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_FftsSubTaskDef_default_instance_;
    new (ptr) ::domi::FftsSubTaskDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::FftsSubTaskDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FftsSubTaskDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_FftsSubTaskDef_task_2eproto}, {
      &scc_info_AutoThreadAicAivDef_task_2eproto.base,
      &scc_info_ManualThreadAicAivDef_task_2eproto.base,
      &scc_info_ManualThreadNopDef_task_2eproto.base,}};

static void InitDefaultsscc_info_FftsTaskDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_FftsTaskDef_default_instance_;
    new (ptr) ::domi::FftsTaskDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::FftsTaskDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FftsTaskDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_FftsTaskDef_task_2eproto}, {
      &scc_info_FftsDescInfoDef_task_2eproto.base,
      &scc_info_FftsSubTaskDef_task_2eproto.base,
      &scc_info_TicketCacheDef_task_2eproto.base,}};

static void InitDefaultsscc_info_KernelContext_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_KernelContext_default_instance_;
    new (ptr) ::domi::KernelContext();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::KernelContext::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KernelContext_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KernelContext_task_2eproto}, {}};

static void InitDefaultsscc_info_KernelDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_KernelDef_default_instance_;
    new (ptr) ::domi::KernelDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::KernelDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_KernelDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_KernelDef_task_2eproto}, {
      &scc_info_KernelContext_task_2eproto.base,
      &scc_info_ArgsInfo_task_2eproto.base,}};

static void InitDefaultsscc_info_KernelDefWithHandle_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_KernelDefWithHandle_default_instance_;
    new (ptr) ::domi::KernelDefWithHandle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::KernelDefWithHandle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_KernelDefWithHandle_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_KernelDefWithHandle_task_2eproto}, {
      &scc_info_KernelContext_task_2eproto.base,
      &scc_info_ArgsInfo_task_2eproto.base,}};

static void InitDefaultsscc_info_KernelExDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_KernelExDef_default_instance_;
    new (ptr) ::domi::KernelExDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::KernelExDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KernelExDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KernelExDef_task_2eproto}, {}};

static void InitDefaultsscc_info_KernelHcclDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_KernelHcclDef_default_instance_;
    new (ptr) ::domi::KernelHcclDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::KernelHcclDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KernelHcclDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KernelHcclDef_task_2eproto}, {}};

static void InitDefaultsscc_info_LabelGotoExDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_LabelGotoExDef_default_instance_;
    new (ptr) ::domi::LabelGotoExDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::LabelGotoExDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelGotoExDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LabelGotoExDef_task_2eproto}, {}};

static void InitDefaultsscc_info_LabelSetDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_LabelSetDef_default_instance_;
    new (ptr) ::domi::LabelSetDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::LabelSetDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelSetDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LabelSetDef_task_2eproto}, {}};

static void InitDefaultsscc_info_LabelSwitchByIndexDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_LabelSwitchByIndexDef_default_instance_;
    new (ptr) ::domi::LabelSwitchByIndexDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::LabelSwitchByIndexDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelSwitchByIndexDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LabelSwitchByIndexDef_task_2eproto}, {}};

static void InitDefaultsscc_info_LogTimeStampDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_LogTimeStampDef_default_instance_;
    new (ptr) ::domi::LogTimeStampDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::LogTimeStampDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogTimeStampDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogTimeStampDef_task_2eproto}, {}};

static void InitDefaultsscc_info_ManualThreadAicAivDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_ManualThreadAicAivDef_default_instance_;
    new (ptr) ::domi::ManualThreadAicAivDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::ManualThreadAicAivDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ManualThreadAicAivDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ManualThreadAicAivDef_task_2eproto}, {
      &scc_info_ManualThreadDmuDef_task_2eproto.base,
      &scc_info_ManualThreadDependencyDef_task_2eproto.base,}};

static void InitDefaultsscc_info_ManualThreadCacheDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_ManualThreadCacheDef_default_instance_;
    new (ptr) ::domi::ManualThreadCacheDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::ManualThreadCacheDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ManualThreadCacheDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ManualThreadCacheDef_task_2eproto}, {
      &scc_info_ManualThreadDmuDef_task_2eproto.base,}};

static void InitDefaultsscc_info_ManualThreadDependencyDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_ManualThreadDependencyDef_default_instance_;
    new (ptr) ::domi::ManualThreadDependencyDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::ManualThreadDependencyDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ManualThreadDependencyDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ManualThreadDependencyDef_task_2eproto}, {}};

static void InitDefaultsscc_info_ManualThreadDmuDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_ManualThreadDmuDef_default_instance_;
    new (ptr) ::domi::ManualThreadDmuDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::ManualThreadDmuDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ManualThreadDmuDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ManualThreadDmuDef_task_2eproto}, {}};

static void InitDefaultsscc_info_ManualThreadNopDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_ManualThreadNopDef_default_instance_;
    new (ptr) ::domi::ManualThreadNopDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::ManualThreadNopDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ManualThreadNopDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ManualThreadNopDef_task_2eproto}, {
      &scc_info_ManualThreadDependencyDef_task_2eproto.base,}};

static void InitDefaultsscc_info_MemcpyAsyncDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_MemcpyAsyncDef_default_instance_;
    new (ptr) ::domi::MemcpyAsyncDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::MemcpyAsyncDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemcpyAsyncDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MemcpyAsyncDef_task_2eproto}, {}};

static void InitDefaultsscc_info_ModelTaskDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_ModelTaskDef_default_instance_;
    new (ptr) ::domi::ModelTaskDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::ModelTaskDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ModelTaskDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ModelTaskDef_task_2eproto}, {
      &scc_info_ModelTaskDef_AttrEntry_DoNotUse_task_2eproto.base,
      &scc_info_TaskDef_task_2eproto.base,}};

static void InitDefaultsscc_info_ModelTaskDef_AttrEntry_DoNotUse_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_ModelTaskDef_AttrEntry_DoNotUse_default_instance_;
    new (ptr) ::domi::ModelTaskDef_AttrEntry_DoNotUse();
  }
  ::domi::ModelTaskDef_AttrEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelTaskDef_AttrEntry_DoNotUse_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelTaskDef_AttrEntry_DoNotUse_task_2eproto}, {}};

static void InitDefaultsscc_info_NpuClearFloatStatusDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_NpuClearFloatStatusDef_default_instance_;
    new (ptr) ::domi::NpuClearFloatStatusDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::NpuClearFloatStatusDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NpuClearFloatStatusDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NpuClearFloatStatusDef_task_2eproto}, {}};

static void InitDefaultsscc_info_NpuGetFloatStatusDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_NpuGetFloatStatusDef_default_instance_;
    new (ptr) ::domi::NpuGetFloatStatusDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::NpuGetFloatStatusDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NpuGetFloatStatusDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NpuGetFloatStatusDef_task_2eproto}, {}};

static void InitDefaultsscc_info_StarsSqeHeaderDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_StarsSqeHeaderDef_default_instance_;
    new (ptr) ::domi::StarsSqeHeaderDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::StarsSqeHeaderDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StarsSqeHeaderDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StarsSqeHeaderDef_task_2eproto}, {}};

static void InitDefaultsscc_info_StreamActiveDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_StreamActiveDef_default_instance_;
    new (ptr) ::domi::StreamActiveDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::StreamActiveDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamActiveDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StreamActiveDef_task_2eproto}, {}};

static void InitDefaultsscc_info_StreamSwitchDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_StreamSwitchDef_default_instance_;
    new (ptr) ::domi::StreamSwitchDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::StreamSwitchDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamSwitchDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StreamSwitchDef_task_2eproto}, {}};

static void InitDefaultsscc_info_StreamSwitchNDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_StreamSwitchNDef_default_instance_;
    new (ptr) ::domi::StreamSwitchNDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::StreamSwitchNDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamSwitchNDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StreamSwitchNDef_task_2eproto}, {}};

static void InitDefaultsscc_info_TaskDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_TaskDef_default_instance_;
    new (ptr) ::domi::TaskDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::TaskDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<21> scc_info_TaskDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 21, 0, InitDefaultsscc_info_TaskDef_task_2eproto}, {
      &scc_info_KernelDef_task_2eproto.base,
      &scc_info_KernelExDef_task_2eproto.base,
      &scc_info_KernelHcclDef_task_2eproto.base,
      &scc_info_EventExDef_task_2eproto.base,
      &scc_info_LogTimeStampDef_task_2eproto.base,
      &scc_info_MemcpyAsyncDef_task_2eproto.base,
      &scc_info_StreamSwitchDef_task_2eproto.base,
      &scc_info_StreamActiveDef_task_2eproto.base,
      &scc_info_StreamSwitchNDef_task_2eproto.base,
      &scc_info_LabelSetDef_task_2eproto.base,
      &scc_info_LabelGotoExDef_task_2eproto.base,
      &scc_info_LabelSwitchByIndexDef_task_2eproto.base,
      &scc_info_KernelDefWithHandle_task_2eproto.base,
      &scc_info_FftsTaskDef_task_2eproto.base,
      &scc_info_FftsPlusTaskDef_task_2eproto.base,
      &scc_info_DSATaskDef_task_2eproto.base,
      &scc_info_CmoTaskDef_task_2eproto.base,
      &scc_info_CmoBarrierTaskDef_task_2eproto.base,
      &scc_info_NpuGetFloatStatusDef_task_2eproto.base,
      &scc_info_NpuClearFloatStatusDef_task_2eproto.base,
      &scc_info_DvppTaskDef_task_2eproto.base,}};

static void InitDefaultsscc_info_TicketCacheDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_TicketCacheDef_default_instance_;
    new (ptr) ::domi::TicketCacheDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::TicketCacheDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TicketCacheDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TicketCacheDef_task_2eproto}, {
      &scc_info_AutoThreadCacheDef_task_2eproto.base,
      &scc_info_ManualThreadCacheDef_task_2eproto.base,}};

static void InitDefaultsscc_info_aicpuKernelDef_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::domi::_aicpuKernelDef_default_instance_;
    new (ptr) ::domi::aicpuKernelDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::domi::aicpuKernelDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_aicpuKernelDef_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_aicpuKernelDef_task_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_task_2eproto[59];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_task_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_task_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_task_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::domi::ModelTaskDef_AttrEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::domi::ModelTaskDef_AttrEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::ModelTaskDef_AttrEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::domi::ModelTaskDef_AttrEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::ModelTaskDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::ModelTaskDef, version_),
  PROTOBUF_FIELD_OFFSET(::domi::ModelTaskDef, attr_),
  PROTOBUF_FIELD_OFFSET(::domi::ModelTaskDef, task_),
  PROTOBUF_FIELD_OFFSET(::domi::ModelTaskDef, memory_size_),
  PROTOBUF_FIELD_OFFSET(::domi::ModelTaskDef, stream_num_),
  PROTOBUF_FIELD_OFFSET(::domi::ModelTaskDef, event_num_),
  PROTOBUF_FIELD_OFFSET(::domi::ModelTaskDef, weight_size_),
  PROTOBUF_FIELD_OFFSET(::domi::ModelTaskDef, op_),
  PROTOBUF_FIELD_OFFSET(::domi::ModelTaskDef, base_addr_),
  PROTOBUF_FIELD_OFFSET(::domi::ModelTaskDef, weight_addr_),
  PROTOBUF_FIELD_OFFSET(::domi::ModelTaskDef, batch_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::TaskDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::TaskDef, id_),
  PROTOBUF_FIELD_OFFSET(::domi::TaskDef, type_),
  PROTOBUF_FIELD_OFFSET(::domi::TaskDef, stream_id_),
  PROTOBUF_FIELD_OFFSET(::domi::TaskDef, event_id_),
  PROTOBUF_FIELD_OFFSET(::domi::TaskDef, notify_id_),
  PROTOBUF_FIELD_OFFSET(::domi::TaskDef, kernel_),
  PROTOBUF_FIELD_OFFSET(::domi::TaskDef, kernel_ex_),
  PROTOBUF_FIELD_OFFSET(::domi::TaskDef, kernel_hccl_),
  PROTOBUF_FIELD_OFFSET(::domi::TaskDef, event_ex_),
  PROTOBUF_FIELD_OFFSET(::domi::TaskDef, log_timestamp_),
  PROTOBUF_FIELD_OFFSET(::domi::TaskDef, label_id_),
  PROTOBUF_FIELD_OFFSET(::domi::TaskDef, memcpy_async_),
  PROTOBUF_FIELD_OFFSET(::domi::TaskDef, stream_switch_),
  PROTOBUF_FIELD_OFFSET(::domi::TaskDef, stream_active_),
  PROTOBUF_FIELD_OFFSET(::domi::TaskDef, private_def_),
  PROTOBUF_FIELD_OFFSET(::domi::TaskDef, ops_kernel_store_ptr_),
  PROTOBUF_FIELD_OFFSET(::domi::TaskDef, stream_switch_n_),
  PROTOBUF_FIELD_OFFSET(::domi::TaskDef, label_set_),
  PROTOBUF_FIELD_OFFSET(::domi::TaskDef, label_goto_ex_),
  PROTOBUF_FIELD_OFFSET(::domi::TaskDef, label_switch_by_index_),
  PROTOBUF_FIELD_OFFSET(::domi::TaskDef, kernel_with_handle_),
  PROTOBUF_FIELD_OFFSET(::domi::TaskDef, ffts_task_),
  PROTOBUF_FIELD_OFFSET(::domi::TaskDef, ffts_plus_task_),
  PROTOBUF_FIELD_OFFSET(::domi::TaskDef, dsa_task_),
  PROTOBUF_FIELD_OFFSET(::domi::TaskDef, cmo_task_),
  PROTOBUF_FIELD_OFFSET(::domi::TaskDef, cmo_barrier_task_),
  PROTOBUF_FIELD_OFFSET(::domi::TaskDef, npu_get_float_status_),
  PROTOBUF_FIELD_OFFSET(::domi::TaskDef, npu_clear_float_status_),
  PROTOBUF_FIELD_OFFSET(::domi::TaskDef, dvpp_task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::KernelDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::KernelDef, context_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelDef, stub_func_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelDef, block_dim_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelDef, args_size_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelDef, args_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelDef, sm_desc_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelDef, flowtable_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelDef, so_name_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelDef, kernel_name_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelDef, kernel_ext_info_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelDef, kernel_ext_info_size_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelDef, args_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::KernelDefWithHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::KernelDefWithHandle, context_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelDefWithHandle, handle_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelDefWithHandle, dev_func_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelDefWithHandle, block_dim_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelDefWithHandle, args_size_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelDefWithHandle, args_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelDefWithHandle, sm_desc_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelDefWithHandle, original_kernel_key_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelDefWithHandle, node_info_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelDefWithHandle, args_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::KernelContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::KernelContext, kernel_type_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelContext, op_id_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelContext, kernel_func_id_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelContext, op_index_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelContext, is_flowtable_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelContext, args_offset_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelContext, args_count_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelContext, origin_op_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::ArgsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::ArgsInfo, arg_type_),
  PROTOBUF_FIELD_OFFSET(::domi::ArgsInfo, arg_format_),
  PROTOBUF_FIELD_OFFSET(::domi::ArgsInfo, start_index_),
  PROTOBUF_FIELD_OFFSET(::domi::ArgsInfo, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::KernelExDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::KernelExDef, flags_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelExDef, op_index_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelExDef, args_size_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelExDef, args_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelExDef, task_info_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelExDef, task_info_size_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelExDef, kernel_ext_info_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelExDef, kernel_ext_info_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::KernelHcclDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::KernelHcclDef, op_index_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelHcclDef, hccl_type_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelHcclDef, input_zero_copy_flag_),
  PROTOBUF_FIELD_OFFSET(::domi::KernelHcclDef, output_zero_copy_flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::EventExDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::EventExDef, op_index_),
  PROTOBUF_FIELD_OFFSET(::domi::EventExDef, event_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::LogTimeStampDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::LogTimeStampDef, logid_),
  PROTOBUF_FIELD_OFFSET(::domi::LogTimeStampDef, notify_),
  PROTOBUF_FIELD_OFFSET(::domi::LogTimeStampDef, flat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::MemcpyAsyncDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::MemcpyAsyncDef, dst_),
  PROTOBUF_FIELD_OFFSET(::domi::MemcpyAsyncDef, dst_max_),
  PROTOBUF_FIELD_OFFSET(::domi::MemcpyAsyncDef, src_),
  PROTOBUF_FIELD_OFFSET(::domi::MemcpyAsyncDef, count_),
  PROTOBUF_FIELD_OFFSET(::domi::MemcpyAsyncDef, kind_),
  PROTOBUF_FIELD_OFFSET(::domi::MemcpyAsyncDef, op_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::StreamSwitchDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::StreamSwitchDef, op_index_),
  PROTOBUF_FIELD_OFFSET(::domi::StreamSwitchDef, true_stream_id_),
  PROTOBUF_FIELD_OFFSET(::domi::StreamSwitchDef, value_),
  PROTOBUF_FIELD_OFFSET(::domi::StreamSwitchDef, value_ptr_),
  PROTOBUF_FIELD_OFFSET(::domi::StreamSwitchDef, data_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::StreamActiveDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::StreamActiveDef, op_index_),
  PROTOBUF_FIELD_OFFSET(::domi::StreamActiveDef, active_stream_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::StreamSwitchNDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::StreamSwitchNDef, op_index_),
  PROTOBUF_FIELD_OFFSET(::domi::StreamSwitchNDef, size_),
  PROTOBUF_FIELD_OFFSET(::domi::StreamSwitchNDef, target_value_),
  PROTOBUF_FIELD_OFFSET(::domi::StreamSwitchNDef, true_stream_id_),
  PROTOBUF_FIELD_OFFSET(::domi::StreamSwitchNDef, element_size_),
  PROTOBUF_FIELD_OFFSET(::domi::StreamSwitchNDef, data_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::LabelSetDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::LabelSetDef, op_index_),
  PROTOBUF_FIELD_OFFSET(::domi::LabelSetDef, label_id_),
  PROTOBUF_FIELD_OFFSET(::domi::LabelSetDef, model_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::LabelGotoExDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::LabelGotoExDef, op_index_),
  PROTOBUF_FIELD_OFFSET(::domi::LabelGotoExDef, label_id_),
  PROTOBUF_FIELD_OFFSET(::domi::LabelGotoExDef, model_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::LabelSwitchByIndexDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::LabelSwitchByIndexDef, op_index_),
  PROTOBUF_FIELD_OFFSET(::domi::LabelSwitchByIndexDef, label_max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::FftsTaskDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::FftsTaskDef, op_index_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsTaskDef, ffts_type_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsTaskDef, addr_size_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsTaskDef, ffts_desc_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsTaskDef, sub_task_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsTaskDef, ticket_cache_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::FftsDescInfoDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::FftsDescInfoDef, tm_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsDescInfoDef, di_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsDescInfoDef, dw_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsDescInfoDef, df_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsDescInfoDef, data_split_unit_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsDescInfoDef, prefetch_ost_num_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsDescInfoDef, cache_maintain_ost_num_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsDescInfoDef, aic_prefetch_upper_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsDescInfoDef, aic_prefetch_lower_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsDescInfoDef, aiv_prefetch_upper_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsDescInfoDef, aiv_prefetch_lower_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::FftsSubTaskDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::FftsSubTaskDef, sub_task_type_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsSubTaskDef, thread_dim_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsSubTaskDef, dst_tick_cache_vld_bitmap_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsSubTaskDef, src_tick_cache_vld_bitmap_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsSubTaskDef, src_data_out_of_subgraph_bitmap_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsSubTaskDef, dst_tick_cache_id_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsSubTaskDef, src_tick_cache_id_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsSubTaskDef, auto_thread_aic_aiv_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsSubTaskDef, manual_thread_aic_aiv_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsSubTaskDef, manual_thread_nop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::TicketCacheDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::TicketCacheDef, cache_option_),
  PROTOBUF_FIELD_OFFSET(::domi::TicketCacheDef, ticket_cache_window_),
  PROTOBUF_FIELD_OFFSET(::domi::TicketCacheDef, auto_thread_cache_),
  PROTOBUF_FIELD_OFFSET(::domi::TicketCacheDef, manual_thread_cache_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::AutoThreadAicAivDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::AutoThreadAicAivDef, task_addr_),
  PROTOBUF_FIELD_OFFSET(::domi::AutoThreadAicAivDef, task_addr_offset_),
  PROTOBUF_FIELD_OFFSET(::domi::AutoThreadAicAivDef, task_param_offset_),
  PROTOBUF_FIELD_OFFSET(::domi::AutoThreadAicAivDef, sat_mode_),
  PROTOBUF_FIELD_OFFSET(::domi::AutoThreadAicAivDef, schedule_mode_),
  PROTOBUF_FIELD_OFFSET(::domi::AutoThreadAicAivDef, cache_prefetch_cnt_),
  PROTOBUF_FIELD_OFFSET(::domi::AutoThreadAicAivDef, prefetch_enable_bitmap_),
  PROTOBUF_FIELD_OFFSET(::domi::AutoThreadAicAivDef, prefetch_once_bitmap_),
  PROTOBUF_FIELD_OFFSET(::domi::AutoThreadAicAivDef, tail_blk_dim_),
  PROTOBUF_FIELD_OFFSET(::domi::AutoThreadAicAivDef, non_tail_blk_dim_),
  PROTOBUF_FIELD_OFFSET(::domi::AutoThreadAicAivDef, non_tail_task_func_stub_),
  PROTOBUF_FIELD_OFFSET(::domi::AutoThreadAicAivDef, tail_task_func_stub_),
  PROTOBUF_FIELD_OFFSET(::domi::AutoThreadAicAivDef, src_prefetch_),
  PROTOBUF_FIELD_OFFSET(::domi::AutoThreadAicAivDef, input_output_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::AutoThreadCacheDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::AutoThreadCacheDef, data_addr_),
  PROTOBUF_FIELD_OFFSET(::domi::AutoThreadCacheDef, data_addr_offset_),
  PROTOBUF_FIELD_OFFSET(::domi::AutoThreadCacheDef, non_tail_data_len_),
  PROTOBUF_FIELD_OFFSET(::domi::AutoThreadCacheDef, tail_data_len_),
  PROTOBUF_FIELD_OFFSET(::domi::AutoThreadCacheDef, ticket_cache_ref_cnt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::AutoThreadPrefetchDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::AutoThreadPrefetchDef, data_addr_),
  PROTOBUF_FIELD_OFFSET(::domi::AutoThreadPrefetchDef, data_addr_offset_),
  PROTOBUF_FIELD_OFFSET(::domi::AutoThreadPrefetchDef, non_tail_data_len_),
  PROTOBUF_FIELD_OFFSET(::domi::AutoThreadPrefetchDef, tail_data_len_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::ManualThreadAicAivDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::ManualThreadAicAivDef, task_addr_),
  PROTOBUF_FIELD_OFFSET(::domi::ManualThreadAicAivDef, task_addr_offset_),
  PROTOBUF_FIELD_OFFSET(::domi::ManualThreadAicAivDef, task_param_offset_),
  PROTOBUF_FIELD_OFFSET(::domi::ManualThreadAicAivDef, sat_mode_),
  PROTOBUF_FIELD_OFFSET(::domi::ManualThreadAicAivDef, schedule_mode_),
  PROTOBUF_FIELD_OFFSET(::domi::ManualThreadAicAivDef, cache_prefetch_cnt_),
  PROTOBUF_FIELD_OFFSET(::domi::ManualThreadAicAivDef, prefetch_enable_bitmap_),
  PROTOBUF_FIELD_OFFSET(::domi::ManualThreadAicAivDef, prefetch_once_bitmap_),
  PROTOBUF_FIELD_OFFSET(::domi::ManualThreadAicAivDef, prefetch_once_dmu_num_),
  PROTOBUF_FIELD_OFFSET(::domi::ManualThreadAicAivDef, thread_prefetch_dmu_idx_),
  PROTOBUF_FIELD_OFFSET(::domi::ManualThreadAicAivDef, thread_blk_dim_),
  PROTOBUF_FIELD_OFFSET(::domi::ManualThreadAicAivDef, thread_task_func_stub_),
  PROTOBUF_FIELD_OFFSET(::domi::ManualThreadAicAivDef, prefetch_list_),
  PROTOBUF_FIELD_OFFSET(::domi::ManualThreadAicAivDef, src_dep_tbl_),
  PROTOBUF_FIELD_OFFSET(::domi::ManualThreadAicAivDef, input_output_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::ManualThreadNopDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::ManualThreadNopDef, src_dep_tbl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::ManualThreadCacheDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::ManualThreadCacheDef, dmu_list_),
  PROTOBUF_FIELD_OFFSET(::domi::ManualThreadCacheDef, slice_dmu_idx_),
  PROTOBUF_FIELD_OFFSET(::domi::ManualThreadCacheDef, ticket_cache_ref_cnt_tbl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::ManualThreadDmuDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::ManualThreadDmuDef, data_addr_),
  PROTOBUF_FIELD_OFFSET(::domi::ManualThreadDmuDef, num_outer_),
  PROTOBUF_FIELD_OFFSET(::domi::ManualThreadDmuDef, num_inner_),
  PROTOBUF_FIELD_OFFSET(::domi::ManualThreadDmuDef, stride_outer_),
  PROTOBUF_FIELD_OFFSET(::domi::ManualThreadDmuDef, len_inner_),
  PROTOBUF_FIELD_OFFSET(::domi::ManualThreadDmuDef, stride_inner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::ManualThreadDependencyDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::ManualThreadDependencyDef, dependency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::DSATaskDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::DSATaskDef, op_index_),
  PROTOBUF_FIELD_OFFSET(::domi::DSATaskDef, start_),
  PROTOBUF_FIELD_OFFSET(::domi::DSATaskDef, sqe_type_),
  PROTOBUF_FIELD_OFFSET(::domi::DSATaskDef, distribution_type_),
  PROTOBUF_FIELD_OFFSET(::domi::DSATaskDef, data_type_),
  PROTOBUF_FIELD_OFFSET(::domi::DSATaskDef, alg_type_),
  PROTOBUF_FIELD_OFFSET(::domi::DSATaskDef, input_vld_),
  PROTOBUF_FIELD_OFFSET(::domi::DSATaskDef, input_value_addr_flag_),
  PROTOBUF_FIELD_OFFSET(::domi::DSATaskDef, input1_value_or_ptr_),
  PROTOBUF_FIELD_OFFSET(::domi::DSATaskDef, input2_value_or_ptr_),
  PROTOBUF_FIELD_OFFSET(::domi::DSATaskDef, seed_value_or_ptr_),
  PROTOBUF_FIELD_OFFSET(::domi::DSATaskDef, random_count_value_or_ptr_),
  PROTOBUF_FIELD_OFFSET(::domi::DSATaskDef, args_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::DSATaskArgsDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::DSATaskArgsDef, output_addr_),
  PROTOBUF_FIELD_OFFSET(::domi::DSATaskArgsDef, workspace_philox_count_addr_),
  PROTOBUF_FIELD_OFFSET(::domi::DSATaskArgsDef, workspace_input_addr_),
  PROTOBUF_FIELD_OFFSET(::domi::DSATaskArgsDef, seed_value_or_addr_),
  PROTOBUF_FIELD_OFFSET(::domi::DSATaskArgsDef, random_count_value_or_addr_),
  PROTOBUF_FIELD_OFFSET(::domi::DSATaskArgsDef, input1_value_or_addr_),
  PROTOBUF_FIELD_OFFSET(::domi::DSATaskArgsDef, input2_value_or_addr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusTaskDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusTaskDef, op_index_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusTaskDef, addr_size_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusTaskDef, ffts_plus_sqe_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusTaskDef, ffts_plus_ctx_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusTaskDef, additional_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::AdditionalDataDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::AdditionalDataDef, data_type_),
  PROTOBUF_FIELD_OFFSET(::domi::AdditionalDataDef, context_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSqeDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSqeDef, sqe_header_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSqeDef, wrr_ratio_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSqeDef, sqe_index_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSqeDef, total_context_num_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSqeDef, ready_context_num_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSqeDef, preload_context_num_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSqeDef, prefetch_ost_num_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSqeDef, cmaint_ost_num_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSqeDef, aic_prefetch_lower_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSqeDef, aic_prefetch_upper_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSqeDef, aiv_prefetch_lower_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSqeDef, aiv_prefetch_upper_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSqeDef, data_split_unit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::StarsSqeHeaderDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::StarsSqeHeaderDef, l1_lock_),
  PROTOBUF_FIELD_OFFSET(::domi::StarsSqeHeaderDef, l1_unlock_),
  PROTOBUF_FIELD_OFFSET(::domi::StarsSqeHeaderDef, block_dim_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCtxDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCtxDef, op_index_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCtxDef, uniq_ctx_name_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCtxDef, context_type_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCtxDef, context_id_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCtxDef, op_type_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCtxDef, aic_aiv_ctx_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCtxDef, mix_aic_aiv_ctx_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCtxDef, sdma_ctx_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCtxDef, notify_ctx_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCtxDef, write_value_ctx_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCtxDef, aicpu_ctx_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCtxDef, data_ctx_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCtxDef, at_start_ctx_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCtxDef, at_end_ctx_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCtxDef, label_ctx_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCtxDef, case_switch_ctx_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCtxDef, case_default_ctx_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCtxDef, cond_switch_ctx_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCtxDef, cache_persist_ctx_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCtxDef, dsa_ctx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicAivCtxDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicAivCtxDef, successor_num_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicAivCtxDef, aten_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicAivCtxDef, prefetch_config_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicAivCtxDef, pred_cnt_init_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicAivCtxDef, pred_cnt_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicAivCtxDef, successor_list_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicAivCtxDef, schem_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicAivCtxDef, atm_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicAivCtxDef, prefetch_enable_bitmap_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicAivCtxDef, prefetch_once_bitmap_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicAivCtxDef, pmg_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicAivCtxDef, ns_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicAivCtxDef, part_id_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicAivCtxDef, qos_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicAivCtxDef, thread_id_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicAivCtxDef, thread_dim_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicAivCtxDef, non_tail_block_dim_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicAivCtxDef, tail_block_dim_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicAivCtxDef, task_param_ptr_offset_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicAivCtxDef, save_task_addr_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicAivCtxDef, task_addr_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicAivCtxDef, task_addr_offset_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicAivCtxDef, input_output_count_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicAivCtxDef, kernel_name_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicAivCtxDef, src_slot_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicAivCtxDef, policy_pri_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicAivCtxDef, thread_window_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusMixAicAivCtxDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusMixAicAivCtxDef, successor_num_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusMixAicAivCtxDef, aten_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusMixAicAivCtxDef, prefetch_config_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusMixAicAivCtxDef, pred_cnt_init_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusMixAicAivCtxDef, pred_cnt_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusMixAicAivCtxDef, successor_list_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusMixAicAivCtxDef, schem_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusMixAicAivCtxDef, atm_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusMixAicAivCtxDef, prefetch_enable_bitmap_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusMixAicAivCtxDef, prefetch_once_bitmap_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusMixAicAivCtxDef, pmg_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusMixAicAivCtxDef, ns_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusMixAicAivCtxDef, part_id_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusMixAicAivCtxDef, qos_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusMixAicAivCtxDef, non_tail_block_ratio_n_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusMixAicAivCtxDef, tail_block_ratio_n_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusMixAicAivCtxDef, thread_id_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusMixAicAivCtxDef, thread_dim_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusMixAicAivCtxDef, non_tail_block_dim_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusMixAicAivCtxDef, tail_block_dim_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusMixAicAivCtxDef, aic_task_param_ptr_offset_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusMixAicAivCtxDef, aiv_task_param_ptr_offset_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusMixAicAivCtxDef, kernel_name_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusMixAicAivCtxDef, task_addr_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusMixAicAivCtxDef, task_addr_offset_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusMixAicAivCtxDef, input_output_count_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusMixAicAivCtxDef, save_task_addr_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusMixAicAivCtxDef, src_slot_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusMixAicAivCtxDef, policy_pri_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusMixAicAivCtxDef, thread_window_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSdmaCtxDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSdmaCtxDef, successor_num_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSdmaCtxDef, aten_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSdmaCtxDef, pred_cnt_init_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSdmaCtxDef, pred_cnt_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSdmaCtxDef, successor_list_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSdmaCtxDef, atm_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSdmaCtxDef, pmg_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSdmaCtxDef, ns_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSdmaCtxDef, part_id_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSdmaCtxDef, qos_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSdmaCtxDef, thread_id_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSdmaCtxDef, thread_dim_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSdmaCtxDef, sdma_sqe_header_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSdmaCtxDef, src_stream_id_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSdmaCtxDef, src_sub_stream_id_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSdmaCtxDef, dst_stream_id_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSdmaCtxDef, dst_sub_stream_id_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSdmaCtxDef, src_addr_base_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSdmaCtxDef, src_addr_offset_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSdmaCtxDef, dst_addr_base_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSdmaCtxDef, dst_addr_offset_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSdmaCtxDef, non_tail_data_len_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusSdmaCtxDef, tail_data_len_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusNotifyCtxDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusNotifyCtxDef, successor_num_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusNotifyCtxDef, aten_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusNotifyCtxDef, pred_cnt_init_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusNotifyCtxDef, pred_cnt_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusNotifyCtxDef, successor_list_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusNotifyCtxDef, satm_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusNotifyCtxDef, atm_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusNotifyCtxDef, thread_id_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusNotifyCtxDef, thread_dim_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusNotifyCtxDef, notify_id_base_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusNotifyCtxDef, auto_window_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusNotifyCtxDef, notify_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusWriteValueCtxDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusWriteValueCtxDef, successor_num_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusWriteValueCtxDef, aten_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusWriteValueCtxDef, pred_cnt_init_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusWriteValueCtxDef, pred_cnt_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusWriteValueCtxDef, successor_list_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusWriteValueCtxDef, atm_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusWriteValueCtxDef, thread_id_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusWriteValueCtxDef, thread_dim_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusWriteValueCtxDef, aw_size_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusWriteValueCtxDef, aw_snoop_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusWriteValueCtxDef, aw_cache_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusWriteValueCtxDef, aw_prot_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusWriteValueCtxDef, aw_va_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusWriteValueCtxDef, ar_size_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusWriteValueCtxDef, ar_snoop_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusWriteValueCtxDef, ar_cache_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusWriteValueCtxDef, ar_prot_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusWriteValueCtxDef, ar_va_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusWriteValueCtxDef, write_addr_base_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusWriteValueCtxDef, write_addr_offset_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusWriteValueCtxDef, write_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicpuCtxDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicpuCtxDef, successor_num_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicpuCtxDef, aten_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicpuCtxDef, pred_cnt_init_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicpuCtxDef, pred_cnt_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicpuCtxDef, successor_list_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicpuCtxDef, atm_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicpuCtxDef, sqe_index_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicpuCtxDef, kernel_type_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicpuCtxDef, bm_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicpuCtxDef, topic_type_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicpuCtxDef, qos_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicpuCtxDef, thread_id_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicpuCtxDef, thread_dim_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicpuCtxDef, non_tail_block_dim_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicpuCtxDef, tail_block_dim_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicpuCtxDef, sub_topic_id_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicpuCtxDef, topic_id_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicpuCtxDef, group_id_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicpuCtxDef, task_param_offset_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAicpuCtxDef, kernel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::aicpuKernelDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::aicpuKernelDef, args_size_),
  PROTOBUF_FIELD_OFFSET(::domi::aicpuKernelDef, args_),
  PROTOBUF_FIELD_OFFSET(::domi::aicpuKernelDef, so_name_),
  PROTOBUF_FIELD_OFFSET(::domi::aicpuKernelDef, kernel_name_),
  PROTOBUF_FIELD_OFFSET(::domi::aicpuKernelDef, kernel_ext_info_),
  PROTOBUF_FIELD_OFFSET(::domi::aicpuKernelDef, kernel_ext_info_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDataCtxDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDataCtxDef, successor_num_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDataCtxDef, aten_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDataCtxDef, cnt_init_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDataCtxDef, cnt_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDataCtxDef, successor_list_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDataCtxDef, atm_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDataCtxDef, pmg_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDataCtxDef, ns_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDataCtxDef, part_id_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDataCtxDef, qos_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDataCtxDef, orig_consumer_counter_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDataCtxDef, run_consumer_counter_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDataCtxDef, thread_id_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDataCtxDef, thread_dim_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDataCtxDef, addr_base_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDataCtxDef, addr_offset_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDataCtxDef, non_tail_num_outter_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDataCtxDef, non_tail_num_inner_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDataCtxDef, non_tail_len_inner_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDataCtxDef, non_tail_stride_outter_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDataCtxDef, non_tail_stride_inner_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDataCtxDef, tail_num_outter_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDataCtxDef, tail_num_inner_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDataCtxDef, tail_len_inner_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDataCtxDef, tail_stride_outter_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDataCtxDef, tail_stride_inner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAtStartCtxDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAtStartCtxDef, successor_num_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAtStartCtxDef, aten_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAtStartCtxDef, pred_cnt_init_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAtStartCtxDef, pred_cnt_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAtStartCtxDef, successor_list_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAtStartCtxDef, thread_id_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAtStartCtxDef, thread_dim_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAtStartCtxDef, thread_id_init_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAtStartCtxDef, thread_window_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAtEndCtxDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAtEndCtxDef, at_start_slot_num_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAtEndCtxDef, out_label_slot_num_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAtEndCtxDef, aten_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAtEndCtxDef, pred_cnt_init_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAtEndCtxDef, pred_cnt_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAtEndCtxDef, succ_at_start_slot_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAtEndCtxDef, succ_out_label_slot_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusAtEndCtxDef, thread_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusLabelCtxDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusLabelCtxDef, successor_num_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusLabelCtxDef, pred_cnt_init_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusLabelCtxDef, pred_cnt_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusLabelCtxDef, successor_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCaseSwitchCtxDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCaseSwitchCtxDef, successor_num_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCaseSwitchCtxDef, aten_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCaseSwitchCtxDef, start_label_id_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCaseSwitchCtxDef, label_list_len_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCaseSwitchCtxDef, pred_cnt_init_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCaseSwitchCtxDef, pred_cnt_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCaseSwitchCtxDef, successor_list_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCaseSwitchCtxDef, atm_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCaseSwitchCtxDef, thread_id_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCaseSwitchCtxDef, thread_dim_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCaseSwitchCtxDef, ar_size_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCaseSwitchCtxDef, snoop_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCaseSwitchCtxDef, ar_cache_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCaseSwitchCtxDef, ar_prot_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCaseSwitchCtxDef, va_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCaseSwitchCtxDef, load_addr0_base_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCaseSwitchCtxDef, ld0_en_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCaseSwitchCtxDef, load_addr0_offset_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCaseSwitchCtxDef, load_addr1_base_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCaseSwitchCtxDef, ld1_en_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCaseSwitchCtxDef, load_addr1_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCaseDefaultCtxDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCaseDefaultCtxDef, successor_num_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCaseDefaultCtxDef, aten_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCaseDefaultCtxDef, start_label_id_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCaseDefaultCtxDef, label_list_len_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCaseDefaultCtxDef, pred_cnt_init_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCaseDefaultCtxDef, pred_cnt_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCaseDefaultCtxDef, successor_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCondSwitchCtxDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCondSwitchCtxDef, true_successor_num_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCondSwitchCtxDef, false_successor_num_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCondSwitchCtxDef, aten_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCondSwitchCtxDef, condition_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCondSwitchCtxDef, pred_cnt_init_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCondSwitchCtxDef, pred_cnt_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCondSwitchCtxDef, true_successor_list_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCondSwitchCtxDef, false_successor_list_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCondSwitchCtxDef, atm_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCondSwitchCtxDef, thread_id_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCondSwitchCtxDef, thread_dim_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCondSwitchCtxDef, ar_size_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCondSwitchCtxDef, snoop_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCondSwitchCtxDef, ar_cache_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCondSwitchCtxDef, ar_prot_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCondSwitchCtxDef, va_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCondSwitchCtxDef, load_addr0_base_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCondSwitchCtxDef, ld0_en_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCondSwitchCtxDef, load_addr0_offset_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCondSwitchCtxDef, load_addr1_base_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCondSwitchCtxDef, ld1_en_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCondSwitchCtxDef, load_addr1_offset_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCondSwitchCtxDef, cmp_value_1_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCondSwitchCtxDef, cmp_value_2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCachePersistCtxDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCachePersistCtxDef, successor_num_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCachePersistCtxDef, aten_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCachePersistCtxDef, prefetch_config_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCachePersistCtxDef, pred_cnt_init_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCachePersistCtxDef, pred_cnt_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCachePersistCtxDef, successor_list_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCachePersistCtxDef, persistent_size_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCachePersistCtxDef, persistent_en_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusCachePersistCtxDef, persistent_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDsaCtxDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDsaCtxDef, successor_num_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDsaCtxDef, aten_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDsaCtxDef, pred_cnt_init_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDsaCtxDef, pred_cnt_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDsaCtxDef, successor_list_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDsaCtxDef, atm_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDsaCtxDef, address_offset_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDsaCtxDef, thread_id_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDsaCtxDef, thread_dim_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDsaCtxDef, start_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDsaCtxDef, distribution_type_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDsaCtxDef, data_type_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDsaCtxDef, alg_type_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDsaCtxDef, input_vld_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDsaCtxDef, input_value_addr_flag_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDsaCtxDef, input1_value_or_ptr_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDsaCtxDef, input2_value_or_ptr_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDsaCtxDef, seed_value_or_ptr_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDsaCtxDef, random_count_value_or_ptr_),
  PROTOBUF_FIELD_OFFSET(::domi::FftsPlusDsaCtxDef, args_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::CmoTaskDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::CmoTaskDef, cmo_type_),
  PROTOBUF_FIELD_OFFSET(::domi::CmoTaskDef, logic_id_),
  PROTOBUF_FIELD_OFFSET(::domi::CmoTaskDef, op_code_),
  PROTOBUF_FIELD_OFFSET(::domi::CmoTaskDef, qos_),
  PROTOBUF_FIELD_OFFSET(::domi::CmoTaskDef, part_id_),
  PROTOBUF_FIELD_OFFSET(::domi::CmoTaskDef, pmg_),
  PROTOBUF_FIELD_OFFSET(::domi::CmoTaskDef, num_inner_),
  PROTOBUF_FIELD_OFFSET(::domi::CmoTaskDef, num_outer_),
  PROTOBUF_FIELD_OFFSET(::domi::CmoTaskDef, length_inner_),
  PROTOBUF_FIELD_OFFSET(::domi::CmoTaskDef, source_addr_),
  PROTOBUF_FIELD_OFFSET(::domi::CmoTaskDef, strider_outer_),
  PROTOBUF_FIELD_OFFSET(::domi::CmoTaskDef, strider_inner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::CmoBarrierTaskDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::CmoBarrierTaskDef, logic_id_num_),
  PROTOBUF_FIELD_OFFSET(::domi::CmoBarrierTaskDef, barrier_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::CmoBarrierInfoDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::CmoBarrierInfoDef, cmo_type_),
  PROTOBUF_FIELD_OFFSET(::domi::CmoBarrierInfoDef, logic_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::NpuGetFloatStatusDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::NpuGetFloatStatusDef, output_addr_),
  PROTOBUF_FIELD_OFFSET(::domi::NpuGetFloatStatusDef, output_size_),
  PROTOBUF_FIELD_OFFSET(::domi::NpuGetFloatStatusDef, mode_),
  PROTOBUF_FIELD_OFFSET(::domi::NpuGetFloatStatusDef, op_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::NpuClearFloatStatusDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::NpuClearFloatStatusDef, mode_),
  PROTOBUF_FIELD_OFFSET(::domi::NpuClearFloatStatusDef, op_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::domi::DvppTaskDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::domi::DvppTaskDef, op_index_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::domi::ModelTaskDef_AttrEntry_DoNotUse)},
  { 9, -1, sizeof(::domi::ModelTaskDef)},
  { 25, -1, sizeof(::domi::TaskDef)},
  { 59, -1, sizeof(::domi::KernelDef)},
  { 76, -1, sizeof(::domi::KernelDefWithHandle)},
  { 91, -1, sizeof(::domi::KernelContext)},
  { 104, -1, sizeof(::domi::ArgsInfo)},
  { 113, -1, sizeof(::domi::KernelExDef)},
  { 126, -1, sizeof(::domi::KernelHcclDef)},
  { 135, -1, sizeof(::domi::EventExDef)},
  { 142, -1, sizeof(::domi::LogTimeStampDef)},
  { 150, -1, sizeof(::domi::MemcpyAsyncDef)},
  { 161, -1, sizeof(::domi::StreamSwitchDef)},
  { 171, -1, sizeof(::domi::StreamActiveDef)},
  { 178, -1, sizeof(::domi::StreamSwitchNDef)},
  { 189, -1, sizeof(::domi::LabelSetDef)},
  { 197, -1, sizeof(::domi::LabelGotoExDef)},
  { 205, -1, sizeof(::domi::LabelSwitchByIndexDef)},
  { 212, -1, sizeof(::domi::FftsTaskDef)},
  { 223, -1, sizeof(::domi::FftsDescInfoDef)},
  { 239, -1, sizeof(::domi::FftsSubTaskDef)},
  { 254, -1, sizeof(::domi::TicketCacheDef)},
  { 263, -1, sizeof(::domi::AutoThreadAicAivDef)},
  { 282, -1, sizeof(::domi::AutoThreadCacheDef)},
  { 292, -1, sizeof(::domi::AutoThreadPrefetchDef)},
  { 301, -1, sizeof(::domi::ManualThreadAicAivDef)},
  { 321, -1, sizeof(::domi::ManualThreadNopDef)},
  { 327, -1, sizeof(::domi::ManualThreadCacheDef)},
  { 335, -1, sizeof(::domi::ManualThreadDmuDef)},
  { 346, -1, sizeof(::domi::ManualThreadDependencyDef)},
  { 352, -1, sizeof(::domi::DSATaskDef)},
  { 370, -1, sizeof(::domi::DSATaskArgsDef)},
  { 382, -1, sizeof(::domi::FftsPlusTaskDef)},
  { 392, -1, sizeof(::domi::AdditionalDataDef)},
  { 399, -1, sizeof(::domi::FftsPlusSqeDef)},
  { 417, -1, sizeof(::domi::StarsSqeHeaderDef)},
  { 425, -1, sizeof(::domi::FftsPlusCtxDef)},
  { 450, -1, sizeof(::domi::FftsPlusAicAivCtxDef)},
  { 482, -1, sizeof(::domi::FftsPlusMixAicAivCtxDef)},
  { 517, -1, sizeof(::domi::FftsPlusSdmaCtxDef)},
  { 545, -1, sizeof(::domi::FftsPlusNotifyCtxDef)},
  { 562, -1, sizeof(::domi::FftsPlusWriteValueCtxDef)},
  { 588, -1, sizeof(::domi::FftsPlusAicpuCtxDef)},
  { 613, -1, sizeof(::domi::aicpuKernelDef)},
  { 624, -1, sizeof(::domi::FftsPlusDataCtxDef)},
  { 655, -1, sizeof(::domi::FftsPlusAtStartCtxDef)},
  { 669, -1, sizeof(::domi::FftsPlusAtEndCtxDef)},
  { 682, -1, sizeof(::domi::FftsPlusLabelCtxDef)},
  { 691, -1, sizeof(::domi::FftsPlusCaseSwitchCtxDef)},
  { 717, -1, sizeof(::domi::FftsPlusCaseDefaultCtxDef)},
  { 729, -1, sizeof(::domi::FftsPlusCondSwitchCtxDef)},
  { 758, -1, sizeof(::domi::FftsPlusCachePersistCtxDef)},
  { 772, -1, sizeof(::domi::FftsPlusDsaCtxDef)},
  { 797, -1, sizeof(::domi::CmoTaskDef)},
  { 814, -1, sizeof(::domi::CmoBarrierTaskDef)},
  { 821, -1, sizeof(::domi::CmoBarrierInfoDef)},
  { 828, -1, sizeof(::domi::NpuGetFloatStatusDef)},
  { 837, -1, sizeof(::domi::NpuClearFloatStatusDef)},
  { 844, -1, sizeof(::domi::DvppTaskDef)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_ModelTaskDef_AttrEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_ModelTaskDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_TaskDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_KernelDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_KernelDefWithHandle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_KernelContext_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_ArgsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_KernelExDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_KernelHcclDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_EventExDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_LogTimeStampDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_MemcpyAsyncDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_StreamSwitchDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_StreamActiveDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_StreamSwitchNDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_LabelSetDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_LabelGotoExDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_LabelSwitchByIndexDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_FftsTaskDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_FftsDescInfoDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_FftsSubTaskDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_TicketCacheDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_AutoThreadAicAivDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_AutoThreadCacheDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_AutoThreadPrefetchDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_ManualThreadAicAivDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_ManualThreadNopDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_ManualThreadCacheDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_ManualThreadDmuDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_ManualThreadDependencyDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_DSATaskDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_DSATaskArgsDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_FftsPlusTaskDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_AdditionalDataDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_FftsPlusSqeDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_StarsSqeHeaderDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_FftsPlusCtxDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_FftsPlusAicAivCtxDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_FftsPlusMixAicAivCtxDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_FftsPlusSdmaCtxDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_FftsPlusNotifyCtxDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_FftsPlusWriteValueCtxDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_FftsPlusAicpuCtxDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_aicpuKernelDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_FftsPlusDataCtxDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_FftsPlusAtStartCtxDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_FftsPlusAtEndCtxDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_FftsPlusLabelCtxDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_FftsPlusCaseSwitchCtxDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_FftsPlusCaseDefaultCtxDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_FftsPlusCondSwitchCtxDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_FftsPlusCachePersistCtxDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_FftsPlusDsaCtxDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_CmoTaskDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_CmoBarrierTaskDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_CmoBarrierInfoDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_NpuGetFloatStatusDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_NpuClearFloatStatusDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::domi::_DvppTaskDef_default_instance_),
};

const char descriptor_table_protodef_task_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ntask.proto\022\004domi\"\255\002\n\014ModelTaskDef\022\017\n\007v"
  "ersion\030\001 \001(\t\022*\n\004attr\030\t \003(\0132\034.domi.ModelT"
  "askDef.AttrEntry\022\033\n\004task\030\n \003(\0132\r.domi.Ta"
  "skDef\022\023\n\013memory_size\030\013 \001(\004\022\022\n\nstream_num"
  "\030\014 \001(\r\022\021\n\tevent_num\030\r \001(\r\022\023\n\013weight_size"
  "\030\016 \001(\004\022\n\n\002op\030\017 \003(\014\022\021\n\tbase_addr\030\020 \001(\004\022\023\n"
  "\013weight_addr\030\021 \001(\004\022\021\n\tbatch_num\030\022 \001(\r\032+\n"
  "\tAttrEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\002"
  "8\001\"\320\010\n\007TaskDef\022\n\n\002id\030\001 \001(\r\022\014\n\004type\030\002 \001(\r"
  "\022\021\n\tstream_id\030\n \001(\r\022\020\n\010event_id\030\013 \001(\r\022\021\n"
  "\tnotify_id\030\014 \001(\r\022\037\n\006kernel\030\024 \001(\0132\017.domi."
  "KernelDef\022$\n\tkernel_ex\030\025 \001(\0132\021.domi.Kern"
  "elExDef\022(\n\013kernel_hccl\030\031 \001(\0132\023.domi.Kern"
  "elHcclDef\022\"\n\010event_ex\030\032 \001(\0132\020.domi.Event"
  "ExDef\022,\n\rlog_timestamp\030\034 \001(\0132\025.domi.LogT"
  "imeStampDef\022\020\n\010label_id\030\036 \001(\r\022*\n\014memcpy_"
  "async\030\037 \001(\0132\024.domi.MemcpyAsyncDef\022,\n\rstr"
  "eam_switch\030  \001(\0132\025.domi.StreamSwitchDef\022"
  ",\n\rstream_active\030! \001(\0132\025.domi.StreamActi"
  "veDef\022\023\n\013private_def\030\" \001(\014\022\034\n\024ops_kernel"
  "_store_ptr\030# \001(\004\022/\n\017stream_switch_n\030$ \001("
  "\0132\026.domi.StreamSwitchNDef\022$\n\tlabel_set\030%"
  " \001(\0132\021.domi.LabelSetDef\022+\n\rlabel_goto_ex"
  "\030& \001(\0132\024.domi.LabelGotoExDef\022:\n\025label_sw"
  "itch_by_index\030\' \001(\0132\033.domi.LabelSwitchBy"
  "IndexDef\0225\n\022kernel_with_handle\030( \001(\0132\031.d"
  "omi.KernelDefWithHandle\022$\n\tffts_task\030) \001"
  "(\0132\021.domi.FftsTaskDef\022-\n\016ffts_plus_task\030"
  "* \001(\0132\025.domi.FftsPlusTaskDef\022\"\n\010dsa_task"
  "\030+ \001(\0132\020.domi.DSATaskDef\022\"\n\010cmo_task\030, \001"
  "(\0132\020.domi.CmoTaskDef\0221\n\020cmo_barrier_task"
  "\030- \001(\0132\027.domi.CmoBarrierTaskDef\0228\n\024npu_g"
  "et_float_status\030. \001(\0132\032.domi.NpuGetFloat"
  "StatusDef\022<\n\026npu_clear_float_status\030/ \001("
  "\0132\034.domi.NpuClearFloatStatusDef\022$\n\tdvpp_"
  "task\0300 \001(\0132\021.domi.DvppTaskDef\"\234\002\n\tKernel"
  "Def\022$\n\007context\030\001 \001(\0132\023.domi.KernelContex"
  "t\022\021\n\tstub_func\030\n \001(\t\022\021\n\tblock_dim\030\013 \001(\r\022"
  "\021\n\targs_size\030\014 \001(\r\022\014\n\004args\030\r \001(\014\022\017\n\007sm_d"
  "esc\030\016 \001(\014\022\021\n\tflowtable\030\017 \001(\014\022\017\n\007so_name\030"
  "\020 \001(\t\022\023\n\013kernel_name\030\021 \001(\t\022\027\n\017kernel_ext"
  "_info\030\022 \001(\014\022\034\n\024kernel_ext_info_size\030\023 \001("
  "\r\022!\n\targs_info\030\024 \003(\0132\016.domi.ArgsInfo\"\365\001\n"
  "\023KernelDefWithHandle\022$\n\007context\030\001 \001(\0132\023."
  "domi.KernelContext\022\016\n\006handle\030\n \001(\004\022\020\n\010de"
  "v_func\030\013 \001(\t\022\021\n\tblock_dim\030\014 \001(\r\022\021\n\targs_"
  "size\030\r \001(\r\022\014\n\004args\030\016 \001(\014\022\017\n\007sm_desc\030\017 \001("
  "\014\022\033\n\023original_kernel_key\030\020 \001(\t\022\021\n\tnode_i"
  "nfo\030\021 \001(\t\022!\n\targs_info\030\022 \003(\0132\016.domi.Args"
  "Info\"\265\001\n\rKernelContext\022\023\n\013kernel_type\030\001 "
  "\001(\r\022\r\n\005op_id\030\002 \001(\r\022\026\n\016kernel_func_id\030\003 \001"
  "(\r\022\020\n\010op_index\030\004 \001(\r\022\024\n\014is_flowtable\030\005 \001"
  "(\010\022\023\n\013args_offset\030\006 \001(\014\022\022\n\nargs_count\030\007 "
  "\001(\r\022\027\n\017origin_op_index\030\010 \003(\r\"\335\001\n\010ArgsInf"
  "o\022)\n\010arg_type\030\001 \001(\0162\027.domi.ArgsInfo.Args"
  "Type\022-\n\narg_format\030\002 \001(\0162\031.domi.ArgsInfo"
  ".ArgsFormat\022\023\n\013start_index\030\003 \001(\005\022\014\n\004size"
  "\030\004 \001(\r\"!\n\010ArgsType\022\t\n\005INPUT\020\000\022\n\n\006OUTPUT\020"
  "\001\"1\n\nArgsFormat\022\017\n\013DIRECT_ADDR\020\000\022\022\n\016SECO"
  "NDARY_ADDR\020\001\"\261\001\n\013KernelExDef\022\r\n\005flags\030\001 "
  "\001(\r\022\020\n\010op_index\030\004 \001(\r\022\021\n\targs_size\030\014 \001(\r"
  "\022\014\n\004args\030\r \001(\014\022\021\n\ttask_info\030\016 \001(\014\022\026\n\016tas"
  "k_info_size\030\017 \001(\r\022\027\n\017kernel_ext_info\030\020 \001"
  "(\014\022\034\n\024kernel_ext_info_size\030\021 \001(\r\"q\n\rKern"
  "elHcclDef\022\020\n\010op_index\030\010 \001(\r\022\021\n\thccl_type"
  "\030\t \001(\t\022\034\n\024input_zero_copy_flag\030\n \003(\005\022\035\n\025"
  "output_zero_copy_flag\030\013 \003(\005\"2\n\nEventExDe"
  "f\022\020\n\010op_index\030\001 \001(\r\022\022\n\nevent_type\030\002 \001(\r\""
  ">\n\017LogTimeStampDef\022\r\n\005logid\030\001 \001(\004\022\016\n\006not"
  "ify\030\002 \001(\010\022\014\n\004flat\030\003 \001(\r\"j\n\016MemcpyAsyncDe"
  "f\022\013\n\003dst\030\001 \001(\004\022\017\n\007dst_max\030\002 \001(\004\022\013\n\003src\030\003"
  " \001(\004\022\r\n\005count\030\004 \001(\004\022\014\n\004kind\030\005 \001(\r\022\020\n\010op_"
  "index\030\006 \001(\r\"p\n\017StreamSwitchDef\022\020\n\010op_ind"
  "ex\030\001 \001(\r\022\026\n\016true_stream_id\030\002 \001(\r\022\r\n\005valu"
  "e\030\003 \001(\003\022\021\n\tvalue_ptr\030\004 \001(\004\022\021\n\tdata_type\030"
  "\005 \001(\r\"=\n\017StreamActiveDef\022\020\n\010op_index\030\001 \001"
  "(\r\022\030\n\020active_stream_id\030\002 \001(\r\"\211\001\n\020StreamS"
  "witchNDef\022\020\n\010op_index\030\001 \001(\r\022\014\n\004size\030\002 \001("
  "\r\022\024\n\014target_value\030\003 \003(\003\022\026\n\016true_stream_i"
  "d\030\004 \003(\r\022\024\n\014element_size\030\005 \001(\r\022\021\n\tdata_ty"
  "pe\030\006 \001(\r\"C\n\013LabelSetDef\022\020\n\010op_index\030\001 \001("
  "\r\022\020\n\010label_id\030\002 \001(\r\022\020\n\010model_id\030\003 \001(\r\"F\n"
  "\016LabelGotoExDef\022\020\n\010op_index\030\001 \001(\r\022\020\n\010lab"
  "el_id\030\002 \001(\r\022\020\n\010model_id\030\003 \001(\r\"<\n\025LabelSw"
  "itchByIndexDef\022\020\n\010op_index\030\001 \001(\r\022\021\n\tlabe"
  "l_max\030\002 \001(\r\"\303\001\n\013FftsTaskDef\022\020\n\010op_index\030"
  "\001 \001(\r\022\021\n\tffts_type\030\002 \001(\r\022\021\n\taddr_size\030\003 "
  "\001(\r\022(\n\tffts_desc\030\004 \001(\0132\025.domi.FftsDescIn"
  "foDef\022&\n\010sub_task\030\005 \003(\0132\024.domi.FftsSubTa"
  "skDef\022*\n\014ticket_cache\030\006 \003(\0132\024.domi.Ticke"
  "tCacheDef\"\204\002\n\017FftsDescInfoDef\022\n\n\002tm\030\001 \001("
  "\r\022\n\n\002di\030\002 \001(\r\022\n\n\002dw\030\003 \001(\r\022\n\n\002df\030\004 \001(\r\022\027\n"
  "\017data_split_unit\030\005 \001(\r\022\030\n\020prefetch_ost_n"
  "um\030\006 \001(\r\022\036\n\026cache_maintain_ost_num\030\007 \001(\r"
  "\022\032\n\022aic_prefetch_upper\030\010 \001(\r\022\032\n\022aic_pref"
  "etch_lower\030\t \001(\r\022\032\n\022aiv_prefetch_upper\030\n"
  " \001(\r\022\032\n\022aiv_prefetch_lower\030\013 \001(\r\"\211\003\n\016Fft"
  "sSubTaskDef\022\025\n\rsub_task_type\030\001 \001(\r\022\022\n\nth"
  "read_dim\030\002 \001(\r\022!\n\031dst_tick_cache_vld_bit"
  "map\030\003 \001(\r\022!\n\031src_tick_cache_vld_bitmap\030\004"
  " \001(\r\022\'\n\037src_data_out_of_subgraph_bitmap\030"
  "\005 \001(\r\022\031\n\021dst_tick_cache_id\030\006 \003(\r\022\031\n\021src_"
  "tick_cache_id\030\007 \003(\r\0226\n\023auto_thread_aic_a"
  "iv\030\010 \001(\0132\031.domi.AutoThreadAicAivDef\022:\n\025m"
  "anual_thread_aic_aiv\030\t \001(\0132\033.domi.Manual"
  "ThreadAicAivDef\0223\n\021manual_thread_nop\030\n \001"
  "(\0132\030.domi.ManualThreadNopDef\"\261\001\n\016TicketC"
  "acheDef\022\024\n\014cache_option\030\001 \001(\r\022\033\n\023ticket_"
  "cache_window\030\002 \001(\r\0223\n\021auto_thread_cache\030"
  "\003 \001(\0132\030.domi.AutoThreadCacheDef\0227\n\023manua"
  "l_thread_cache\030\004 \001(\0132\032.domi.ManualThread"
  "CacheDef\"\235\003\n\023AutoThreadAicAivDef\022\021\n\ttask"
  "_addr\030\001 \003(\004\022\030\n\020task_addr_offset\030\002 \003(\004\022\031\n"
  "\021task_param_offset\030\003 \001(\r\022\020\n\010sat_mode\030\004 \001"
  "(\r\022\025\n\rschedule_mode\030\005 \001(\r\022\032\n\022cache_prefe"
  "tch_cnt\030\006 \001(\r\022\036\n\026prefetch_enable_bitmap\030"
  "\007 \001(\r\022\034\n\024prefetch_once_bitmap\030\010 \001(\r\022\024\n\014t"
  "ail_blk_dim\030\t \001(\r\022\030\n\020non_tail_blk_dim\030\n "
  "\001(\r\022\037\n\027non_tail_task_func_stub\030\013 \001(\t\022\033\n\023"
  "tail_task_func_stub\030\014 \001(\t\0221\n\014src_prefetc"
  "h\030\r \003(\0132\033.domi.AutoThreadPrefetchDef\022\032\n\022"
  "input_output_count\030\016 \001(\r\"\221\001\n\022AutoThreadC"
  "acheDef\022\021\n\tdata_addr\030\001 \001(\004\022\030\n\020data_addr_"
  "offset\030\002 \001(\r\022\031\n\021non_tail_data_len\030\003 \001(\r\022"
  "\025\n\rtail_data_len\030\004 \001(\r\022\034\n\024ticket_cache_r"
  "ef_cnt\030\005 \001(\r\"v\n\025AutoThreadPrefetchDef\022\021\n"
  "\tdata_addr\030\001 \001(\004\022\030\n\020data_addr_offset\030\002 \001"
  "(\r\022\031\n\021non_tail_data_len\030\003 \001(\r\022\025\n\rtail_da"
  "ta_len\030\004 \001(\r\"\334\003\n\025ManualThreadAicAivDef\022\021"
  "\n\ttask_addr\030\001 \003(\004\022\030\n\020task_addr_offset\030\002 "
  "\003(\004\022\031\n\021task_param_offset\030\003 \001(\r\022\020\n\010sat_mo"
  "de\030\004 \001(\r\022\025\n\rschedule_mode\030\005 \001(\r\022\032\n\022cache"
  "_prefetch_cnt\030\006 \001(\r\022\036\n\026prefetch_enable_b"
  "itmap\030\007 \001(\r\022\034\n\024prefetch_once_bitmap\030\010 \001("
  "\r\022\035\n\025prefetch_once_dmu_num\030\t \001(\r\022\037\n\027thre"
  "ad_prefetch_dmu_idx\030\n \003(\r\022\026\n\016thread_blk_"
  "dim\030\013 \003(\r\022\035\n\025thread_task_func_stub\030\014 \003(\t"
  "\022/\n\rprefetch_list\030\r \003(\0132\030.domi.ManualThr"
  "eadDmuDef\0224\n\013src_dep_tbl\030\016 \003(\0132\037.domi.Ma"
  "nualThreadDependencyDef\022\032\n\022input_output_"
  "count\030\017 \001(\r\"J\n\022ManualThreadNopDef\0224\n\013src"
  "_dep_tbl\030\001 \003(\0132\037.domi.ManualThreadDepend"
  "encyDef\"{\n\024ManualThreadCacheDef\022*\n\010dmu_l"
  "ist\030\001 \003(\0132\030.domi.ManualThreadDmuDef\022\025\n\rs"
  "lice_dmu_idx\030\002 \003(\r\022 \n\030ticket_cache_ref_c"
  "nt_tbl\030\003 \003(\r\"\214\001\n\022ManualThreadDmuDef\022\021\n\td"
  "ata_addr\030\001 \001(\004\022\021\n\tnum_outer\030\002 \001(\r\022\021\n\tnum"
  "_inner\030\003 \001(\r\022\024\n\014stride_outer\030\004 \001(\r\022\021\n\tle"
  "n_inner\030\005 \001(\r\022\024\n\014stride_inner\030\006 \001(\r\"/\n\031M"
  "anualThreadDependencyDef\022\022\n\ndependency\030\001"
  " \003(\r\"\315\002\n\nDSATaskDef\022\020\n\010op_index\030\001 \001(\r\022\r\n"
  "\005start\030\002 \001(\r\022\020\n\010sqe_type\030\003 \001(\r\022\031\n\021distri"
  "bution_type\030\004 \001(\r\022\021\n\tdata_type\030\005 \001(\r\022\020\n\010"
  "alg_type\030\006 \001(\r\022\021\n\tinput_vld\030\007 \001(\r\022\035\n\025inp"
  "ut_value_addr_flag\030\010 \001(\r\022\033\n\023input1_value"
  "_or_ptr\030\t \001(\r\022\033\n\023input2_value_or_ptr\030\n \001"
  "(\r\022\031\n\021seed_value_or_ptr\030\013 \001(\r\022!\n\031random_"
  "count_value_or_ptr\030\014 \001(\r\022\"\n\004args\030\r \001(\0132\024"
  ".domi.DSATaskArgsDef\"\344\001\n\016DSATaskArgsDef\022"
  "\023\n\013output_addr\030\001 \001(\004\022#\n\033workspace_philox"
  "_count_addr\030\002 \001(\004\022\034\n\024workspace_input_add"
  "r\030\003 \001(\004\022\032\n\022seed_value_or_addr\030\004 \001(\014\022\"\n\032r"
  "andom_count_value_or_addr\030\005 \001(\014\022\034\n\024input"
  "1_value_or_addr\030\006 \001(\014\022\034\n\024input2_value_or"
  "_addr\030\007 \001(\014\"\302\001\n\017FftsPlusTaskDef\022\020\n\010op_in"
  "dex\030\001 \001(\r\022\021\n\taddr_size\030\002 \001(\r\022+\n\rffts_plu"
  "s_sqe\030\003 \001(\0132\024.domi.FftsPlusSqeDef\022+\n\rfft"
  "s_plus_ctx\030\004 \003(\0132\024.domi.FftsPlusCtxDef\0220"
  "\n\017additional_data\030\005 \003(\0132\027.domi.Additiona"
  "lDataDef\":\n\021AdditionalDataDef\022\021\n\tdata_ty"
  "pe\030\001 \001(\r\022\022\n\ncontext_id\030\002 \003(\r\"\361\002\n\016FftsPlu"
  "sSqeDef\022+\n\nsqe_header\030\001 \001(\0132\027.domi.Stars"
  "SqeHeaderDef\022\021\n\twrr_ratio\030\002 \001(\r\022\021\n\tsqe_i"
  "ndex\030\003 \001(\r\022\031\n\021total_context_num\030\004 \001(\r\022\031\n"
  "\021ready_context_num\030\005 \001(\r\022\033\n\023preload_cont"
  "ext_num\030\006 \001(\r\022\030\n\020prefetch_ost_num\030\007 \001(\r\022"
  "\026\n\016cmaint_ost_num\030\010 \001(\r\022\032\n\022aic_prefetch_"
  "lower\030\t \001(\r\022\032\n\022aic_prefetch_upper\030\n \001(\r\022"
  "\032\n\022aiv_prefetch_lower\030\013 \001(\r\022\032\n\022aiv_prefe"
  "tch_upper\030\014 \001(\r\022\027\n\017data_split_unit\030\r \001(\r"
  "\"J\n\021StarsSqeHeaderDef\022\017\n\007l1_lock\030\001 \001(\r\022\021"
  "\n\tl1_unlock\030\002 \001(\r\022\021\n\tblock_dim\030\003 \001(\r\"\257\007\n"
  "\016FftsPlusCtxDef\022\020\n\010op_index\030\001 \001(\r\022\025\n\runi"
  "q_ctx_name\030\002 \001(\t\022\024\n\014context_type\030\003 \001(\r\022\022"
  "\n\ncontext_id\030\004 \001(\r\022,\n\007op_type\030\005 \001(\0162\033.do"
  "mi.FftsPlusCtxDef.OpType\022/\n\013aic_aiv_ctx\030"
  "\006 \001(\0132\032.domi.FftsPlusAicAivCtxDef\0226\n\017mix"
  "_aic_aiv_ctx\030\007 \001(\0132\035.domi.FftsPlusMixAic"
  "AivCtxDef\022*\n\010sdma_ctx\030\010 \001(\0132\030.domi.FftsP"
  "lusSdmaCtxDef\022.\n\nnotify_ctx\030\t \001(\0132\032.domi"
  ".FftsPlusNotifyCtxDef\0227\n\017write_value_ctx"
  "\030\n \001(\0132\036.domi.FftsPlusWriteValueCtxDef\022,"
  "\n\taicpu_ctx\030\013 \001(\0132\031.domi.FftsPlusAicpuCt"
  "xDef\022*\n\010data_ctx\030\014 \001(\0132\030.domi.FftsPlusDa"
  "taCtxDef\0221\n\014at_start_ctx\030\r \001(\0132\033.domi.Ff"
  "tsPlusAtStartCtxDef\022-\n\nat_end_ctx\030\016 \001(\0132"
  "\031.domi.FftsPlusAtEndCtxDef\022,\n\tlabel_ctx\030"
  "\017 \001(\0132\031.domi.FftsPlusLabelCtxDef\0227\n\017case"
  "_switch_ctx\030\020 \001(\0132\036.domi.FftsPlusCaseSwi"
  "tchCtxDef\0229\n\020case_default_ctx\030\021 \001(\0132\037.do"
  "mi.FftsPlusCaseDefaultCtxDef\0227\n\017cond_swi"
  "tch_ctx\030\022 \001(\0132\036.domi.FftsPlusCondSwitchC"
  "txDef\022;\n\021cache_persist_ctx\030\023 \001(\0132 .domi."
  "FftsPlusCachePersistCtxDef\022(\n\007dsa_ctx\030\024 "
  "\001(\0132\027.domi.FftsPlusDsaCtxDef\" \n\006OpType\022\n"
  "\n\006NORMAL\020\000\022\n\n\006ATOMIC\020\001\"\330\004\n\024FftsPlusAicAi"
  "vCtxDef\022\025\n\rsuccessor_num\030\001 \001(\r\022\014\n\004aten\030\002"
  " \001(\r\022\027\n\017prefetch_config\030\003 \001(\r\022\025\n\rpred_cn"
  "t_init\030\004 \001(\r\022\020\n\010pred_cnt\030\005 \001(\r\022\026\n\016succes"
  "sor_list\030\006 \003(\r\022\r\n\005schem\030\007 \001(\r\022\013\n\003atm\030\010 \001"
  "(\r\022\036\n\026prefetch_enable_bitmap\030\t \001(\r\022\034\n\024pr"
  "efetch_once_bitmap\030\n \001(\r\022\013\n\003pmg\030\013 \001(\r\022\n\n"
  "\002ns\030\014 \001(\r\022\017\n\007part_id\030\r \001(\r\022\013\n\003qos\030\016 \001(\r\022"
  "\021\n\tthread_id\030\017 \001(\r\022\022\n\nthread_dim\030\020 \001(\r\022\032"
  "\n\022non_tail_block_dim\030\021 \001(\r\022\026\n\016tail_block"
  "_dim\030\022 \001(\r\022\035\n\025task_param_ptr_offset\030\023 \001("
  "\r\022\026\n\016save_task_addr\030\024 \001(\r\022\021\n\ttask_addr\030\025"
  " \003(\004\022\030\n\020task_addr_offset\030\026 \003(\004\022\032\n\022input_"
  "output_count\030\027 \001(\r\022\023\n\013kernel_name\030\030 \003(\t\022"
  "\020\n\010src_slot\030\031 \003(\r\022\022\n\npolicy_pri\030\032 \001(\r\022\032\n"
  "\022thread_window_size\030\033 \001(\r\"\276\005\n\027FftsPlusMi"
  "xAicAivCtxDef\022\025\n\rsuccessor_num\030\001 \001(\r\022\014\n\004"
  "aten\030\002 \001(\r\022\027\n\017prefetch_config\030\003 \001(\r\022\025\n\rp"
  "red_cnt_init\030\004 \001(\r\022\020\n\010pred_cnt\030\005 \001(\r\022\026\n\016"
  "successor_list\030\006 \003(\r\022\r\n\005schem\030\007 \001(\r\022\013\n\003a"
  "tm\030\010 \001(\r\022\036\n\026prefetch_enable_bitmap\030\t \001(\r"
  "\022\034\n\024prefetch_once_bitmap\030\n \001(\r\022\013\n\003pmg\030\013 "
  "\001(\r\022\n\n\002ns\030\014 \001(\r\022\017\n\007part_id\030\r \001(\r\022\013\n\003qos\030"
  "\016 \001(\r\022\036\n\026non_tail_block_ratio_n\030\017 \001(\r\022\032\n"
  "\022tail_block_ratio_n\030\020 \001(\r\022\021\n\tthread_id\030\021"
  " \001(\r\022\022\n\nthread_dim\030\022 \001(\r\022\032\n\022non_tail_blo"
  "ck_dim\030\023 \001(\r\022\026\n\016tail_block_dim\030\024 \001(\r\022!\n\031"
  "aic_task_param_ptr_offset\030\025 \001(\r\022!\n\031aiv_t"
  "ask_param_ptr_offset\030\026 \001(\r\022\023\n\013kernel_nam"
  "e\030\027 \003(\t\022\021\n\ttask_addr\030\030 \003(\004\022\030\n\020task_addr_"
  "offset\030\031 \003(\004\022\032\n\022input_output_count\030\032 \001(\r"
  "\022\026\n\016save_task_addr\030\033 \001(\r\022\020\n\010src_slot\030\034 \003"
  "(\r\022\022\n\npolicy_pri\030\035 \001(\r\022\032\n\022thread_window_"
  "size\030\036 \001(\r\"\364\003\n\022FftsPlusSdmaCtxDef\022\025\n\rsuc"
  "cessor_num\030\001 \001(\r\022\014\n\004aten\030\002 \001(\r\022\025\n\rpred_c"
  "nt_init\030\003 \001(\r\022\020\n\010pred_cnt\030\004 \001(\r\022\026\n\016succe"
  "ssor_list\030\005 \003(\r\022\013\n\003atm\030\006 \001(\r\022\013\n\003pmg\030\007 \001("
  "\r\022\n\n\002ns\030\010 \001(\r\022\017\n\007part_id\030\t \001(\r\022\013\n\003qos\030\n "
  "\001(\r\022\021\n\tthread_id\030\013 \001(\r\022\022\n\nthread_dim\030\014 \001"
  "(\r\022\027\n\017sdma_sqe_header\030\r \001(\r\022\025\n\rsrc_strea"
  "m_id\030\016 \001(\r\022\031\n\021src_sub_stream_id\030\017 \001(\r\022\025\n"
  "\rdst_stream_id\030\020 \001(\r\022\031\n\021dst_sub_stream_i"
  "d\030\021 \001(\r\022\025\n\rsrc_addr_base\030\022 \001(\004\022\027\n\017src_ad"
  "dr_offset\030\023 \001(\r\022\025\n\rdst_addr_base\030\024 \001(\004\022\027"
  "\n\017dst_addr_offset\030\025 \001(\r\022\031\n\021non_tail_data"
  "_len\030\026 \001(\r\022\025\n\rtail_data_len\030\027 \001(\r\"\376\001\n\024Ff"
  "tsPlusNotifyCtxDef\022\025\n\rsuccessor_num\030\001 \001("
  "\r\022\014\n\004aten\030\002 \001(\r\022\025\n\rpred_cnt_init\030\003 \001(\r\022\020"
  "\n\010pred_cnt\030\004 \001(\r\022\026\n\016successor_list\030\005 \003(\r"
  "\022\014\n\004satm\030\006 \001(\r\022\013\n\003atm\030\007 \001(\r\022\021\n\tthread_id"
  "\030\010 \001(\r\022\022\n\nthread_dim\030\t \001(\r\022\026\n\016notify_id_"
  "base\030\n \001(\r\022\023\n\013auto_window\030\013 \001(\r\022\021\n\tnotif"
  "y_id\030\014 \003(\r\"\247\003\n\030FftsPlusWriteValueCtxDef\022"
  "\025\n\rsuccessor_num\030\001 \001(\r\022\014\n\004aten\030\002 \001(\r\022\025\n\r"
  "pred_cnt_init\030\003 \001(\r\022\020\n\010pred_cnt\030\004 \001(\r\022\026\n"
  "\016successor_list\030\005 \003(\r\022\013\n\003atm\030\006 \001(\r\022\021\n\tth"
  "read_id\030\007 \001(\r\022\022\n\nthread_dim\030\010 \001(\r\022\017\n\007aw_"
  "size\030\t \001(\r\022\020\n\010aw_snoop\030\n \001(\r\022\020\n\010aw_cache"
  "\030\013 \001(\r\022\017\n\007aw_prot\030\014 \001(\r\022\r\n\005aw_va\030\r \001(\r\022\017"
  "\n\007ar_size\030\016 \001(\r\022\020\n\010ar_snoop\030\017 \001(\r\022\020\n\010ar_"
  "cache\030\020 \001(\r\022\017\n\007ar_prot\030\021 \001(\r\022\r\n\005ar_va\030\022 "
  "\001(\r\022\027\n\017write_addr_base\030\023 \001(\004\022\031\n\021write_ad"
  "dr_offset\030\024 \001(\r\022\023\n\013write_value\030\025 \003(\r\"\263\003\n"
  "\023FftsPlusAicpuCtxDef\022\025\n\rsuccessor_num\030\001 "
  "\001(\r\022\014\n\004aten\030\002 \001(\r\022\025\n\rpred_cnt_init\030\003 \001(\r"
  "\022\020\n\010pred_cnt\030\004 \001(\r\022\026\n\016successor_list\030\005 \003"
  "(\r\022\013\n\003atm\030\006 \001(\r\022\021\n\tsqe_index\030\007 \001(\r\022\023\n\013ke"
  "rnel_type\030\010 \001(\r\022\n\n\002bm\030\t \001(\r\022\022\n\ntopic_typ"
  "e\030\n \001(\r\022\013\n\003qos\030\013 \001(\r\022\021\n\tthread_id\030\014 \001(\r\022"
  "\022\n\nthread_dim\030\r \001(\r\022\032\n\022non_tail_block_di"
  "m\030\016 \001(\r\022\026\n\016tail_block_dim\030\017 \001(\r\022\024\n\014sub_t"
  "opic_id\030\020 \001(\r\022\020\n\010topic_id\030\021 \001(\r\022\020\n\010group"
  "_id\030\022 \001(\r\022\031\n\021task_param_offset\030\023 \001(\r\022$\n\006"
  "kernel\030\024 \001(\0132\024.domi.aicpuKernelDef\"\216\001\n\016a"
  "icpuKernelDef\022\021\n\targs_size\030\001 \001(\r\022\014\n\004args"
  "\030\002 \001(\014\022\017\n\007so_name\030\003 \001(\t\022\023\n\013kernel_name\030\004"
  " \001(\t\022\027\n\017kernel_ext_info\030\005 \001(\014\022\034\n\024kernel_"
  "ext_info_size\030\006 \001(\r\"\324\004\n\022FftsPlusDataCtxD"
  "ef\022\025\n\rsuccessor_num\030\001 \001(\r\022\014\n\004aten\030\002 \001(\r\022"
  "\020\n\010cnt_init\030\003 \001(\r\022\013\n\003cnt\030\004 \001(\r\022\026\n\016succes"
  "sor_list\030\005 \003(\r\022\013\n\003atm\030\006 \001(\r\022\013\n\003pmg\030\007 \001(\r"
  "\022\n\n\002ns\030\010 \001(\r\022\017\n\007part_id\030\t \001(\r\022\013\n\003qos\030\n \001"
  "(\r\022\035\n\025orig_consumer_counter\030\013 \001(\r\022\034\n\024run"
  "_consumer_counter\030\014 \001(\r\022\021\n\tthread_id\030\r \001"
  "(\r\022\022\n\nthread_dim\030\016 \001(\r\022\021\n\taddr_base\030\017 \001("
  "\004\022\023\n\013addr_offset\030\020 \001(\r\022\033\n\023non_tail_num_o"
  "utter\030\021 \001(\r\022\032\n\022non_tail_num_inner\030\022 \001(\r\022"
  "\032\n\022non_tail_len_inner\030\023 \001(\r\022\036\n\026non_tail_"
  "stride_outter\030\024 \001(\r\022\035\n\025non_tail_stride_i"
  "nner\030\025 \001(\r\022\027\n\017tail_num_outter\030\026 \001(\r\022\026\n\016t"
  "ail_num_inner\030\027 \001(\r\022\026\n\016tail_len_inner\030\030 "
  "\001(\r\022\032\n\022tail_stride_outter\030\031 \001(\r\022\031\n\021tail_"
  "stride_inner\030\032 \001(\r\"\330\001\n\025FftsPlusAtStartCt"
  "xDef\022\025\n\rsuccessor_num\030\001 \001(\r\022\014\n\004aten\030\002 \001("
  "\r\022\025\n\rpred_cnt_init\030\003 \001(\r\022\020\n\010pred_cnt\030\004 \001"
  "(\r\022\026\n\016successor_list\030\005 \003(\r\022\021\n\tthread_id\030"
  "\006 \001(\r\022\022\n\nthread_dim\030\007 \001(\r\022\026\n\016thread_id_i"
  "nit\030\010 \001(\r\022\032\n\022thread_window_size\030\t \001(\r\"\317\001"
  "\n\023FftsPlusAtEndCtxDef\022\031\n\021at_start_slot_n"
  "um\030\001 \001(\r\022\032\n\022out_label_slot_num\030\002 \001(\r\022\014\n\004"
  "aten\030\003 \001(\r\022\025\n\rpred_cnt_init\030\004 \001(\r\022\020\n\010pre"
  "d_cnt\030\005 \001(\r\022\032\n\022succ_at_start_slot\030\006 \003(\r\022"
  "\033\n\023succ_out_label_slot\030\007 \003(\r\022\021\n\tthread_i"
  "d\030\010 \001(\r\"m\n\023FftsPlusLabelCtxDef\022\025\n\rsucces"
  "sor_num\030\001 \001(\r\022\025\n\rpred_cnt_init\030\002 \001(\r\022\020\n\010"
  "pred_cnt\030\003 \001(\r\022\026\n\016successor_list\030\004 \003(\r\"\273"
  "\003\n\030FftsPlusCaseSwitchCtxDef\022\025\n\rsuccessor"
  "_num\030\001 \001(\r\022\014\n\004aten\030\002 \001(\r\022\026\n\016start_label_"
  "id\030\003 \001(\r\022\026\n\016label_list_len\030\004 \001(\r\022\025\n\rpred"
  "_cnt_init\030\005 \001(\r\022\020\n\010pred_cnt\030\006 \001(\r\022\026\n\016suc"
  "cessor_list\030\007 \003(\r\022\013\n\003atm\030\010 \001(\r\022\021\n\tthread"
  "_id\030\t \001(\r\022\022\n\nthread_dim\030\n \001(\r\022\017\n\007ar_size"
  "\030\013 \001(\r\022\r\n\005snoop\030\014 \001(\r\022\020\n\010ar_cache\030\r \001(\r\022"
  "\017\n\007ar_prot\030\016 \001(\r\022\n\n\002va\030\017 \001(\r\022\027\n\017load_add"
  "r0_base\030\020 \001(\004\022\016\n\006ld0_en\030\021 \001(\r\022\031\n\021load_ad"
  "dr0_offset\030\022 \001(\r\022\027\n\017load_addr1_base\030\023 \001("
  "\004\022\016\n\006ld1_en\030\024 \001(\r\022\031\n\021load_addr1_offset\030\025"
  " \001(\r\"\261\001\n\031FftsPlusCaseDefaultCtxDef\022\025\n\rsu"
  "ccessor_num\030\001 \001(\r\022\014\n\004aten\030\002 \001(\r\022\026\n\016start"
  "_label_id\030\003 \001(\r\022\026\n\016label_list_len\030\004 \001(\r\022"
  "\025\n\rpred_cnt_init\030\005 \001(\r\022\020\n\010pred_cnt\030\006 \001(\r"
  "\022\026\n\016successor_list\030\007 \003(\r\"\215\004\n\030FftsPlusCon"
  "dSwitchCtxDef\022\032\n\022true_successor_num\030\001 \001("
  "\r\022\033\n\023false_successor_num\030\002 \001(\r\022\014\n\004aten\030\003"
  " \001(\r\022\021\n\tcondition\030\004 \001(\r\022\025\n\rpred_cnt_init"
  "\030\005 \001(\r\022\020\n\010pred_cnt\030\006 \001(\r\022\033\n\023true_success"
  "or_list\030\007 \003(\r\022\034\n\024false_successor_list\030\010 "
  "\003(\r\022\013\n\003atm\030\t \001(\r\022\021\n\tthread_id\030\n \001(\r\022\022\n\nt"
  "hread_dim\030\013 \001(\r\022\017\n\007ar_size\030\014 \001(\r\022\r\n\005snoo"
  "p\030\r \001(\r\022\020\n\010ar_cache\030\016 \001(\r\022\017\n\007ar_prot\030\017 \001"
  "(\r\022\n\n\002va\030\020 \001(\r\022\027\n\017load_addr0_base\030\021 \001(\004\022"
  "\016\n\006ld0_en\030\022 \001(\r\022\031\n\021load_addr0_offset\030\023 \001"
  "(\r\022\027\n\017load_addr1_base\030\024 \001(\004\022\016\n\006ld1_en\030\025 "
  "\001(\r\022\031\n\021load_addr1_offset\030\026 \001(\r\022\023\n\013cmp_va"
  "lue_1\030\027 \001(\r\022\023\n\013cmp_value_2\030\030 \001(\r\"\342\001\n\032Fft"
  "sPlusCachePersistCtxDef\022\025\n\rsuccessor_num"
  "\030\001 \001(\r\022\014\n\004aten\030\002 \001(\r\022\027\n\017prefetch_config\030"
  "\003 \001(\r\022\025\n\rpred_cnt_init\030\004 \001(\r\022\020\n\010pred_cnt"
  "\030\005 \001(\r\022\026\n\016successor_list\030\006 \003(\r\022\027\n\017persis"
  "tent_size\030\007 \001(\r\022\025\n\rpersistent_en\030\010 \001(\r\022\025"
  "\n\rpersistent_id\030\t \001(\r\"\342\003\n\021FftsPlusDsaCtx"
  "Def\022\025\n\rsuccessor_num\030\001 \001(\r\022\014\n\004aten\030\002 \001(\r"
  "\022\025\n\rpred_cnt_init\030\003 \001(\r\022\020\n\010pred_cnt\030\004 \001("
  "\r\022\026\n\016successor_list\030\005 \003(\r\022\013\n\003atm\030\006 \001(\r\022\026"
  "\n\016address_offset\030\007 \001(\r\022\021\n\tthread_id\030\010 \001("
  "\r\022\022\n\nthread_dim\030\t \001(\r\022\r\n\005start\030\n \001(\r\022\031\n\021"
  "distribution_type\030\013 \001(\r\022\021\n\tdata_type\030\014 \001"
  "(\r\022\020\n\010alg_type\030\r \001(\r\022\021\n\tinput_vld\030\016 \001(\r\022"
  "\035\n\025input_value_addr_flag\030\017 \001(\r\022\033\n\023input1"
  "_value_or_ptr\030\020 \001(\r\022\033\n\023input2_value_or_p"
  "tr\030\021 \001(\r\022\031\n\021seed_value_or_ptr\030\022 \001(\r\022!\n\031r"
  "andom_count_value_or_ptr\030\023 \001(\r\022\"\n\004args\030\024"
  " \001(\0132\024.domi.DSATaskArgsDef\"\353\001\n\nCmoTaskDe"
  "f\022\020\n\010cmo_type\030\001 \001(\r\022\020\n\010logic_id\030\002 \001(\r\022\017\n"
  "\007op_code\030\003 \001(\r\022\013\n\003qos\030\004 \001(\r\022\017\n\007part_id\030\005"
  " \001(\r\022\013\n\003pmg\030\006 \001(\r\022\021\n\tnum_inner\030\007 \001(\r\022\021\n\t"
  "num_outer\030\010 \001(\r\022\024\n\014length_inner\030\t \001(\r\022\023\n"
  "\013source_addr\030\n \001(\004\022\025\n\rstrider_outer\030\013 \001("
  "\r\022\025\n\rstrider_inner\030\014 \001(\r\"X\n\021CmoBarrierTa"
  "skDef\022\024\n\014logic_id_num\030\001 \001(\r\022-\n\014barrier_i"
  "nfo\030\002 \003(\0132\027.domi.CmoBarrierInfoDef\"7\n\021Cm"
  "oBarrierInfoDef\022\020\n\010cmo_type\030\001 \001(\r\022\020\n\010log"
  "ic_id\030\002 \001(\r\"`\n\024NpuGetFloatStatusDef\022\023\n\013o"
  "utput_addr\030\001 \001(\004\022\023\n\013output_size\030\002 \001(\r\022\014\n"
  "\004mode\030\003 \001(\r\022\020\n\010op_index\030\004 \001(\r\"8\n\026NpuClea"
  "rFloatStatusDef\022\014\n\004mode\030\001 \001(\r\022\020\n\010op_inde"
  "x\030\002 \001(\r\"\037\n\013DvppTaskDef\022\020\n\010op_index\030\001 \001(\r"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_task_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_task_2eproto_sccs[59] = {
  &scc_info_AdditionalDataDef_task_2eproto.base,
  &scc_info_ArgsInfo_task_2eproto.base,
  &scc_info_AutoThreadAicAivDef_task_2eproto.base,
  &scc_info_AutoThreadCacheDef_task_2eproto.base,
  &scc_info_AutoThreadPrefetchDef_task_2eproto.base,
  &scc_info_CmoBarrierInfoDef_task_2eproto.base,
  &scc_info_CmoBarrierTaskDef_task_2eproto.base,
  &scc_info_CmoTaskDef_task_2eproto.base,
  &scc_info_DSATaskArgsDef_task_2eproto.base,
  &scc_info_DSATaskDef_task_2eproto.base,
  &scc_info_DvppTaskDef_task_2eproto.base,
  &scc_info_EventExDef_task_2eproto.base,
  &scc_info_FftsDescInfoDef_task_2eproto.base,
  &scc_info_FftsPlusAicAivCtxDef_task_2eproto.base,
  &scc_info_FftsPlusAicpuCtxDef_task_2eproto.base,
  &scc_info_FftsPlusAtEndCtxDef_task_2eproto.base,
  &scc_info_FftsPlusAtStartCtxDef_task_2eproto.base,
  &scc_info_FftsPlusCachePersistCtxDef_task_2eproto.base,
  &scc_info_FftsPlusCaseDefaultCtxDef_task_2eproto.base,
  &scc_info_FftsPlusCaseSwitchCtxDef_task_2eproto.base,
  &scc_info_FftsPlusCondSwitchCtxDef_task_2eproto.base,
  &scc_info_FftsPlusCtxDef_task_2eproto.base,
  &scc_info_FftsPlusDataCtxDef_task_2eproto.base,
  &scc_info_FftsPlusDsaCtxDef_task_2eproto.base,
  &scc_info_FftsPlusLabelCtxDef_task_2eproto.base,
  &scc_info_FftsPlusMixAicAivCtxDef_task_2eproto.base,
  &scc_info_FftsPlusNotifyCtxDef_task_2eproto.base,
  &scc_info_FftsPlusSdmaCtxDef_task_2eproto.base,
  &scc_info_FftsPlusSqeDef_task_2eproto.base,
  &scc_info_FftsPlusTaskDef_task_2eproto.base,
  &scc_info_FftsPlusWriteValueCtxDef_task_2eproto.base,
  &scc_info_FftsSubTaskDef_task_2eproto.base,
  &scc_info_FftsTaskDef_task_2eproto.base,
  &scc_info_KernelContext_task_2eproto.base,
  &scc_info_KernelDef_task_2eproto.base,
  &scc_info_KernelDefWithHandle_task_2eproto.base,
  &scc_info_KernelExDef_task_2eproto.base,
  &scc_info_KernelHcclDef_task_2eproto.base,
  &scc_info_LabelGotoExDef_task_2eproto.base,
  &scc_info_LabelSetDef_task_2eproto.base,
  &scc_info_LabelSwitchByIndexDef_task_2eproto.base,
  &scc_info_LogTimeStampDef_task_2eproto.base,
  &scc_info_ManualThreadAicAivDef_task_2eproto.base,
  &scc_info_ManualThreadCacheDef_task_2eproto.base,
  &scc_info_ManualThreadDependencyDef_task_2eproto.base,
  &scc_info_ManualThreadDmuDef_task_2eproto.base,
  &scc_info_ManualThreadNopDef_task_2eproto.base,
  &scc_info_MemcpyAsyncDef_task_2eproto.base,
  &scc_info_ModelTaskDef_task_2eproto.base,
  &scc_info_ModelTaskDef_AttrEntry_DoNotUse_task_2eproto.base,
  &scc_info_NpuClearFloatStatusDef_task_2eproto.base,
  &scc_info_NpuGetFloatStatusDef_task_2eproto.base,
  &scc_info_StarsSqeHeaderDef_task_2eproto.base,
  &scc_info_StreamActiveDef_task_2eproto.base,
  &scc_info_StreamSwitchDef_task_2eproto.base,
  &scc_info_StreamSwitchNDef_task_2eproto.base,
  &scc_info_TaskDef_task_2eproto.base,
  &scc_info_TicketCacheDef_task_2eproto.base,
  &scc_info_aicpuKernelDef_task_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_task_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_task_2eproto = {
  false, false, descriptor_table_protodef_task_2eproto, "task.proto", 14888,
  &descriptor_table_task_2eproto_once, descriptor_table_task_2eproto_sccs, descriptor_table_task_2eproto_deps, 59, 0,
  schemas, file_default_instances, TableStruct_task_2eproto::offsets,
  file_level_metadata_task_2eproto, 59, file_level_enum_descriptors_task_2eproto, file_level_service_descriptors_task_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_task_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_task_2eproto)), true);
namespace domi {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ArgsInfo_ArgsType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_task_2eproto);
  return file_level_enum_descriptors_task_2eproto[0];
}
bool ArgsInfo_ArgsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ArgsInfo_ArgsType ArgsInfo::INPUT;
constexpr ArgsInfo_ArgsType ArgsInfo::OUTPUT;
constexpr ArgsInfo_ArgsType ArgsInfo::ArgsType_MIN;
constexpr ArgsInfo_ArgsType ArgsInfo::ArgsType_MAX;
constexpr int ArgsInfo::ArgsType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ArgsInfo_ArgsFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_task_2eproto);
  return file_level_enum_descriptors_task_2eproto[1];
}
bool ArgsInfo_ArgsFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ArgsInfo_ArgsFormat ArgsInfo::DIRECT_ADDR;
constexpr ArgsInfo_ArgsFormat ArgsInfo::SECONDARY_ADDR;
constexpr ArgsInfo_ArgsFormat ArgsInfo::ArgsFormat_MIN;
constexpr ArgsInfo_ArgsFormat ArgsInfo::ArgsFormat_MAX;
constexpr int ArgsInfo::ArgsFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FftsPlusCtxDef_OpType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_task_2eproto);
  return file_level_enum_descriptors_task_2eproto[2];
}
bool FftsPlusCtxDef_OpType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FftsPlusCtxDef_OpType FftsPlusCtxDef::NORMAL;
constexpr FftsPlusCtxDef_OpType FftsPlusCtxDef::ATOMIC;
constexpr FftsPlusCtxDef_OpType FftsPlusCtxDef::OpType_MIN;
constexpr FftsPlusCtxDef_OpType FftsPlusCtxDef::OpType_MAX;
constexpr int FftsPlusCtxDef::OpType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

ModelTaskDef_AttrEntry_DoNotUse::ModelTaskDef_AttrEntry_DoNotUse() {}
ModelTaskDef_AttrEntry_DoNotUse::ModelTaskDef_AttrEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ModelTaskDef_AttrEntry_DoNotUse::MergeFrom(const ModelTaskDef_AttrEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ModelTaskDef_AttrEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ModelTaskDef_AttrEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ModelTaskDef::InitAsDefaultInstance() {
}
class ModelTaskDef::_Internal {
 public:
};

ModelTaskDef::ModelTaskDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attr_(arena),
  task_(arena),
  op_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.ModelTaskDef)
}
ModelTaskDef::ModelTaskDef(const ModelTaskDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      task_(from.task_),
      op_(from.op_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attr_.MergeFrom(from.attr_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  ::memcpy(&memory_size_, &from.memory_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_addr_) -
    reinterpret_cast<char*>(&memory_size_)) + sizeof(weight_addr_));
  // @@protoc_insertion_point(copy_constructor:domi.ModelTaskDef)
}

void ModelTaskDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelTaskDef_task_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&memory_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_addr_) -
      reinterpret_cast<char*>(&memory_size_)) + sizeof(weight_addr_));
}

ModelTaskDef::~ModelTaskDef() {
  // @@protoc_insertion_point(destructor:domi.ModelTaskDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelTaskDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelTaskDef::ArenaDtor(void* object) {
  ModelTaskDef* _this = reinterpret_cast< ModelTaskDef* >(object);
  (void)_this;
}
void ModelTaskDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelTaskDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelTaskDef& ModelTaskDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelTaskDef_task_2eproto.base);
  return *internal_default_instance();
}


void ModelTaskDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.ModelTaskDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attr_.Clear();
  task_.Clear();
  op_.Clear();
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&memory_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_addr_) -
      reinterpret_cast<char*>(&memory_size_)) + sizeof(weight_addr_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelTaskDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "domi.ModelTaskDef.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> attr = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&attr_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .domi.TaskDef task = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_task(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 memory_size = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          memory_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 stream_num = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          stream_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 event_num = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          event_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 weight_size = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          weight_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes op = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_op();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 base_addr = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          base_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 weight_addr = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          weight_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 batch_num = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          batch_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelTaskDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.ModelTaskDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "domi.ModelTaskDef.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // map<string, string> attr = 9;
  if (!this->_internal_attr().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "domi.ModelTaskDef.AttrEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "domi.ModelTaskDef.AttrEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_attr().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_attr().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_attr().begin();
          it != this->_internal_attr().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ModelTaskDef_AttrEntry_DoNotUse::Funcs::InternalSerialize(9, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_attr().begin();
          it != this->_internal_attr().end(); ++it) {
        target = ModelTaskDef_AttrEntry_DoNotUse::Funcs::InternalSerialize(9, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .domi.TaskDef task = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_task_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_task(i), target, stream);
  }

  // uint64 memory_size = 11;
  if (this->memory_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_memory_size(), target);
  }

  // uint32 stream_num = 12;
  if (this->stream_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_stream_num(), target);
  }

  // uint32 event_num = 13;
  if (this->event_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_event_num(), target);
  }

  // uint64 weight_size = 14;
  if (this->weight_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_weight_size(), target);
  }

  // repeated bytes op = 15;
  for (int i = 0, n = this->_internal_op_size(); i < n; i++) {
    const auto& s = this->_internal_op(i);
    target = stream->WriteBytes(15, s, target);
  }

  // uint64 base_addr = 16;
  if (this->base_addr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_base_addr(), target);
  }

  // uint64 weight_addr = 17;
  if (this->weight_addr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_weight_addr(), target);
  }

  // uint32 batch_num = 18;
  if (this->batch_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_batch_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.ModelTaskDef)
  return target;
}

size_t ModelTaskDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.ModelTaskDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> attr = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attr_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_attr().begin();
      it != this->_internal_attr().end(); ++it) {
    total_size += ModelTaskDef_AttrEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .domi.TaskDef task = 10;
  total_size += 1UL * this->_internal_task_size();
  for (const auto& msg : this->task_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bytes op = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(op_.size());
  for (int i = 0, n = op_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      op_.Get(i));
  }

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // uint64 memory_size = 11;
  if (this->memory_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_memory_size());
  }

  // uint32 batch_num = 18;
  if (this->batch_num() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_batch_num());
  }

  // uint32 stream_num = 12;
  if (this->stream_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stream_num());
  }

  // uint32 event_num = 13;
  if (this->event_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_event_num());
  }

  // uint64 weight_size = 14;
  if (this->weight_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_weight_size());
  }

  // uint64 base_addr = 16;
  if (this->base_addr() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_base_addr());
  }

  // uint64 weight_addr = 17;
  if (this->weight_addr() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_weight_addr());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelTaskDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.ModelTaskDef)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelTaskDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelTaskDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.ModelTaskDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.ModelTaskDef)
    MergeFrom(*source);
  }
}

void ModelTaskDef::MergeFrom(const ModelTaskDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.ModelTaskDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attr_.MergeFrom(from.attr_);
  task_.MergeFrom(from.task_);
  op_.MergeFrom(from.op_);
  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.memory_size() != 0) {
    _internal_set_memory_size(from._internal_memory_size());
  }
  if (from.batch_num() != 0) {
    _internal_set_batch_num(from._internal_batch_num());
  }
  if (from.stream_num() != 0) {
    _internal_set_stream_num(from._internal_stream_num());
  }
  if (from.event_num() != 0) {
    _internal_set_event_num(from._internal_event_num());
  }
  if (from.weight_size() != 0) {
    _internal_set_weight_size(from._internal_weight_size());
  }
  if (from.base_addr() != 0) {
    _internal_set_base_addr(from._internal_base_addr());
  }
  if (from.weight_addr() != 0) {
    _internal_set_weight_addr(from._internal_weight_addr());
  }
}

void ModelTaskDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.ModelTaskDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelTaskDef::CopyFrom(const ModelTaskDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.ModelTaskDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelTaskDef::IsInitialized() const {
  return true;
}

void ModelTaskDef::InternalSwap(ModelTaskDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attr_.Swap(&other->attr_);
  task_.InternalSwap(&other->task_);
  op_.InternalSwap(&other->op_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelTaskDef, weight_addr_)
      + sizeof(ModelTaskDef::weight_addr_)
      - PROTOBUF_FIELD_OFFSET(ModelTaskDef, memory_size_)>(
          reinterpret_cast<char*>(&memory_size_),
          reinterpret_cast<char*>(&other->memory_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelTaskDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TaskDef::InitAsDefaultInstance() {
  ::domi::_TaskDef_default_instance_._instance.get_mutable()->kernel_ = const_cast< ::domi::KernelDef*>(
      ::domi::KernelDef::internal_default_instance());
  ::domi::_TaskDef_default_instance_._instance.get_mutable()->kernel_ex_ = const_cast< ::domi::KernelExDef*>(
      ::domi::KernelExDef::internal_default_instance());
  ::domi::_TaskDef_default_instance_._instance.get_mutable()->kernel_hccl_ = const_cast< ::domi::KernelHcclDef*>(
      ::domi::KernelHcclDef::internal_default_instance());
  ::domi::_TaskDef_default_instance_._instance.get_mutable()->event_ex_ = const_cast< ::domi::EventExDef*>(
      ::domi::EventExDef::internal_default_instance());
  ::domi::_TaskDef_default_instance_._instance.get_mutable()->log_timestamp_ = const_cast< ::domi::LogTimeStampDef*>(
      ::domi::LogTimeStampDef::internal_default_instance());
  ::domi::_TaskDef_default_instance_._instance.get_mutable()->memcpy_async_ = const_cast< ::domi::MemcpyAsyncDef*>(
      ::domi::MemcpyAsyncDef::internal_default_instance());
  ::domi::_TaskDef_default_instance_._instance.get_mutable()->stream_switch_ = const_cast< ::domi::StreamSwitchDef*>(
      ::domi::StreamSwitchDef::internal_default_instance());
  ::domi::_TaskDef_default_instance_._instance.get_mutable()->stream_active_ = const_cast< ::domi::StreamActiveDef*>(
      ::domi::StreamActiveDef::internal_default_instance());
  ::domi::_TaskDef_default_instance_._instance.get_mutable()->stream_switch_n_ = const_cast< ::domi::StreamSwitchNDef*>(
      ::domi::StreamSwitchNDef::internal_default_instance());
  ::domi::_TaskDef_default_instance_._instance.get_mutable()->label_set_ = const_cast< ::domi::LabelSetDef*>(
      ::domi::LabelSetDef::internal_default_instance());
  ::domi::_TaskDef_default_instance_._instance.get_mutable()->label_goto_ex_ = const_cast< ::domi::LabelGotoExDef*>(
      ::domi::LabelGotoExDef::internal_default_instance());
  ::domi::_TaskDef_default_instance_._instance.get_mutable()->label_switch_by_index_ = const_cast< ::domi::LabelSwitchByIndexDef*>(
      ::domi::LabelSwitchByIndexDef::internal_default_instance());
  ::domi::_TaskDef_default_instance_._instance.get_mutable()->kernel_with_handle_ = const_cast< ::domi::KernelDefWithHandle*>(
      ::domi::KernelDefWithHandle::internal_default_instance());
  ::domi::_TaskDef_default_instance_._instance.get_mutable()->ffts_task_ = const_cast< ::domi::FftsTaskDef*>(
      ::domi::FftsTaskDef::internal_default_instance());
  ::domi::_TaskDef_default_instance_._instance.get_mutable()->ffts_plus_task_ = const_cast< ::domi::FftsPlusTaskDef*>(
      ::domi::FftsPlusTaskDef::internal_default_instance());
  ::domi::_TaskDef_default_instance_._instance.get_mutable()->dsa_task_ = const_cast< ::domi::DSATaskDef*>(
      ::domi::DSATaskDef::internal_default_instance());
  ::domi::_TaskDef_default_instance_._instance.get_mutable()->cmo_task_ = const_cast< ::domi::CmoTaskDef*>(
      ::domi::CmoTaskDef::internal_default_instance());
  ::domi::_TaskDef_default_instance_._instance.get_mutable()->cmo_barrier_task_ = const_cast< ::domi::CmoBarrierTaskDef*>(
      ::domi::CmoBarrierTaskDef::internal_default_instance());
  ::domi::_TaskDef_default_instance_._instance.get_mutable()->npu_get_float_status_ = const_cast< ::domi::NpuGetFloatStatusDef*>(
      ::domi::NpuGetFloatStatusDef::internal_default_instance());
  ::domi::_TaskDef_default_instance_._instance.get_mutable()->npu_clear_float_status_ = const_cast< ::domi::NpuClearFloatStatusDef*>(
      ::domi::NpuClearFloatStatusDef::internal_default_instance());
  ::domi::_TaskDef_default_instance_._instance.get_mutable()->dvpp_task_ = const_cast< ::domi::DvppTaskDef*>(
      ::domi::DvppTaskDef::internal_default_instance());
}
class TaskDef::_Internal {
 public:
  static const ::domi::KernelDef& kernel(const TaskDef* msg);
  static const ::domi::KernelExDef& kernel_ex(const TaskDef* msg);
  static const ::domi::KernelHcclDef& kernel_hccl(const TaskDef* msg);
  static const ::domi::EventExDef& event_ex(const TaskDef* msg);
  static const ::domi::LogTimeStampDef& log_timestamp(const TaskDef* msg);
  static const ::domi::MemcpyAsyncDef& memcpy_async(const TaskDef* msg);
  static const ::domi::StreamSwitchDef& stream_switch(const TaskDef* msg);
  static const ::domi::StreamActiveDef& stream_active(const TaskDef* msg);
  static const ::domi::StreamSwitchNDef& stream_switch_n(const TaskDef* msg);
  static const ::domi::LabelSetDef& label_set(const TaskDef* msg);
  static const ::domi::LabelGotoExDef& label_goto_ex(const TaskDef* msg);
  static const ::domi::LabelSwitchByIndexDef& label_switch_by_index(const TaskDef* msg);
  static const ::domi::KernelDefWithHandle& kernel_with_handle(const TaskDef* msg);
  static const ::domi::FftsTaskDef& ffts_task(const TaskDef* msg);
  static const ::domi::FftsPlusTaskDef& ffts_plus_task(const TaskDef* msg);
  static const ::domi::DSATaskDef& dsa_task(const TaskDef* msg);
  static const ::domi::CmoTaskDef& cmo_task(const TaskDef* msg);
  static const ::domi::CmoBarrierTaskDef& cmo_barrier_task(const TaskDef* msg);
  static const ::domi::NpuGetFloatStatusDef& npu_get_float_status(const TaskDef* msg);
  static const ::domi::NpuClearFloatStatusDef& npu_clear_float_status(const TaskDef* msg);
  static const ::domi::DvppTaskDef& dvpp_task(const TaskDef* msg);
};

const ::domi::KernelDef&
TaskDef::_Internal::kernel(const TaskDef* msg) {
  return *msg->kernel_;
}
const ::domi::KernelExDef&
TaskDef::_Internal::kernel_ex(const TaskDef* msg) {
  return *msg->kernel_ex_;
}
const ::domi::KernelHcclDef&
TaskDef::_Internal::kernel_hccl(const TaskDef* msg) {
  return *msg->kernel_hccl_;
}
const ::domi::EventExDef&
TaskDef::_Internal::event_ex(const TaskDef* msg) {
  return *msg->event_ex_;
}
const ::domi::LogTimeStampDef&
TaskDef::_Internal::log_timestamp(const TaskDef* msg) {
  return *msg->log_timestamp_;
}
const ::domi::MemcpyAsyncDef&
TaskDef::_Internal::memcpy_async(const TaskDef* msg) {
  return *msg->memcpy_async_;
}
const ::domi::StreamSwitchDef&
TaskDef::_Internal::stream_switch(const TaskDef* msg) {
  return *msg->stream_switch_;
}
const ::domi::StreamActiveDef&
TaskDef::_Internal::stream_active(const TaskDef* msg) {
  return *msg->stream_active_;
}
const ::domi::StreamSwitchNDef&
TaskDef::_Internal::stream_switch_n(const TaskDef* msg) {
  return *msg->stream_switch_n_;
}
const ::domi::LabelSetDef&
TaskDef::_Internal::label_set(const TaskDef* msg) {
  return *msg->label_set_;
}
const ::domi::LabelGotoExDef&
TaskDef::_Internal::label_goto_ex(const TaskDef* msg) {
  return *msg->label_goto_ex_;
}
const ::domi::LabelSwitchByIndexDef&
TaskDef::_Internal::label_switch_by_index(const TaskDef* msg) {
  return *msg->label_switch_by_index_;
}
const ::domi::KernelDefWithHandle&
TaskDef::_Internal::kernel_with_handle(const TaskDef* msg) {
  return *msg->kernel_with_handle_;
}
const ::domi::FftsTaskDef&
TaskDef::_Internal::ffts_task(const TaskDef* msg) {
  return *msg->ffts_task_;
}
const ::domi::FftsPlusTaskDef&
TaskDef::_Internal::ffts_plus_task(const TaskDef* msg) {
  return *msg->ffts_plus_task_;
}
const ::domi::DSATaskDef&
TaskDef::_Internal::dsa_task(const TaskDef* msg) {
  return *msg->dsa_task_;
}
const ::domi::CmoTaskDef&
TaskDef::_Internal::cmo_task(const TaskDef* msg) {
  return *msg->cmo_task_;
}
const ::domi::CmoBarrierTaskDef&
TaskDef::_Internal::cmo_barrier_task(const TaskDef* msg) {
  return *msg->cmo_barrier_task_;
}
const ::domi::NpuGetFloatStatusDef&
TaskDef::_Internal::npu_get_float_status(const TaskDef* msg) {
  return *msg->npu_get_float_status_;
}
const ::domi::NpuClearFloatStatusDef&
TaskDef::_Internal::npu_clear_float_status(const TaskDef* msg) {
  return *msg->npu_clear_float_status_;
}
const ::domi::DvppTaskDef&
TaskDef::_Internal::dvpp_task(const TaskDef* msg) {
  return *msg->dvpp_task_;
}
TaskDef::TaskDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.TaskDef)
}
TaskDef::TaskDef(const TaskDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  private_def_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_private_def().empty()) {
    private_def_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_private_def(),
      GetArena());
  }
  if (from._internal_has_kernel()) {
    kernel_ = new ::domi::KernelDef(*from.kernel_);
  } else {
    kernel_ = nullptr;
  }
  if (from._internal_has_kernel_ex()) {
    kernel_ex_ = new ::domi::KernelExDef(*from.kernel_ex_);
  } else {
    kernel_ex_ = nullptr;
  }
  if (from._internal_has_kernel_hccl()) {
    kernel_hccl_ = new ::domi::KernelHcclDef(*from.kernel_hccl_);
  } else {
    kernel_hccl_ = nullptr;
  }
  if (from._internal_has_event_ex()) {
    event_ex_ = new ::domi::EventExDef(*from.event_ex_);
  } else {
    event_ex_ = nullptr;
  }
  if (from._internal_has_log_timestamp()) {
    log_timestamp_ = new ::domi::LogTimeStampDef(*from.log_timestamp_);
  } else {
    log_timestamp_ = nullptr;
  }
  if (from._internal_has_memcpy_async()) {
    memcpy_async_ = new ::domi::MemcpyAsyncDef(*from.memcpy_async_);
  } else {
    memcpy_async_ = nullptr;
  }
  if (from._internal_has_stream_switch()) {
    stream_switch_ = new ::domi::StreamSwitchDef(*from.stream_switch_);
  } else {
    stream_switch_ = nullptr;
  }
  if (from._internal_has_stream_active()) {
    stream_active_ = new ::domi::StreamActiveDef(*from.stream_active_);
  } else {
    stream_active_ = nullptr;
  }
  if (from._internal_has_stream_switch_n()) {
    stream_switch_n_ = new ::domi::StreamSwitchNDef(*from.stream_switch_n_);
  } else {
    stream_switch_n_ = nullptr;
  }
  if (from._internal_has_label_set()) {
    label_set_ = new ::domi::LabelSetDef(*from.label_set_);
  } else {
    label_set_ = nullptr;
  }
  if (from._internal_has_label_goto_ex()) {
    label_goto_ex_ = new ::domi::LabelGotoExDef(*from.label_goto_ex_);
  } else {
    label_goto_ex_ = nullptr;
  }
  if (from._internal_has_label_switch_by_index()) {
    label_switch_by_index_ = new ::domi::LabelSwitchByIndexDef(*from.label_switch_by_index_);
  } else {
    label_switch_by_index_ = nullptr;
  }
  if (from._internal_has_kernel_with_handle()) {
    kernel_with_handle_ = new ::domi::KernelDefWithHandle(*from.kernel_with_handle_);
  } else {
    kernel_with_handle_ = nullptr;
  }
  if (from._internal_has_ffts_task()) {
    ffts_task_ = new ::domi::FftsTaskDef(*from.ffts_task_);
  } else {
    ffts_task_ = nullptr;
  }
  if (from._internal_has_ffts_plus_task()) {
    ffts_plus_task_ = new ::domi::FftsPlusTaskDef(*from.ffts_plus_task_);
  } else {
    ffts_plus_task_ = nullptr;
  }
  if (from._internal_has_dsa_task()) {
    dsa_task_ = new ::domi::DSATaskDef(*from.dsa_task_);
  } else {
    dsa_task_ = nullptr;
  }
  if (from._internal_has_cmo_task()) {
    cmo_task_ = new ::domi::CmoTaskDef(*from.cmo_task_);
  } else {
    cmo_task_ = nullptr;
  }
  if (from._internal_has_cmo_barrier_task()) {
    cmo_barrier_task_ = new ::domi::CmoBarrierTaskDef(*from.cmo_barrier_task_);
  } else {
    cmo_barrier_task_ = nullptr;
  }
  if (from._internal_has_npu_get_float_status()) {
    npu_get_float_status_ = new ::domi::NpuGetFloatStatusDef(*from.npu_get_float_status_);
  } else {
    npu_get_float_status_ = nullptr;
  }
  if (from._internal_has_npu_clear_float_status()) {
    npu_clear_float_status_ = new ::domi::NpuClearFloatStatusDef(*from.npu_clear_float_status_);
  } else {
    npu_clear_float_status_ = nullptr;
  }
  if (from._internal_has_dvpp_task()) {
    dvpp_task_ = new ::domi::DvppTaskDef(*from.dvpp_task_);
  } else {
    dvpp_task_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ops_kernel_store_ptr_) -
    reinterpret_cast<char*>(&id_)) + sizeof(ops_kernel_store_ptr_));
  // @@protoc_insertion_point(copy_constructor:domi.TaskDef)
}

void TaskDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TaskDef_task_2eproto.base);
  private_def_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&kernel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ops_kernel_store_ptr_) -
      reinterpret_cast<char*>(&kernel_)) + sizeof(ops_kernel_store_ptr_));
}

TaskDef::~TaskDef() {
  // @@protoc_insertion_point(destructor:domi.TaskDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaskDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  private_def_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete kernel_;
  if (this != internal_default_instance()) delete kernel_ex_;
  if (this != internal_default_instance()) delete kernel_hccl_;
  if (this != internal_default_instance()) delete event_ex_;
  if (this != internal_default_instance()) delete log_timestamp_;
  if (this != internal_default_instance()) delete memcpy_async_;
  if (this != internal_default_instance()) delete stream_switch_;
  if (this != internal_default_instance()) delete stream_active_;
  if (this != internal_default_instance()) delete stream_switch_n_;
  if (this != internal_default_instance()) delete label_set_;
  if (this != internal_default_instance()) delete label_goto_ex_;
  if (this != internal_default_instance()) delete label_switch_by_index_;
  if (this != internal_default_instance()) delete kernel_with_handle_;
  if (this != internal_default_instance()) delete ffts_task_;
  if (this != internal_default_instance()) delete ffts_plus_task_;
  if (this != internal_default_instance()) delete dsa_task_;
  if (this != internal_default_instance()) delete cmo_task_;
  if (this != internal_default_instance()) delete cmo_barrier_task_;
  if (this != internal_default_instance()) delete npu_get_float_status_;
  if (this != internal_default_instance()) delete npu_clear_float_status_;
  if (this != internal_default_instance()) delete dvpp_task_;
}

void TaskDef::ArenaDtor(void* object) {
  TaskDef* _this = reinterpret_cast< TaskDef* >(object);
  (void)_this;
}
void TaskDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskDef& TaskDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaskDef_task_2eproto.base);
  return *internal_default_instance();
}


void TaskDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.TaskDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  private_def_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && kernel_ != nullptr) {
    delete kernel_;
  }
  kernel_ = nullptr;
  if (GetArena() == nullptr && kernel_ex_ != nullptr) {
    delete kernel_ex_;
  }
  kernel_ex_ = nullptr;
  if (GetArena() == nullptr && kernel_hccl_ != nullptr) {
    delete kernel_hccl_;
  }
  kernel_hccl_ = nullptr;
  if (GetArena() == nullptr && event_ex_ != nullptr) {
    delete event_ex_;
  }
  event_ex_ = nullptr;
  if (GetArena() == nullptr && log_timestamp_ != nullptr) {
    delete log_timestamp_;
  }
  log_timestamp_ = nullptr;
  if (GetArena() == nullptr && memcpy_async_ != nullptr) {
    delete memcpy_async_;
  }
  memcpy_async_ = nullptr;
  if (GetArena() == nullptr && stream_switch_ != nullptr) {
    delete stream_switch_;
  }
  stream_switch_ = nullptr;
  if (GetArena() == nullptr && stream_active_ != nullptr) {
    delete stream_active_;
  }
  stream_active_ = nullptr;
  if (GetArena() == nullptr && stream_switch_n_ != nullptr) {
    delete stream_switch_n_;
  }
  stream_switch_n_ = nullptr;
  if (GetArena() == nullptr && label_set_ != nullptr) {
    delete label_set_;
  }
  label_set_ = nullptr;
  if (GetArena() == nullptr && label_goto_ex_ != nullptr) {
    delete label_goto_ex_;
  }
  label_goto_ex_ = nullptr;
  if (GetArena() == nullptr && label_switch_by_index_ != nullptr) {
    delete label_switch_by_index_;
  }
  label_switch_by_index_ = nullptr;
  if (GetArena() == nullptr && kernel_with_handle_ != nullptr) {
    delete kernel_with_handle_;
  }
  kernel_with_handle_ = nullptr;
  if (GetArena() == nullptr && ffts_task_ != nullptr) {
    delete ffts_task_;
  }
  ffts_task_ = nullptr;
  if (GetArena() == nullptr && ffts_plus_task_ != nullptr) {
    delete ffts_plus_task_;
  }
  ffts_plus_task_ = nullptr;
  if (GetArena() == nullptr && dsa_task_ != nullptr) {
    delete dsa_task_;
  }
  dsa_task_ = nullptr;
  if (GetArena() == nullptr && cmo_task_ != nullptr) {
    delete cmo_task_;
  }
  cmo_task_ = nullptr;
  if (GetArena() == nullptr && cmo_barrier_task_ != nullptr) {
    delete cmo_barrier_task_;
  }
  cmo_barrier_task_ = nullptr;
  if (GetArena() == nullptr && npu_get_float_status_ != nullptr) {
    delete npu_get_float_status_;
  }
  npu_get_float_status_ = nullptr;
  if (GetArena() == nullptr && npu_clear_float_status_ != nullptr) {
    delete npu_clear_float_status_;
  }
  npu_clear_float_status_ = nullptr;
  if (GetArena() == nullptr && dvpp_task_ != nullptr) {
    delete dvpp_task_;
  }
  dvpp_task_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ops_kernel_store_ptr_) -
      reinterpret_cast<char*>(&id_)) + sizeof(ops_kernel_store_ptr_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 stream_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 event_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 notify_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          notify_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.KernelDef kernel = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_kernel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.KernelExDef kernel_ex = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_kernel_ex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.KernelHcclDef kernel_hccl = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_kernel_hccl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.EventExDef event_ex = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_event_ex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.LogTimeStampDef log_timestamp = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_log_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 label_id = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          label_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.MemcpyAsyncDef memcpy_async = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_memcpy_async(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.StreamSwitchDef stream_switch = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_switch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.StreamActiveDef stream_active = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_active(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes private_def = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_private_def();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 ops_kernel_store_ptr = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ops_kernel_store_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.StreamSwitchNDef stream_switch_n = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_switch_n(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.LabelSetDef label_set = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.LabelGotoExDef label_goto_ex = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_goto_ex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.LabelSwitchByIndexDef label_switch_by_index = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_switch_by_index(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.KernelDefWithHandle kernel_with_handle = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_kernel_with_handle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.FftsTaskDef ffts_task = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ffts_task(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.FftsPlusTaskDef ffts_plus_task = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_ffts_plus_task(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.DSATaskDef dsa_task = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_dsa_task(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.CmoTaskDef cmo_task = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_cmo_task(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.CmoBarrierTaskDef cmo_barrier_task = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_cmo_barrier_task(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.NpuGetFloatStatusDef npu_get_float_status = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_npu_get_float_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.NpuClearFloatStatusDef npu_clear_float_status = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_npu_clear_float_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.DvppTaskDef dvpp_task = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_dvpp_task(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.TaskDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // uint32 stream_id = 10;
  if (this->stream_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_stream_id(), target);
  }

  // uint32 event_id = 11;
  if (this->event_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_event_id(), target);
  }

  // uint32 notify_id = 12;
  if (this->notify_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_notify_id(), target);
  }

  // .domi.KernelDef kernel = 20;
  if (this->has_kernel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::kernel(this), target, stream);
  }

  // .domi.KernelExDef kernel_ex = 21;
  if (this->has_kernel_ex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::kernel_ex(this), target, stream);
  }

  // .domi.KernelHcclDef kernel_hccl = 25;
  if (this->has_kernel_hccl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::kernel_hccl(this), target, stream);
  }

  // .domi.EventExDef event_ex = 26;
  if (this->has_event_ex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::event_ex(this), target, stream);
  }

  // .domi.LogTimeStampDef log_timestamp = 28;
  if (this->has_log_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::log_timestamp(this), target, stream);
  }

  // uint32 label_id = 30;
  if (this->label_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_label_id(), target);
  }

  // .domi.MemcpyAsyncDef memcpy_async = 31;
  if (this->has_memcpy_async()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::memcpy_async(this), target, stream);
  }

  // .domi.StreamSwitchDef stream_switch = 32;
  if (this->has_stream_switch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::stream_switch(this), target, stream);
  }

  // .domi.StreamActiveDef stream_active = 33;
  if (this->has_stream_active()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::stream_active(this), target, stream);
  }

  // bytes private_def = 34;
  if (this->private_def().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        34, this->_internal_private_def(), target);
  }

  // uint64 ops_kernel_store_ptr = 35;
  if (this->ops_kernel_store_ptr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(35, this->_internal_ops_kernel_store_ptr(), target);
  }

  // .domi.StreamSwitchNDef stream_switch_n = 36;
  if (this->has_stream_switch_n()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        36, _Internal::stream_switch_n(this), target, stream);
  }

  // .domi.LabelSetDef label_set = 37;
  if (this->has_label_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        37, _Internal::label_set(this), target, stream);
  }

  // .domi.LabelGotoExDef label_goto_ex = 38;
  if (this->has_label_goto_ex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        38, _Internal::label_goto_ex(this), target, stream);
  }

  // .domi.LabelSwitchByIndexDef label_switch_by_index = 39;
  if (this->has_label_switch_by_index()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        39, _Internal::label_switch_by_index(this), target, stream);
  }

  // .domi.KernelDefWithHandle kernel_with_handle = 40;
  if (this->has_kernel_with_handle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::kernel_with_handle(this), target, stream);
  }

  // .domi.FftsTaskDef ffts_task = 41;
  if (this->has_ffts_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::ffts_task(this), target, stream);
  }

  // .domi.FftsPlusTaskDef ffts_plus_task = 42;
  if (this->has_ffts_plus_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        42, _Internal::ffts_plus_task(this), target, stream);
  }

  // .domi.DSATaskDef dsa_task = 43;
  if (this->has_dsa_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        43, _Internal::dsa_task(this), target, stream);
  }

  // .domi.CmoTaskDef cmo_task = 44;
  if (this->has_cmo_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        44, _Internal::cmo_task(this), target, stream);
  }

  // .domi.CmoBarrierTaskDef cmo_barrier_task = 45;
  if (this->has_cmo_barrier_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        45, _Internal::cmo_barrier_task(this), target, stream);
  }

  // .domi.NpuGetFloatStatusDef npu_get_float_status = 46;
  if (this->has_npu_get_float_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        46, _Internal::npu_get_float_status(this), target, stream);
  }

  // .domi.NpuClearFloatStatusDef npu_clear_float_status = 47;
  if (this->has_npu_clear_float_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        47, _Internal::npu_clear_float_status(this), target, stream);
  }

  // .domi.DvppTaskDef dvpp_task = 48;
  if (this->has_dvpp_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        48, _Internal::dvpp_task(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.TaskDef)
  return target;
}

size_t TaskDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.TaskDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes private_def = 34;
  if (this->private_def().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_private_def());
  }

  // .domi.KernelDef kernel = 20;
  if (this->has_kernel()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kernel_);
  }

  // .domi.KernelExDef kernel_ex = 21;
  if (this->has_kernel_ex()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kernel_ex_);
  }

  // .domi.KernelHcclDef kernel_hccl = 25;
  if (this->has_kernel_hccl()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kernel_hccl_);
  }

  // .domi.EventExDef event_ex = 26;
  if (this->has_event_ex()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *event_ex_);
  }

  // .domi.LogTimeStampDef log_timestamp = 28;
  if (this->has_log_timestamp()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *log_timestamp_);
  }

  // .domi.MemcpyAsyncDef memcpy_async = 31;
  if (this->has_memcpy_async()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *memcpy_async_);
  }

  // .domi.StreamSwitchDef stream_switch = 32;
  if (this->has_stream_switch()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stream_switch_);
  }

  // .domi.StreamActiveDef stream_active = 33;
  if (this->has_stream_active()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stream_active_);
  }

  // .domi.StreamSwitchNDef stream_switch_n = 36;
  if (this->has_stream_switch_n()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stream_switch_n_);
  }

  // .domi.LabelSetDef label_set = 37;
  if (this->has_label_set()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *label_set_);
  }

  // .domi.LabelGotoExDef label_goto_ex = 38;
  if (this->has_label_goto_ex()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *label_goto_ex_);
  }

  // .domi.LabelSwitchByIndexDef label_switch_by_index = 39;
  if (this->has_label_switch_by_index()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *label_switch_by_index_);
  }

  // .domi.KernelDefWithHandle kernel_with_handle = 40;
  if (this->has_kernel_with_handle()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kernel_with_handle_);
  }

  // .domi.FftsTaskDef ffts_task = 41;
  if (this->has_ffts_task()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ffts_task_);
  }

  // .domi.FftsPlusTaskDef ffts_plus_task = 42;
  if (this->has_ffts_plus_task()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ffts_plus_task_);
  }

  // .domi.DSATaskDef dsa_task = 43;
  if (this->has_dsa_task()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dsa_task_);
  }

  // .domi.CmoTaskDef cmo_task = 44;
  if (this->has_cmo_task()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cmo_task_);
  }

  // .domi.CmoBarrierTaskDef cmo_barrier_task = 45;
  if (this->has_cmo_barrier_task()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cmo_barrier_task_);
  }

  // .domi.NpuGetFloatStatusDef npu_get_float_status = 46;
  if (this->has_npu_get_float_status()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *npu_get_float_status_);
  }

  // .domi.NpuClearFloatStatusDef npu_clear_float_status = 47;
  if (this->has_npu_clear_float_status()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *npu_clear_float_status_);
  }

  // .domi.DvppTaskDef dvpp_task = 48;
  if (this->has_dvpp_task()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dvpp_task_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // uint32 stream_id = 10;
  if (this->stream_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stream_id());
  }

  // uint32 event_id = 11;
  if (this->event_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_event_id());
  }

  // uint32 notify_id = 12;
  if (this->notify_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_notify_id());
  }

  // uint32 label_id = 30;
  if (this->label_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_label_id());
  }

  // uint64 ops_kernel_store_ptr = 35;
  if (this->ops_kernel_store_ptr() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ops_kernel_store_ptr());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.TaskDef)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.TaskDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.TaskDef)
    MergeFrom(*source);
  }
}

void TaskDef::MergeFrom(const TaskDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.TaskDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.private_def().size() > 0) {
    _internal_set_private_def(from._internal_private_def());
  }
  if (from.has_kernel()) {
    _internal_mutable_kernel()->::domi::KernelDef::MergeFrom(from._internal_kernel());
  }
  if (from.has_kernel_ex()) {
    _internal_mutable_kernel_ex()->::domi::KernelExDef::MergeFrom(from._internal_kernel_ex());
  }
  if (from.has_kernel_hccl()) {
    _internal_mutable_kernel_hccl()->::domi::KernelHcclDef::MergeFrom(from._internal_kernel_hccl());
  }
  if (from.has_event_ex()) {
    _internal_mutable_event_ex()->::domi::EventExDef::MergeFrom(from._internal_event_ex());
  }
  if (from.has_log_timestamp()) {
    _internal_mutable_log_timestamp()->::domi::LogTimeStampDef::MergeFrom(from._internal_log_timestamp());
  }
  if (from.has_memcpy_async()) {
    _internal_mutable_memcpy_async()->::domi::MemcpyAsyncDef::MergeFrom(from._internal_memcpy_async());
  }
  if (from.has_stream_switch()) {
    _internal_mutable_stream_switch()->::domi::StreamSwitchDef::MergeFrom(from._internal_stream_switch());
  }
  if (from.has_stream_active()) {
    _internal_mutable_stream_active()->::domi::StreamActiveDef::MergeFrom(from._internal_stream_active());
  }
  if (from.has_stream_switch_n()) {
    _internal_mutable_stream_switch_n()->::domi::StreamSwitchNDef::MergeFrom(from._internal_stream_switch_n());
  }
  if (from.has_label_set()) {
    _internal_mutable_label_set()->::domi::LabelSetDef::MergeFrom(from._internal_label_set());
  }
  if (from.has_label_goto_ex()) {
    _internal_mutable_label_goto_ex()->::domi::LabelGotoExDef::MergeFrom(from._internal_label_goto_ex());
  }
  if (from.has_label_switch_by_index()) {
    _internal_mutable_label_switch_by_index()->::domi::LabelSwitchByIndexDef::MergeFrom(from._internal_label_switch_by_index());
  }
  if (from.has_kernel_with_handle()) {
    _internal_mutable_kernel_with_handle()->::domi::KernelDefWithHandle::MergeFrom(from._internal_kernel_with_handle());
  }
  if (from.has_ffts_task()) {
    _internal_mutable_ffts_task()->::domi::FftsTaskDef::MergeFrom(from._internal_ffts_task());
  }
  if (from.has_ffts_plus_task()) {
    _internal_mutable_ffts_plus_task()->::domi::FftsPlusTaskDef::MergeFrom(from._internal_ffts_plus_task());
  }
  if (from.has_dsa_task()) {
    _internal_mutable_dsa_task()->::domi::DSATaskDef::MergeFrom(from._internal_dsa_task());
  }
  if (from.has_cmo_task()) {
    _internal_mutable_cmo_task()->::domi::CmoTaskDef::MergeFrom(from._internal_cmo_task());
  }
  if (from.has_cmo_barrier_task()) {
    _internal_mutable_cmo_barrier_task()->::domi::CmoBarrierTaskDef::MergeFrom(from._internal_cmo_barrier_task());
  }
  if (from.has_npu_get_float_status()) {
    _internal_mutable_npu_get_float_status()->::domi::NpuGetFloatStatusDef::MergeFrom(from._internal_npu_get_float_status());
  }
  if (from.has_npu_clear_float_status()) {
    _internal_mutable_npu_clear_float_status()->::domi::NpuClearFloatStatusDef::MergeFrom(from._internal_npu_clear_float_status());
  }
  if (from.has_dvpp_task()) {
    _internal_mutable_dvpp_task()->::domi::DvppTaskDef::MergeFrom(from._internal_dvpp_task());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.stream_id() != 0) {
    _internal_set_stream_id(from._internal_stream_id());
  }
  if (from.event_id() != 0) {
    _internal_set_event_id(from._internal_event_id());
  }
  if (from.notify_id() != 0) {
    _internal_set_notify_id(from._internal_notify_id());
  }
  if (from.label_id() != 0) {
    _internal_set_label_id(from._internal_label_id());
  }
  if (from.ops_kernel_store_ptr() != 0) {
    _internal_set_ops_kernel_store_ptr(from._internal_ops_kernel_store_ptr());
  }
}

void TaskDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.TaskDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskDef::CopyFrom(const TaskDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.TaskDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskDef::IsInitialized() const {
  return true;
}

void TaskDef::InternalSwap(TaskDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  private_def_.Swap(&other->private_def_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskDef, ops_kernel_store_ptr_)
      + sizeof(TaskDef::ops_kernel_store_ptr_)
      - PROTOBUF_FIELD_OFFSET(TaskDef, kernel_)>(
          reinterpret_cast<char*>(&kernel_),
          reinterpret_cast<char*>(&other->kernel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KernelDef::InitAsDefaultInstance() {
  ::domi::_KernelDef_default_instance_._instance.get_mutable()->context_ = const_cast< ::domi::KernelContext*>(
      ::domi::KernelContext::internal_default_instance());
}
class KernelDef::_Internal {
 public:
  static const ::domi::KernelContext& context(const KernelDef* msg);
};

const ::domi::KernelContext&
KernelDef::_Internal::context(const KernelDef* msg) {
  return *msg->context_;
}
KernelDef::KernelDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  args_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.KernelDef)
}
KernelDef::KernelDef(const KernelDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      args_info_(from.args_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stub_func_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stub_func().empty()) {
    stub_func_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_stub_func(),
      GetArena());
  }
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_args().empty()) {
    args_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_args(),
      GetArena());
  }
  sm_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sm_desc().empty()) {
    sm_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sm_desc(),
      GetArena());
  }
  flowtable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_flowtable().empty()) {
    flowtable_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_flowtable(),
      GetArena());
  }
  so_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_so_name().empty()) {
    so_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_so_name(),
      GetArena());
  }
  kernel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_kernel_name().empty()) {
    kernel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_kernel_name(),
      GetArena());
  }
  kernel_ext_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_kernel_ext_info().empty()) {
    kernel_ext_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_kernel_ext_info(),
      GetArena());
  }
  if (from._internal_has_context()) {
    context_ = new ::domi::KernelContext(*from.context_);
  } else {
    context_ = nullptr;
  }
  ::memcpy(&block_dim_, &from.block_dim_,
    static_cast<size_t>(reinterpret_cast<char*>(&kernel_ext_info_size_) -
    reinterpret_cast<char*>(&block_dim_)) + sizeof(kernel_ext_info_size_));
  // @@protoc_insertion_point(copy_constructor:domi.KernelDef)
}

void KernelDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KernelDef_task_2eproto.base);
  stub_func_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sm_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flowtable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  so_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kernel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kernel_ext_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&context_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kernel_ext_info_size_) -
      reinterpret_cast<char*>(&context_)) + sizeof(kernel_ext_info_size_));
}

KernelDef::~KernelDef() {
  // @@protoc_insertion_point(destructor:domi.KernelDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KernelDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stub_func_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  args_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sm_desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flowtable_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  so_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kernel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kernel_ext_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete context_;
}

void KernelDef::ArenaDtor(void* object) {
  KernelDef* _this = reinterpret_cast< KernelDef* >(object);
  (void)_this;
}
void KernelDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KernelDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KernelDef& KernelDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KernelDef_task_2eproto.base);
  return *internal_default_instance();
}


void KernelDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.KernelDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_info_.Clear();
  stub_func_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  args_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sm_desc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  flowtable_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  so_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kernel_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kernel_ext_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  ::memset(&block_dim_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kernel_ext_info_size_) -
      reinterpret_cast<char*>(&block_dim_)) + sizeof(kernel_ext_info_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KernelDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .domi.KernelContext context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stub_func = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_stub_func();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "domi.KernelDef.stub_func"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 block_dim = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          block_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 args_size = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          args_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes args = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_args();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sm_desc = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_sm_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes flowtable = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_flowtable();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string so_name = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_so_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "domi.KernelDef.so_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string kernel_name = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_kernel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "domi.KernelDef.kernel_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes kernel_ext_info = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_kernel_ext_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 kernel_ext_info_size = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          kernel_ext_info_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .domi.ArgsInfo args_info = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_args_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KernelDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.KernelDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .domi.KernelContext context = 1;
  if (this->has_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::context(this), target, stream);
  }

  // string stub_func = 10;
  if (this->stub_func().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stub_func().data(), static_cast<int>(this->_internal_stub_func().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "domi.KernelDef.stub_func");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_stub_func(), target);
  }

  // uint32 block_dim = 11;
  if (this->block_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_block_dim(), target);
  }

  // uint32 args_size = 12;
  if (this->args_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_args_size(), target);
  }

  // bytes args = 13;
  if (this->args().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_args(), target);
  }

  // bytes sm_desc = 14;
  if (this->sm_desc().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_sm_desc(), target);
  }

  // bytes flowtable = 15;
  if (this->flowtable().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_flowtable(), target);
  }

  // string so_name = 16;
  if (this->so_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_so_name().data(), static_cast<int>(this->_internal_so_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "domi.KernelDef.so_name");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_so_name(), target);
  }

  // string kernel_name = 17;
  if (this->kernel_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kernel_name().data(), static_cast<int>(this->_internal_kernel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "domi.KernelDef.kernel_name");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_kernel_name(), target);
  }

  // bytes kernel_ext_info = 18;
  if (this->kernel_ext_info().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        18, this->_internal_kernel_ext_info(), target);
  }

  // uint32 kernel_ext_info_size = 19;
  if (this->kernel_ext_info_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_kernel_ext_info_size(), target);
  }

  // repeated .domi.ArgsInfo args_info = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_args_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.KernelDef)
  return target;
}

size_t KernelDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.KernelDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .domi.ArgsInfo args_info = 20;
  total_size += 2UL * this->_internal_args_info_size();
  for (const auto& msg : this->args_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string stub_func = 10;
  if (this->stub_func().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stub_func());
  }

  // bytes args = 13;
  if (this->args().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_args());
  }

  // bytes sm_desc = 14;
  if (this->sm_desc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sm_desc());
  }

  // bytes flowtable = 15;
  if (this->flowtable().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flowtable());
  }

  // string so_name = 16;
  if (this->so_name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_so_name());
  }

  // string kernel_name = 17;
  if (this->kernel_name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kernel_name());
  }

  // bytes kernel_ext_info = 18;
  if (this->kernel_ext_info().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_kernel_ext_info());
  }

  // .domi.KernelContext context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *context_);
  }

  // uint32 block_dim = 11;
  if (this->block_dim() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_block_dim());
  }

  // uint32 args_size = 12;
  if (this->args_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_args_size());
  }

  // uint32 kernel_ext_info_size = 19;
  if (this->kernel_ext_info_size() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_kernel_ext_info_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KernelDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.KernelDef)
  GOOGLE_DCHECK_NE(&from, this);
  const KernelDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KernelDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.KernelDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.KernelDef)
    MergeFrom(*source);
  }
}

void KernelDef::MergeFrom(const KernelDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.KernelDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_info_.MergeFrom(from.args_info_);
  if (from.stub_func().size() > 0) {
    _internal_set_stub_func(from._internal_stub_func());
  }
  if (from.args().size() > 0) {
    _internal_set_args(from._internal_args());
  }
  if (from.sm_desc().size() > 0) {
    _internal_set_sm_desc(from._internal_sm_desc());
  }
  if (from.flowtable().size() > 0) {
    _internal_set_flowtable(from._internal_flowtable());
  }
  if (from.so_name().size() > 0) {
    _internal_set_so_name(from._internal_so_name());
  }
  if (from.kernel_name().size() > 0) {
    _internal_set_kernel_name(from._internal_kernel_name());
  }
  if (from.kernel_ext_info().size() > 0) {
    _internal_set_kernel_ext_info(from._internal_kernel_ext_info());
  }
  if (from.has_context()) {
    _internal_mutable_context()->::domi::KernelContext::MergeFrom(from._internal_context());
  }
  if (from.block_dim() != 0) {
    _internal_set_block_dim(from._internal_block_dim());
  }
  if (from.args_size() != 0) {
    _internal_set_args_size(from._internal_args_size());
  }
  if (from.kernel_ext_info_size() != 0) {
    _internal_set_kernel_ext_info_size(from._internal_kernel_ext_info_size());
  }
}

void KernelDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.KernelDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KernelDef::CopyFrom(const KernelDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.KernelDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KernelDef::IsInitialized() const {
  return true;
}

void KernelDef::InternalSwap(KernelDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  args_info_.InternalSwap(&other->args_info_);
  stub_func_.Swap(&other->stub_func_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  args_.Swap(&other->args_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sm_desc_.Swap(&other->sm_desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  flowtable_.Swap(&other->flowtable_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  so_name_.Swap(&other->so_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kernel_name_.Swap(&other->kernel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kernel_ext_info_.Swap(&other->kernel_ext_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KernelDef, kernel_ext_info_size_)
      + sizeof(KernelDef::kernel_ext_info_size_)
      - PROTOBUF_FIELD_OFFSET(KernelDef, context_)>(
          reinterpret_cast<char*>(&context_),
          reinterpret_cast<char*>(&other->context_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KernelDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KernelDefWithHandle::InitAsDefaultInstance() {
  ::domi::_KernelDefWithHandle_default_instance_._instance.get_mutable()->context_ = const_cast< ::domi::KernelContext*>(
      ::domi::KernelContext::internal_default_instance());
}
class KernelDefWithHandle::_Internal {
 public:
  static const ::domi::KernelContext& context(const KernelDefWithHandle* msg);
};

const ::domi::KernelContext&
KernelDefWithHandle::_Internal::context(const KernelDefWithHandle* msg) {
  return *msg->context_;
}
KernelDefWithHandle::KernelDefWithHandle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  args_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.KernelDefWithHandle)
}
KernelDefWithHandle::KernelDefWithHandle(const KernelDefWithHandle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      args_info_(from.args_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dev_func_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dev_func().empty()) {
    dev_func_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dev_func(),
      GetArena());
  }
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_args().empty()) {
    args_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_args(),
      GetArena());
  }
  sm_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sm_desc().empty()) {
    sm_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sm_desc(),
      GetArena());
  }
  original_kernel_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_original_kernel_key().empty()) {
    original_kernel_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_original_kernel_key(),
      GetArena());
  }
  node_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_info().empty()) {
    node_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_node_info(),
      GetArena());
  }
  if (from._internal_has_context()) {
    context_ = new ::domi::KernelContext(*from.context_);
  } else {
    context_ = nullptr;
  }
  ::memcpy(&handle_, &from.handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&args_size_) -
    reinterpret_cast<char*>(&handle_)) + sizeof(args_size_));
  // @@protoc_insertion_point(copy_constructor:domi.KernelDefWithHandle)
}

void KernelDefWithHandle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KernelDefWithHandle_task_2eproto.base);
  dev_func_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sm_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  original_kernel_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&context_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&args_size_) -
      reinterpret_cast<char*>(&context_)) + sizeof(args_size_));
}

KernelDefWithHandle::~KernelDefWithHandle() {
  // @@protoc_insertion_point(destructor:domi.KernelDefWithHandle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KernelDefWithHandle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dev_func_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  args_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sm_desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  original_kernel_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete context_;
}

void KernelDefWithHandle::ArenaDtor(void* object) {
  KernelDefWithHandle* _this = reinterpret_cast< KernelDefWithHandle* >(object);
  (void)_this;
}
void KernelDefWithHandle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KernelDefWithHandle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KernelDefWithHandle& KernelDefWithHandle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KernelDefWithHandle_task_2eproto.base);
  return *internal_default_instance();
}


void KernelDefWithHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.KernelDefWithHandle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_info_.Clear();
  dev_func_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  args_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sm_desc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  original_kernel_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  node_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  ::memset(&handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&args_size_) -
      reinterpret_cast<char*>(&handle_)) + sizeof(args_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KernelDefWithHandle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .domi.KernelContext context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 handle = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dev_func = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_dev_func();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "domi.KernelDefWithHandle.dev_func"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 block_dim = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          block_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 args_size = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          args_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes args = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_args();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sm_desc = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_sm_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string original_kernel_key = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_original_kernel_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "domi.KernelDefWithHandle.original_kernel_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node_info = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_node_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "domi.KernelDefWithHandle.node_info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .domi.ArgsInfo args_info = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_args_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KernelDefWithHandle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.KernelDefWithHandle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .domi.KernelContext context = 1;
  if (this->has_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::context(this), target, stream);
  }

  // uint64 handle = 10;
  if (this->handle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_handle(), target);
  }

  // string dev_func = 11;
  if (this->dev_func().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_func().data(), static_cast<int>(this->_internal_dev_func().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "domi.KernelDefWithHandle.dev_func");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_dev_func(), target);
  }

  // uint32 block_dim = 12;
  if (this->block_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_block_dim(), target);
  }

  // uint32 args_size = 13;
  if (this->args_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_args_size(), target);
  }

  // bytes args = 14;
  if (this->args().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_args(), target);
  }

  // bytes sm_desc = 15;
  if (this->sm_desc().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_sm_desc(), target);
  }

  // string original_kernel_key = 16;
  if (this->original_kernel_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_original_kernel_key().data(), static_cast<int>(this->_internal_original_kernel_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "domi.KernelDefWithHandle.original_kernel_key");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_original_kernel_key(), target);
  }

  // string node_info = 17;
  if (this->node_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_info().data(), static_cast<int>(this->_internal_node_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "domi.KernelDefWithHandle.node_info");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_node_info(), target);
  }

  // repeated .domi.ArgsInfo args_info = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_args_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.KernelDefWithHandle)
  return target;
}

size_t KernelDefWithHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.KernelDefWithHandle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .domi.ArgsInfo args_info = 18;
  total_size += 2UL * this->_internal_args_info_size();
  for (const auto& msg : this->args_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string dev_func = 11;
  if (this->dev_func().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_func());
  }

  // bytes args = 14;
  if (this->args().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_args());
  }

  // bytes sm_desc = 15;
  if (this->sm_desc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sm_desc());
  }

  // string original_kernel_key = 16;
  if (this->original_kernel_key().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_original_kernel_key());
  }

  // string node_info = 17;
  if (this->node_info().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_info());
  }

  // .domi.KernelContext context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *context_);
  }

  // uint64 handle = 10;
  if (this->handle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_handle());
  }

  // uint32 block_dim = 12;
  if (this->block_dim() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_block_dim());
  }

  // uint32 args_size = 13;
  if (this->args_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_args_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KernelDefWithHandle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.KernelDefWithHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const KernelDefWithHandle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KernelDefWithHandle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.KernelDefWithHandle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.KernelDefWithHandle)
    MergeFrom(*source);
  }
}

void KernelDefWithHandle::MergeFrom(const KernelDefWithHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.KernelDefWithHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_info_.MergeFrom(from.args_info_);
  if (from.dev_func().size() > 0) {
    _internal_set_dev_func(from._internal_dev_func());
  }
  if (from.args().size() > 0) {
    _internal_set_args(from._internal_args());
  }
  if (from.sm_desc().size() > 0) {
    _internal_set_sm_desc(from._internal_sm_desc());
  }
  if (from.original_kernel_key().size() > 0) {
    _internal_set_original_kernel_key(from._internal_original_kernel_key());
  }
  if (from.node_info().size() > 0) {
    _internal_set_node_info(from._internal_node_info());
  }
  if (from.has_context()) {
    _internal_mutable_context()->::domi::KernelContext::MergeFrom(from._internal_context());
  }
  if (from.handle() != 0) {
    _internal_set_handle(from._internal_handle());
  }
  if (from.block_dim() != 0) {
    _internal_set_block_dim(from._internal_block_dim());
  }
  if (from.args_size() != 0) {
    _internal_set_args_size(from._internal_args_size());
  }
}

void KernelDefWithHandle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.KernelDefWithHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KernelDefWithHandle::CopyFrom(const KernelDefWithHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.KernelDefWithHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KernelDefWithHandle::IsInitialized() const {
  return true;
}

void KernelDefWithHandle::InternalSwap(KernelDefWithHandle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  args_info_.InternalSwap(&other->args_info_);
  dev_func_.Swap(&other->dev_func_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  args_.Swap(&other->args_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sm_desc_.Swap(&other->sm_desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  original_kernel_key_.Swap(&other->original_kernel_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  node_info_.Swap(&other->node_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KernelDefWithHandle, args_size_)
      + sizeof(KernelDefWithHandle::args_size_)
      - PROTOBUF_FIELD_OFFSET(KernelDefWithHandle, context_)>(
          reinterpret_cast<char*>(&context_),
          reinterpret_cast<char*>(&other->context_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KernelDefWithHandle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KernelContext::InitAsDefaultInstance() {
}
class KernelContext::_Internal {
 public:
};

KernelContext::KernelContext(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  origin_op_index_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.KernelContext)
}
KernelContext::KernelContext(const KernelContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      origin_op_index_(from.origin_op_index_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  args_offset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_args_offset().empty()) {
    args_offset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_args_offset(),
      GetArena());
  }
  ::memcpy(&kernel_type_, &from.kernel_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&args_count_) -
    reinterpret_cast<char*>(&kernel_type_)) + sizeof(args_count_));
  // @@protoc_insertion_point(copy_constructor:domi.KernelContext)
}

void KernelContext::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KernelContext_task_2eproto.base);
  args_offset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&kernel_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&args_count_) -
      reinterpret_cast<char*>(&kernel_type_)) + sizeof(args_count_));
}

KernelContext::~KernelContext() {
  // @@protoc_insertion_point(destructor:domi.KernelContext)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KernelContext::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  args_offset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KernelContext::ArenaDtor(void* object) {
  KernelContext* _this = reinterpret_cast< KernelContext* >(object);
  (void)_this;
}
void KernelContext::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KernelContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KernelContext& KernelContext::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KernelContext_task_2eproto.base);
  return *internal_default_instance();
}


void KernelContext::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.KernelContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  origin_op_index_.Clear();
  args_offset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&kernel_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&args_count_) -
      reinterpret_cast<char*>(&kernel_type_)) + sizeof(args_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KernelContext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 kernel_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          kernel_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 op_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          op_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 kernel_func_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          kernel_func_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 op_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          op_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_flowtable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_flowtable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes args_offset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_args_offset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 args_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          args_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 origin_op_index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_origin_op_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_origin_op_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KernelContext::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.KernelContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 kernel_type = 1;
  if (this->kernel_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_kernel_type(), target);
  }

  // uint32 op_id = 2;
  if (this->op_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_op_id(), target);
  }

  // uint32 kernel_func_id = 3;
  if (this->kernel_func_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_kernel_func_id(), target);
  }

  // uint32 op_index = 4;
  if (this->op_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_op_index(), target);
  }

  // bool is_flowtable = 5;
  if (this->is_flowtable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_flowtable(), target);
  }

  // bytes args_offset = 6;
  if (this->args_offset().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_args_offset(), target);
  }

  // uint32 args_count = 7;
  if (this->args_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_args_count(), target);
  }

  // repeated uint32 origin_op_index = 8;
  {
    int byte_size = _origin_op_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          8, _internal_origin_op_index(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.KernelContext)
  return target;
}

size_t KernelContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.KernelContext)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 origin_op_index = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->origin_op_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _origin_op_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes args_offset = 6;
  if (this->args_offset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_args_offset());
  }

  // uint32 kernel_type = 1;
  if (this->kernel_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_kernel_type());
  }

  // uint32 op_id = 2;
  if (this->op_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_op_id());
  }

  // uint32 kernel_func_id = 3;
  if (this->kernel_func_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_kernel_func_id());
  }

  // uint32 op_index = 4;
  if (this->op_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_op_index());
  }

  // bool is_flowtable = 5;
  if (this->is_flowtable() != 0) {
    total_size += 1 + 1;
  }

  // uint32 args_count = 7;
  if (this->args_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_args_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KernelContext::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.KernelContext)
  GOOGLE_DCHECK_NE(&from, this);
  const KernelContext* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KernelContext>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.KernelContext)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.KernelContext)
    MergeFrom(*source);
  }
}

void KernelContext::MergeFrom(const KernelContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.KernelContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  origin_op_index_.MergeFrom(from.origin_op_index_);
  if (from.args_offset().size() > 0) {
    _internal_set_args_offset(from._internal_args_offset());
  }
  if (from.kernel_type() != 0) {
    _internal_set_kernel_type(from._internal_kernel_type());
  }
  if (from.op_id() != 0) {
    _internal_set_op_id(from._internal_op_id());
  }
  if (from.kernel_func_id() != 0) {
    _internal_set_kernel_func_id(from._internal_kernel_func_id());
  }
  if (from.op_index() != 0) {
    _internal_set_op_index(from._internal_op_index());
  }
  if (from.is_flowtable() != 0) {
    _internal_set_is_flowtable(from._internal_is_flowtable());
  }
  if (from.args_count() != 0) {
    _internal_set_args_count(from._internal_args_count());
  }
}

void KernelContext::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.KernelContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KernelContext::CopyFrom(const KernelContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.KernelContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KernelContext::IsInitialized() const {
  return true;
}

void KernelContext::InternalSwap(KernelContext* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  origin_op_index_.InternalSwap(&other->origin_op_index_);
  args_offset_.Swap(&other->args_offset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KernelContext, args_count_)
      + sizeof(KernelContext::args_count_)
      - PROTOBUF_FIELD_OFFSET(KernelContext, kernel_type_)>(
          reinterpret_cast<char*>(&kernel_type_),
          reinterpret_cast<char*>(&other->kernel_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KernelContext::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArgsInfo::InitAsDefaultInstance() {
}
class ArgsInfo::_Internal {
 public:
};

ArgsInfo::ArgsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.ArgsInfo)
}
ArgsInfo::ArgsInfo(const ArgsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&arg_type_, &from.arg_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&arg_type_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:domi.ArgsInfo)
}

void ArgsInfo::SharedCtor() {
  ::memset(&arg_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&arg_type_)) + sizeof(size_));
}

ArgsInfo::~ArgsInfo() {
  // @@protoc_insertion_point(destructor:domi.ArgsInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArgsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ArgsInfo::ArenaDtor(void* object) {
  ArgsInfo* _this = reinterpret_cast< ArgsInfo* >(object);
  (void)_this;
}
void ArgsInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArgsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArgsInfo& ArgsInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArgsInfo_task_2eproto.base);
  return *internal_default_instance();
}


void ArgsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.ArgsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&arg_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&arg_type_)) + sizeof(size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArgsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .domi.ArgsInfo.ArgsType arg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_arg_type(static_cast<::domi::ArgsInfo_ArgsType>(val));
        } else goto handle_unusual;
        continue;
      // .domi.ArgsInfo.ArgsFormat arg_format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_arg_format(static_cast<::domi::ArgsInfo_ArgsFormat>(val));
        } else goto handle_unusual;
        continue;
      // int32 start_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          start_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArgsInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.ArgsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .domi.ArgsInfo.ArgsType arg_type = 1;
  if (this->arg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_arg_type(), target);
  }

  // .domi.ArgsInfo.ArgsFormat arg_format = 2;
  if (this->arg_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_arg_format(), target);
  }

  // int32 start_index = 3;
  if (this->start_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_start_index(), target);
  }

  // uint32 size = 4;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.ArgsInfo)
  return target;
}

size_t ArgsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.ArgsInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .domi.ArgsInfo.ArgsType arg_type = 1;
  if (this->arg_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_arg_type());
  }

  // .domi.ArgsInfo.ArgsFormat arg_format = 2;
  if (this->arg_format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_arg_format());
  }

  // int32 start_index = 3;
  if (this->start_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start_index());
  }

  // uint32 size = 4;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArgsInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.ArgsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ArgsInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArgsInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.ArgsInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.ArgsInfo)
    MergeFrom(*source);
  }
}

void ArgsInfo::MergeFrom(const ArgsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.ArgsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.arg_type() != 0) {
    _internal_set_arg_type(from._internal_arg_type());
  }
  if (from.arg_format() != 0) {
    _internal_set_arg_format(from._internal_arg_format());
  }
  if (from.start_index() != 0) {
    _internal_set_start_index(from._internal_start_index());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void ArgsInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.ArgsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArgsInfo::CopyFrom(const ArgsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.ArgsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArgsInfo::IsInitialized() const {
  return true;
}

void ArgsInfo::InternalSwap(ArgsInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArgsInfo, size_)
      + sizeof(ArgsInfo::size_)
      - PROTOBUF_FIELD_OFFSET(ArgsInfo, arg_type_)>(
          reinterpret_cast<char*>(&arg_type_),
          reinterpret_cast<char*>(&other->arg_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArgsInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KernelExDef::InitAsDefaultInstance() {
}
class KernelExDef::_Internal {
 public:
};

KernelExDef::KernelExDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.KernelExDef)
}
KernelExDef::KernelExDef(const KernelExDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_args().empty()) {
    args_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_args(),
      GetArena());
  }
  task_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_task_info().empty()) {
    task_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_task_info(),
      GetArena());
  }
  kernel_ext_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_kernel_ext_info().empty()) {
    kernel_ext_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_kernel_ext_info(),
      GetArena());
  }
  ::memcpy(&flags_, &from.flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&task_info_size_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(task_info_size_));
  // @@protoc_insertion_point(copy_constructor:domi.KernelExDef)
}

void KernelExDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KernelExDef_task_2eproto.base);
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kernel_ext_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_info_size_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(task_info_size_));
}

KernelExDef::~KernelExDef() {
  // @@protoc_insertion_point(destructor:domi.KernelExDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KernelExDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  args_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kernel_ext_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KernelExDef::ArenaDtor(void* object) {
  KernelExDef* _this = reinterpret_cast< KernelExDef* >(object);
  (void)_this;
}
void KernelExDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KernelExDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KernelExDef& KernelExDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KernelExDef_task_2eproto.base);
  return *internal_default_instance();
}


void KernelExDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.KernelExDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  task_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kernel_ext_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_info_size_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(task_info_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KernelExDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 op_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          op_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 args_size = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          args_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes args = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_args();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes task_info = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_task_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 task_info_size = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          task_info_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes kernel_ext_info = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_kernel_ext_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 kernel_ext_info_size = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          kernel_ext_info_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KernelExDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.KernelExDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flags = 1;
  if (this->flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_flags(), target);
  }

  // uint32 op_index = 4;
  if (this->op_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_op_index(), target);
  }

  // uint32 args_size = 12;
  if (this->args_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_args_size(), target);
  }

  // bytes args = 13;
  if (this->args().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_args(), target);
  }

  // bytes task_info = 14;
  if (this->task_info().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_task_info(), target);
  }

  // uint32 task_info_size = 15;
  if (this->task_info_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_task_info_size(), target);
  }

  // bytes kernel_ext_info = 16;
  if (this->kernel_ext_info().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_kernel_ext_info(), target);
  }

  // uint32 kernel_ext_info_size = 17;
  if (this->kernel_ext_info_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_kernel_ext_info_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.KernelExDef)
  return target;
}

size_t KernelExDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.KernelExDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes args = 13;
  if (this->args().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_args());
  }

  // bytes task_info = 14;
  if (this->task_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_task_info());
  }

  // bytes kernel_ext_info = 16;
  if (this->kernel_ext_info().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_kernel_ext_info());
  }

  // uint32 flags = 1;
  if (this->flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags());
  }

  // uint32 op_index = 4;
  if (this->op_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_op_index());
  }

  // uint32 kernel_ext_info_size = 17;
  if (this->kernel_ext_info_size() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_kernel_ext_info_size());
  }

  // uint32 args_size = 12;
  if (this->args_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_args_size());
  }

  // uint32 task_info_size = 15;
  if (this->task_info_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_task_info_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KernelExDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.KernelExDef)
  GOOGLE_DCHECK_NE(&from, this);
  const KernelExDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KernelExDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.KernelExDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.KernelExDef)
    MergeFrom(*source);
  }
}

void KernelExDef::MergeFrom(const KernelExDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.KernelExDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.args().size() > 0) {
    _internal_set_args(from._internal_args());
  }
  if (from.task_info().size() > 0) {
    _internal_set_task_info(from._internal_task_info());
  }
  if (from.kernel_ext_info().size() > 0) {
    _internal_set_kernel_ext_info(from._internal_kernel_ext_info());
  }
  if (from.flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  if (from.op_index() != 0) {
    _internal_set_op_index(from._internal_op_index());
  }
  if (from.kernel_ext_info_size() != 0) {
    _internal_set_kernel_ext_info_size(from._internal_kernel_ext_info_size());
  }
  if (from.args_size() != 0) {
    _internal_set_args_size(from._internal_args_size());
  }
  if (from.task_info_size() != 0) {
    _internal_set_task_info_size(from._internal_task_info_size());
  }
}

void KernelExDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.KernelExDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KernelExDef::CopyFrom(const KernelExDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.KernelExDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KernelExDef::IsInitialized() const {
  return true;
}

void KernelExDef::InternalSwap(KernelExDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  args_.Swap(&other->args_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  task_info_.Swap(&other->task_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kernel_ext_info_.Swap(&other->kernel_ext_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KernelExDef, task_info_size_)
      + sizeof(KernelExDef::task_info_size_)
      - PROTOBUF_FIELD_OFFSET(KernelExDef, flags_)>(
          reinterpret_cast<char*>(&flags_),
          reinterpret_cast<char*>(&other->flags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KernelExDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KernelHcclDef::InitAsDefaultInstance() {
}
class KernelHcclDef::_Internal {
 public:
};

KernelHcclDef::KernelHcclDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  input_zero_copy_flag_(arena),
  output_zero_copy_flag_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.KernelHcclDef)
}
KernelHcclDef::KernelHcclDef(const KernelHcclDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      input_zero_copy_flag_(from.input_zero_copy_flag_),
      output_zero_copy_flag_(from.output_zero_copy_flag_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hccl_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hccl_type().empty()) {
    hccl_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hccl_type(),
      GetArena());
  }
  op_index_ = from.op_index_;
  // @@protoc_insertion_point(copy_constructor:domi.KernelHcclDef)
}

void KernelHcclDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KernelHcclDef_task_2eproto.base);
  hccl_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_index_ = 0u;
}

KernelHcclDef::~KernelHcclDef() {
  // @@protoc_insertion_point(destructor:domi.KernelHcclDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KernelHcclDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hccl_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KernelHcclDef::ArenaDtor(void* object) {
  KernelHcclDef* _this = reinterpret_cast< KernelHcclDef* >(object);
  (void)_this;
}
void KernelHcclDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KernelHcclDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KernelHcclDef& KernelHcclDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KernelHcclDef_task_2eproto.base);
  return *internal_default_instance();
}


void KernelHcclDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.KernelHcclDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_zero_copy_flag_.Clear();
  output_zero_copy_flag_.Clear();
  hccl_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  op_index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KernelHcclDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 op_index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          op_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hccl_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_hccl_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "domi.KernelHcclDef.hccl_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 input_zero_copy_flag = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_input_zero_copy_flag(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_input_zero_copy_flag(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 output_zero_copy_flag = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_output_zero_copy_flag(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88) {
          _internal_add_output_zero_copy_flag(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KernelHcclDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.KernelHcclDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 op_index = 8;
  if (this->op_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_op_index(), target);
  }

  // string hccl_type = 9;
  if (this->hccl_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hccl_type().data(), static_cast<int>(this->_internal_hccl_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "domi.KernelHcclDef.hccl_type");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_hccl_type(), target);
  }

  // repeated int32 input_zero_copy_flag = 10;
  {
    int byte_size = _input_zero_copy_flag_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          10, _internal_input_zero_copy_flag(), byte_size, target);
    }
  }

  // repeated int32 output_zero_copy_flag = 11;
  {
    int byte_size = _output_zero_copy_flag_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          11, _internal_output_zero_copy_flag(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.KernelHcclDef)
  return target;
}

size_t KernelHcclDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.KernelHcclDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 input_zero_copy_flag = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->input_zero_copy_flag_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _input_zero_copy_flag_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 output_zero_copy_flag = 11;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->output_zero_copy_flag_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _output_zero_copy_flag_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string hccl_type = 9;
  if (this->hccl_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hccl_type());
  }

  // uint32 op_index = 8;
  if (this->op_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_op_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KernelHcclDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.KernelHcclDef)
  GOOGLE_DCHECK_NE(&from, this);
  const KernelHcclDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KernelHcclDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.KernelHcclDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.KernelHcclDef)
    MergeFrom(*source);
  }
}

void KernelHcclDef::MergeFrom(const KernelHcclDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.KernelHcclDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_zero_copy_flag_.MergeFrom(from.input_zero_copy_flag_);
  output_zero_copy_flag_.MergeFrom(from.output_zero_copy_flag_);
  if (from.hccl_type().size() > 0) {
    _internal_set_hccl_type(from._internal_hccl_type());
  }
  if (from.op_index() != 0) {
    _internal_set_op_index(from._internal_op_index());
  }
}

void KernelHcclDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.KernelHcclDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KernelHcclDef::CopyFrom(const KernelHcclDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.KernelHcclDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KernelHcclDef::IsInitialized() const {
  return true;
}

void KernelHcclDef::InternalSwap(KernelHcclDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  input_zero_copy_flag_.InternalSwap(&other->input_zero_copy_flag_);
  output_zero_copy_flag_.InternalSwap(&other->output_zero_copy_flag_);
  hccl_type_.Swap(&other->hccl_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(op_index_, other->op_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KernelHcclDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EventExDef::InitAsDefaultInstance() {
}
class EventExDef::_Internal {
 public:
};

EventExDef::EventExDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.EventExDef)
}
EventExDef::EventExDef(const EventExDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&op_index_, &from.op_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_type_) -
    reinterpret_cast<char*>(&op_index_)) + sizeof(event_type_));
  // @@protoc_insertion_point(copy_constructor:domi.EventExDef)
}

void EventExDef::SharedCtor() {
  ::memset(&op_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_type_) -
      reinterpret_cast<char*>(&op_index_)) + sizeof(event_type_));
}

EventExDef::~EventExDef() {
  // @@protoc_insertion_point(destructor:domi.EventExDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventExDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EventExDef::ArenaDtor(void* object) {
  EventExDef* _this = reinterpret_cast< EventExDef* >(object);
  (void)_this;
}
void EventExDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventExDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventExDef& EventExDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventExDef_task_2eproto.base);
  return *internal_default_instance();
}


void EventExDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.EventExDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&op_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_type_) -
      reinterpret_cast<char*>(&op_index_)) + sizeof(event_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventExDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 op_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          op_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 event_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          event_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventExDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.EventExDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 op_index = 1;
  if (this->op_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_op_index(), target);
  }

  // uint32 event_type = 2;
  if (this->event_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_event_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.EventExDef)
  return target;
}

size_t EventExDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.EventExDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 op_index = 1;
  if (this->op_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_op_index());
  }

  // uint32 event_type = 2;
  if (this->event_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_event_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventExDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.EventExDef)
  GOOGLE_DCHECK_NE(&from, this);
  const EventExDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventExDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.EventExDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.EventExDef)
    MergeFrom(*source);
  }
}

void EventExDef::MergeFrom(const EventExDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.EventExDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.op_index() != 0) {
    _internal_set_op_index(from._internal_op_index());
  }
  if (from.event_type() != 0) {
    _internal_set_event_type(from._internal_event_type());
  }
}

void EventExDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.EventExDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventExDef::CopyFrom(const EventExDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.EventExDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventExDef::IsInitialized() const {
  return true;
}

void EventExDef::InternalSwap(EventExDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventExDef, event_type_)
      + sizeof(EventExDef::event_type_)
      - PROTOBUF_FIELD_OFFSET(EventExDef, op_index_)>(
          reinterpret_cast<char*>(&op_index_),
          reinterpret_cast<char*>(&other->op_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventExDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogTimeStampDef::InitAsDefaultInstance() {
}
class LogTimeStampDef::_Internal {
 public:
};

LogTimeStampDef::LogTimeStampDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.LogTimeStampDef)
}
LogTimeStampDef::LogTimeStampDef(const LogTimeStampDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&logid_, &from.logid_,
    static_cast<size_t>(reinterpret_cast<char*>(&flat_) -
    reinterpret_cast<char*>(&logid_)) + sizeof(flat_));
  // @@protoc_insertion_point(copy_constructor:domi.LogTimeStampDef)
}

void LogTimeStampDef::SharedCtor() {
  ::memset(&logid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flat_) -
      reinterpret_cast<char*>(&logid_)) + sizeof(flat_));
}

LogTimeStampDef::~LogTimeStampDef() {
  // @@protoc_insertion_point(destructor:domi.LogTimeStampDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogTimeStampDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LogTimeStampDef::ArenaDtor(void* object) {
  LogTimeStampDef* _this = reinterpret_cast< LogTimeStampDef* >(object);
  (void)_this;
}
void LogTimeStampDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogTimeStampDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogTimeStampDef& LogTimeStampDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogTimeStampDef_task_2eproto.base);
  return *internal_default_instance();
}


void LogTimeStampDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.LogTimeStampDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&logid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flat_) -
      reinterpret_cast<char*>(&logid_)) + sizeof(flat_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogTimeStampDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 logid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          logid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool notify = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          notify_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 flat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          flat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogTimeStampDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.LogTimeStampDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 logid = 1;
  if (this->logid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_logid(), target);
  }

  // bool notify = 2;
  if (this->notify() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_notify(), target);
  }

  // uint32 flat = 3;
  if (this->flat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_flat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.LogTimeStampDef)
  return target;
}

size_t LogTimeStampDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.LogTimeStampDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 logid = 1;
  if (this->logid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_logid());
  }

  // bool notify = 2;
  if (this->notify() != 0) {
    total_size += 1 + 1;
  }

  // uint32 flat = 3;
  if (this->flat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogTimeStampDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.LogTimeStampDef)
  GOOGLE_DCHECK_NE(&from, this);
  const LogTimeStampDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogTimeStampDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.LogTimeStampDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.LogTimeStampDef)
    MergeFrom(*source);
  }
}

void LogTimeStampDef::MergeFrom(const LogTimeStampDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.LogTimeStampDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.logid() != 0) {
    _internal_set_logid(from._internal_logid());
  }
  if (from.notify() != 0) {
    _internal_set_notify(from._internal_notify());
  }
  if (from.flat() != 0) {
    _internal_set_flat(from._internal_flat());
  }
}

void LogTimeStampDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.LogTimeStampDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogTimeStampDef::CopyFrom(const LogTimeStampDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.LogTimeStampDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogTimeStampDef::IsInitialized() const {
  return true;
}

void LogTimeStampDef::InternalSwap(LogTimeStampDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogTimeStampDef, flat_)
      + sizeof(LogTimeStampDef::flat_)
      - PROTOBUF_FIELD_OFFSET(LogTimeStampDef, logid_)>(
          reinterpret_cast<char*>(&logid_),
          reinterpret_cast<char*>(&other->logid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogTimeStampDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemcpyAsyncDef::InitAsDefaultInstance() {
}
class MemcpyAsyncDef::_Internal {
 public:
};

MemcpyAsyncDef::MemcpyAsyncDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.MemcpyAsyncDef)
}
MemcpyAsyncDef::MemcpyAsyncDef(const MemcpyAsyncDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dst_, &from.dst_,
    static_cast<size_t>(reinterpret_cast<char*>(&op_index_) -
    reinterpret_cast<char*>(&dst_)) + sizeof(op_index_));
  // @@protoc_insertion_point(copy_constructor:domi.MemcpyAsyncDef)
}

void MemcpyAsyncDef::SharedCtor() {
  ::memset(&dst_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_index_) -
      reinterpret_cast<char*>(&dst_)) + sizeof(op_index_));
}

MemcpyAsyncDef::~MemcpyAsyncDef() {
  // @@protoc_insertion_point(destructor:domi.MemcpyAsyncDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MemcpyAsyncDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MemcpyAsyncDef::ArenaDtor(void* object) {
  MemcpyAsyncDef* _this = reinterpret_cast< MemcpyAsyncDef* >(object);
  (void)_this;
}
void MemcpyAsyncDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemcpyAsyncDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemcpyAsyncDef& MemcpyAsyncDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemcpyAsyncDef_task_2eproto.base);
  return *internal_default_instance();
}


void MemcpyAsyncDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.MemcpyAsyncDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dst_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_index_) -
      reinterpret_cast<char*>(&dst_)) + sizeof(op_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemcpyAsyncDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 dst = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 dst_max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          dst_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 src = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          src_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 kind = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 op_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          op_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemcpyAsyncDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.MemcpyAsyncDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 dst = 1;
  if (this->dst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_dst(), target);
  }

  // uint64 dst_max = 2;
  if (this->dst_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_dst_max(), target);
  }

  // uint64 src = 3;
  if (this->src() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_src(), target);
  }

  // uint64 count = 4;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_count(), target);
  }

  // uint32 kind = 5;
  if (this->kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_kind(), target);
  }

  // uint32 op_index = 6;
  if (this->op_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_op_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.MemcpyAsyncDef)
  return target;
}

size_t MemcpyAsyncDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.MemcpyAsyncDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 dst = 1;
  if (this->dst() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_dst());
  }

  // uint64 dst_max = 2;
  if (this->dst_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_dst_max());
  }

  // uint64 src = 3;
  if (this->src() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_src());
  }

  // uint64 count = 4;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_count());
  }

  // uint32 kind = 5;
  if (this->kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_kind());
  }

  // uint32 op_index = 6;
  if (this->op_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_op_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemcpyAsyncDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.MemcpyAsyncDef)
  GOOGLE_DCHECK_NE(&from, this);
  const MemcpyAsyncDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemcpyAsyncDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.MemcpyAsyncDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.MemcpyAsyncDef)
    MergeFrom(*source);
  }
}

void MemcpyAsyncDef::MergeFrom(const MemcpyAsyncDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.MemcpyAsyncDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dst() != 0) {
    _internal_set_dst(from._internal_dst());
  }
  if (from.dst_max() != 0) {
    _internal_set_dst_max(from._internal_dst_max());
  }
  if (from.src() != 0) {
    _internal_set_src(from._internal_src());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
  if (from.op_index() != 0) {
    _internal_set_op_index(from._internal_op_index());
  }
}

void MemcpyAsyncDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.MemcpyAsyncDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemcpyAsyncDef::CopyFrom(const MemcpyAsyncDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.MemcpyAsyncDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemcpyAsyncDef::IsInitialized() const {
  return true;
}

void MemcpyAsyncDef::InternalSwap(MemcpyAsyncDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemcpyAsyncDef, op_index_)
      + sizeof(MemcpyAsyncDef::op_index_)
      - PROTOBUF_FIELD_OFFSET(MemcpyAsyncDef, dst_)>(
          reinterpret_cast<char*>(&dst_),
          reinterpret_cast<char*>(&other->dst_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MemcpyAsyncDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamSwitchDef::InitAsDefaultInstance() {
}
class StreamSwitchDef::_Internal {
 public:
};

StreamSwitchDef::StreamSwitchDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.StreamSwitchDef)
}
StreamSwitchDef::StreamSwitchDef(const StreamSwitchDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&op_index_, &from.op_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_type_) -
    reinterpret_cast<char*>(&op_index_)) + sizeof(data_type_));
  // @@protoc_insertion_point(copy_constructor:domi.StreamSwitchDef)
}

void StreamSwitchDef::SharedCtor() {
  ::memset(&op_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_type_) -
      reinterpret_cast<char*>(&op_index_)) + sizeof(data_type_));
}

StreamSwitchDef::~StreamSwitchDef() {
  // @@protoc_insertion_point(destructor:domi.StreamSwitchDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamSwitchDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StreamSwitchDef::ArenaDtor(void* object) {
  StreamSwitchDef* _this = reinterpret_cast< StreamSwitchDef* >(object);
  (void)_this;
}
void StreamSwitchDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamSwitchDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamSwitchDef& StreamSwitchDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamSwitchDef_task_2eproto.base);
  return *internal_default_instance();
}


void StreamSwitchDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.StreamSwitchDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&op_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_type_) -
      reinterpret_cast<char*>(&op_index_)) + sizeof(data_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamSwitchDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 op_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          op_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 true_stream_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          true_stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 value_ptr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          value_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          data_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamSwitchDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.StreamSwitchDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 op_index = 1;
  if (this->op_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_op_index(), target);
  }

  // uint32 true_stream_id = 2;
  if (this->true_stream_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_true_stream_id(), target);
  }

  // int64 value = 3;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_value(), target);
  }

  // uint64 value_ptr = 4;
  if (this->value_ptr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_value_ptr(), target);
  }

  // uint32 data_type = 5;
  if (this->data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_data_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.StreamSwitchDef)
  return target;
}

size_t StreamSwitchDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.StreamSwitchDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 op_index = 1;
  if (this->op_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_op_index());
  }

  // uint32 true_stream_id = 2;
  if (this->true_stream_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_true_stream_id());
  }

  // int64 value = 3;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value());
  }

  // uint64 value_ptr = 4;
  if (this->value_ptr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value_ptr());
  }

  // uint32 data_type = 5;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamSwitchDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.StreamSwitchDef)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamSwitchDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamSwitchDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.StreamSwitchDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.StreamSwitchDef)
    MergeFrom(*source);
  }
}

void StreamSwitchDef::MergeFrom(const StreamSwitchDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.StreamSwitchDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.op_index() != 0) {
    _internal_set_op_index(from._internal_op_index());
  }
  if (from.true_stream_id() != 0) {
    _internal_set_true_stream_id(from._internal_true_stream_id());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.value_ptr() != 0) {
    _internal_set_value_ptr(from._internal_value_ptr());
  }
  if (from.data_type() != 0) {
    _internal_set_data_type(from._internal_data_type());
  }
}

void StreamSwitchDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.StreamSwitchDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamSwitchDef::CopyFrom(const StreamSwitchDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.StreamSwitchDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamSwitchDef::IsInitialized() const {
  return true;
}

void StreamSwitchDef::InternalSwap(StreamSwitchDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamSwitchDef, data_type_)
      + sizeof(StreamSwitchDef::data_type_)
      - PROTOBUF_FIELD_OFFSET(StreamSwitchDef, op_index_)>(
          reinterpret_cast<char*>(&op_index_),
          reinterpret_cast<char*>(&other->op_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamSwitchDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamActiveDef::InitAsDefaultInstance() {
}
class StreamActiveDef::_Internal {
 public:
};

StreamActiveDef::StreamActiveDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.StreamActiveDef)
}
StreamActiveDef::StreamActiveDef(const StreamActiveDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&op_index_, &from.op_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_stream_id_) -
    reinterpret_cast<char*>(&op_index_)) + sizeof(active_stream_id_));
  // @@protoc_insertion_point(copy_constructor:domi.StreamActiveDef)
}

void StreamActiveDef::SharedCtor() {
  ::memset(&op_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_stream_id_) -
      reinterpret_cast<char*>(&op_index_)) + sizeof(active_stream_id_));
}

StreamActiveDef::~StreamActiveDef() {
  // @@protoc_insertion_point(destructor:domi.StreamActiveDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamActiveDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StreamActiveDef::ArenaDtor(void* object) {
  StreamActiveDef* _this = reinterpret_cast< StreamActiveDef* >(object);
  (void)_this;
}
void StreamActiveDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamActiveDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamActiveDef& StreamActiveDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamActiveDef_task_2eproto.base);
  return *internal_default_instance();
}


void StreamActiveDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.StreamActiveDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&op_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_stream_id_) -
      reinterpret_cast<char*>(&op_index_)) + sizeof(active_stream_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamActiveDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 op_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          op_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 active_stream_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          active_stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamActiveDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.StreamActiveDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 op_index = 1;
  if (this->op_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_op_index(), target);
  }

  // uint32 active_stream_id = 2;
  if (this->active_stream_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_active_stream_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.StreamActiveDef)
  return target;
}

size_t StreamActiveDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.StreamActiveDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 op_index = 1;
  if (this->op_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_op_index());
  }

  // uint32 active_stream_id = 2;
  if (this->active_stream_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_active_stream_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamActiveDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.StreamActiveDef)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamActiveDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamActiveDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.StreamActiveDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.StreamActiveDef)
    MergeFrom(*source);
  }
}

void StreamActiveDef::MergeFrom(const StreamActiveDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.StreamActiveDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.op_index() != 0) {
    _internal_set_op_index(from._internal_op_index());
  }
  if (from.active_stream_id() != 0) {
    _internal_set_active_stream_id(from._internal_active_stream_id());
  }
}

void StreamActiveDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.StreamActiveDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamActiveDef::CopyFrom(const StreamActiveDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.StreamActiveDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamActiveDef::IsInitialized() const {
  return true;
}

void StreamActiveDef::InternalSwap(StreamActiveDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamActiveDef, active_stream_id_)
      + sizeof(StreamActiveDef::active_stream_id_)
      - PROTOBUF_FIELD_OFFSET(StreamActiveDef, op_index_)>(
          reinterpret_cast<char*>(&op_index_),
          reinterpret_cast<char*>(&other->op_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamActiveDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamSwitchNDef::InitAsDefaultInstance() {
}
class StreamSwitchNDef::_Internal {
 public:
};

StreamSwitchNDef::StreamSwitchNDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  target_value_(arena),
  true_stream_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.StreamSwitchNDef)
}
StreamSwitchNDef::StreamSwitchNDef(const StreamSwitchNDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      target_value_(from.target_value_),
      true_stream_id_(from.true_stream_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&op_index_, &from.op_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_type_) -
    reinterpret_cast<char*>(&op_index_)) + sizeof(data_type_));
  // @@protoc_insertion_point(copy_constructor:domi.StreamSwitchNDef)
}

void StreamSwitchNDef::SharedCtor() {
  ::memset(&op_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_type_) -
      reinterpret_cast<char*>(&op_index_)) + sizeof(data_type_));
}

StreamSwitchNDef::~StreamSwitchNDef() {
  // @@protoc_insertion_point(destructor:domi.StreamSwitchNDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamSwitchNDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StreamSwitchNDef::ArenaDtor(void* object) {
  StreamSwitchNDef* _this = reinterpret_cast< StreamSwitchNDef* >(object);
  (void)_this;
}
void StreamSwitchNDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamSwitchNDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamSwitchNDef& StreamSwitchNDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamSwitchNDef_task_2eproto.base);
  return *internal_default_instance();
}


void StreamSwitchNDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.StreamSwitchNDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_value_.Clear();
  true_stream_id_.Clear();
  ::memset(&op_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_type_) -
      reinterpret_cast<char*>(&op_index_)) + sizeof(data_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamSwitchNDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 op_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          op_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 target_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_target_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_target_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 true_stream_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_true_stream_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_true_stream_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 element_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          element_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          data_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamSwitchNDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.StreamSwitchNDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 op_index = 1;
  if (this->op_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_op_index(), target);
  }

  // uint32 size = 2;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  // repeated int64 target_value = 3;
  {
    int byte_size = _target_value_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_target_value(), byte_size, target);
    }
  }

  // repeated uint32 true_stream_id = 4;
  {
    int byte_size = _true_stream_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_true_stream_id(), byte_size, target);
    }
  }

  // uint32 element_size = 5;
  if (this->element_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_element_size(), target);
  }

  // uint32 data_type = 6;
  if (this->data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_data_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.StreamSwitchNDef)
  return target;
}

size_t StreamSwitchNDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.StreamSwitchNDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 target_value = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->target_value_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _target_value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 true_stream_id = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->true_stream_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _true_stream_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 op_index = 1;
  if (this->op_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_op_index());
  }

  // uint32 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  // uint32 element_size = 5;
  if (this->element_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_element_size());
  }

  // uint32 data_type = 6;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamSwitchNDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.StreamSwitchNDef)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamSwitchNDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamSwitchNDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.StreamSwitchNDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.StreamSwitchNDef)
    MergeFrom(*source);
  }
}

void StreamSwitchNDef::MergeFrom(const StreamSwitchNDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.StreamSwitchNDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_value_.MergeFrom(from.target_value_);
  true_stream_id_.MergeFrom(from.true_stream_id_);
  if (from.op_index() != 0) {
    _internal_set_op_index(from._internal_op_index());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.element_size() != 0) {
    _internal_set_element_size(from._internal_element_size());
  }
  if (from.data_type() != 0) {
    _internal_set_data_type(from._internal_data_type());
  }
}

void StreamSwitchNDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.StreamSwitchNDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamSwitchNDef::CopyFrom(const StreamSwitchNDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.StreamSwitchNDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamSwitchNDef::IsInitialized() const {
  return true;
}

void StreamSwitchNDef::InternalSwap(StreamSwitchNDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  target_value_.InternalSwap(&other->target_value_);
  true_stream_id_.InternalSwap(&other->true_stream_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamSwitchNDef, data_type_)
      + sizeof(StreamSwitchNDef::data_type_)
      - PROTOBUF_FIELD_OFFSET(StreamSwitchNDef, op_index_)>(
          reinterpret_cast<char*>(&op_index_),
          reinterpret_cast<char*>(&other->op_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamSwitchNDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LabelSetDef::InitAsDefaultInstance() {
}
class LabelSetDef::_Internal {
 public:
};

LabelSetDef::LabelSetDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.LabelSetDef)
}
LabelSetDef::LabelSetDef(const LabelSetDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&op_index_, &from.op_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&model_id_) -
    reinterpret_cast<char*>(&op_index_)) + sizeof(model_id_));
  // @@protoc_insertion_point(copy_constructor:domi.LabelSetDef)
}

void LabelSetDef::SharedCtor() {
  ::memset(&op_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_id_) -
      reinterpret_cast<char*>(&op_index_)) + sizeof(model_id_));
}

LabelSetDef::~LabelSetDef() {
  // @@protoc_insertion_point(destructor:domi.LabelSetDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LabelSetDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LabelSetDef::ArenaDtor(void* object) {
  LabelSetDef* _this = reinterpret_cast< LabelSetDef* >(object);
  (void)_this;
}
void LabelSetDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LabelSetDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabelSetDef& LabelSetDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabelSetDef_task_2eproto.base);
  return *internal_default_instance();
}


void LabelSetDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.LabelSetDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&op_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_id_) -
      reinterpret_cast<char*>(&op_index_)) + sizeof(model_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabelSetDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 op_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          op_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 label_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          label_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 model_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          model_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabelSetDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.LabelSetDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 op_index = 1;
  if (this->op_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_op_index(), target);
  }

  // uint32 label_id = 2;
  if (this->label_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_label_id(), target);
  }

  // uint32 model_id = 3;
  if (this->model_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_model_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.LabelSetDef)
  return target;
}

size_t LabelSetDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.LabelSetDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 op_index = 1;
  if (this->op_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_op_index());
  }

  // uint32 label_id = 2;
  if (this->label_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_label_id());
  }

  // uint32 model_id = 3;
  if (this->model_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_model_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelSetDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.LabelSetDef)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelSetDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabelSetDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.LabelSetDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.LabelSetDef)
    MergeFrom(*source);
  }
}

void LabelSetDef::MergeFrom(const LabelSetDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.LabelSetDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.op_index() != 0) {
    _internal_set_op_index(from._internal_op_index());
  }
  if (from.label_id() != 0) {
    _internal_set_label_id(from._internal_label_id());
  }
  if (from.model_id() != 0) {
    _internal_set_model_id(from._internal_model_id());
  }
}

void LabelSetDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.LabelSetDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelSetDef::CopyFrom(const LabelSetDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.LabelSetDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelSetDef::IsInitialized() const {
  return true;
}

void LabelSetDef::InternalSwap(LabelSetDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LabelSetDef, model_id_)
      + sizeof(LabelSetDef::model_id_)
      - PROTOBUF_FIELD_OFFSET(LabelSetDef, op_index_)>(
          reinterpret_cast<char*>(&op_index_),
          reinterpret_cast<char*>(&other->op_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelSetDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LabelGotoExDef::InitAsDefaultInstance() {
}
class LabelGotoExDef::_Internal {
 public:
};

LabelGotoExDef::LabelGotoExDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.LabelGotoExDef)
}
LabelGotoExDef::LabelGotoExDef(const LabelGotoExDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&op_index_, &from.op_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&model_id_) -
    reinterpret_cast<char*>(&op_index_)) + sizeof(model_id_));
  // @@protoc_insertion_point(copy_constructor:domi.LabelGotoExDef)
}

void LabelGotoExDef::SharedCtor() {
  ::memset(&op_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_id_) -
      reinterpret_cast<char*>(&op_index_)) + sizeof(model_id_));
}

LabelGotoExDef::~LabelGotoExDef() {
  // @@protoc_insertion_point(destructor:domi.LabelGotoExDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LabelGotoExDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LabelGotoExDef::ArenaDtor(void* object) {
  LabelGotoExDef* _this = reinterpret_cast< LabelGotoExDef* >(object);
  (void)_this;
}
void LabelGotoExDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LabelGotoExDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabelGotoExDef& LabelGotoExDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabelGotoExDef_task_2eproto.base);
  return *internal_default_instance();
}


void LabelGotoExDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.LabelGotoExDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&op_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_id_) -
      reinterpret_cast<char*>(&op_index_)) + sizeof(model_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabelGotoExDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 op_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          op_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 label_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          label_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 model_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          model_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabelGotoExDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.LabelGotoExDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 op_index = 1;
  if (this->op_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_op_index(), target);
  }

  // uint32 label_id = 2;
  if (this->label_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_label_id(), target);
  }

  // uint32 model_id = 3;
  if (this->model_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_model_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.LabelGotoExDef)
  return target;
}

size_t LabelGotoExDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.LabelGotoExDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 op_index = 1;
  if (this->op_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_op_index());
  }

  // uint32 label_id = 2;
  if (this->label_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_label_id());
  }

  // uint32 model_id = 3;
  if (this->model_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_model_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelGotoExDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.LabelGotoExDef)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelGotoExDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabelGotoExDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.LabelGotoExDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.LabelGotoExDef)
    MergeFrom(*source);
  }
}

void LabelGotoExDef::MergeFrom(const LabelGotoExDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.LabelGotoExDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.op_index() != 0) {
    _internal_set_op_index(from._internal_op_index());
  }
  if (from.label_id() != 0) {
    _internal_set_label_id(from._internal_label_id());
  }
  if (from.model_id() != 0) {
    _internal_set_model_id(from._internal_model_id());
  }
}

void LabelGotoExDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.LabelGotoExDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelGotoExDef::CopyFrom(const LabelGotoExDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.LabelGotoExDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelGotoExDef::IsInitialized() const {
  return true;
}

void LabelGotoExDef::InternalSwap(LabelGotoExDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LabelGotoExDef, model_id_)
      + sizeof(LabelGotoExDef::model_id_)
      - PROTOBUF_FIELD_OFFSET(LabelGotoExDef, op_index_)>(
          reinterpret_cast<char*>(&op_index_),
          reinterpret_cast<char*>(&other->op_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelGotoExDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LabelSwitchByIndexDef::InitAsDefaultInstance() {
}
class LabelSwitchByIndexDef::_Internal {
 public:
};

LabelSwitchByIndexDef::LabelSwitchByIndexDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.LabelSwitchByIndexDef)
}
LabelSwitchByIndexDef::LabelSwitchByIndexDef(const LabelSwitchByIndexDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&op_index_, &from.op_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&label_max_) -
    reinterpret_cast<char*>(&op_index_)) + sizeof(label_max_));
  // @@protoc_insertion_point(copy_constructor:domi.LabelSwitchByIndexDef)
}

void LabelSwitchByIndexDef::SharedCtor() {
  ::memset(&op_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&label_max_) -
      reinterpret_cast<char*>(&op_index_)) + sizeof(label_max_));
}

LabelSwitchByIndexDef::~LabelSwitchByIndexDef() {
  // @@protoc_insertion_point(destructor:domi.LabelSwitchByIndexDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LabelSwitchByIndexDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LabelSwitchByIndexDef::ArenaDtor(void* object) {
  LabelSwitchByIndexDef* _this = reinterpret_cast< LabelSwitchByIndexDef* >(object);
  (void)_this;
}
void LabelSwitchByIndexDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LabelSwitchByIndexDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabelSwitchByIndexDef& LabelSwitchByIndexDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabelSwitchByIndexDef_task_2eproto.base);
  return *internal_default_instance();
}


void LabelSwitchByIndexDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.LabelSwitchByIndexDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&op_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&label_max_) -
      reinterpret_cast<char*>(&op_index_)) + sizeof(label_max_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabelSwitchByIndexDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 op_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          op_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 label_max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          label_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabelSwitchByIndexDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.LabelSwitchByIndexDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 op_index = 1;
  if (this->op_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_op_index(), target);
  }

  // uint32 label_max = 2;
  if (this->label_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_label_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.LabelSwitchByIndexDef)
  return target;
}

size_t LabelSwitchByIndexDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.LabelSwitchByIndexDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 op_index = 1;
  if (this->op_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_op_index());
  }

  // uint32 label_max = 2;
  if (this->label_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_label_max());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelSwitchByIndexDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.LabelSwitchByIndexDef)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelSwitchByIndexDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabelSwitchByIndexDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.LabelSwitchByIndexDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.LabelSwitchByIndexDef)
    MergeFrom(*source);
  }
}

void LabelSwitchByIndexDef::MergeFrom(const LabelSwitchByIndexDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.LabelSwitchByIndexDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.op_index() != 0) {
    _internal_set_op_index(from._internal_op_index());
  }
  if (from.label_max() != 0) {
    _internal_set_label_max(from._internal_label_max());
  }
}

void LabelSwitchByIndexDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.LabelSwitchByIndexDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelSwitchByIndexDef::CopyFrom(const LabelSwitchByIndexDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.LabelSwitchByIndexDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelSwitchByIndexDef::IsInitialized() const {
  return true;
}

void LabelSwitchByIndexDef::InternalSwap(LabelSwitchByIndexDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LabelSwitchByIndexDef, label_max_)
      + sizeof(LabelSwitchByIndexDef::label_max_)
      - PROTOBUF_FIELD_OFFSET(LabelSwitchByIndexDef, op_index_)>(
          reinterpret_cast<char*>(&op_index_),
          reinterpret_cast<char*>(&other->op_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelSwitchByIndexDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FftsTaskDef::InitAsDefaultInstance() {
  ::domi::_FftsTaskDef_default_instance_._instance.get_mutable()->ffts_desc_ = const_cast< ::domi::FftsDescInfoDef*>(
      ::domi::FftsDescInfoDef::internal_default_instance());
}
class FftsTaskDef::_Internal {
 public:
  static const ::domi::FftsDescInfoDef& ffts_desc(const FftsTaskDef* msg);
};

const ::domi::FftsDescInfoDef&
FftsTaskDef::_Internal::ffts_desc(const FftsTaskDef* msg) {
  return *msg->ffts_desc_;
}
FftsTaskDef::FftsTaskDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sub_task_(arena),
  ticket_cache_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.FftsTaskDef)
}
FftsTaskDef::FftsTaskDef(const FftsTaskDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sub_task_(from.sub_task_),
      ticket_cache_(from.ticket_cache_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ffts_desc()) {
    ffts_desc_ = new ::domi::FftsDescInfoDef(*from.ffts_desc_);
  } else {
    ffts_desc_ = nullptr;
  }
  ::memcpy(&op_index_, &from.op_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&addr_size_) -
    reinterpret_cast<char*>(&op_index_)) + sizeof(addr_size_));
  // @@protoc_insertion_point(copy_constructor:domi.FftsTaskDef)
}

void FftsTaskDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FftsTaskDef_task_2eproto.base);
  ::memset(&ffts_desc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&addr_size_) -
      reinterpret_cast<char*>(&ffts_desc_)) + sizeof(addr_size_));
}

FftsTaskDef::~FftsTaskDef() {
  // @@protoc_insertion_point(destructor:domi.FftsTaskDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FftsTaskDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ffts_desc_;
}

void FftsTaskDef::ArenaDtor(void* object) {
  FftsTaskDef* _this = reinterpret_cast< FftsTaskDef* >(object);
  (void)_this;
}
void FftsTaskDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FftsTaskDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FftsTaskDef& FftsTaskDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FftsTaskDef_task_2eproto.base);
  return *internal_default_instance();
}


void FftsTaskDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.FftsTaskDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sub_task_.Clear();
  ticket_cache_.Clear();
  if (GetArena() == nullptr && ffts_desc_ != nullptr) {
    delete ffts_desc_;
  }
  ffts_desc_ = nullptr;
  ::memset(&op_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&addr_size_) -
      reinterpret_cast<char*>(&op_index_)) + sizeof(addr_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FftsTaskDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 op_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          op_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ffts_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ffts_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 addr_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          addr_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.FftsDescInfoDef ffts_desc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ffts_desc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .domi.FftsSubTaskDef sub_task = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sub_task(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .domi.TicketCacheDef ticket_cache = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ticket_cache(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FftsTaskDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.FftsTaskDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 op_index = 1;
  if (this->op_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_op_index(), target);
  }

  // uint32 ffts_type = 2;
  if (this->ffts_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ffts_type(), target);
  }

  // uint32 addr_size = 3;
  if (this->addr_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_addr_size(), target);
  }

  // .domi.FftsDescInfoDef ffts_desc = 4;
  if (this->has_ffts_desc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ffts_desc(this), target, stream);
  }

  // repeated .domi.FftsSubTaskDef sub_task = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sub_task_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_sub_task(i), target, stream);
  }

  // repeated .domi.TicketCacheDef ticket_cache = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ticket_cache_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_ticket_cache(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.FftsTaskDef)
  return target;
}

size_t FftsTaskDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.FftsTaskDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .domi.FftsSubTaskDef sub_task = 5;
  total_size += 1UL * this->_internal_sub_task_size();
  for (const auto& msg : this->sub_task_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .domi.TicketCacheDef ticket_cache = 6;
  total_size += 1UL * this->_internal_ticket_cache_size();
  for (const auto& msg : this->ticket_cache_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .domi.FftsDescInfoDef ffts_desc = 4;
  if (this->has_ffts_desc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ffts_desc_);
  }

  // uint32 op_index = 1;
  if (this->op_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_op_index());
  }

  // uint32 ffts_type = 2;
  if (this->ffts_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ffts_type());
  }

  // uint32 addr_size = 3;
  if (this->addr_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_addr_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FftsTaskDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.FftsTaskDef)
  GOOGLE_DCHECK_NE(&from, this);
  const FftsTaskDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FftsTaskDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.FftsTaskDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.FftsTaskDef)
    MergeFrom(*source);
  }
}

void FftsTaskDef::MergeFrom(const FftsTaskDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.FftsTaskDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sub_task_.MergeFrom(from.sub_task_);
  ticket_cache_.MergeFrom(from.ticket_cache_);
  if (from.has_ffts_desc()) {
    _internal_mutable_ffts_desc()->::domi::FftsDescInfoDef::MergeFrom(from._internal_ffts_desc());
  }
  if (from.op_index() != 0) {
    _internal_set_op_index(from._internal_op_index());
  }
  if (from.ffts_type() != 0) {
    _internal_set_ffts_type(from._internal_ffts_type());
  }
  if (from.addr_size() != 0) {
    _internal_set_addr_size(from._internal_addr_size());
  }
}

void FftsTaskDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.FftsTaskDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FftsTaskDef::CopyFrom(const FftsTaskDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.FftsTaskDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FftsTaskDef::IsInitialized() const {
  return true;
}

void FftsTaskDef::InternalSwap(FftsTaskDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sub_task_.InternalSwap(&other->sub_task_);
  ticket_cache_.InternalSwap(&other->ticket_cache_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FftsTaskDef, addr_size_)
      + sizeof(FftsTaskDef::addr_size_)
      - PROTOBUF_FIELD_OFFSET(FftsTaskDef, ffts_desc_)>(
          reinterpret_cast<char*>(&ffts_desc_),
          reinterpret_cast<char*>(&other->ffts_desc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FftsTaskDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FftsDescInfoDef::InitAsDefaultInstance() {
}
class FftsDescInfoDef::_Internal {
 public:
};

FftsDescInfoDef::FftsDescInfoDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.FftsDescInfoDef)
}
FftsDescInfoDef::FftsDescInfoDef(const FftsDescInfoDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tm_, &from.tm_,
    static_cast<size_t>(reinterpret_cast<char*>(&aiv_prefetch_lower_) -
    reinterpret_cast<char*>(&tm_)) + sizeof(aiv_prefetch_lower_));
  // @@protoc_insertion_point(copy_constructor:domi.FftsDescInfoDef)
}

void FftsDescInfoDef::SharedCtor() {
  ::memset(&tm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aiv_prefetch_lower_) -
      reinterpret_cast<char*>(&tm_)) + sizeof(aiv_prefetch_lower_));
}

FftsDescInfoDef::~FftsDescInfoDef() {
  // @@protoc_insertion_point(destructor:domi.FftsDescInfoDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FftsDescInfoDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FftsDescInfoDef::ArenaDtor(void* object) {
  FftsDescInfoDef* _this = reinterpret_cast< FftsDescInfoDef* >(object);
  (void)_this;
}
void FftsDescInfoDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FftsDescInfoDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FftsDescInfoDef& FftsDescInfoDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FftsDescInfoDef_task_2eproto.base);
  return *internal_default_instance();
}


void FftsDescInfoDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.FftsDescInfoDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aiv_prefetch_lower_) -
      reinterpret_cast<char*>(&tm_)) + sizeof(aiv_prefetch_lower_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FftsDescInfoDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 tm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 di = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          di_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 df = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          df_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_split_unit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          data_split_unit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prefetch_ost_num = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          prefetch_ost_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cache_maintain_ost_num = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          cache_maintain_ost_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 aic_prefetch_upper = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          aic_prefetch_upper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 aic_prefetch_lower = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          aic_prefetch_lower_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 aiv_prefetch_upper = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          aiv_prefetch_upper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 aiv_prefetch_lower = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          aiv_prefetch_lower_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FftsDescInfoDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.FftsDescInfoDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 tm = 1;
  if (this->tm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tm(), target);
  }

  // uint32 di = 2;
  if (this->di() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_di(), target);
  }

  // uint32 dw = 3;
  if (this->dw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_dw(), target);
  }

  // uint32 df = 4;
  if (this->df() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_df(), target);
  }

  // uint32 data_split_unit = 5;
  if (this->data_split_unit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_data_split_unit(), target);
  }

  // uint32 prefetch_ost_num = 6;
  if (this->prefetch_ost_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_prefetch_ost_num(), target);
  }

  // uint32 cache_maintain_ost_num = 7;
  if (this->cache_maintain_ost_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_cache_maintain_ost_num(), target);
  }

  // uint32 aic_prefetch_upper = 8;
  if (this->aic_prefetch_upper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_aic_prefetch_upper(), target);
  }

  // uint32 aic_prefetch_lower = 9;
  if (this->aic_prefetch_lower() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_aic_prefetch_lower(), target);
  }

  // uint32 aiv_prefetch_upper = 10;
  if (this->aiv_prefetch_upper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_aiv_prefetch_upper(), target);
  }

  // uint32 aiv_prefetch_lower = 11;
  if (this->aiv_prefetch_lower() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_aiv_prefetch_lower(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.FftsDescInfoDef)
  return target;
}

size_t FftsDescInfoDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.FftsDescInfoDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 tm = 1;
  if (this->tm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tm());
  }

  // uint32 di = 2;
  if (this->di() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_di());
  }

  // uint32 dw = 3;
  if (this->dw() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dw());
  }

  // uint32 df = 4;
  if (this->df() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_df());
  }

  // uint32 data_split_unit = 5;
  if (this->data_split_unit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_split_unit());
  }

  // uint32 prefetch_ost_num = 6;
  if (this->prefetch_ost_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prefetch_ost_num());
  }

  // uint32 cache_maintain_ost_num = 7;
  if (this->cache_maintain_ost_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cache_maintain_ost_num());
  }

  // uint32 aic_prefetch_upper = 8;
  if (this->aic_prefetch_upper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aic_prefetch_upper());
  }

  // uint32 aic_prefetch_lower = 9;
  if (this->aic_prefetch_lower() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aic_prefetch_lower());
  }

  // uint32 aiv_prefetch_upper = 10;
  if (this->aiv_prefetch_upper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aiv_prefetch_upper());
  }

  // uint32 aiv_prefetch_lower = 11;
  if (this->aiv_prefetch_lower() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aiv_prefetch_lower());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FftsDescInfoDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.FftsDescInfoDef)
  GOOGLE_DCHECK_NE(&from, this);
  const FftsDescInfoDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FftsDescInfoDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.FftsDescInfoDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.FftsDescInfoDef)
    MergeFrom(*source);
  }
}

void FftsDescInfoDef::MergeFrom(const FftsDescInfoDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.FftsDescInfoDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tm() != 0) {
    _internal_set_tm(from._internal_tm());
  }
  if (from.di() != 0) {
    _internal_set_di(from._internal_di());
  }
  if (from.dw() != 0) {
    _internal_set_dw(from._internal_dw());
  }
  if (from.df() != 0) {
    _internal_set_df(from._internal_df());
  }
  if (from.data_split_unit() != 0) {
    _internal_set_data_split_unit(from._internal_data_split_unit());
  }
  if (from.prefetch_ost_num() != 0) {
    _internal_set_prefetch_ost_num(from._internal_prefetch_ost_num());
  }
  if (from.cache_maintain_ost_num() != 0) {
    _internal_set_cache_maintain_ost_num(from._internal_cache_maintain_ost_num());
  }
  if (from.aic_prefetch_upper() != 0) {
    _internal_set_aic_prefetch_upper(from._internal_aic_prefetch_upper());
  }
  if (from.aic_prefetch_lower() != 0) {
    _internal_set_aic_prefetch_lower(from._internal_aic_prefetch_lower());
  }
  if (from.aiv_prefetch_upper() != 0) {
    _internal_set_aiv_prefetch_upper(from._internal_aiv_prefetch_upper());
  }
  if (from.aiv_prefetch_lower() != 0) {
    _internal_set_aiv_prefetch_lower(from._internal_aiv_prefetch_lower());
  }
}

void FftsDescInfoDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.FftsDescInfoDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FftsDescInfoDef::CopyFrom(const FftsDescInfoDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.FftsDescInfoDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FftsDescInfoDef::IsInitialized() const {
  return true;
}

void FftsDescInfoDef::InternalSwap(FftsDescInfoDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FftsDescInfoDef, aiv_prefetch_lower_)
      + sizeof(FftsDescInfoDef::aiv_prefetch_lower_)
      - PROTOBUF_FIELD_OFFSET(FftsDescInfoDef, tm_)>(
          reinterpret_cast<char*>(&tm_),
          reinterpret_cast<char*>(&other->tm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FftsDescInfoDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FftsSubTaskDef::InitAsDefaultInstance() {
  ::domi::_FftsSubTaskDef_default_instance_._instance.get_mutable()->auto_thread_aic_aiv_ = const_cast< ::domi::AutoThreadAicAivDef*>(
      ::domi::AutoThreadAicAivDef::internal_default_instance());
  ::domi::_FftsSubTaskDef_default_instance_._instance.get_mutable()->manual_thread_aic_aiv_ = const_cast< ::domi::ManualThreadAicAivDef*>(
      ::domi::ManualThreadAicAivDef::internal_default_instance());
  ::domi::_FftsSubTaskDef_default_instance_._instance.get_mutable()->manual_thread_nop_ = const_cast< ::domi::ManualThreadNopDef*>(
      ::domi::ManualThreadNopDef::internal_default_instance());
}
class FftsSubTaskDef::_Internal {
 public:
  static const ::domi::AutoThreadAicAivDef& auto_thread_aic_aiv(const FftsSubTaskDef* msg);
  static const ::domi::ManualThreadAicAivDef& manual_thread_aic_aiv(const FftsSubTaskDef* msg);
  static const ::domi::ManualThreadNopDef& manual_thread_nop(const FftsSubTaskDef* msg);
};

const ::domi::AutoThreadAicAivDef&
FftsSubTaskDef::_Internal::auto_thread_aic_aiv(const FftsSubTaskDef* msg) {
  return *msg->auto_thread_aic_aiv_;
}
const ::domi::ManualThreadAicAivDef&
FftsSubTaskDef::_Internal::manual_thread_aic_aiv(const FftsSubTaskDef* msg) {
  return *msg->manual_thread_aic_aiv_;
}
const ::domi::ManualThreadNopDef&
FftsSubTaskDef::_Internal::manual_thread_nop(const FftsSubTaskDef* msg) {
  return *msg->manual_thread_nop_;
}
FftsSubTaskDef::FftsSubTaskDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dst_tick_cache_id_(arena),
  src_tick_cache_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.FftsSubTaskDef)
}
FftsSubTaskDef::FftsSubTaskDef(const FftsSubTaskDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dst_tick_cache_id_(from.dst_tick_cache_id_),
      src_tick_cache_id_(from.src_tick_cache_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_auto_thread_aic_aiv()) {
    auto_thread_aic_aiv_ = new ::domi::AutoThreadAicAivDef(*from.auto_thread_aic_aiv_);
  } else {
    auto_thread_aic_aiv_ = nullptr;
  }
  if (from._internal_has_manual_thread_aic_aiv()) {
    manual_thread_aic_aiv_ = new ::domi::ManualThreadAicAivDef(*from.manual_thread_aic_aiv_);
  } else {
    manual_thread_aic_aiv_ = nullptr;
  }
  if (from._internal_has_manual_thread_nop()) {
    manual_thread_nop_ = new ::domi::ManualThreadNopDef(*from.manual_thread_nop_);
  } else {
    manual_thread_nop_ = nullptr;
  }
  ::memcpy(&sub_task_type_, &from.sub_task_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&src_data_out_of_subgraph_bitmap_) -
    reinterpret_cast<char*>(&sub_task_type_)) + sizeof(src_data_out_of_subgraph_bitmap_));
  // @@protoc_insertion_point(copy_constructor:domi.FftsSubTaskDef)
}

void FftsSubTaskDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FftsSubTaskDef_task_2eproto.base);
  ::memset(&auto_thread_aic_aiv_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&src_data_out_of_subgraph_bitmap_) -
      reinterpret_cast<char*>(&auto_thread_aic_aiv_)) + sizeof(src_data_out_of_subgraph_bitmap_));
}

FftsSubTaskDef::~FftsSubTaskDef() {
  // @@protoc_insertion_point(destructor:domi.FftsSubTaskDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FftsSubTaskDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete auto_thread_aic_aiv_;
  if (this != internal_default_instance()) delete manual_thread_aic_aiv_;
  if (this != internal_default_instance()) delete manual_thread_nop_;
}

void FftsSubTaskDef::ArenaDtor(void* object) {
  FftsSubTaskDef* _this = reinterpret_cast< FftsSubTaskDef* >(object);
  (void)_this;
}
void FftsSubTaskDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FftsSubTaskDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FftsSubTaskDef& FftsSubTaskDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FftsSubTaskDef_task_2eproto.base);
  return *internal_default_instance();
}


void FftsSubTaskDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.FftsSubTaskDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dst_tick_cache_id_.Clear();
  src_tick_cache_id_.Clear();
  if (GetArena() == nullptr && auto_thread_aic_aiv_ != nullptr) {
    delete auto_thread_aic_aiv_;
  }
  auto_thread_aic_aiv_ = nullptr;
  if (GetArena() == nullptr && manual_thread_aic_aiv_ != nullptr) {
    delete manual_thread_aic_aiv_;
  }
  manual_thread_aic_aiv_ = nullptr;
  if (GetArena() == nullptr && manual_thread_nop_ != nullptr) {
    delete manual_thread_nop_;
  }
  manual_thread_nop_ = nullptr;
  ::memset(&sub_task_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&src_data_out_of_subgraph_bitmap_) -
      reinterpret_cast<char*>(&sub_task_type_)) + sizeof(src_data_out_of_subgraph_bitmap_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FftsSubTaskDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 sub_task_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sub_task_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 thread_dim = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          thread_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dst_tick_cache_vld_bitmap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dst_tick_cache_vld_bitmap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 src_tick_cache_vld_bitmap = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          src_tick_cache_vld_bitmap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 src_data_out_of_subgraph_bitmap = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          src_data_out_of_subgraph_bitmap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 dst_tick_cache_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_dst_tick_cache_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_dst_tick_cache_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 src_tick_cache_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_src_tick_cache_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_src_tick_cache_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.AutoThreadAicAivDef auto_thread_aic_aiv = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_auto_thread_aic_aiv(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.ManualThreadAicAivDef manual_thread_aic_aiv = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_manual_thread_aic_aiv(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.ManualThreadNopDef manual_thread_nop = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_manual_thread_nop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FftsSubTaskDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.FftsSubTaskDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sub_task_type = 1;
  if (this->sub_task_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sub_task_type(), target);
  }

  // uint32 thread_dim = 2;
  if (this->thread_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_thread_dim(), target);
  }

  // uint32 dst_tick_cache_vld_bitmap = 3;
  if (this->dst_tick_cache_vld_bitmap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_dst_tick_cache_vld_bitmap(), target);
  }

  // uint32 src_tick_cache_vld_bitmap = 4;
  if (this->src_tick_cache_vld_bitmap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_src_tick_cache_vld_bitmap(), target);
  }

  // uint32 src_data_out_of_subgraph_bitmap = 5;
  if (this->src_data_out_of_subgraph_bitmap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_src_data_out_of_subgraph_bitmap(), target);
  }

  // repeated uint32 dst_tick_cache_id = 6;
  {
    int byte_size = _dst_tick_cache_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_dst_tick_cache_id(), byte_size, target);
    }
  }

  // repeated uint32 src_tick_cache_id = 7;
  {
    int byte_size = _src_tick_cache_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_src_tick_cache_id(), byte_size, target);
    }
  }

  // .domi.AutoThreadAicAivDef auto_thread_aic_aiv = 8;
  if (this->has_auto_thread_aic_aiv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::auto_thread_aic_aiv(this), target, stream);
  }

  // .domi.ManualThreadAicAivDef manual_thread_aic_aiv = 9;
  if (this->has_manual_thread_aic_aiv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::manual_thread_aic_aiv(this), target, stream);
  }

  // .domi.ManualThreadNopDef manual_thread_nop = 10;
  if (this->has_manual_thread_nop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::manual_thread_nop(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.FftsSubTaskDef)
  return target;
}

size_t FftsSubTaskDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.FftsSubTaskDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 dst_tick_cache_id = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->dst_tick_cache_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dst_tick_cache_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 src_tick_cache_id = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->src_tick_cache_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _src_tick_cache_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .domi.AutoThreadAicAivDef auto_thread_aic_aiv = 8;
  if (this->has_auto_thread_aic_aiv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *auto_thread_aic_aiv_);
  }

  // .domi.ManualThreadAicAivDef manual_thread_aic_aiv = 9;
  if (this->has_manual_thread_aic_aiv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *manual_thread_aic_aiv_);
  }

  // .domi.ManualThreadNopDef manual_thread_nop = 10;
  if (this->has_manual_thread_nop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *manual_thread_nop_);
  }

  // uint32 sub_task_type = 1;
  if (this->sub_task_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sub_task_type());
  }

  // uint32 thread_dim = 2;
  if (this->thread_dim() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thread_dim());
  }

  // uint32 dst_tick_cache_vld_bitmap = 3;
  if (this->dst_tick_cache_vld_bitmap() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dst_tick_cache_vld_bitmap());
  }

  // uint32 src_tick_cache_vld_bitmap = 4;
  if (this->src_tick_cache_vld_bitmap() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_src_tick_cache_vld_bitmap());
  }

  // uint32 src_data_out_of_subgraph_bitmap = 5;
  if (this->src_data_out_of_subgraph_bitmap() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_src_data_out_of_subgraph_bitmap());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FftsSubTaskDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.FftsSubTaskDef)
  GOOGLE_DCHECK_NE(&from, this);
  const FftsSubTaskDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FftsSubTaskDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.FftsSubTaskDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.FftsSubTaskDef)
    MergeFrom(*source);
  }
}

void FftsSubTaskDef::MergeFrom(const FftsSubTaskDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.FftsSubTaskDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dst_tick_cache_id_.MergeFrom(from.dst_tick_cache_id_);
  src_tick_cache_id_.MergeFrom(from.src_tick_cache_id_);
  if (from.has_auto_thread_aic_aiv()) {
    _internal_mutable_auto_thread_aic_aiv()->::domi::AutoThreadAicAivDef::MergeFrom(from._internal_auto_thread_aic_aiv());
  }
  if (from.has_manual_thread_aic_aiv()) {
    _internal_mutable_manual_thread_aic_aiv()->::domi::ManualThreadAicAivDef::MergeFrom(from._internal_manual_thread_aic_aiv());
  }
  if (from.has_manual_thread_nop()) {
    _internal_mutable_manual_thread_nop()->::domi::ManualThreadNopDef::MergeFrom(from._internal_manual_thread_nop());
  }
  if (from.sub_task_type() != 0) {
    _internal_set_sub_task_type(from._internal_sub_task_type());
  }
  if (from.thread_dim() != 0) {
    _internal_set_thread_dim(from._internal_thread_dim());
  }
  if (from.dst_tick_cache_vld_bitmap() != 0) {
    _internal_set_dst_tick_cache_vld_bitmap(from._internal_dst_tick_cache_vld_bitmap());
  }
  if (from.src_tick_cache_vld_bitmap() != 0) {
    _internal_set_src_tick_cache_vld_bitmap(from._internal_src_tick_cache_vld_bitmap());
  }
  if (from.src_data_out_of_subgraph_bitmap() != 0) {
    _internal_set_src_data_out_of_subgraph_bitmap(from._internal_src_data_out_of_subgraph_bitmap());
  }
}

void FftsSubTaskDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.FftsSubTaskDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FftsSubTaskDef::CopyFrom(const FftsSubTaskDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.FftsSubTaskDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FftsSubTaskDef::IsInitialized() const {
  return true;
}

void FftsSubTaskDef::InternalSwap(FftsSubTaskDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dst_tick_cache_id_.InternalSwap(&other->dst_tick_cache_id_);
  src_tick_cache_id_.InternalSwap(&other->src_tick_cache_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FftsSubTaskDef, src_data_out_of_subgraph_bitmap_)
      + sizeof(FftsSubTaskDef::src_data_out_of_subgraph_bitmap_)
      - PROTOBUF_FIELD_OFFSET(FftsSubTaskDef, auto_thread_aic_aiv_)>(
          reinterpret_cast<char*>(&auto_thread_aic_aiv_),
          reinterpret_cast<char*>(&other->auto_thread_aic_aiv_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FftsSubTaskDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TicketCacheDef::InitAsDefaultInstance() {
  ::domi::_TicketCacheDef_default_instance_._instance.get_mutable()->auto_thread_cache_ = const_cast< ::domi::AutoThreadCacheDef*>(
      ::domi::AutoThreadCacheDef::internal_default_instance());
  ::domi::_TicketCacheDef_default_instance_._instance.get_mutable()->manual_thread_cache_ = const_cast< ::domi::ManualThreadCacheDef*>(
      ::domi::ManualThreadCacheDef::internal_default_instance());
}
class TicketCacheDef::_Internal {
 public:
  static const ::domi::AutoThreadCacheDef& auto_thread_cache(const TicketCacheDef* msg);
  static const ::domi::ManualThreadCacheDef& manual_thread_cache(const TicketCacheDef* msg);
};

const ::domi::AutoThreadCacheDef&
TicketCacheDef::_Internal::auto_thread_cache(const TicketCacheDef* msg) {
  return *msg->auto_thread_cache_;
}
const ::domi::ManualThreadCacheDef&
TicketCacheDef::_Internal::manual_thread_cache(const TicketCacheDef* msg) {
  return *msg->manual_thread_cache_;
}
TicketCacheDef::TicketCacheDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.TicketCacheDef)
}
TicketCacheDef::TicketCacheDef(const TicketCacheDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_auto_thread_cache()) {
    auto_thread_cache_ = new ::domi::AutoThreadCacheDef(*from.auto_thread_cache_);
  } else {
    auto_thread_cache_ = nullptr;
  }
  if (from._internal_has_manual_thread_cache()) {
    manual_thread_cache_ = new ::domi::ManualThreadCacheDef(*from.manual_thread_cache_);
  } else {
    manual_thread_cache_ = nullptr;
  }
  ::memcpy(&cache_option_, &from.cache_option_,
    static_cast<size_t>(reinterpret_cast<char*>(&ticket_cache_window_) -
    reinterpret_cast<char*>(&cache_option_)) + sizeof(ticket_cache_window_));
  // @@protoc_insertion_point(copy_constructor:domi.TicketCacheDef)
}

void TicketCacheDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TicketCacheDef_task_2eproto.base);
  ::memset(&auto_thread_cache_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ticket_cache_window_) -
      reinterpret_cast<char*>(&auto_thread_cache_)) + sizeof(ticket_cache_window_));
}

TicketCacheDef::~TicketCacheDef() {
  // @@protoc_insertion_point(destructor:domi.TicketCacheDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TicketCacheDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete auto_thread_cache_;
  if (this != internal_default_instance()) delete manual_thread_cache_;
}

void TicketCacheDef::ArenaDtor(void* object) {
  TicketCacheDef* _this = reinterpret_cast< TicketCacheDef* >(object);
  (void)_this;
}
void TicketCacheDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TicketCacheDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TicketCacheDef& TicketCacheDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TicketCacheDef_task_2eproto.base);
  return *internal_default_instance();
}


void TicketCacheDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.TicketCacheDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && auto_thread_cache_ != nullptr) {
    delete auto_thread_cache_;
  }
  auto_thread_cache_ = nullptr;
  if (GetArena() == nullptr && manual_thread_cache_ != nullptr) {
    delete manual_thread_cache_;
  }
  manual_thread_cache_ = nullptr;
  ::memset(&cache_option_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ticket_cache_window_) -
      reinterpret_cast<char*>(&cache_option_)) + sizeof(ticket_cache_window_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TicketCacheDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 cache_option = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cache_option_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ticket_cache_window = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ticket_cache_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.AutoThreadCacheDef auto_thread_cache = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_auto_thread_cache(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.ManualThreadCacheDef manual_thread_cache = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_manual_thread_cache(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TicketCacheDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.TicketCacheDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cache_option = 1;
  if (this->cache_option() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cache_option(), target);
  }

  // uint32 ticket_cache_window = 2;
  if (this->ticket_cache_window() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ticket_cache_window(), target);
  }

  // .domi.AutoThreadCacheDef auto_thread_cache = 3;
  if (this->has_auto_thread_cache()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::auto_thread_cache(this), target, stream);
  }

  // .domi.ManualThreadCacheDef manual_thread_cache = 4;
  if (this->has_manual_thread_cache()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::manual_thread_cache(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.TicketCacheDef)
  return target;
}

size_t TicketCacheDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.TicketCacheDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .domi.AutoThreadCacheDef auto_thread_cache = 3;
  if (this->has_auto_thread_cache()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *auto_thread_cache_);
  }

  // .domi.ManualThreadCacheDef manual_thread_cache = 4;
  if (this->has_manual_thread_cache()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *manual_thread_cache_);
  }

  // uint32 cache_option = 1;
  if (this->cache_option() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cache_option());
  }

  // uint32 ticket_cache_window = 2;
  if (this->ticket_cache_window() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ticket_cache_window());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TicketCacheDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.TicketCacheDef)
  GOOGLE_DCHECK_NE(&from, this);
  const TicketCacheDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TicketCacheDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.TicketCacheDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.TicketCacheDef)
    MergeFrom(*source);
  }
}

void TicketCacheDef::MergeFrom(const TicketCacheDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.TicketCacheDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_auto_thread_cache()) {
    _internal_mutable_auto_thread_cache()->::domi::AutoThreadCacheDef::MergeFrom(from._internal_auto_thread_cache());
  }
  if (from.has_manual_thread_cache()) {
    _internal_mutable_manual_thread_cache()->::domi::ManualThreadCacheDef::MergeFrom(from._internal_manual_thread_cache());
  }
  if (from.cache_option() != 0) {
    _internal_set_cache_option(from._internal_cache_option());
  }
  if (from.ticket_cache_window() != 0) {
    _internal_set_ticket_cache_window(from._internal_ticket_cache_window());
  }
}

void TicketCacheDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.TicketCacheDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TicketCacheDef::CopyFrom(const TicketCacheDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.TicketCacheDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TicketCacheDef::IsInitialized() const {
  return true;
}

void TicketCacheDef::InternalSwap(TicketCacheDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TicketCacheDef, ticket_cache_window_)
      + sizeof(TicketCacheDef::ticket_cache_window_)
      - PROTOBUF_FIELD_OFFSET(TicketCacheDef, auto_thread_cache_)>(
          reinterpret_cast<char*>(&auto_thread_cache_),
          reinterpret_cast<char*>(&other->auto_thread_cache_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TicketCacheDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AutoThreadAicAivDef::InitAsDefaultInstance() {
}
class AutoThreadAicAivDef::_Internal {
 public:
};

AutoThreadAicAivDef::AutoThreadAicAivDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  task_addr_(arena),
  task_addr_offset_(arena),
  src_prefetch_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.AutoThreadAicAivDef)
}
AutoThreadAicAivDef::AutoThreadAicAivDef(const AutoThreadAicAivDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      task_addr_(from.task_addr_),
      task_addr_offset_(from.task_addr_offset_),
      src_prefetch_(from.src_prefetch_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  non_tail_task_func_stub_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_non_tail_task_func_stub().empty()) {
    non_tail_task_func_stub_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_non_tail_task_func_stub(),
      GetArena());
  }
  tail_task_func_stub_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tail_task_func_stub().empty()) {
    tail_task_func_stub_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tail_task_func_stub(),
      GetArena());
  }
  ::memcpy(&task_param_offset_, &from.task_param_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&input_output_count_) -
    reinterpret_cast<char*>(&task_param_offset_)) + sizeof(input_output_count_));
  // @@protoc_insertion_point(copy_constructor:domi.AutoThreadAicAivDef)
}

void AutoThreadAicAivDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutoThreadAicAivDef_task_2eproto.base);
  non_tail_task_func_stub_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tail_task_func_stub_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&task_param_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&input_output_count_) -
      reinterpret_cast<char*>(&task_param_offset_)) + sizeof(input_output_count_));
}

AutoThreadAicAivDef::~AutoThreadAicAivDef() {
  // @@protoc_insertion_point(destructor:domi.AutoThreadAicAivDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AutoThreadAicAivDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  non_tail_task_func_stub_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tail_task_func_stub_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AutoThreadAicAivDef::ArenaDtor(void* object) {
  AutoThreadAicAivDef* _this = reinterpret_cast< AutoThreadAicAivDef* >(object);
  (void)_this;
}
void AutoThreadAicAivDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutoThreadAicAivDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutoThreadAicAivDef& AutoThreadAicAivDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutoThreadAicAivDef_task_2eproto.base);
  return *internal_default_instance();
}


void AutoThreadAicAivDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.AutoThreadAicAivDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_addr_.Clear();
  task_addr_offset_.Clear();
  src_prefetch_.Clear();
  non_tail_task_func_stub_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tail_task_func_stub_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&task_param_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&input_output_count_) -
      reinterpret_cast<char*>(&task_param_offset_)) + sizeof(input_output_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoThreadAicAivDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 task_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_task_addr(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_task_addr(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 task_addr_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_task_addr_offset(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_task_addr_offset(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 task_param_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          task_param_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sat_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sat_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 schedule_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          schedule_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cache_prefetch_cnt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          cache_prefetch_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prefetch_enable_bitmap = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          prefetch_enable_bitmap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prefetch_once_bitmap = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          prefetch_once_bitmap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tail_blk_dim = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          tail_blk_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 non_tail_blk_dim = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          non_tail_blk_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string non_tail_task_func_stub = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_non_tail_task_func_stub();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "domi.AutoThreadAicAivDef.non_tail_task_func_stub"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tail_task_func_stub = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_tail_task_func_stub();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "domi.AutoThreadAicAivDef.tail_task_func_stub"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .domi.AutoThreadPrefetchDef src_prefetch = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_src_prefetch(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 input_output_count = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          input_output_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoThreadAicAivDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.AutoThreadAicAivDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 task_addr = 1;
  {
    int byte_size = _task_addr_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_task_addr(), byte_size, target);
    }
  }

  // repeated uint64 task_addr_offset = 2;
  {
    int byte_size = _task_addr_offset_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_task_addr_offset(), byte_size, target);
    }
  }

  // uint32 task_param_offset = 3;
  if (this->task_param_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_task_param_offset(), target);
  }

  // uint32 sat_mode = 4;
  if (this->sat_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sat_mode(), target);
  }

  // uint32 schedule_mode = 5;
  if (this->schedule_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_schedule_mode(), target);
  }

  // uint32 cache_prefetch_cnt = 6;
  if (this->cache_prefetch_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_cache_prefetch_cnt(), target);
  }

  // uint32 prefetch_enable_bitmap = 7;
  if (this->prefetch_enable_bitmap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_prefetch_enable_bitmap(), target);
  }

  // uint32 prefetch_once_bitmap = 8;
  if (this->prefetch_once_bitmap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_prefetch_once_bitmap(), target);
  }

  // uint32 tail_blk_dim = 9;
  if (this->tail_blk_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_tail_blk_dim(), target);
  }

  // uint32 non_tail_blk_dim = 10;
  if (this->non_tail_blk_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_non_tail_blk_dim(), target);
  }

  // string non_tail_task_func_stub = 11;
  if (this->non_tail_task_func_stub().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_non_tail_task_func_stub().data(), static_cast<int>(this->_internal_non_tail_task_func_stub().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "domi.AutoThreadAicAivDef.non_tail_task_func_stub");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_non_tail_task_func_stub(), target);
  }

  // string tail_task_func_stub = 12;
  if (this->tail_task_func_stub().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tail_task_func_stub().data(), static_cast<int>(this->_internal_tail_task_func_stub().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "domi.AutoThreadAicAivDef.tail_task_func_stub");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_tail_task_func_stub(), target);
  }

  // repeated .domi.AutoThreadPrefetchDef src_prefetch = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_src_prefetch_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_src_prefetch(i), target, stream);
  }

  // uint32 input_output_count = 14;
  if (this->input_output_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_input_output_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.AutoThreadAicAivDef)
  return target;
}

size_t AutoThreadAicAivDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.AutoThreadAicAivDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 task_addr = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->task_addr_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _task_addr_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 task_addr_offset = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->task_addr_offset_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _task_addr_offset_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .domi.AutoThreadPrefetchDef src_prefetch = 13;
  total_size += 1UL * this->_internal_src_prefetch_size();
  for (const auto& msg : this->src_prefetch_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string non_tail_task_func_stub = 11;
  if (this->non_tail_task_func_stub().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_non_tail_task_func_stub());
  }

  // string tail_task_func_stub = 12;
  if (this->tail_task_func_stub().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tail_task_func_stub());
  }

  // uint32 task_param_offset = 3;
  if (this->task_param_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_task_param_offset());
  }

  // uint32 sat_mode = 4;
  if (this->sat_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sat_mode());
  }

  // uint32 schedule_mode = 5;
  if (this->schedule_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_schedule_mode());
  }

  // uint32 cache_prefetch_cnt = 6;
  if (this->cache_prefetch_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cache_prefetch_cnt());
  }

  // uint32 prefetch_enable_bitmap = 7;
  if (this->prefetch_enable_bitmap() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prefetch_enable_bitmap());
  }

  // uint32 prefetch_once_bitmap = 8;
  if (this->prefetch_once_bitmap() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prefetch_once_bitmap());
  }

  // uint32 tail_blk_dim = 9;
  if (this->tail_blk_dim() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tail_blk_dim());
  }

  // uint32 non_tail_blk_dim = 10;
  if (this->non_tail_blk_dim() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_non_tail_blk_dim());
  }

  // uint32 input_output_count = 14;
  if (this->input_output_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_input_output_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutoThreadAicAivDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.AutoThreadAicAivDef)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoThreadAicAivDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutoThreadAicAivDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.AutoThreadAicAivDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.AutoThreadAicAivDef)
    MergeFrom(*source);
  }
}

void AutoThreadAicAivDef::MergeFrom(const AutoThreadAicAivDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.AutoThreadAicAivDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  task_addr_.MergeFrom(from.task_addr_);
  task_addr_offset_.MergeFrom(from.task_addr_offset_);
  src_prefetch_.MergeFrom(from.src_prefetch_);
  if (from.non_tail_task_func_stub().size() > 0) {
    _internal_set_non_tail_task_func_stub(from._internal_non_tail_task_func_stub());
  }
  if (from.tail_task_func_stub().size() > 0) {
    _internal_set_tail_task_func_stub(from._internal_tail_task_func_stub());
  }
  if (from.task_param_offset() != 0) {
    _internal_set_task_param_offset(from._internal_task_param_offset());
  }
  if (from.sat_mode() != 0) {
    _internal_set_sat_mode(from._internal_sat_mode());
  }
  if (from.schedule_mode() != 0) {
    _internal_set_schedule_mode(from._internal_schedule_mode());
  }
  if (from.cache_prefetch_cnt() != 0) {
    _internal_set_cache_prefetch_cnt(from._internal_cache_prefetch_cnt());
  }
  if (from.prefetch_enable_bitmap() != 0) {
    _internal_set_prefetch_enable_bitmap(from._internal_prefetch_enable_bitmap());
  }
  if (from.prefetch_once_bitmap() != 0) {
    _internal_set_prefetch_once_bitmap(from._internal_prefetch_once_bitmap());
  }
  if (from.tail_blk_dim() != 0) {
    _internal_set_tail_blk_dim(from._internal_tail_blk_dim());
  }
  if (from.non_tail_blk_dim() != 0) {
    _internal_set_non_tail_blk_dim(from._internal_non_tail_blk_dim());
  }
  if (from.input_output_count() != 0) {
    _internal_set_input_output_count(from._internal_input_output_count());
  }
}

void AutoThreadAicAivDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.AutoThreadAicAivDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoThreadAicAivDef::CopyFrom(const AutoThreadAicAivDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.AutoThreadAicAivDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoThreadAicAivDef::IsInitialized() const {
  return true;
}

void AutoThreadAicAivDef::InternalSwap(AutoThreadAicAivDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  task_addr_.InternalSwap(&other->task_addr_);
  task_addr_offset_.InternalSwap(&other->task_addr_offset_);
  src_prefetch_.InternalSwap(&other->src_prefetch_);
  non_tail_task_func_stub_.Swap(&other->non_tail_task_func_stub_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tail_task_func_stub_.Swap(&other->tail_task_func_stub_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutoThreadAicAivDef, input_output_count_)
      + sizeof(AutoThreadAicAivDef::input_output_count_)
      - PROTOBUF_FIELD_OFFSET(AutoThreadAicAivDef, task_param_offset_)>(
          reinterpret_cast<char*>(&task_param_offset_),
          reinterpret_cast<char*>(&other->task_param_offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoThreadAicAivDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AutoThreadCacheDef::InitAsDefaultInstance() {
}
class AutoThreadCacheDef::_Internal {
 public:
};

AutoThreadCacheDef::AutoThreadCacheDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.AutoThreadCacheDef)
}
AutoThreadCacheDef::AutoThreadCacheDef(const AutoThreadCacheDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&data_addr_, &from.data_addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&ticket_cache_ref_cnt_) -
    reinterpret_cast<char*>(&data_addr_)) + sizeof(ticket_cache_ref_cnt_));
  // @@protoc_insertion_point(copy_constructor:domi.AutoThreadCacheDef)
}

void AutoThreadCacheDef::SharedCtor() {
  ::memset(&data_addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ticket_cache_ref_cnt_) -
      reinterpret_cast<char*>(&data_addr_)) + sizeof(ticket_cache_ref_cnt_));
}

AutoThreadCacheDef::~AutoThreadCacheDef() {
  // @@protoc_insertion_point(destructor:domi.AutoThreadCacheDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AutoThreadCacheDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AutoThreadCacheDef::ArenaDtor(void* object) {
  AutoThreadCacheDef* _this = reinterpret_cast< AutoThreadCacheDef* >(object);
  (void)_this;
}
void AutoThreadCacheDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutoThreadCacheDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutoThreadCacheDef& AutoThreadCacheDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutoThreadCacheDef_task_2eproto.base);
  return *internal_default_instance();
}


void AutoThreadCacheDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.AutoThreadCacheDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&data_addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ticket_cache_ref_cnt_) -
      reinterpret_cast<char*>(&data_addr_)) + sizeof(ticket_cache_ref_cnt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoThreadCacheDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 data_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          data_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_addr_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          data_addr_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 non_tail_data_len = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          non_tail_data_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tail_data_len = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          tail_data_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ticket_cache_ref_cnt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ticket_cache_ref_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoThreadCacheDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.AutoThreadCacheDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 data_addr = 1;
  if (this->data_addr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_data_addr(), target);
  }

  // uint32 data_addr_offset = 2;
  if (this->data_addr_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_data_addr_offset(), target);
  }

  // uint32 non_tail_data_len = 3;
  if (this->non_tail_data_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_non_tail_data_len(), target);
  }

  // uint32 tail_data_len = 4;
  if (this->tail_data_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_tail_data_len(), target);
  }

  // uint32 ticket_cache_ref_cnt = 5;
  if (this->ticket_cache_ref_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ticket_cache_ref_cnt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.AutoThreadCacheDef)
  return target;
}

size_t AutoThreadCacheDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.AutoThreadCacheDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 data_addr = 1;
  if (this->data_addr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_data_addr());
  }

  // uint32 data_addr_offset = 2;
  if (this->data_addr_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_addr_offset());
  }

  // uint32 non_tail_data_len = 3;
  if (this->non_tail_data_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_non_tail_data_len());
  }

  // uint32 tail_data_len = 4;
  if (this->tail_data_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tail_data_len());
  }

  // uint32 ticket_cache_ref_cnt = 5;
  if (this->ticket_cache_ref_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ticket_cache_ref_cnt());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutoThreadCacheDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.AutoThreadCacheDef)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoThreadCacheDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutoThreadCacheDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.AutoThreadCacheDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.AutoThreadCacheDef)
    MergeFrom(*source);
  }
}

void AutoThreadCacheDef::MergeFrom(const AutoThreadCacheDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.AutoThreadCacheDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data_addr() != 0) {
    _internal_set_data_addr(from._internal_data_addr());
  }
  if (from.data_addr_offset() != 0) {
    _internal_set_data_addr_offset(from._internal_data_addr_offset());
  }
  if (from.non_tail_data_len() != 0) {
    _internal_set_non_tail_data_len(from._internal_non_tail_data_len());
  }
  if (from.tail_data_len() != 0) {
    _internal_set_tail_data_len(from._internal_tail_data_len());
  }
  if (from.ticket_cache_ref_cnt() != 0) {
    _internal_set_ticket_cache_ref_cnt(from._internal_ticket_cache_ref_cnt());
  }
}

void AutoThreadCacheDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.AutoThreadCacheDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoThreadCacheDef::CopyFrom(const AutoThreadCacheDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.AutoThreadCacheDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoThreadCacheDef::IsInitialized() const {
  return true;
}

void AutoThreadCacheDef::InternalSwap(AutoThreadCacheDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutoThreadCacheDef, ticket_cache_ref_cnt_)
      + sizeof(AutoThreadCacheDef::ticket_cache_ref_cnt_)
      - PROTOBUF_FIELD_OFFSET(AutoThreadCacheDef, data_addr_)>(
          reinterpret_cast<char*>(&data_addr_),
          reinterpret_cast<char*>(&other->data_addr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoThreadCacheDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AutoThreadPrefetchDef::InitAsDefaultInstance() {
}
class AutoThreadPrefetchDef::_Internal {
 public:
};

AutoThreadPrefetchDef::AutoThreadPrefetchDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.AutoThreadPrefetchDef)
}
AutoThreadPrefetchDef::AutoThreadPrefetchDef(const AutoThreadPrefetchDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&data_addr_, &from.data_addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&tail_data_len_) -
    reinterpret_cast<char*>(&data_addr_)) + sizeof(tail_data_len_));
  // @@protoc_insertion_point(copy_constructor:domi.AutoThreadPrefetchDef)
}

void AutoThreadPrefetchDef::SharedCtor() {
  ::memset(&data_addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tail_data_len_) -
      reinterpret_cast<char*>(&data_addr_)) + sizeof(tail_data_len_));
}

AutoThreadPrefetchDef::~AutoThreadPrefetchDef() {
  // @@protoc_insertion_point(destructor:domi.AutoThreadPrefetchDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AutoThreadPrefetchDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AutoThreadPrefetchDef::ArenaDtor(void* object) {
  AutoThreadPrefetchDef* _this = reinterpret_cast< AutoThreadPrefetchDef* >(object);
  (void)_this;
}
void AutoThreadPrefetchDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutoThreadPrefetchDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutoThreadPrefetchDef& AutoThreadPrefetchDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutoThreadPrefetchDef_task_2eproto.base);
  return *internal_default_instance();
}


void AutoThreadPrefetchDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.AutoThreadPrefetchDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&data_addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tail_data_len_) -
      reinterpret_cast<char*>(&data_addr_)) + sizeof(tail_data_len_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoThreadPrefetchDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 data_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          data_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_addr_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          data_addr_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 non_tail_data_len = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          non_tail_data_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tail_data_len = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          tail_data_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoThreadPrefetchDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.AutoThreadPrefetchDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 data_addr = 1;
  if (this->data_addr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_data_addr(), target);
  }

  // uint32 data_addr_offset = 2;
  if (this->data_addr_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_data_addr_offset(), target);
  }

  // uint32 non_tail_data_len = 3;
  if (this->non_tail_data_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_non_tail_data_len(), target);
  }

  // uint32 tail_data_len = 4;
  if (this->tail_data_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_tail_data_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.AutoThreadPrefetchDef)
  return target;
}

size_t AutoThreadPrefetchDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.AutoThreadPrefetchDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 data_addr = 1;
  if (this->data_addr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_data_addr());
  }

  // uint32 data_addr_offset = 2;
  if (this->data_addr_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_addr_offset());
  }

  // uint32 non_tail_data_len = 3;
  if (this->non_tail_data_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_non_tail_data_len());
  }

  // uint32 tail_data_len = 4;
  if (this->tail_data_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tail_data_len());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutoThreadPrefetchDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.AutoThreadPrefetchDef)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoThreadPrefetchDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutoThreadPrefetchDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.AutoThreadPrefetchDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.AutoThreadPrefetchDef)
    MergeFrom(*source);
  }
}

void AutoThreadPrefetchDef::MergeFrom(const AutoThreadPrefetchDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.AutoThreadPrefetchDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data_addr() != 0) {
    _internal_set_data_addr(from._internal_data_addr());
  }
  if (from.data_addr_offset() != 0) {
    _internal_set_data_addr_offset(from._internal_data_addr_offset());
  }
  if (from.non_tail_data_len() != 0) {
    _internal_set_non_tail_data_len(from._internal_non_tail_data_len());
  }
  if (from.tail_data_len() != 0) {
    _internal_set_tail_data_len(from._internal_tail_data_len());
  }
}

void AutoThreadPrefetchDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.AutoThreadPrefetchDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoThreadPrefetchDef::CopyFrom(const AutoThreadPrefetchDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.AutoThreadPrefetchDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoThreadPrefetchDef::IsInitialized() const {
  return true;
}

void AutoThreadPrefetchDef::InternalSwap(AutoThreadPrefetchDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutoThreadPrefetchDef, tail_data_len_)
      + sizeof(AutoThreadPrefetchDef::tail_data_len_)
      - PROTOBUF_FIELD_OFFSET(AutoThreadPrefetchDef, data_addr_)>(
          reinterpret_cast<char*>(&data_addr_),
          reinterpret_cast<char*>(&other->data_addr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoThreadPrefetchDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ManualThreadAicAivDef::InitAsDefaultInstance() {
}
class ManualThreadAicAivDef::_Internal {
 public:
};

ManualThreadAicAivDef::ManualThreadAicAivDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  task_addr_(arena),
  task_addr_offset_(arena),
  thread_prefetch_dmu_idx_(arena),
  thread_blk_dim_(arena),
  thread_task_func_stub_(arena),
  prefetch_list_(arena),
  src_dep_tbl_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.ManualThreadAicAivDef)
}
ManualThreadAicAivDef::ManualThreadAicAivDef(const ManualThreadAicAivDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      task_addr_(from.task_addr_),
      task_addr_offset_(from.task_addr_offset_),
      thread_prefetch_dmu_idx_(from.thread_prefetch_dmu_idx_),
      thread_blk_dim_(from.thread_blk_dim_),
      thread_task_func_stub_(from.thread_task_func_stub_),
      prefetch_list_(from.prefetch_list_),
      src_dep_tbl_(from.src_dep_tbl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&task_param_offset_, &from.task_param_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&input_output_count_) -
    reinterpret_cast<char*>(&task_param_offset_)) + sizeof(input_output_count_));
  // @@protoc_insertion_point(copy_constructor:domi.ManualThreadAicAivDef)
}

void ManualThreadAicAivDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ManualThreadAicAivDef_task_2eproto.base);
  ::memset(&task_param_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&input_output_count_) -
      reinterpret_cast<char*>(&task_param_offset_)) + sizeof(input_output_count_));
}

ManualThreadAicAivDef::~ManualThreadAicAivDef() {
  // @@protoc_insertion_point(destructor:domi.ManualThreadAicAivDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ManualThreadAicAivDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ManualThreadAicAivDef::ArenaDtor(void* object) {
  ManualThreadAicAivDef* _this = reinterpret_cast< ManualThreadAicAivDef* >(object);
  (void)_this;
}
void ManualThreadAicAivDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ManualThreadAicAivDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ManualThreadAicAivDef& ManualThreadAicAivDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ManualThreadAicAivDef_task_2eproto.base);
  return *internal_default_instance();
}


void ManualThreadAicAivDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.ManualThreadAicAivDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_addr_.Clear();
  task_addr_offset_.Clear();
  thread_prefetch_dmu_idx_.Clear();
  thread_blk_dim_.Clear();
  thread_task_func_stub_.Clear();
  prefetch_list_.Clear();
  src_dep_tbl_.Clear();
  ::memset(&task_param_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&input_output_count_) -
      reinterpret_cast<char*>(&task_param_offset_)) + sizeof(input_output_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ManualThreadAicAivDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 task_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_task_addr(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_task_addr(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 task_addr_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_task_addr_offset(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_task_addr_offset(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 task_param_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          task_param_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sat_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sat_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 schedule_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          schedule_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cache_prefetch_cnt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          cache_prefetch_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prefetch_enable_bitmap = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          prefetch_enable_bitmap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prefetch_once_bitmap = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          prefetch_once_bitmap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prefetch_once_dmu_num = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          prefetch_once_dmu_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 thread_prefetch_dmu_idx = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_thread_prefetch_dmu_idx(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_thread_prefetch_dmu_idx(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 thread_blk_dim = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_thread_blk_dim(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88) {
          _internal_add_thread_blk_dim(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string thread_task_func_stub = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_thread_task_func_stub();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "domi.ManualThreadAicAivDef.thread_task_func_stub"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .domi.ManualThreadDmuDef prefetch_list = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prefetch_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .domi.ManualThreadDependencyDef src_dep_tbl = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_src_dep_tbl(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 input_output_count = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          input_output_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ManualThreadAicAivDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.ManualThreadAicAivDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 task_addr = 1;
  {
    int byte_size = _task_addr_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_task_addr(), byte_size, target);
    }
  }

  // repeated uint64 task_addr_offset = 2;
  {
    int byte_size = _task_addr_offset_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_task_addr_offset(), byte_size, target);
    }
  }

  // uint32 task_param_offset = 3;
  if (this->task_param_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_task_param_offset(), target);
  }

  // uint32 sat_mode = 4;
  if (this->sat_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sat_mode(), target);
  }

  // uint32 schedule_mode = 5;
  if (this->schedule_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_schedule_mode(), target);
  }

  // uint32 cache_prefetch_cnt = 6;
  if (this->cache_prefetch_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_cache_prefetch_cnt(), target);
  }

  // uint32 prefetch_enable_bitmap = 7;
  if (this->prefetch_enable_bitmap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_prefetch_enable_bitmap(), target);
  }

  // uint32 prefetch_once_bitmap = 8;
  if (this->prefetch_once_bitmap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_prefetch_once_bitmap(), target);
  }

  // uint32 prefetch_once_dmu_num = 9;
  if (this->prefetch_once_dmu_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_prefetch_once_dmu_num(), target);
  }

  // repeated uint32 thread_prefetch_dmu_idx = 10;
  {
    int byte_size = _thread_prefetch_dmu_idx_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          10, _internal_thread_prefetch_dmu_idx(), byte_size, target);
    }
  }

  // repeated uint32 thread_blk_dim = 11;
  {
    int byte_size = _thread_blk_dim_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          11, _internal_thread_blk_dim(), byte_size, target);
    }
  }

  // repeated string thread_task_func_stub = 12;
  for (int i = 0, n = this->_internal_thread_task_func_stub_size(); i < n; i++) {
    const auto& s = this->_internal_thread_task_func_stub(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "domi.ManualThreadAicAivDef.thread_task_func_stub");
    target = stream->WriteString(12, s, target);
  }

  // repeated .domi.ManualThreadDmuDef prefetch_list = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_prefetch_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_prefetch_list(i), target, stream);
  }

  // repeated .domi.ManualThreadDependencyDef src_dep_tbl = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_src_dep_tbl_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_src_dep_tbl(i), target, stream);
  }

  // uint32 input_output_count = 15;
  if (this->input_output_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_input_output_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.ManualThreadAicAivDef)
  return target;
}

size_t ManualThreadAicAivDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.ManualThreadAicAivDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 task_addr = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->task_addr_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _task_addr_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 task_addr_offset = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->task_addr_offset_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _task_addr_offset_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 thread_prefetch_dmu_idx = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->thread_prefetch_dmu_idx_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _thread_prefetch_dmu_idx_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 thread_blk_dim = 11;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->thread_blk_dim_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _thread_blk_dim_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string thread_task_func_stub = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(thread_task_func_stub_.size());
  for (int i = 0, n = thread_task_func_stub_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      thread_task_func_stub_.Get(i));
  }

  // repeated .domi.ManualThreadDmuDef prefetch_list = 13;
  total_size += 1UL * this->_internal_prefetch_list_size();
  for (const auto& msg : this->prefetch_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .domi.ManualThreadDependencyDef src_dep_tbl = 14;
  total_size += 1UL * this->_internal_src_dep_tbl_size();
  for (const auto& msg : this->src_dep_tbl_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 task_param_offset = 3;
  if (this->task_param_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_task_param_offset());
  }

  // uint32 sat_mode = 4;
  if (this->sat_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sat_mode());
  }

  // uint32 schedule_mode = 5;
  if (this->schedule_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_schedule_mode());
  }

  // uint32 cache_prefetch_cnt = 6;
  if (this->cache_prefetch_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cache_prefetch_cnt());
  }

  // uint32 prefetch_enable_bitmap = 7;
  if (this->prefetch_enable_bitmap() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prefetch_enable_bitmap());
  }

  // uint32 prefetch_once_bitmap = 8;
  if (this->prefetch_once_bitmap() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prefetch_once_bitmap());
  }

  // uint32 prefetch_once_dmu_num = 9;
  if (this->prefetch_once_dmu_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prefetch_once_dmu_num());
  }

  // uint32 input_output_count = 15;
  if (this->input_output_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_input_output_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ManualThreadAicAivDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.ManualThreadAicAivDef)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualThreadAicAivDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ManualThreadAicAivDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.ManualThreadAicAivDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.ManualThreadAicAivDef)
    MergeFrom(*source);
  }
}

void ManualThreadAicAivDef::MergeFrom(const ManualThreadAicAivDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.ManualThreadAicAivDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  task_addr_.MergeFrom(from.task_addr_);
  task_addr_offset_.MergeFrom(from.task_addr_offset_);
  thread_prefetch_dmu_idx_.MergeFrom(from.thread_prefetch_dmu_idx_);
  thread_blk_dim_.MergeFrom(from.thread_blk_dim_);
  thread_task_func_stub_.MergeFrom(from.thread_task_func_stub_);
  prefetch_list_.MergeFrom(from.prefetch_list_);
  src_dep_tbl_.MergeFrom(from.src_dep_tbl_);
  if (from.task_param_offset() != 0) {
    _internal_set_task_param_offset(from._internal_task_param_offset());
  }
  if (from.sat_mode() != 0) {
    _internal_set_sat_mode(from._internal_sat_mode());
  }
  if (from.schedule_mode() != 0) {
    _internal_set_schedule_mode(from._internal_schedule_mode());
  }
  if (from.cache_prefetch_cnt() != 0) {
    _internal_set_cache_prefetch_cnt(from._internal_cache_prefetch_cnt());
  }
  if (from.prefetch_enable_bitmap() != 0) {
    _internal_set_prefetch_enable_bitmap(from._internal_prefetch_enable_bitmap());
  }
  if (from.prefetch_once_bitmap() != 0) {
    _internal_set_prefetch_once_bitmap(from._internal_prefetch_once_bitmap());
  }
  if (from.prefetch_once_dmu_num() != 0) {
    _internal_set_prefetch_once_dmu_num(from._internal_prefetch_once_dmu_num());
  }
  if (from.input_output_count() != 0) {
    _internal_set_input_output_count(from._internal_input_output_count());
  }
}

void ManualThreadAicAivDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.ManualThreadAicAivDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualThreadAicAivDef::CopyFrom(const ManualThreadAicAivDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.ManualThreadAicAivDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualThreadAicAivDef::IsInitialized() const {
  return true;
}

void ManualThreadAicAivDef::InternalSwap(ManualThreadAicAivDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  task_addr_.InternalSwap(&other->task_addr_);
  task_addr_offset_.InternalSwap(&other->task_addr_offset_);
  thread_prefetch_dmu_idx_.InternalSwap(&other->thread_prefetch_dmu_idx_);
  thread_blk_dim_.InternalSwap(&other->thread_blk_dim_);
  thread_task_func_stub_.InternalSwap(&other->thread_task_func_stub_);
  prefetch_list_.InternalSwap(&other->prefetch_list_);
  src_dep_tbl_.InternalSwap(&other->src_dep_tbl_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ManualThreadAicAivDef, input_output_count_)
      + sizeof(ManualThreadAicAivDef::input_output_count_)
      - PROTOBUF_FIELD_OFFSET(ManualThreadAicAivDef, task_param_offset_)>(
          reinterpret_cast<char*>(&task_param_offset_),
          reinterpret_cast<char*>(&other->task_param_offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ManualThreadAicAivDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ManualThreadNopDef::InitAsDefaultInstance() {
}
class ManualThreadNopDef::_Internal {
 public:
};

ManualThreadNopDef::ManualThreadNopDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  src_dep_tbl_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.ManualThreadNopDef)
}
ManualThreadNopDef::ManualThreadNopDef(const ManualThreadNopDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      src_dep_tbl_(from.src_dep_tbl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:domi.ManualThreadNopDef)
}

void ManualThreadNopDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ManualThreadNopDef_task_2eproto.base);
}

ManualThreadNopDef::~ManualThreadNopDef() {
  // @@protoc_insertion_point(destructor:domi.ManualThreadNopDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ManualThreadNopDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ManualThreadNopDef::ArenaDtor(void* object) {
  ManualThreadNopDef* _this = reinterpret_cast< ManualThreadNopDef* >(object);
  (void)_this;
}
void ManualThreadNopDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ManualThreadNopDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ManualThreadNopDef& ManualThreadNopDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ManualThreadNopDef_task_2eproto.base);
  return *internal_default_instance();
}


void ManualThreadNopDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.ManualThreadNopDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  src_dep_tbl_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ManualThreadNopDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .domi.ManualThreadDependencyDef src_dep_tbl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_src_dep_tbl(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ManualThreadNopDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.ManualThreadNopDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .domi.ManualThreadDependencyDef src_dep_tbl = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_src_dep_tbl_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_src_dep_tbl(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.ManualThreadNopDef)
  return target;
}

size_t ManualThreadNopDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.ManualThreadNopDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .domi.ManualThreadDependencyDef src_dep_tbl = 1;
  total_size += 1UL * this->_internal_src_dep_tbl_size();
  for (const auto& msg : this->src_dep_tbl_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ManualThreadNopDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.ManualThreadNopDef)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualThreadNopDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ManualThreadNopDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.ManualThreadNopDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.ManualThreadNopDef)
    MergeFrom(*source);
  }
}

void ManualThreadNopDef::MergeFrom(const ManualThreadNopDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.ManualThreadNopDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  src_dep_tbl_.MergeFrom(from.src_dep_tbl_);
}

void ManualThreadNopDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.ManualThreadNopDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualThreadNopDef::CopyFrom(const ManualThreadNopDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.ManualThreadNopDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualThreadNopDef::IsInitialized() const {
  return true;
}

void ManualThreadNopDef::InternalSwap(ManualThreadNopDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  src_dep_tbl_.InternalSwap(&other->src_dep_tbl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ManualThreadNopDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ManualThreadCacheDef::InitAsDefaultInstance() {
}
class ManualThreadCacheDef::_Internal {
 public:
};

ManualThreadCacheDef::ManualThreadCacheDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dmu_list_(arena),
  slice_dmu_idx_(arena),
  ticket_cache_ref_cnt_tbl_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.ManualThreadCacheDef)
}
ManualThreadCacheDef::ManualThreadCacheDef(const ManualThreadCacheDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dmu_list_(from.dmu_list_),
      slice_dmu_idx_(from.slice_dmu_idx_),
      ticket_cache_ref_cnt_tbl_(from.ticket_cache_ref_cnt_tbl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:domi.ManualThreadCacheDef)
}

void ManualThreadCacheDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ManualThreadCacheDef_task_2eproto.base);
}

ManualThreadCacheDef::~ManualThreadCacheDef() {
  // @@protoc_insertion_point(destructor:domi.ManualThreadCacheDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ManualThreadCacheDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ManualThreadCacheDef::ArenaDtor(void* object) {
  ManualThreadCacheDef* _this = reinterpret_cast< ManualThreadCacheDef* >(object);
  (void)_this;
}
void ManualThreadCacheDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ManualThreadCacheDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ManualThreadCacheDef& ManualThreadCacheDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ManualThreadCacheDef_task_2eproto.base);
  return *internal_default_instance();
}


void ManualThreadCacheDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.ManualThreadCacheDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dmu_list_.Clear();
  slice_dmu_idx_.Clear();
  ticket_cache_ref_cnt_tbl_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ManualThreadCacheDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .domi.ManualThreadDmuDef dmu_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dmu_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 slice_dmu_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_slice_dmu_idx(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_slice_dmu_idx(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 ticket_cache_ref_cnt_tbl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ticket_cache_ref_cnt_tbl(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_ticket_cache_ref_cnt_tbl(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ManualThreadCacheDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.ManualThreadCacheDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .domi.ManualThreadDmuDef dmu_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dmu_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_dmu_list(i), target, stream);
  }

  // repeated uint32 slice_dmu_idx = 2;
  {
    int byte_size = _slice_dmu_idx_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_slice_dmu_idx(), byte_size, target);
    }
  }

  // repeated uint32 ticket_cache_ref_cnt_tbl = 3;
  {
    int byte_size = _ticket_cache_ref_cnt_tbl_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_ticket_cache_ref_cnt_tbl(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.ManualThreadCacheDef)
  return target;
}

size_t ManualThreadCacheDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.ManualThreadCacheDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .domi.ManualThreadDmuDef dmu_list = 1;
  total_size += 1UL * this->_internal_dmu_list_size();
  for (const auto& msg : this->dmu_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 slice_dmu_idx = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->slice_dmu_idx_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _slice_dmu_idx_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 ticket_cache_ref_cnt_tbl = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ticket_cache_ref_cnt_tbl_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ticket_cache_ref_cnt_tbl_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ManualThreadCacheDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.ManualThreadCacheDef)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualThreadCacheDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ManualThreadCacheDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.ManualThreadCacheDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.ManualThreadCacheDef)
    MergeFrom(*source);
  }
}

void ManualThreadCacheDef::MergeFrom(const ManualThreadCacheDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.ManualThreadCacheDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dmu_list_.MergeFrom(from.dmu_list_);
  slice_dmu_idx_.MergeFrom(from.slice_dmu_idx_);
  ticket_cache_ref_cnt_tbl_.MergeFrom(from.ticket_cache_ref_cnt_tbl_);
}

void ManualThreadCacheDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.ManualThreadCacheDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualThreadCacheDef::CopyFrom(const ManualThreadCacheDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.ManualThreadCacheDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualThreadCacheDef::IsInitialized() const {
  return true;
}

void ManualThreadCacheDef::InternalSwap(ManualThreadCacheDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dmu_list_.InternalSwap(&other->dmu_list_);
  slice_dmu_idx_.InternalSwap(&other->slice_dmu_idx_);
  ticket_cache_ref_cnt_tbl_.InternalSwap(&other->ticket_cache_ref_cnt_tbl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ManualThreadCacheDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ManualThreadDmuDef::InitAsDefaultInstance() {
}
class ManualThreadDmuDef::_Internal {
 public:
};

ManualThreadDmuDef::ManualThreadDmuDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.ManualThreadDmuDef)
}
ManualThreadDmuDef::ManualThreadDmuDef(const ManualThreadDmuDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&data_addr_, &from.data_addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&stride_inner_) -
    reinterpret_cast<char*>(&data_addr_)) + sizeof(stride_inner_));
  // @@protoc_insertion_point(copy_constructor:domi.ManualThreadDmuDef)
}

void ManualThreadDmuDef::SharedCtor() {
  ::memset(&data_addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stride_inner_) -
      reinterpret_cast<char*>(&data_addr_)) + sizeof(stride_inner_));
}

ManualThreadDmuDef::~ManualThreadDmuDef() {
  // @@protoc_insertion_point(destructor:domi.ManualThreadDmuDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ManualThreadDmuDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ManualThreadDmuDef::ArenaDtor(void* object) {
  ManualThreadDmuDef* _this = reinterpret_cast< ManualThreadDmuDef* >(object);
  (void)_this;
}
void ManualThreadDmuDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ManualThreadDmuDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ManualThreadDmuDef& ManualThreadDmuDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ManualThreadDmuDef_task_2eproto.base);
  return *internal_default_instance();
}


void ManualThreadDmuDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.ManualThreadDmuDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&data_addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stride_inner_) -
      reinterpret_cast<char*>(&data_addr_)) + sizeof(stride_inner_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ManualThreadDmuDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 data_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          data_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_outer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_outer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_inner = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_inner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 stride_outer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          stride_outer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 len_inner = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          len_inner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 stride_inner = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          stride_inner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ManualThreadDmuDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.ManualThreadDmuDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 data_addr = 1;
  if (this->data_addr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_data_addr(), target);
  }

  // uint32 num_outer = 2;
  if (this->num_outer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_outer(), target);
  }

  // uint32 num_inner = 3;
  if (this->num_inner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_inner(), target);
  }

  // uint32 stride_outer = 4;
  if (this->stride_outer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_stride_outer(), target);
  }

  // uint32 len_inner = 5;
  if (this->len_inner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_len_inner(), target);
  }

  // uint32 stride_inner = 6;
  if (this->stride_inner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_stride_inner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.ManualThreadDmuDef)
  return target;
}

size_t ManualThreadDmuDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.ManualThreadDmuDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 data_addr = 1;
  if (this->data_addr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_data_addr());
  }

  // uint32 num_outer = 2;
  if (this->num_outer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_outer());
  }

  // uint32 num_inner = 3;
  if (this->num_inner() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_inner());
  }

  // uint32 stride_outer = 4;
  if (this->stride_outer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stride_outer());
  }

  // uint32 len_inner = 5;
  if (this->len_inner() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_len_inner());
  }

  // uint32 stride_inner = 6;
  if (this->stride_inner() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stride_inner());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ManualThreadDmuDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.ManualThreadDmuDef)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualThreadDmuDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ManualThreadDmuDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.ManualThreadDmuDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.ManualThreadDmuDef)
    MergeFrom(*source);
  }
}

void ManualThreadDmuDef::MergeFrom(const ManualThreadDmuDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.ManualThreadDmuDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data_addr() != 0) {
    _internal_set_data_addr(from._internal_data_addr());
  }
  if (from.num_outer() != 0) {
    _internal_set_num_outer(from._internal_num_outer());
  }
  if (from.num_inner() != 0) {
    _internal_set_num_inner(from._internal_num_inner());
  }
  if (from.stride_outer() != 0) {
    _internal_set_stride_outer(from._internal_stride_outer());
  }
  if (from.len_inner() != 0) {
    _internal_set_len_inner(from._internal_len_inner());
  }
  if (from.stride_inner() != 0) {
    _internal_set_stride_inner(from._internal_stride_inner());
  }
}

void ManualThreadDmuDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.ManualThreadDmuDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualThreadDmuDef::CopyFrom(const ManualThreadDmuDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.ManualThreadDmuDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualThreadDmuDef::IsInitialized() const {
  return true;
}

void ManualThreadDmuDef::InternalSwap(ManualThreadDmuDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ManualThreadDmuDef, stride_inner_)
      + sizeof(ManualThreadDmuDef::stride_inner_)
      - PROTOBUF_FIELD_OFFSET(ManualThreadDmuDef, data_addr_)>(
          reinterpret_cast<char*>(&data_addr_),
          reinterpret_cast<char*>(&other->data_addr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ManualThreadDmuDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ManualThreadDependencyDef::InitAsDefaultInstance() {
}
class ManualThreadDependencyDef::_Internal {
 public:
};

ManualThreadDependencyDef::ManualThreadDependencyDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dependency_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.ManualThreadDependencyDef)
}
ManualThreadDependencyDef::ManualThreadDependencyDef(const ManualThreadDependencyDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dependency_(from.dependency_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:domi.ManualThreadDependencyDef)
}

void ManualThreadDependencyDef::SharedCtor() {
}

ManualThreadDependencyDef::~ManualThreadDependencyDef() {
  // @@protoc_insertion_point(destructor:domi.ManualThreadDependencyDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ManualThreadDependencyDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ManualThreadDependencyDef::ArenaDtor(void* object) {
  ManualThreadDependencyDef* _this = reinterpret_cast< ManualThreadDependencyDef* >(object);
  (void)_this;
}
void ManualThreadDependencyDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ManualThreadDependencyDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ManualThreadDependencyDef& ManualThreadDependencyDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ManualThreadDependencyDef_task_2eproto.base);
  return *internal_default_instance();
}


void ManualThreadDependencyDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.ManualThreadDependencyDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dependency_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ManualThreadDependencyDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 dependency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_dependency(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_dependency(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ManualThreadDependencyDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.ManualThreadDependencyDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 dependency = 1;
  {
    int byte_size = _dependency_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_dependency(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.ManualThreadDependencyDef)
  return target;
}

size_t ManualThreadDependencyDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.ManualThreadDependencyDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 dependency = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->dependency_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dependency_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ManualThreadDependencyDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.ManualThreadDependencyDef)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualThreadDependencyDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ManualThreadDependencyDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.ManualThreadDependencyDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.ManualThreadDependencyDef)
    MergeFrom(*source);
  }
}

void ManualThreadDependencyDef::MergeFrom(const ManualThreadDependencyDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.ManualThreadDependencyDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dependency_.MergeFrom(from.dependency_);
}

void ManualThreadDependencyDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.ManualThreadDependencyDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualThreadDependencyDef::CopyFrom(const ManualThreadDependencyDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.ManualThreadDependencyDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualThreadDependencyDef::IsInitialized() const {
  return true;
}

void ManualThreadDependencyDef::InternalSwap(ManualThreadDependencyDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dependency_.InternalSwap(&other->dependency_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ManualThreadDependencyDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DSATaskDef::InitAsDefaultInstance() {
  ::domi::_DSATaskDef_default_instance_._instance.get_mutable()->args_ = const_cast< ::domi::DSATaskArgsDef*>(
      ::domi::DSATaskArgsDef::internal_default_instance());
}
class DSATaskDef::_Internal {
 public:
  static const ::domi::DSATaskArgsDef& args(const DSATaskDef* msg);
};

const ::domi::DSATaskArgsDef&
DSATaskDef::_Internal::args(const DSATaskDef* msg) {
  return *msg->args_;
}
DSATaskDef::DSATaskDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.DSATaskDef)
}
DSATaskDef::DSATaskDef(const DSATaskDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_args()) {
    args_ = new ::domi::DSATaskArgsDef(*from.args_);
  } else {
    args_ = nullptr;
  }
  ::memcpy(&op_index_, &from.op_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&random_count_value_or_ptr_) -
    reinterpret_cast<char*>(&op_index_)) + sizeof(random_count_value_or_ptr_));
  // @@protoc_insertion_point(copy_constructor:domi.DSATaskDef)
}

void DSATaskDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DSATaskDef_task_2eproto.base);
  ::memset(&args_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&random_count_value_or_ptr_) -
      reinterpret_cast<char*>(&args_)) + sizeof(random_count_value_or_ptr_));
}

DSATaskDef::~DSATaskDef() {
  // @@protoc_insertion_point(destructor:domi.DSATaskDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DSATaskDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete args_;
}

void DSATaskDef::ArenaDtor(void* object) {
  DSATaskDef* _this = reinterpret_cast< DSATaskDef* >(object);
  (void)_this;
}
void DSATaskDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DSATaskDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DSATaskDef& DSATaskDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DSATaskDef_task_2eproto.base);
  return *internal_default_instance();
}


void DSATaskDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.DSATaskDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && args_ != nullptr) {
    delete args_;
  }
  args_ = nullptr;
  ::memset(&op_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&random_count_value_or_ptr_) -
      reinterpret_cast<char*>(&op_index_)) + sizeof(random_count_value_or_ptr_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DSATaskDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 op_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          op_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sqe_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sqe_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 distribution_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          distribution_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          data_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 alg_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          alg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 input_vld = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          input_vld_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 input_value_addr_flag = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          input_value_addr_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 input1_value_or_ptr = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          input1_value_or_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 input2_value_or_ptr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          input2_value_or_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 seed_value_or_ptr = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          seed_value_or_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 random_count_value_or_ptr = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          random_count_value_or_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.DSATaskArgsDef args = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_args(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DSATaskDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.DSATaskDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 op_index = 1;
  if (this->op_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_op_index(), target);
  }

  // uint32 start = 2;
  if (this->start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_start(), target);
  }

  // uint32 sqe_type = 3;
  if (this->sqe_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sqe_type(), target);
  }

  // uint32 distribution_type = 4;
  if (this->distribution_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_distribution_type(), target);
  }

  // uint32 data_type = 5;
  if (this->data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_data_type(), target);
  }

  // uint32 alg_type = 6;
  if (this->alg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_alg_type(), target);
  }

  // uint32 input_vld = 7;
  if (this->input_vld() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_input_vld(), target);
  }

  // uint32 input_value_addr_flag = 8;
  if (this->input_value_addr_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_input_value_addr_flag(), target);
  }

  // uint32 input1_value_or_ptr = 9;
  if (this->input1_value_or_ptr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_input1_value_or_ptr(), target);
  }

  // uint32 input2_value_or_ptr = 10;
  if (this->input2_value_or_ptr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_input2_value_or_ptr(), target);
  }

  // uint32 seed_value_or_ptr = 11;
  if (this->seed_value_or_ptr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_seed_value_or_ptr(), target);
  }

  // uint32 random_count_value_or_ptr = 12;
  if (this->random_count_value_or_ptr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_random_count_value_or_ptr(), target);
  }

  // .domi.DSATaskArgsDef args = 13;
  if (this->has_args()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::args(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.DSATaskDef)
  return target;
}

size_t DSATaskDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.DSATaskDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .domi.DSATaskArgsDef args = 13;
  if (this->has_args()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *args_);
  }

  // uint32 op_index = 1;
  if (this->op_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_op_index());
  }

  // uint32 start = 2;
  if (this->start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_start());
  }

  // uint32 sqe_type = 3;
  if (this->sqe_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sqe_type());
  }

  // uint32 distribution_type = 4;
  if (this->distribution_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_distribution_type());
  }

  // uint32 data_type = 5;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_type());
  }

  // uint32 alg_type = 6;
  if (this->alg_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_alg_type());
  }

  // uint32 input_vld = 7;
  if (this->input_vld() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_input_vld());
  }

  // uint32 input_value_addr_flag = 8;
  if (this->input_value_addr_flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_input_value_addr_flag());
  }

  // uint32 input1_value_or_ptr = 9;
  if (this->input1_value_or_ptr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_input1_value_or_ptr());
  }

  // uint32 input2_value_or_ptr = 10;
  if (this->input2_value_or_ptr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_input2_value_or_ptr());
  }

  // uint32 seed_value_or_ptr = 11;
  if (this->seed_value_or_ptr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seed_value_or_ptr());
  }

  // uint32 random_count_value_or_ptr = 12;
  if (this->random_count_value_or_ptr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_random_count_value_or_ptr());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DSATaskDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.DSATaskDef)
  GOOGLE_DCHECK_NE(&from, this);
  const DSATaskDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DSATaskDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.DSATaskDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.DSATaskDef)
    MergeFrom(*source);
  }
}

void DSATaskDef::MergeFrom(const DSATaskDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.DSATaskDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_args()) {
    _internal_mutable_args()->::domi::DSATaskArgsDef::MergeFrom(from._internal_args());
  }
  if (from.op_index() != 0) {
    _internal_set_op_index(from._internal_op_index());
  }
  if (from.start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from.sqe_type() != 0) {
    _internal_set_sqe_type(from._internal_sqe_type());
  }
  if (from.distribution_type() != 0) {
    _internal_set_distribution_type(from._internal_distribution_type());
  }
  if (from.data_type() != 0) {
    _internal_set_data_type(from._internal_data_type());
  }
  if (from.alg_type() != 0) {
    _internal_set_alg_type(from._internal_alg_type());
  }
  if (from.input_vld() != 0) {
    _internal_set_input_vld(from._internal_input_vld());
  }
  if (from.input_value_addr_flag() != 0) {
    _internal_set_input_value_addr_flag(from._internal_input_value_addr_flag());
  }
  if (from.input1_value_or_ptr() != 0) {
    _internal_set_input1_value_or_ptr(from._internal_input1_value_or_ptr());
  }
  if (from.input2_value_or_ptr() != 0) {
    _internal_set_input2_value_or_ptr(from._internal_input2_value_or_ptr());
  }
  if (from.seed_value_or_ptr() != 0) {
    _internal_set_seed_value_or_ptr(from._internal_seed_value_or_ptr());
  }
  if (from.random_count_value_or_ptr() != 0) {
    _internal_set_random_count_value_or_ptr(from._internal_random_count_value_or_ptr());
  }
}

void DSATaskDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.DSATaskDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DSATaskDef::CopyFrom(const DSATaskDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.DSATaskDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DSATaskDef::IsInitialized() const {
  return true;
}

void DSATaskDef::InternalSwap(DSATaskDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DSATaskDef, random_count_value_or_ptr_)
      + sizeof(DSATaskDef::random_count_value_or_ptr_)
      - PROTOBUF_FIELD_OFFSET(DSATaskDef, args_)>(
          reinterpret_cast<char*>(&args_),
          reinterpret_cast<char*>(&other->args_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DSATaskDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DSATaskArgsDef::InitAsDefaultInstance() {
}
class DSATaskArgsDef::_Internal {
 public:
};

DSATaskArgsDef::DSATaskArgsDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.DSATaskArgsDef)
}
DSATaskArgsDef::DSATaskArgsDef(const DSATaskArgsDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  seed_value_or_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_seed_value_or_addr().empty()) {
    seed_value_or_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_seed_value_or_addr(),
      GetArena());
  }
  random_count_value_or_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_random_count_value_or_addr().empty()) {
    random_count_value_or_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_random_count_value_or_addr(),
      GetArena());
  }
  input1_value_or_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_input1_value_or_addr().empty()) {
    input1_value_or_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_input1_value_or_addr(),
      GetArena());
  }
  input2_value_or_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_input2_value_or_addr().empty()) {
    input2_value_or_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_input2_value_or_addr(),
      GetArena());
  }
  ::memcpy(&output_addr_, &from.output_addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&workspace_input_addr_) -
    reinterpret_cast<char*>(&output_addr_)) + sizeof(workspace_input_addr_));
  // @@protoc_insertion_point(copy_constructor:domi.DSATaskArgsDef)
}

void DSATaskArgsDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DSATaskArgsDef_task_2eproto.base);
  seed_value_or_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  random_count_value_or_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input1_value_or_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input2_value_or_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&output_addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&workspace_input_addr_) -
      reinterpret_cast<char*>(&output_addr_)) + sizeof(workspace_input_addr_));
}

DSATaskArgsDef::~DSATaskArgsDef() {
  // @@protoc_insertion_point(destructor:domi.DSATaskArgsDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DSATaskArgsDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  seed_value_or_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  random_count_value_or_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input1_value_or_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input2_value_or_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DSATaskArgsDef::ArenaDtor(void* object) {
  DSATaskArgsDef* _this = reinterpret_cast< DSATaskArgsDef* >(object);
  (void)_this;
}
void DSATaskArgsDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DSATaskArgsDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DSATaskArgsDef& DSATaskArgsDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DSATaskArgsDef_task_2eproto.base);
  return *internal_default_instance();
}


void DSATaskArgsDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.DSATaskArgsDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seed_value_or_addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  random_count_value_or_addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  input1_value_or_addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  input2_value_or_addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&output_addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&workspace_input_addr_) -
      reinterpret_cast<char*>(&output_addr_)) + sizeof(workspace_input_addr_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DSATaskArgsDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 output_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          output_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 workspace_philox_count_addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          workspace_philox_count_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 workspace_input_addr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          workspace_input_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes seed_value_or_addr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_seed_value_or_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes random_count_value_or_addr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_random_count_value_or_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes input1_value_or_addr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_input1_value_or_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes input2_value_or_addr = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_input2_value_or_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DSATaskArgsDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.DSATaskArgsDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 output_addr = 1;
  if (this->output_addr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_output_addr(), target);
  }

  // uint64 workspace_philox_count_addr = 2;
  if (this->workspace_philox_count_addr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_workspace_philox_count_addr(), target);
  }

  // uint64 workspace_input_addr = 3;
  if (this->workspace_input_addr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_workspace_input_addr(), target);
  }

  // bytes seed_value_or_addr = 4;
  if (this->seed_value_or_addr().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_seed_value_or_addr(), target);
  }

  // bytes random_count_value_or_addr = 5;
  if (this->random_count_value_or_addr().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_random_count_value_or_addr(), target);
  }

  // bytes input1_value_or_addr = 6;
  if (this->input1_value_or_addr().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_input1_value_or_addr(), target);
  }

  // bytes input2_value_or_addr = 7;
  if (this->input2_value_or_addr().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_input2_value_or_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.DSATaskArgsDef)
  return target;
}

size_t DSATaskArgsDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.DSATaskArgsDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes seed_value_or_addr = 4;
  if (this->seed_value_or_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_seed_value_or_addr());
  }

  // bytes random_count_value_or_addr = 5;
  if (this->random_count_value_or_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_random_count_value_or_addr());
  }

  // bytes input1_value_or_addr = 6;
  if (this->input1_value_or_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_input1_value_or_addr());
  }

  // bytes input2_value_or_addr = 7;
  if (this->input2_value_or_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_input2_value_or_addr());
  }

  // uint64 output_addr = 1;
  if (this->output_addr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_output_addr());
  }

  // uint64 workspace_philox_count_addr = 2;
  if (this->workspace_philox_count_addr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_workspace_philox_count_addr());
  }

  // uint64 workspace_input_addr = 3;
  if (this->workspace_input_addr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_workspace_input_addr());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DSATaskArgsDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.DSATaskArgsDef)
  GOOGLE_DCHECK_NE(&from, this);
  const DSATaskArgsDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DSATaskArgsDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.DSATaskArgsDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.DSATaskArgsDef)
    MergeFrom(*source);
  }
}

void DSATaskArgsDef::MergeFrom(const DSATaskArgsDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.DSATaskArgsDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seed_value_or_addr().size() > 0) {
    _internal_set_seed_value_or_addr(from._internal_seed_value_or_addr());
  }
  if (from.random_count_value_or_addr().size() > 0) {
    _internal_set_random_count_value_or_addr(from._internal_random_count_value_or_addr());
  }
  if (from.input1_value_or_addr().size() > 0) {
    _internal_set_input1_value_or_addr(from._internal_input1_value_or_addr());
  }
  if (from.input2_value_or_addr().size() > 0) {
    _internal_set_input2_value_or_addr(from._internal_input2_value_or_addr());
  }
  if (from.output_addr() != 0) {
    _internal_set_output_addr(from._internal_output_addr());
  }
  if (from.workspace_philox_count_addr() != 0) {
    _internal_set_workspace_philox_count_addr(from._internal_workspace_philox_count_addr());
  }
  if (from.workspace_input_addr() != 0) {
    _internal_set_workspace_input_addr(from._internal_workspace_input_addr());
  }
}

void DSATaskArgsDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.DSATaskArgsDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DSATaskArgsDef::CopyFrom(const DSATaskArgsDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.DSATaskArgsDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DSATaskArgsDef::IsInitialized() const {
  return true;
}

void DSATaskArgsDef::InternalSwap(DSATaskArgsDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  seed_value_or_addr_.Swap(&other->seed_value_or_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  random_count_value_or_addr_.Swap(&other->random_count_value_or_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  input1_value_or_addr_.Swap(&other->input1_value_or_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  input2_value_or_addr_.Swap(&other->input2_value_or_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DSATaskArgsDef, workspace_input_addr_)
      + sizeof(DSATaskArgsDef::workspace_input_addr_)
      - PROTOBUF_FIELD_OFFSET(DSATaskArgsDef, output_addr_)>(
          reinterpret_cast<char*>(&output_addr_),
          reinterpret_cast<char*>(&other->output_addr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DSATaskArgsDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FftsPlusTaskDef::InitAsDefaultInstance() {
  ::domi::_FftsPlusTaskDef_default_instance_._instance.get_mutable()->ffts_plus_sqe_ = const_cast< ::domi::FftsPlusSqeDef*>(
      ::domi::FftsPlusSqeDef::internal_default_instance());
}
class FftsPlusTaskDef::_Internal {
 public:
  static const ::domi::FftsPlusSqeDef& ffts_plus_sqe(const FftsPlusTaskDef* msg);
};

const ::domi::FftsPlusSqeDef&
FftsPlusTaskDef::_Internal::ffts_plus_sqe(const FftsPlusTaskDef* msg) {
  return *msg->ffts_plus_sqe_;
}
FftsPlusTaskDef::FftsPlusTaskDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ffts_plus_ctx_(arena),
  additional_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.FftsPlusTaskDef)
}
FftsPlusTaskDef::FftsPlusTaskDef(const FftsPlusTaskDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ffts_plus_ctx_(from.ffts_plus_ctx_),
      additional_data_(from.additional_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ffts_plus_sqe()) {
    ffts_plus_sqe_ = new ::domi::FftsPlusSqeDef(*from.ffts_plus_sqe_);
  } else {
    ffts_plus_sqe_ = nullptr;
  }
  ::memcpy(&op_index_, &from.op_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&addr_size_) -
    reinterpret_cast<char*>(&op_index_)) + sizeof(addr_size_));
  // @@protoc_insertion_point(copy_constructor:domi.FftsPlusTaskDef)
}

void FftsPlusTaskDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FftsPlusTaskDef_task_2eproto.base);
  ::memset(&ffts_plus_sqe_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&addr_size_) -
      reinterpret_cast<char*>(&ffts_plus_sqe_)) + sizeof(addr_size_));
}

FftsPlusTaskDef::~FftsPlusTaskDef() {
  // @@protoc_insertion_point(destructor:domi.FftsPlusTaskDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FftsPlusTaskDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ffts_plus_sqe_;
}

void FftsPlusTaskDef::ArenaDtor(void* object) {
  FftsPlusTaskDef* _this = reinterpret_cast< FftsPlusTaskDef* >(object);
  (void)_this;
}
void FftsPlusTaskDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FftsPlusTaskDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FftsPlusTaskDef& FftsPlusTaskDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FftsPlusTaskDef_task_2eproto.base);
  return *internal_default_instance();
}


void FftsPlusTaskDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.FftsPlusTaskDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ffts_plus_ctx_.Clear();
  additional_data_.Clear();
  if (GetArena() == nullptr && ffts_plus_sqe_ != nullptr) {
    delete ffts_plus_sqe_;
  }
  ffts_plus_sqe_ = nullptr;
  ::memset(&op_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&addr_size_) -
      reinterpret_cast<char*>(&op_index_)) + sizeof(addr_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FftsPlusTaskDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 op_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          op_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 addr_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          addr_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.FftsPlusSqeDef ffts_plus_sqe = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ffts_plus_sqe(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .domi.FftsPlusCtxDef ffts_plus_ctx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ffts_plus_ctx(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .domi.AdditionalDataDef additional_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FftsPlusTaskDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.FftsPlusTaskDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 op_index = 1;
  if (this->op_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_op_index(), target);
  }

  // uint32 addr_size = 2;
  if (this->addr_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_addr_size(), target);
  }

  // .domi.FftsPlusSqeDef ffts_plus_sqe = 3;
  if (this->has_ffts_plus_sqe()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ffts_plus_sqe(this), target, stream);
  }

  // repeated .domi.FftsPlusCtxDef ffts_plus_ctx = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ffts_plus_ctx_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_ffts_plus_ctx(i), target, stream);
  }

  // repeated .domi.AdditionalDataDef additional_data = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_additional_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.FftsPlusTaskDef)
  return target;
}

size_t FftsPlusTaskDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.FftsPlusTaskDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .domi.FftsPlusCtxDef ffts_plus_ctx = 4;
  total_size += 1UL * this->_internal_ffts_plus_ctx_size();
  for (const auto& msg : this->ffts_plus_ctx_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .domi.AdditionalDataDef additional_data = 5;
  total_size += 1UL * this->_internal_additional_data_size();
  for (const auto& msg : this->additional_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .domi.FftsPlusSqeDef ffts_plus_sqe = 3;
  if (this->has_ffts_plus_sqe()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ffts_plus_sqe_);
  }

  // uint32 op_index = 1;
  if (this->op_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_op_index());
  }

  // uint32 addr_size = 2;
  if (this->addr_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_addr_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FftsPlusTaskDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.FftsPlusTaskDef)
  GOOGLE_DCHECK_NE(&from, this);
  const FftsPlusTaskDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FftsPlusTaskDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.FftsPlusTaskDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.FftsPlusTaskDef)
    MergeFrom(*source);
  }
}

void FftsPlusTaskDef::MergeFrom(const FftsPlusTaskDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.FftsPlusTaskDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ffts_plus_ctx_.MergeFrom(from.ffts_plus_ctx_);
  additional_data_.MergeFrom(from.additional_data_);
  if (from.has_ffts_plus_sqe()) {
    _internal_mutable_ffts_plus_sqe()->::domi::FftsPlusSqeDef::MergeFrom(from._internal_ffts_plus_sqe());
  }
  if (from.op_index() != 0) {
    _internal_set_op_index(from._internal_op_index());
  }
  if (from.addr_size() != 0) {
    _internal_set_addr_size(from._internal_addr_size());
  }
}

void FftsPlusTaskDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.FftsPlusTaskDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FftsPlusTaskDef::CopyFrom(const FftsPlusTaskDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.FftsPlusTaskDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FftsPlusTaskDef::IsInitialized() const {
  return true;
}

void FftsPlusTaskDef::InternalSwap(FftsPlusTaskDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ffts_plus_ctx_.InternalSwap(&other->ffts_plus_ctx_);
  additional_data_.InternalSwap(&other->additional_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FftsPlusTaskDef, addr_size_)
      + sizeof(FftsPlusTaskDef::addr_size_)
      - PROTOBUF_FIELD_OFFSET(FftsPlusTaskDef, ffts_plus_sqe_)>(
          reinterpret_cast<char*>(&ffts_plus_sqe_),
          reinterpret_cast<char*>(&other->ffts_plus_sqe_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FftsPlusTaskDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdditionalDataDef::InitAsDefaultInstance() {
}
class AdditionalDataDef::_Internal {
 public:
};

AdditionalDataDef::AdditionalDataDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  context_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.AdditionalDataDef)
}
AdditionalDataDef::AdditionalDataDef(const AdditionalDataDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      context_id_(from.context_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_type_ = from.data_type_;
  // @@protoc_insertion_point(copy_constructor:domi.AdditionalDataDef)
}

void AdditionalDataDef::SharedCtor() {
  data_type_ = 0u;
}

AdditionalDataDef::~AdditionalDataDef() {
  // @@protoc_insertion_point(destructor:domi.AdditionalDataDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdditionalDataDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AdditionalDataDef::ArenaDtor(void* object) {
  AdditionalDataDef* _this = reinterpret_cast< AdditionalDataDef* >(object);
  (void)_this;
}
void AdditionalDataDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdditionalDataDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdditionalDataDef& AdditionalDataDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdditionalDataDef_task_2eproto.base);
  return *internal_default_instance();
}


void AdditionalDataDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.AdditionalDataDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  context_id_.Clear();
  data_type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdditionalDataDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 data_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          data_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 context_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_context_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_context_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdditionalDataDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.AdditionalDataDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 data_type = 1;
  if (this->data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_data_type(), target);
  }

  // repeated uint32 context_id = 2;
  {
    int byte_size = _context_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_context_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.AdditionalDataDef)
  return target;
}

size_t AdditionalDataDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.AdditionalDataDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 context_id = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->context_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _context_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 data_type = 1;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdditionalDataDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.AdditionalDataDef)
  GOOGLE_DCHECK_NE(&from, this);
  const AdditionalDataDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdditionalDataDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.AdditionalDataDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.AdditionalDataDef)
    MergeFrom(*source);
  }
}

void AdditionalDataDef::MergeFrom(const AdditionalDataDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.AdditionalDataDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  context_id_.MergeFrom(from.context_id_);
  if (from.data_type() != 0) {
    _internal_set_data_type(from._internal_data_type());
  }
}

void AdditionalDataDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.AdditionalDataDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdditionalDataDef::CopyFrom(const AdditionalDataDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.AdditionalDataDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdditionalDataDef::IsInitialized() const {
  return true;
}

void AdditionalDataDef::InternalSwap(AdditionalDataDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  context_id_.InternalSwap(&other->context_id_);
  swap(data_type_, other->data_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdditionalDataDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FftsPlusSqeDef::InitAsDefaultInstance() {
  ::domi::_FftsPlusSqeDef_default_instance_._instance.get_mutable()->sqe_header_ = const_cast< ::domi::StarsSqeHeaderDef*>(
      ::domi::StarsSqeHeaderDef::internal_default_instance());
}
class FftsPlusSqeDef::_Internal {
 public:
  static const ::domi::StarsSqeHeaderDef& sqe_header(const FftsPlusSqeDef* msg);
};

const ::domi::StarsSqeHeaderDef&
FftsPlusSqeDef::_Internal::sqe_header(const FftsPlusSqeDef* msg) {
  return *msg->sqe_header_;
}
FftsPlusSqeDef::FftsPlusSqeDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.FftsPlusSqeDef)
}
FftsPlusSqeDef::FftsPlusSqeDef(const FftsPlusSqeDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sqe_header()) {
    sqe_header_ = new ::domi::StarsSqeHeaderDef(*from.sqe_header_);
  } else {
    sqe_header_ = nullptr;
  }
  ::memcpy(&wrr_ratio_, &from.wrr_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_split_unit_) -
    reinterpret_cast<char*>(&wrr_ratio_)) + sizeof(data_split_unit_));
  // @@protoc_insertion_point(copy_constructor:domi.FftsPlusSqeDef)
}

void FftsPlusSqeDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FftsPlusSqeDef_task_2eproto.base);
  ::memset(&sqe_header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_split_unit_) -
      reinterpret_cast<char*>(&sqe_header_)) + sizeof(data_split_unit_));
}

FftsPlusSqeDef::~FftsPlusSqeDef() {
  // @@protoc_insertion_point(destructor:domi.FftsPlusSqeDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FftsPlusSqeDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sqe_header_;
}

void FftsPlusSqeDef::ArenaDtor(void* object) {
  FftsPlusSqeDef* _this = reinterpret_cast< FftsPlusSqeDef* >(object);
  (void)_this;
}
void FftsPlusSqeDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FftsPlusSqeDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FftsPlusSqeDef& FftsPlusSqeDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FftsPlusSqeDef_task_2eproto.base);
  return *internal_default_instance();
}


void FftsPlusSqeDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.FftsPlusSqeDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && sqe_header_ != nullptr) {
    delete sqe_header_;
  }
  sqe_header_ = nullptr;
  ::memset(&wrr_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_split_unit_) -
      reinterpret_cast<char*>(&wrr_ratio_)) + sizeof(data_split_unit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FftsPlusSqeDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .domi.StarsSqeHeaderDef sqe_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sqe_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 wrr_ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          wrr_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sqe_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sqe_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_context_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_context_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ready_context_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ready_context_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 preload_context_num = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          preload_context_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prefetch_ost_num = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          prefetch_ost_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cmaint_ost_num = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          cmaint_ost_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 aic_prefetch_lower = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          aic_prefetch_lower_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 aic_prefetch_upper = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          aic_prefetch_upper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 aiv_prefetch_lower = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          aiv_prefetch_lower_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 aiv_prefetch_upper = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          aiv_prefetch_upper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_split_unit = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          data_split_unit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FftsPlusSqeDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.FftsPlusSqeDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .domi.StarsSqeHeaderDef sqe_header = 1;
  if (this->has_sqe_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sqe_header(this), target, stream);
  }

  // uint32 wrr_ratio = 2;
  if (this->wrr_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_wrr_ratio(), target);
  }

  // uint32 sqe_index = 3;
  if (this->sqe_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sqe_index(), target);
  }

  // uint32 total_context_num = 4;
  if (this->total_context_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_total_context_num(), target);
  }

  // uint32 ready_context_num = 5;
  if (this->ready_context_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ready_context_num(), target);
  }

  // uint32 preload_context_num = 6;
  if (this->preload_context_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_preload_context_num(), target);
  }

  // uint32 prefetch_ost_num = 7;
  if (this->prefetch_ost_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_prefetch_ost_num(), target);
  }

  // uint32 cmaint_ost_num = 8;
  if (this->cmaint_ost_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_cmaint_ost_num(), target);
  }

  // uint32 aic_prefetch_lower = 9;
  if (this->aic_prefetch_lower() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_aic_prefetch_lower(), target);
  }

  // uint32 aic_prefetch_upper = 10;
  if (this->aic_prefetch_upper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_aic_prefetch_upper(), target);
  }

  // uint32 aiv_prefetch_lower = 11;
  if (this->aiv_prefetch_lower() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_aiv_prefetch_lower(), target);
  }

  // uint32 aiv_prefetch_upper = 12;
  if (this->aiv_prefetch_upper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_aiv_prefetch_upper(), target);
  }

  // uint32 data_split_unit = 13;
  if (this->data_split_unit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_data_split_unit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.FftsPlusSqeDef)
  return target;
}

size_t FftsPlusSqeDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.FftsPlusSqeDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .domi.StarsSqeHeaderDef sqe_header = 1;
  if (this->has_sqe_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sqe_header_);
  }

  // uint32 wrr_ratio = 2;
  if (this->wrr_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_wrr_ratio());
  }

  // uint32 sqe_index = 3;
  if (this->sqe_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sqe_index());
  }

  // uint32 total_context_num = 4;
  if (this->total_context_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_context_num());
  }

  // uint32 ready_context_num = 5;
  if (this->ready_context_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ready_context_num());
  }

  // uint32 preload_context_num = 6;
  if (this->preload_context_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_preload_context_num());
  }

  // uint32 prefetch_ost_num = 7;
  if (this->prefetch_ost_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prefetch_ost_num());
  }

  // uint32 cmaint_ost_num = 8;
  if (this->cmaint_ost_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cmaint_ost_num());
  }

  // uint32 aic_prefetch_lower = 9;
  if (this->aic_prefetch_lower() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aic_prefetch_lower());
  }

  // uint32 aic_prefetch_upper = 10;
  if (this->aic_prefetch_upper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aic_prefetch_upper());
  }

  // uint32 aiv_prefetch_lower = 11;
  if (this->aiv_prefetch_lower() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aiv_prefetch_lower());
  }

  // uint32 aiv_prefetch_upper = 12;
  if (this->aiv_prefetch_upper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aiv_prefetch_upper());
  }

  // uint32 data_split_unit = 13;
  if (this->data_split_unit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_split_unit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FftsPlusSqeDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.FftsPlusSqeDef)
  GOOGLE_DCHECK_NE(&from, this);
  const FftsPlusSqeDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FftsPlusSqeDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.FftsPlusSqeDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.FftsPlusSqeDef)
    MergeFrom(*source);
  }
}

void FftsPlusSqeDef::MergeFrom(const FftsPlusSqeDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.FftsPlusSqeDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sqe_header()) {
    _internal_mutable_sqe_header()->::domi::StarsSqeHeaderDef::MergeFrom(from._internal_sqe_header());
  }
  if (from.wrr_ratio() != 0) {
    _internal_set_wrr_ratio(from._internal_wrr_ratio());
  }
  if (from.sqe_index() != 0) {
    _internal_set_sqe_index(from._internal_sqe_index());
  }
  if (from.total_context_num() != 0) {
    _internal_set_total_context_num(from._internal_total_context_num());
  }
  if (from.ready_context_num() != 0) {
    _internal_set_ready_context_num(from._internal_ready_context_num());
  }
  if (from.preload_context_num() != 0) {
    _internal_set_preload_context_num(from._internal_preload_context_num());
  }
  if (from.prefetch_ost_num() != 0) {
    _internal_set_prefetch_ost_num(from._internal_prefetch_ost_num());
  }
  if (from.cmaint_ost_num() != 0) {
    _internal_set_cmaint_ost_num(from._internal_cmaint_ost_num());
  }
  if (from.aic_prefetch_lower() != 0) {
    _internal_set_aic_prefetch_lower(from._internal_aic_prefetch_lower());
  }
  if (from.aic_prefetch_upper() != 0) {
    _internal_set_aic_prefetch_upper(from._internal_aic_prefetch_upper());
  }
  if (from.aiv_prefetch_lower() != 0) {
    _internal_set_aiv_prefetch_lower(from._internal_aiv_prefetch_lower());
  }
  if (from.aiv_prefetch_upper() != 0) {
    _internal_set_aiv_prefetch_upper(from._internal_aiv_prefetch_upper());
  }
  if (from.data_split_unit() != 0) {
    _internal_set_data_split_unit(from._internal_data_split_unit());
  }
}

void FftsPlusSqeDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.FftsPlusSqeDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FftsPlusSqeDef::CopyFrom(const FftsPlusSqeDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.FftsPlusSqeDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FftsPlusSqeDef::IsInitialized() const {
  return true;
}

void FftsPlusSqeDef::InternalSwap(FftsPlusSqeDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FftsPlusSqeDef, data_split_unit_)
      + sizeof(FftsPlusSqeDef::data_split_unit_)
      - PROTOBUF_FIELD_OFFSET(FftsPlusSqeDef, sqe_header_)>(
          reinterpret_cast<char*>(&sqe_header_),
          reinterpret_cast<char*>(&other->sqe_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FftsPlusSqeDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StarsSqeHeaderDef::InitAsDefaultInstance() {
}
class StarsSqeHeaderDef::_Internal {
 public:
};

StarsSqeHeaderDef::StarsSqeHeaderDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.StarsSqeHeaderDef)
}
StarsSqeHeaderDef::StarsSqeHeaderDef(const StarsSqeHeaderDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&l1_lock_, &from.l1_lock_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_dim_) -
    reinterpret_cast<char*>(&l1_lock_)) + sizeof(block_dim_));
  // @@protoc_insertion_point(copy_constructor:domi.StarsSqeHeaderDef)
}

void StarsSqeHeaderDef::SharedCtor() {
  ::memset(&l1_lock_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_dim_) -
      reinterpret_cast<char*>(&l1_lock_)) + sizeof(block_dim_));
}

StarsSqeHeaderDef::~StarsSqeHeaderDef() {
  // @@protoc_insertion_point(destructor:domi.StarsSqeHeaderDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StarsSqeHeaderDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StarsSqeHeaderDef::ArenaDtor(void* object) {
  StarsSqeHeaderDef* _this = reinterpret_cast< StarsSqeHeaderDef* >(object);
  (void)_this;
}
void StarsSqeHeaderDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StarsSqeHeaderDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StarsSqeHeaderDef& StarsSqeHeaderDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StarsSqeHeaderDef_task_2eproto.base);
  return *internal_default_instance();
}


void StarsSqeHeaderDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.StarsSqeHeaderDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&l1_lock_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_dim_) -
      reinterpret_cast<char*>(&l1_lock_)) + sizeof(block_dim_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StarsSqeHeaderDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 l1_lock = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          l1_lock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 l1_unlock = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          l1_unlock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 block_dim = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          block_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StarsSqeHeaderDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.StarsSqeHeaderDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 l1_lock = 1;
  if (this->l1_lock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_l1_lock(), target);
  }

  // uint32 l1_unlock = 2;
  if (this->l1_unlock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_l1_unlock(), target);
  }

  // uint32 block_dim = 3;
  if (this->block_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_block_dim(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.StarsSqeHeaderDef)
  return target;
}

size_t StarsSqeHeaderDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.StarsSqeHeaderDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 l1_lock = 1;
  if (this->l1_lock() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_l1_lock());
  }

  // uint32 l1_unlock = 2;
  if (this->l1_unlock() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_l1_unlock());
  }

  // uint32 block_dim = 3;
  if (this->block_dim() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_block_dim());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StarsSqeHeaderDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.StarsSqeHeaderDef)
  GOOGLE_DCHECK_NE(&from, this);
  const StarsSqeHeaderDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StarsSqeHeaderDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.StarsSqeHeaderDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.StarsSqeHeaderDef)
    MergeFrom(*source);
  }
}

void StarsSqeHeaderDef::MergeFrom(const StarsSqeHeaderDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.StarsSqeHeaderDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.l1_lock() != 0) {
    _internal_set_l1_lock(from._internal_l1_lock());
  }
  if (from.l1_unlock() != 0) {
    _internal_set_l1_unlock(from._internal_l1_unlock());
  }
  if (from.block_dim() != 0) {
    _internal_set_block_dim(from._internal_block_dim());
  }
}

void StarsSqeHeaderDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.StarsSqeHeaderDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StarsSqeHeaderDef::CopyFrom(const StarsSqeHeaderDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.StarsSqeHeaderDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StarsSqeHeaderDef::IsInitialized() const {
  return true;
}

void StarsSqeHeaderDef::InternalSwap(StarsSqeHeaderDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StarsSqeHeaderDef, block_dim_)
      + sizeof(StarsSqeHeaderDef::block_dim_)
      - PROTOBUF_FIELD_OFFSET(StarsSqeHeaderDef, l1_lock_)>(
          reinterpret_cast<char*>(&l1_lock_),
          reinterpret_cast<char*>(&other->l1_lock_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StarsSqeHeaderDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FftsPlusCtxDef::InitAsDefaultInstance() {
  ::domi::_FftsPlusCtxDef_default_instance_._instance.get_mutable()->aic_aiv_ctx_ = const_cast< ::domi::FftsPlusAicAivCtxDef*>(
      ::domi::FftsPlusAicAivCtxDef::internal_default_instance());
  ::domi::_FftsPlusCtxDef_default_instance_._instance.get_mutable()->mix_aic_aiv_ctx_ = const_cast< ::domi::FftsPlusMixAicAivCtxDef*>(
      ::domi::FftsPlusMixAicAivCtxDef::internal_default_instance());
  ::domi::_FftsPlusCtxDef_default_instance_._instance.get_mutable()->sdma_ctx_ = const_cast< ::domi::FftsPlusSdmaCtxDef*>(
      ::domi::FftsPlusSdmaCtxDef::internal_default_instance());
  ::domi::_FftsPlusCtxDef_default_instance_._instance.get_mutable()->notify_ctx_ = const_cast< ::domi::FftsPlusNotifyCtxDef*>(
      ::domi::FftsPlusNotifyCtxDef::internal_default_instance());
  ::domi::_FftsPlusCtxDef_default_instance_._instance.get_mutable()->write_value_ctx_ = const_cast< ::domi::FftsPlusWriteValueCtxDef*>(
      ::domi::FftsPlusWriteValueCtxDef::internal_default_instance());
  ::domi::_FftsPlusCtxDef_default_instance_._instance.get_mutable()->aicpu_ctx_ = const_cast< ::domi::FftsPlusAicpuCtxDef*>(
      ::domi::FftsPlusAicpuCtxDef::internal_default_instance());
  ::domi::_FftsPlusCtxDef_default_instance_._instance.get_mutable()->data_ctx_ = const_cast< ::domi::FftsPlusDataCtxDef*>(
      ::domi::FftsPlusDataCtxDef::internal_default_instance());
  ::domi::_FftsPlusCtxDef_default_instance_._instance.get_mutable()->at_start_ctx_ = const_cast< ::domi::FftsPlusAtStartCtxDef*>(
      ::domi::FftsPlusAtStartCtxDef::internal_default_instance());
  ::domi::_FftsPlusCtxDef_default_instance_._instance.get_mutable()->at_end_ctx_ = const_cast< ::domi::FftsPlusAtEndCtxDef*>(
      ::domi::FftsPlusAtEndCtxDef::internal_default_instance());
  ::domi::_FftsPlusCtxDef_default_instance_._instance.get_mutable()->label_ctx_ = const_cast< ::domi::FftsPlusLabelCtxDef*>(
      ::domi::FftsPlusLabelCtxDef::internal_default_instance());
  ::domi::_FftsPlusCtxDef_default_instance_._instance.get_mutable()->case_switch_ctx_ = const_cast< ::domi::FftsPlusCaseSwitchCtxDef*>(
      ::domi::FftsPlusCaseSwitchCtxDef::internal_default_instance());
  ::domi::_FftsPlusCtxDef_default_instance_._instance.get_mutable()->case_default_ctx_ = const_cast< ::domi::FftsPlusCaseDefaultCtxDef*>(
      ::domi::FftsPlusCaseDefaultCtxDef::internal_default_instance());
  ::domi::_FftsPlusCtxDef_default_instance_._instance.get_mutable()->cond_switch_ctx_ = const_cast< ::domi::FftsPlusCondSwitchCtxDef*>(
      ::domi::FftsPlusCondSwitchCtxDef::internal_default_instance());
  ::domi::_FftsPlusCtxDef_default_instance_._instance.get_mutable()->cache_persist_ctx_ = const_cast< ::domi::FftsPlusCachePersistCtxDef*>(
      ::domi::FftsPlusCachePersistCtxDef::internal_default_instance());
  ::domi::_FftsPlusCtxDef_default_instance_._instance.get_mutable()->dsa_ctx_ = const_cast< ::domi::FftsPlusDsaCtxDef*>(
      ::domi::FftsPlusDsaCtxDef::internal_default_instance());
}
class FftsPlusCtxDef::_Internal {
 public:
  static const ::domi::FftsPlusAicAivCtxDef& aic_aiv_ctx(const FftsPlusCtxDef* msg);
  static const ::domi::FftsPlusMixAicAivCtxDef& mix_aic_aiv_ctx(const FftsPlusCtxDef* msg);
  static const ::domi::FftsPlusSdmaCtxDef& sdma_ctx(const FftsPlusCtxDef* msg);
  static const ::domi::FftsPlusNotifyCtxDef& notify_ctx(const FftsPlusCtxDef* msg);
  static const ::domi::FftsPlusWriteValueCtxDef& write_value_ctx(const FftsPlusCtxDef* msg);
  static const ::domi::FftsPlusAicpuCtxDef& aicpu_ctx(const FftsPlusCtxDef* msg);
  static const ::domi::FftsPlusDataCtxDef& data_ctx(const FftsPlusCtxDef* msg);
  static const ::domi::FftsPlusAtStartCtxDef& at_start_ctx(const FftsPlusCtxDef* msg);
  static const ::domi::FftsPlusAtEndCtxDef& at_end_ctx(const FftsPlusCtxDef* msg);
  static const ::domi::FftsPlusLabelCtxDef& label_ctx(const FftsPlusCtxDef* msg);
  static const ::domi::FftsPlusCaseSwitchCtxDef& case_switch_ctx(const FftsPlusCtxDef* msg);
  static const ::domi::FftsPlusCaseDefaultCtxDef& case_default_ctx(const FftsPlusCtxDef* msg);
  static const ::domi::FftsPlusCondSwitchCtxDef& cond_switch_ctx(const FftsPlusCtxDef* msg);
  static const ::domi::FftsPlusCachePersistCtxDef& cache_persist_ctx(const FftsPlusCtxDef* msg);
  static const ::domi::FftsPlusDsaCtxDef& dsa_ctx(const FftsPlusCtxDef* msg);
};

const ::domi::FftsPlusAicAivCtxDef&
FftsPlusCtxDef::_Internal::aic_aiv_ctx(const FftsPlusCtxDef* msg) {
  return *msg->aic_aiv_ctx_;
}
const ::domi::FftsPlusMixAicAivCtxDef&
FftsPlusCtxDef::_Internal::mix_aic_aiv_ctx(const FftsPlusCtxDef* msg) {
  return *msg->mix_aic_aiv_ctx_;
}
const ::domi::FftsPlusSdmaCtxDef&
FftsPlusCtxDef::_Internal::sdma_ctx(const FftsPlusCtxDef* msg) {
  return *msg->sdma_ctx_;
}
const ::domi::FftsPlusNotifyCtxDef&
FftsPlusCtxDef::_Internal::notify_ctx(const FftsPlusCtxDef* msg) {
  return *msg->notify_ctx_;
}
const ::domi::FftsPlusWriteValueCtxDef&
FftsPlusCtxDef::_Internal::write_value_ctx(const FftsPlusCtxDef* msg) {
  return *msg->write_value_ctx_;
}
const ::domi::FftsPlusAicpuCtxDef&
FftsPlusCtxDef::_Internal::aicpu_ctx(const FftsPlusCtxDef* msg) {
  return *msg->aicpu_ctx_;
}
const ::domi::FftsPlusDataCtxDef&
FftsPlusCtxDef::_Internal::data_ctx(const FftsPlusCtxDef* msg) {
  return *msg->data_ctx_;
}
const ::domi::FftsPlusAtStartCtxDef&
FftsPlusCtxDef::_Internal::at_start_ctx(const FftsPlusCtxDef* msg) {
  return *msg->at_start_ctx_;
}
const ::domi::FftsPlusAtEndCtxDef&
FftsPlusCtxDef::_Internal::at_end_ctx(const FftsPlusCtxDef* msg) {
  return *msg->at_end_ctx_;
}
const ::domi::FftsPlusLabelCtxDef&
FftsPlusCtxDef::_Internal::label_ctx(const FftsPlusCtxDef* msg) {
  return *msg->label_ctx_;
}
const ::domi::FftsPlusCaseSwitchCtxDef&
FftsPlusCtxDef::_Internal::case_switch_ctx(const FftsPlusCtxDef* msg) {
  return *msg->case_switch_ctx_;
}
const ::domi::FftsPlusCaseDefaultCtxDef&
FftsPlusCtxDef::_Internal::case_default_ctx(const FftsPlusCtxDef* msg) {
  return *msg->case_default_ctx_;
}
const ::domi::FftsPlusCondSwitchCtxDef&
FftsPlusCtxDef::_Internal::cond_switch_ctx(const FftsPlusCtxDef* msg) {
  return *msg->cond_switch_ctx_;
}
const ::domi::FftsPlusCachePersistCtxDef&
FftsPlusCtxDef::_Internal::cache_persist_ctx(const FftsPlusCtxDef* msg) {
  return *msg->cache_persist_ctx_;
}
const ::domi::FftsPlusDsaCtxDef&
FftsPlusCtxDef::_Internal::dsa_ctx(const FftsPlusCtxDef* msg) {
  return *msg->dsa_ctx_;
}
FftsPlusCtxDef::FftsPlusCtxDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.FftsPlusCtxDef)
}
FftsPlusCtxDef::FftsPlusCtxDef(const FftsPlusCtxDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uniq_ctx_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uniq_ctx_name().empty()) {
    uniq_ctx_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uniq_ctx_name(),
      GetArena());
  }
  if (from._internal_has_aic_aiv_ctx()) {
    aic_aiv_ctx_ = new ::domi::FftsPlusAicAivCtxDef(*from.aic_aiv_ctx_);
  } else {
    aic_aiv_ctx_ = nullptr;
  }
  if (from._internal_has_mix_aic_aiv_ctx()) {
    mix_aic_aiv_ctx_ = new ::domi::FftsPlusMixAicAivCtxDef(*from.mix_aic_aiv_ctx_);
  } else {
    mix_aic_aiv_ctx_ = nullptr;
  }
  if (from._internal_has_sdma_ctx()) {
    sdma_ctx_ = new ::domi::FftsPlusSdmaCtxDef(*from.sdma_ctx_);
  } else {
    sdma_ctx_ = nullptr;
  }
  if (from._internal_has_notify_ctx()) {
    notify_ctx_ = new ::domi::FftsPlusNotifyCtxDef(*from.notify_ctx_);
  } else {
    notify_ctx_ = nullptr;
  }
  if (from._internal_has_write_value_ctx()) {
    write_value_ctx_ = new ::domi::FftsPlusWriteValueCtxDef(*from.write_value_ctx_);
  } else {
    write_value_ctx_ = nullptr;
  }
  if (from._internal_has_aicpu_ctx()) {
    aicpu_ctx_ = new ::domi::FftsPlusAicpuCtxDef(*from.aicpu_ctx_);
  } else {
    aicpu_ctx_ = nullptr;
  }
  if (from._internal_has_data_ctx()) {
    data_ctx_ = new ::domi::FftsPlusDataCtxDef(*from.data_ctx_);
  } else {
    data_ctx_ = nullptr;
  }
  if (from._internal_has_at_start_ctx()) {
    at_start_ctx_ = new ::domi::FftsPlusAtStartCtxDef(*from.at_start_ctx_);
  } else {
    at_start_ctx_ = nullptr;
  }
  if (from._internal_has_at_end_ctx()) {
    at_end_ctx_ = new ::domi::FftsPlusAtEndCtxDef(*from.at_end_ctx_);
  } else {
    at_end_ctx_ = nullptr;
  }
  if (from._internal_has_label_ctx()) {
    label_ctx_ = new ::domi::FftsPlusLabelCtxDef(*from.label_ctx_);
  } else {
    label_ctx_ = nullptr;
  }
  if (from._internal_has_case_switch_ctx()) {
    case_switch_ctx_ = new ::domi::FftsPlusCaseSwitchCtxDef(*from.case_switch_ctx_);
  } else {
    case_switch_ctx_ = nullptr;
  }
  if (from._internal_has_case_default_ctx()) {
    case_default_ctx_ = new ::domi::FftsPlusCaseDefaultCtxDef(*from.case_default_ctx_);
  } else {
    case_default_ctx_ = nullptr;
  }
  if (from._internal_has_cond_switch_ctx()) {
    cond_switch_ctx_ = new ::domi::FftsPlusCondSwitchCtxDef(*from.cond_switch_ctx_);
  } else {
    cond_switch_ctx_ = nullptr;
  }
  if (from._internal_has_cache_persist_ctx()) {
    cache_persist_ctx_ = new ::domi::FftsPlusCachePersistCtxDef(*from.cache_persist_ctx_);
  } else {
    cache_persist_ctx_ = nullptr;
  }
  if (from._internal_has_dsa_ctx()) {
    dsa_ctx_ = new ::domi::FftsPlusDsaCtxDef(*from.dsa_ctx_);
  } else {
    dsa_ctx_ = nullptr;
  }
  ::memcpy(&op_index_, &from.op_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&op_type_) -
    reinterpret_cast<char*>(&op_index_)) + sizeof(op_type_));
  // @@protoc_insertion_point(copy_constructor:domi.FftsPlusCtxDef)
}

void FftsPlusCtxDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FftsPlusCtxDef_task_2eproto.base);
  uniq_ctx_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&aic_aiv_ctx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_type_) -
      reinterpret_cast<char*>(&aic_aiv_ctx_)) + sizeof(op_type_));
}

FftsPlusCtxDef::~FftsPlusCtxDef() {
  // @@protoc_insertion_point(destructor:domi.FftsPlusCtxDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FftsPlusCtxDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  uniq_ctx_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete aic_aiv_ctx_;
  if (this != internal_default_instance()) delete mix_aic_aiv_ctx_;
  if (this != internal_default_instance()) delete sdma_ctx_;
  if (this != internal_default_instance()) delete notify_ctx_;
  if (this != internal_default_instance()) delete write_value_ctx_;
  if (this != internal_default_instance()) delete aicpu_ctx_;
  if (this != internal_default_instance()) delete data_ctx_;
  if (this != internal_default_instance()) delete at_start_ctx_;
  if (this != internal_default_instance()) delete at_end_ctx_;
  if (this != internal_default_instance()) delete label_ctx_;
  if (this != internal_default_instance()) delete case_switch_ctx_;
  if (this != internal_default_instance()) delete case_default_ctx_;
  if (this != internal_default_instance()) delete cond_switch_ctx_;
  if (this != internal_default_instance()) delete cache_persist_ctx_;
  if (this != internal_default_instance()) delete dsa_ctx_;
}

void FftsPlusCtxDef::ArenaDtor(void* object) {
  FftsPlusCtxDef* _this = reinterpret_cast< FftsPlusCtxDef* >(object);
  (void)_this;
}
void FftsPlusCtxDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FftsPlusCtxDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FftsPlusCtxDef& FftsPlusCtxDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FftsPlusCtxDef_task_2eproto.base);
  return *internal_default_instance();
}


void FftsPlusCtxDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.FftsPlusCtxDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uniq_ctx_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && aic_aiv_ctx_ != nullptr) {
    delete aic_aiv_ctx_;
  }
  aic_aiv_ctx_ = nullptr;
  if (GetArena() == nullptr && mix_aic_aiv_ctx_ != nullptr) {
    delete mix_aic_aiv_ctx_;
  }
  mix_aic_aiv_ctx_ = nullptr;
  if (GetArena() == nullptr && sdma_ctx_ != nullptr) {
    delete sdma_ctx_;
  }
  sdma_ctx_ = nullptr;
  if (GetArena() == nullptr && notify_ctx_ != nullptr) {
    delete notify_ctx_;
  }
  notify_ctx_ = nullptr;
  if (GetArena() == nullptr && write_value_ctx_ != nullptr) {
    delete write_value_ctx_;
  }
  write_value_ctx_ = nullptr;
  if (GetArena() == nullptr && aicpu_ctx_ != nullptr) {
    delete aicpu_ctx_;
  }
  aicpu_ctx_ = nullptr;
  if (GetArena() == nullptr && data_ctx_ != nullptr) {
    delete data_ctx_;
  }
  data_ctx_ = nullptr;
  if (GetArena() == nullptr && at_start_ctx_ != nullptr) {
    delete at_start_ctx_;
  }
  at_start_ctx_ = nullptr;
  if (GetArena() == nullptr && at_end_ctx_ != nullptr) {
    delete at_end_ctx_;
  }
  at_end_ctx_ = nullptr;
  if (GetArena() == nullptr && label_ctx_ != nullptr) {
    delete label_ctx_;
  }
  label_ctx_ = nullptr;
  if (GetArena() == nullptr && case_switch_ctx_ != nullptr) {
    delete case_switch_ctx_;
  }
  case_switch_ctx_ = nullptr;
  if (GetArena() == nullptr && case_default_ctx_ != nullptr) {
    delete case_default_ctx_;
  }
  case_default_ctx_ = nullptr;
  if (GetArena() == nullptr && cond_switch_ctx_ != nullptr) {
    delete cond_switch_ctx_;
  }
  cond_switch_ctx_ = nullptr;
  if (GetArena() == nullptr && cache_persist_ctx_ != nullptr) {
    delete cache_persist_ctx_;
  }
  cache_persist_ctx_ = nullptr;
  if (GetArena() == nullptr && dsa_ctx_ != nullptr) {
    delete dsa_ctx_;
  }
  dsa_ctx_ = nullptr;
  ::memset(&op_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_type_) -
      reinterpret_cast<char*>(&op_index_)) + sizeof(op_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FftsPlusCtxDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 op_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          op_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uniq_ctx_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_uniq_ctx_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "domi.FftsPlusCtxDef.uniq_ctx_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 context_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          context_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 context_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          context_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.FftsPlusCtxDef.OpType op_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op_type(static_cast<::domi::FftsPlusCtxDef_OpType>(val));
        } else goto handle_unusual;
        continue;
      // .domi.FftsPlusAicAivCtxDef aic_aiv_ctx = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_aic_aiv_ctx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.FftsPlusMixAicAivCtxDef mix_aic_aiv_ctx = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_mix_aic_aiv_ctx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.FftsPlusSdmaCtxDef sdma_ctx = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_sdma_ctx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.FftsPlusNotifyCtxDef notify_ctx = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_notify_ctx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.FftsPlusWriteValueCtxDef write_value_ctx = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_write_value_ctx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.FftsPlusAicpuCtxDef aicpu_ctx = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_aicpu_ctx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.FftsPlusDataCtxDef data_ctx = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_ctx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.FftsPlusAtStartCtxDef at_start_ctx = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_at_start_ctx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.FftsPlusAtEndCtxDef at_end_ctx = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_at_end_ctx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.FftsPlusLabelCtxDef label_ctx = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_ctx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.FftsPlusCaseSwitchCtxDef case_switch_ctx = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_case_switch_ctx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.FftsPlusCaseDefaultCtxDef case_default_ctx = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_case_default_ctx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.FftsPlusCondSwitchCtxDef cond_switch_ctx = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_cond_switch_ctx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.FftsPlusCachePersistCtxDef cache_persist_ctx = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_cache_persist_ctx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.FftsPlusDsaCtxDef dsa_ctx = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_dsa_ctx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FftsPlusCtxDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.FftsPlusCtxDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 op_index = 1;
  if (this->op_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_op_index(), target);
  }

  // string uniq_ctx_name = 2;
  if (this->uniq_ctx_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uniq_ctx_name().data(), static_cast<int>(this->_internal_uniq_ctx_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "domi.FftsPlusCtxDef.uniq_ctx_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uniq_ctx_name(), target);
  }

  // uint32 context_type = 3;
  if (this->context_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_context_type(), target);
  }

  // uint32 context_id = 4;
  if (this->context_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_context_id(), target);
  }

  // .domi.FftsPlusCtxDef.OpType op_type = 5;
  if (this->op_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_op_type(), target);
  }

  // .domi.FftsPlusAicAivCtxDef aic_aiv_ctx = 6;
  if (this->has_aic_aiv_ctx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::aic_aiv_ctx(this), target, stream);
  }

  // .domi.FftsPlusMixAicAivCtxDef mix_aic_aiv_ctx = 7;
  if (this->has_mix_aic_aiv_ctx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::mix_aic_aiv_ctx(this), target, stream);
  }

  // .domi.FftsPlusSdmaCtxDef sdma_ctx = 8;
  if (this->has_sdma_ctx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::sdma_ctx(this), target, stream);
  }

  // .domi.FftsPlusNotifyCtxDef notify_ctx = 9;
  if (this->has_notify_ctx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::notify_ctx(this), target, stream);
  }

  // .domi.FftsPlusWriteValueCtxDef write_value_ctx = 10;
  if (this->has_write_value_ctx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::write_value_ctx(this), target, stream);
  }

  // .domi.FftsPlusAicpuCtxDef aicpu_ctx = 11;
  if (this->has_aicpu_ctx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::aicpu_ctx(this), target, stream);
  }

  // .domi.FftsPlusDataCtxDef data_ctx = 12;
  if (this->has_data_ctx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::data_ctx(this), target, stream);
  }

  // .domi.FftsPlusAtStartCtxDef at_start_ctx = 13;
  if (this->has_at_start_ctx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::at_start_ctx(this), target, stream);
  }

  // .domi.FftsPlusAtEndCtxDef at_end_ctx = 14;
  if (this->has_at_end_ctx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::at_end_ctx(this), target, stream);
  }

  // .domi.FftsPlusLabelCtxDef label_ctx = 15;
  if (this->has_label_ctx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::label_ctx(this), target, stream);
  }

  // .domi.FftsPlusCaseSwitchCtxDef case_switch_ctx = 16;
  if (this->has_case_switch_ctx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::case_switch_ctx(this), target, stream);
  }

  // .domi.FftsPlusCaseDefaultCtxDef case_default_ctx = 17;
  if (this->has_case_default_ctx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::case_default_ctx(this), target, stream);
  }

  // .domi.FftsPlusCondSwitchCtxDef cond_switch_ctx = 18;
  if (this->has_cond_switch_ctx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::cond_switch_ctx(this), target, stream);
  }

  // .domi.FftsPlusCachePersistCtxDef cache_persist_ctx = 19;
  if (this->has_cache_persist_ctx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::cache_persist_ctx(this), target, stream);
  }

  // .domi.FftsPlusDsaCtxDef dsa_ctx = 20;
  if (this->has_dsa_ctx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::dsa_ctx(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.FftsPlusCtxDef)
  return target;
}

size_t FftsPlusCtxDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.FftsPlusCtxDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uniq_ctx_name = 2;
  if (this->uniq_ctx_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uniq_ctx_name());
  }

  // .domi.FftsPlusAicAivCtxDef aic_aiv_ctx = 6;
  if (this->has_aic_aiv_ctx()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *aic_aiv_ctx_);
  }

  // .domi.FftsPlusMixAicAivCtxDef mix_aic_aiv_ctx = 7;
  if (this->has_mix_aic_aiv_ctx()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mix_aic_aiv_ctx_);
  }

  // .domi.FftsPlusSdmaCtxDef sdma_ctx = 8;
  if (this->has_sdma_ctx()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sdma_ctx_);
  }

  // .domi.FftsPlusNotifyCtxDef notify_ctx = 9;
  if (this->has_notify_ctx()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *notify_ctx_);
  }

  // .domi.FftsPlusWriteValueCtxDef write_value_ctx = 10;
  if (this->has_write_value_ctx()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *write_value_ctx_);
  }

  // .domi.FftsPlusAicpuCtxDef aicpu_ctx = 11;
  if (this->has_aicpu_ctx()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *aicpu_ctx_);
  }

  // .domi.FftsPlusDataCtxDef data_ctx = 12;
  if (this->has_data_ctx()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_ctx_);
  }

  // .domi.FftsPlusAtStartCtxDef at_start_ctx = 13;
  if (this->has_at_start_ctx()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *at_start_ctx_);
  }

  // .domi.FftsPlusAtEndCtxDef at_end_ctx = 14;
  if (this->has_at_end_ctx()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *at_end_ctx_);
  }

  // .domi.FftsPlusLabelCtxDef label_ctx = 15;
  if (this->has_label_ctx()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *label_ctx_);
  }

  // .domi.FftsPlusCaseSwitchCtxDef case_switch_ctx = 16;
  if (this->has_case_switch_ctx()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *case_switch_ctx_);
  }

  // .domi.FftsPlusCaseDefaultCtxDef case_default_ctx = 17;
  if (this->has_case_default_ctx()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *case_default_ctx_);
  }

  // .domi.FftsPlusCondSwitchCtxDef cond_switch_ctx = 18;
  if (this->has_cond_switch_ctx()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cond_switch_ctx_);
  }

  // .domi.FftsPlusCachePersistCtxDef cache_persist_ctx = 19;
  if (this->has_cache_persist_ctx()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cache_persist_ctx_);
  }

  // .domi.FftsPlusDsaCtxDef dsa_ctx = 20;
  if (this->has_dsa_ctx()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dsa_ctx_);
  }

  // uint32 op_index = 1;
  if (this->op_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_op_index());
  }

  // uint32 context_type = 3;
  if (this->context_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_context_type());
  }

  // uint32 context_id = 4;
  if (this->context_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_context_id());
  }

  // .domi.FftsPlusCtxDef.OpType op_type = 5;
  if (this->op_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FftsPlusCtxDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.FftsPlusCtxDef)
  GOOGLE_DCHECK_NE(&from, this);
  const FftsPlusCtxDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FftsPlusCtxDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.FftsPlusCtxDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.FftsPlusCtxDef)
    MergeFrom(*source);
  }
}

void FftsPlusCtxDef::MergeFrom(const FftsPlusCtxDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.FftsPlusCtxDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uniq_ctx_name().size() > 0) {
    _internal_set_uniq_ctx_name(from._internal_uniq_ctx_name());
  }
  if (from.has_aic_aiv_ctx()) {
    _internal_mutable_aic_aiv_ctx()->::domi::FftsPlusAicAivCtxDef::MergeFrom(from._internal_aic_aiv_ctx());
  }
  if (from.has_mix_aic_aiv_ctx()) {
    _internal_mutable_mix_aic_aiv_ctx()->::domi::FftsPlusMixAicAivCtxDef::MergeFrom(from._internal_mix_aic_aiv_ctx());
  }
  if (from.has_sdma_ctx()) {
    _internal_mutable_sdma_ctx()->::domi::FftsPlusSdmaCtxDef::MergeFrom(from._internal_sdma_ctx());
  }
  if (from.has_notify_ctx()) {
    _internal_mutable_notify_ctx()->::domi::FftsPlusNotifyCtxDef::MergeFrom(from._internal_notify_ctx());
  }
  if (from.has_write_value_ctx()) {
    _internal_mutable_write_value_ctx()->::domi::FftsPlusWriteValueCtxDef::MergeFrom(from._internal_write_value_ctx());
  }
  if (from.has_aicpu_ctx()) {
    _internal_mutable_aicpu_ctx()->::domi::FftsPlusAicpuCtxDef::MergeFrom(from._internal_aicpu_ctx());
  }
  if (from.has_data_ctx()) {
    _internal_mutable_data_ctx()->::domi::FftsPlusDataCtxDef::MergeFrom(from._internal_data_ctx());
  }
  if (from.has_at_start_ctx()) {
    _internal_mutable_at_start_ctx()->::domi::FftsPlusAtStartCtxDef::MergeFrom(from._internal_at_start_ctx());
  }
  if (from.has_at_end_ctx()) {
    _internal_mutable_at_end_ctx()->::domi::FftsPlusAtEndCtxDef::MergeFrom(from._internal_at_end_ctx());
  }
  if (from.has_label_ctx()) {
    _internal_mutable_label_ctx()->::domi::FftsPlusLabelCtxDef::MergeFrom(from._internal_label_ctx());
  }
  if (from.has_case_switch_ctx()) {
    _internal_mutable_case_switch_ctx()->::domi::FftsPlusCaseSwitchCtxDef::MergeFrom(from._internal_case_switch_ctx());
  }
  if (from.has_case_default_ctx()) {
    _internal_mutable_case_default_ctx()->::domi::FftsPlusCaseDefaultCtxDef::MergeFrom(from._internal_case_default_ctx());
  }
  if (from.has_cond_switch_ctx()) {
    _internal_mutable_cond_switch_ctx()->::domi::FftsPlusCondSwitchCtxDef::MergeFrom(from._internal_cond_switch_ctx());
  }
  if (from.has_cache_persist_ctx()) {
    _internal_mutable_cache_persist_ctx()->::domi::FftsPlusCachePersistCtxDef::MergeFrom(from._internal_cache_persist_ctx());
  }
  if (from.has_dsa_ctx()) {
    _internal_mutable_dsa_ctx()->::domi::FftsPlusDsaCtxDef::MergeFrom(from._internal_dsa_ctx());
  }
  if (from.op_index() != 0) {
    _internal_set_op_index(from._internal_op_index());
  }
  if (from.context_type() != 0) {
    _internal_set_context_type(from._internal_context_type());
  }
  if (from.context_id() != 0) {
    _internal_set_context_id(from._internal_context_id());
  }
  if (from.op_type() != 0) {
    _internal_set_op_type(from._internal_op_type());
  }
}

void FftsPlusCtxDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.FftsPlusCtxDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FftsPlusCtxDef::CopyFrom(const FftsPlusCtxDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.FftsPlusCtxDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FftsPlusCtxDef::IsInitialized() const {
  return true;
}

void FftsPlusCtxDef::InternalSwap(FftsPlusCtxDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  uniq_ctx_name_.Swap(&other->uniq_ctx_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FftsPlusCtxDef, op_type_)
      + sizeof(FftsPlusCtxDef::op_type_)
      - PROTOBUF_FIELD_OFFSET(FftsPlusCtxDef, aic_aiv_ctx_)>(
          reinterpret_cast<char*>(&aic_aiv_ctx_),
          reinterpret_cast<char*>(&other->aic_aiv_ctx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FftsPlusCtxDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FftsPlusAicAivCtxDef::InitAsDefaultInstance() {
}
class FftsPlusAicAivCtxDef::_Internal {
 public:
};

FftsPlusAicAivCtxDef::FftsPlusAicAivCtxDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  successor_list_(arena),
  task_addr_(arena),
  task_addr_offset_(arena),
  kernel_name_(arena),
  src_slot_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.FftsPlusAicAivCtxDef)
}
FftsPlusAicAivCtxDef::FftsPlusAicAivCtxDef(const FftsPlusAicAivCtxDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      successor_list_(from.successor_list_),
      task_addr_(from.task_addr_),
      task_addr_offset_(from.task_addr_offset_),
      kernel_name_(from.kernel_name_),
      src_slot_(from.src_slot_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&successor_num_, &from.successor_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&thread_window_size_) -
    reinterpret_cast<char*>(&successor_num_)) + sizeof(thread_window_size_));
  // @@protoc_insertion_point(copy_constructor:domi.FftsPlusAicAivCtxDef)
}

void FftsPlusAicAivCtxDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FftsPlusAicAivCtxDef_task_2eproto.base);
  ::memset(&successor_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thread_window_size_) -
      reinterpret_cast<char*>(&successor_num_)) + sizeof(thread_window_size_));
}

FftsPlusAicAivCtxDef::~FftsPlusAicAivCtxDef() {
  // @@protoc_insertion_point(destructor:domi.FftsPlusAicAivCtxDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FftsPlusAicAivCtxDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FftsPlusAicAivCtxDef::ArenaDtor(void* object) {
  FftsPlusAicAivCtxDef* _this = reinterpret_cast< FftsPlusAicAivCtxDef* >(object);
  (void)_this;
}
void FftsPlusAicAivCtxDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FftsPlusAicAivCtxDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FftsPlusAicAivCtxDef& FftsPlusAicAivCtxDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FftsPlusAicAivCtxDef_task_2eproto.base);
  return *internal_default_instance();
}


void FftsPlusAicAivCtxDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.FftsPlusAicAivCtxDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  successor_list_.Clear();
  task_addr_.Clear();
  task_addr_offset_.Clear();
  kernel_name_.Clear();
  src_slot_.Clear();
  ::memset(&successor_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thread_window_size_) -
      reinterpret_cast<char*>(&successor_num_)) + sizeof(thread_window_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FftsPlusAicAivCtxDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 successor_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          successor_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 aten = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          aten_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prefetch_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          prefetch_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pred_cnt_init = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pred_cnt_init_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pred_cnt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pred_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 successor_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_successor_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_successor_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 schem = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          schem_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 atm = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          atm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prefetch_enable_bitmap = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          prefetch_enable_bitmap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prefetch_once_bitmap = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          prefetch_once_bitmap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pmg = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          pmg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ns = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 part_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          part_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 qos = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          qos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 thread_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          thread_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 thread_dim = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          thread_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 non_tail_block_dim = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          non_tail_block_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tail_block_dim = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          tail_block_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 task_param_ptr_offset = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          task_param_ptr_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 save_task_addr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          save_task_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 task_addr = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_task_addr(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168) {
          _internal_add_task_addr(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 task_addr_offset = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_task_addr_offset(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176) {
          _internal_add_task_addr_offset(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 input_output_count = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          input_output_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string kernel_name = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_kernel_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "domi.FftsPlusAicAivCtxDef.kernel_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 src_slot = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_src_slot(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200) {
          _internal_add_src_slot(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 policy_pri = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          policy_pri_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 thread_window_size = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          thread_window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FftsPlusAicAivCtxDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.FftsPlusAicAivCtxDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 successor_num = 1;
  if (this->successor_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_successor_num(), target);
  }

  // uint32 aten = 2;
  if (this->aten() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_aten(), target);
  }

  // uint32 prefetch_config = 3;
  if (this->prefetch_config() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_prefetch_config(), target);
  }

  // uint32 pred_cnt_init = 4;
  if (this->pred_cnt_init() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_pred_cnt_init(), target);
  }

  // uint32 pred_cnt = 5;
  if (this->pred_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_pred_cnt(), target);
  }

  // repeated uint32 successor_list = 6;
  {
    int byte_size = _successor_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_successor_list(), byte_size, target);
    }
  }

  // uint32 schem = 7;
  if (this->schem() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_schem(), target);
  }

  // uint32 atm = 8;
  if (this->atm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_atm(), target);
  }

  // uint32 prefetch_enable_bitmap = 9;
  if (this->prefetch_enable_bitmap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_prefetch_enable_bitmap(), target);
  }

  // uint32 prefetch_once_bitmap = 10;
  if (this->prefetch_once_bitmap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_prefetch_once_bitmap(), target);
  }

  // uint32 pmg = 11;
  if (this->pmg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_pmg(), target);
  }

  // uint32 ns = 12;
  if (this->ns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_ns(), target);
  }

  // uint32 part_id = 13;
  if (this->part_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_part_id(), target);
  }

  // uint32 qos = 14;
  if (this->qos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_qos(), target);
  }

  // uint32 thread_id = 15;
  if (this->thread_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_thread_id(), target);
  }

  // uint32 thread_dim = 16;
  if (this->thread_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_thread_dim(), target);
  }

  // uint32 non_tail_block_dim = 17;
  if (this->non_tail_block_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_non_tail_block_dim(), target);
  }

  // uint32 tail_block_dim = 18;
  if (this->tail_block_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_tail_block_dim(), target);
  }

  // uint32 task_param_ptr_offset = 19;
  if (this->task_param_ptr_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_task_param_ptr_offset(), target);
  }

  // uint32 save_task_addr = 20;
  if (this->save_task_addr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_save_task_addr(), target);
  }

  // repeated uint64 task_addr = 21;
  {
    int byte_size = _task_addr_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          21, _internal_task_addr(), byte_size, target);
    }
  }

  // repeated uint64 task_addr_offset = 22;
  {
    int byte_size = _task_addr_offset_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          22, _internal_task_addr_offset(), byte_size, target);
    }
  }

  // uint32 input_output_count = 23;
  if (this->input_output_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_input_output_count(), target);
  }

  // repeated string kernel_name = 24;
  for (int i = 0, n = this->_internal_kernel_name_size(); i < n; i++) {
    const auto& s = this->_internal_kernel_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "domi.FftsPlusAicAivCtxDef.kernel_name");
    target = stream->WriteString(24, s, target);
  }

  // repeated uint32 src_slot = 25;
  {
    int byte_size = _src_slot_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          25, _internal_src_slot(), byte_size, target);
    }
  }

  // uint32 policy_pri = 26;
  if (this->policy_pri() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_policy_pri(), target);
  }

  // uint32 thread_window_size = 27;
  if (this->thread_window_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_thread_window_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.FftsPlusAicAivCtxDef)
  return target;
}

size_t FftsPlusAicAivCtxDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.FftsPlusAicAivCtxDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 successor_list = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->successor_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _successor_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 task_addr = 21;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->task_addr_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _task_addr_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 task_addr_offset = 22;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->task_addr_offset_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _task_addr_offset_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string kernel_name = 24;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(kernel_name_.size());
  for (int i = 0, n = kernel_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      kernel_name_.Get(i));
  }

  // repeated uint32 src_slot = 25;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->src_slot_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _src_slot_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 successor_num = 1;
  if (this->successor_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_successor_num());
  }

  // uint32 aten = 2;
  if (this->aten() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aten());
  }

  // uint32 prefetch_config = 3;
  if (this->prefetch_config() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prefetch_config());
  }

  // uint32 pred_cnt_init = 4;
  if (this->pred_cnt_init() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pred_cnt_init());
  }

  // uint32 pred_cnt = 5;
  if (this->pred_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pred_cnt());
  }

  // uint32 schem = 7;
  if (this->schem() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_schem());
  }

  // uint32 atm = 8;
  if (this->atm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_atm());
  }

  // uint32 prefetch_enable_bitmap = 9;
  if (this->prefetch_enable_bitmap() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prefetch_enable_bitmap());
  }

  // uint32 prefetch_once_bitmap = 10;
  if (this->prefetch_once_bitmap() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prefetch_once_bitmap());
  }

  // uint32 pmg = 11;
  if (this->pmg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pmg());
  }

  // uint32 ns = 12;
  if (this->ns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ns());
  }

  // uint32 part_id = 13;
  if (this->part_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_part_id());
  }

  // uint32 qos = 14;
  if (this->qos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_qos());
  }

  // uint32 thread_id = 15;
  if (this->thread_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thread_id());
  }

  // uint32 thread_dim = 16;
  if (this->thread_dim() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thread_dim());
  }

  // uint32 non_tail_block_dim = 17;
  if (this->non_tail_block_dim() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_non_tail_block_dim());
  }

  // uint32 tail_block_dim = 18;
  if (this->tail_block_dim() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tail_block_dim());
  }

  // uint32 task_param_ptr_offset = 19;
  if (this->task_param_ptr_offset() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_task_param_ptr_offset());
  }

  // uint32 save_task_addr = 20;
  if (this->save_task_addr() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_save_task_addr());
  }

  // uint32 input_output_count = 23;
  if (this->input_output_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_input_output_count());
  }

  // uint32 policy_pri = 26;
  if (this->policy_pri() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_policy_pri());
  }

  // uint32 thread_window_size = 27;
  if (this->thread_window_size() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thread_window_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FftsPlusAicAivCtxDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.FftsPlusAicAivCtxDef)
  GOOGLE_DCHECK_NE(&from, this);
  const FftsPlusAicAivCtxDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FftsPlusAicAivCtxDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.FftsPlusAicAivCtxDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.FftsPlusAicAivCtxDef)
    MergeFrom(*source);
  }
}

void FftsPlusAicAivCtxDef::MergeFrom(const FftsPlusAicAivCtxDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.FftsPlusAicAivCtxDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  successor_list_.MergeFrom(from.successor_list_);
  task_addr_.MergeFrom(from.task_addr_);
  task_addr_offset_.MergeFrom(from.task_addr_offset_);
  kernel_name_.MergeFrom(from.kernel_name_);
  src_slot_.MergeFrom(from.src_slot_);
  if (from.successor_num() != 0) {
    _internal_set_successor_num(from._internal_successor_num());
  }
  if (from.aten() != 0) {
    _internal_set_aten(from._internal_aten());
  }
  if (from.prefetch_config() != 0) {
    _internal_set_prefetch_config(from._internal_prefetch_config());
  }
  if (from.pred_cnt_init() != 0) {
    _internal_set_pred_cnt_init(from._internal_pred_cnt_init());
  }
  if (from.pred_cnt() != 0) {
    _internal_set_pred_cnt(from._internal_pred_cnt());
  }
  if (from.schem() != 0) {
    _internal_set_schem(from._internal_schem());
  }
  if (from.atm() != 0) {
    _internal_set_atm(from._internal_atm());
  }
  if (from.prefetch_enable_bitmap() != 0) {
    _internal_set_prefetch_enable_bitmap(from._internal_prefetch_enable_bitmap());
  }
  if (from.prefetch_once_bitmap() != 0) {
    _internal_set_prefetch_once_bitmap(from._internal_prefetch_once_bitmap());
  }
  if (from.pmg() != 0) {
    _internal_set_pmg(from._internal_pmg());
  }
  if (from.ns() != 0) {
    _internal_set_ns(from._internal_ns());
  }
  if (from.part_id() != 0) {
    _internal_set_part_id(from._internal_part_id());
  }
  if (from.qos() != 0) {
    _internal_set_qos(from._internal_qos());
  }
  if (from.thread_id() != 0) {
    _internal_set_thread_id(from._internal_thread_id());
  }
  if (from.thread_dim() != 0) {
    _internal_set_thread_dim(from._internal_thread_dim());
  }
  if (from.non_tail_block_dim() != 0) {
    _internal_set_non_tail_block_dim(from._internal_non_tail_block_dim());
  }
  if (from.tail_block_dim() != 0) {
    _internal_set_tail_block_dim(from._internal_tail_block_dim());
  }
  if (from.task_param_ptr_offset() != 0) {
    _internal_set_task_param_ptr_offset(from._internal_task_param_ptr_offset());
  }
  if (from.save_task_addr() != 0) {
    _internal_set_save_task_addr(from._internal_save_task_addr());
  }
  if (from.input_output_count() != 0) {
    _internal_set_input_output_count(from._internal_input_output_count());
  }
  if (from.policy_pri() != 0) {
    _internal_set_policy_pri(from._internal_policy_pri());
  }
  if (from.thread_window_size() != 0) {
    _internal_set_thread_window_size(from._internal_thread_window_size());
  }
}

void FftsPlusAicAivCtxDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.FftsPlusAicAivCtxDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FftsPlusAicAivCtxDef::CopyFrom(const FftsPlusAicAivCtxDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.FftsPlusAicAivCtxDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FftsPlusAicAivCtxDef::IsInitialized() const {
  return true;
}

void FftsPlusAicAivCtxDef::InternalSwap(FftsPlusAicAivCtxDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  successor_list_.InternalSwap(&other->successor_list_);
  task_addr_.InternalSwap(&other->task_addr_);
  task_addr_offset_.InternalSwap(&other->task_addr_offset_);
  kernel_name_.InternalSwap(&other->kernel_name_);
  src_slot_.InternalSwap(&other->src_slot_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FftsPlusAicAivCtxDef, thread_window_size_)
      + sizeof(FftsPlusAicAivCtxDef::thread_window_size_)
      - PROTOBUF_FIELD_OFFSET(FftsPlusAicAivCtxDef, successor_num_)>(
          reinterpret_cast<char*>(&successor_num_),
          reinterpret_cast<char*>(&other->successor_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FftsPlusAicAivCtxDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FftsPlusMixAicAivCtxDef::InitAsDefaultInstance() {
}
class FftsPlusMixAicAivCtxDef::_Internal {
 public:
};

FftsPlusMixAicAivCtxDef::FftsPlusMixAicAivCtxDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  successor_list_(arena),
  kernel_name_(arena),
  task_addr_(arena),
  task_addr_offset_(arena),
  src_slot_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.FftsPlusMixAicAivCtxDef)
}
FftsPlusMixAicAivCtxDef::FftsPlusMixAicAivCtxDef(const FftsPlusMixAicAivCtxDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      successor_list_(from.successor_list_),
      kernel_name_(from.kernel_name_),
      task_addr_(from.task_addr_),
      task_addr_offset_(from.task_addr_offset_),
      src_slot_(from.src_slot_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&successor_num_, &from.successor_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&thread_window_size_) -
    reinterpret_cast<char*>(&successor_num_)) + sizeof(thread_window_size_));
  // @@protoc_insertion_point(copy_constructor:domi.FftsPlusMixAicAivCtxDef)
}

void FftsPlusMixAicAivCtxDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FftsPlusMixAicAivCtxDef_task_2eproto.base);
  ::memset(&successor_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thread_window_size_) -
      reinterpret_cast<char*>(&successor_num_)) + sizeof(thread_window_size_));
}

FftsPlusMixAicAivCtxDef::~FftsPlusMixAicAivCtxDef() {
  // @@protoc_insertion_point(destructor:domi.FftsPlusMixAicAivCtxDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FftsPlusMixAicAivCtxDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FftsPlusMixAicAivCtxDef::ArenaDtor(void* object) {
  FftsPlusMixAicAivCtxDef* _this = reinterpret_cast< FftsPlusMixAicAivCtxDef* >(object);
  (void)_this;
}
void FftsPlusMixAicAivCtxDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FftsPlusMixAicAivCtxDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FftsPlusMixAicAivCtxDef& FftsPlusMixAicAivCtxDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FftsPlusMixAicAivCtxDef_task_2eproto.base);
  return *internal_default_instance();
}


void FftsPlusMixAicAivCtxDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.FftsPlusMixAicAivCtxDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  successor_list_.Clear();
  kernel_name_.Clear();
  task_addr_.Clear();
  task_addr_offset_.Clear();
  src_slot_.Clear();
  ::memset(&successor_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thread_window_size_) -
      reinterpret_cast<char*>(&successor_num_)) + sizeof(thread_window_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FftsPlusMixAicAivCtxDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 successor_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          successor_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 aten = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          aten_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prefetch_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          prefetch_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pred_cnt_init = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pred_cnt_init_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pred_cnt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pred_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 successor_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_successor_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_successor_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 schem = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          schem_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 atm = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          atm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prefetch_enable_bitmap = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          prefetch_enable_bitmap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prefetch_once_bitmap = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          prefetch_once_bitmap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pmg = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          pmg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ns = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 part_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          part_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 qos = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          qos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 non_tail_block_ratio_n = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          non_tail_block_ratio_n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tail_block_ratio_n = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          tail_block_ratio_n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 thread_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          thread_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 thread_dim = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          thread_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 non_tail_block_dim = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          non_tail_block_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tail_block_dim = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          tail_block_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 aic_task_param_ptr_offset = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          aic_task_param_ptr_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 aiv_task_param_ptr_offset = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          aiv_task_param_ptr_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string kernel_name = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_kernel_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "domi.FftsPlusMixAicAivCtxDef.kernel_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint64 task_addr = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_task_addr(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192) {
          _internal_add_task_addr(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 task_addr_offset = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_task_addr_offset(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200) {
          _internal_add_task_addr_offset(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 input_output_count = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          input_output_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 save_task_addr = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          save_task_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 src_slot = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_src_slot(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224) {
          _internal_add_src_slot(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 policy_pri = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          policy_pri_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 thread_window_size = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          thread_window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FftsPlusMixAicAivCtxDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.FftsPlusMixAicAivCtxDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 successor_num = 1;
  if (this->successor_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_successor_num(), target);
  }

  // uint32 aten = 2;
  if (this->aten() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_aten(), target);
  }

  // uint32 prefetch_config = 3;
  if (this->prefetch_config() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_prefetch_config(), target);
  }

  // uint32 pred_cnt_init = 4;
  if (this->pred_cnt_init() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_pred_cnt_init(), target);
  }

  // uint32 pred_cnt = 5;
  if (this->pred_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_pred_cnt(), target);
  }

  // repeated uint32 successor_list = 6;
  {
    int byte_size = _successor_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_successor_list(), byte_size, target);
    }
  }

  // uint32 schem = 7;
  if (this->schem() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_schem(), target);
  }

  // uint32 atm = 8;
  if (this->atm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_atm(), target);
  }

  // uint32 prefetch_enable_bitmap = 9;
  if (this->prefetch_enable_bitmap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_prefetch_enable_bitmap(), target);
  }

  // uint32 prefetch_once_bitmap = 10;
  if (this->prefetch_once_bitmap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_prefetch_once_bitmap(), target);
  }

  // uint32 pmg = 11;
  if (this->pmg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_pmg(), target);
  }

  // uint32 ns = 12;
  if (this->ns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_ns(), target);
  }

  // uint32 part_id = 13;
  if (this->part_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_part_id(), target);
  }

  // uint32 qos = 14;
  if (this->qos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_qos(), target);
  }

  // uint32 non_tail_block_ratio_n = 15;
  if (this->non_tail_block_ratio_n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_non_tail_block_ratio_n(), target);
  }

  // uint32 tail_block_ratio_n = 16;
  if (this->tail_block_ratio_n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_tail_block_ratio_n(), target);
  }

  // uint32 thread_id = 17;
  if (this->thread_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_thread_id(), target);
  }

  // uint32 thread_dim = 18;
  if (this->thread_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_thread_dim(), target);
  }

  // uint32 non_tail_block_dim = 19;
  if (this->non_tail_block_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_non_tail_block_dim(), target);
  }

  // uint32 tail_block_dim = 20;
  if (this->tail_block_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_tail_block_dim(), target);
  }

  // uint32 aic_task_param_ptr_offset = 21;
  if (this->aic_task_param_ptr_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_aic_task_param_ptr_offset(), target);
  }

  // uint32 aiv_task_param_ptr_offset = 22;
  if (this->aiv_task_param_ptr_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_aiv_task_param_ptr_offset(), target);
  }

  // repeated string kernel_name = 23;
  for (int i = 0, n = this->_internal_kernel_name_size(); i < n; i++) {
    const auto& s = this->_internal_kernel_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "domi.FftsPlusMixAicAivCtxDef.kernel_name");
    target = stream->WriteString(23, s, target);
  }

  // repeated uint64 task_addr = 24;
  {
    int byte_size = _task_addr_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          24, _internal_task_addr(), byte_size, target);
    }
  }

  // repeated uint64 task_addr_offset = 25;
  {
    int byte_size = _task_addr_offset_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          25, _internal_task_addr_offset(), byte_size, target);
    }
  }

  // uint32 input_output_count = 26;
  if (this->input_output_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_input_output_count(), target);
  }

  // uint32 save_task_addr = 27;
  if (this->save_task_addr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_save_task_addr(), target);
  }

  // repeated uint32 src_slot = 28;
  {
    int byte_size = _src_slot_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          28, _internal_src_slot(), byte_size, target);
    }
  }

  // uint32 policy_pri = 29;
  if (this->policy_pri() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_policy_pri(), target);
  }

  // uint32 thread_window_size = 30;
  if (this->thread_window_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_thread_window_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.FftsPlusMixAicAivCtxDef)
  return target;
}

size_t FftsPlusMixAicAivCtxDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.FftsPlusMixAicAivCtxDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 successor_list = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->successor_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _successor_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string kernel_name = 23;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(kernel_name_.size());
  for (int i = 0, n = kernel_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      kernel_name_.Get(i));
  }

  // repeated uint64 task_addr = 24;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->task_addr_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _task_addr_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 task_addr_offset = 25;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->task_addr_offset_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _task_addr_offset_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 src_slot = 28;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->src_slot_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _src_slot_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 successor_num = 1;
  if (this->successor_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_successor_num());
  }

  // uint32 aten = 2;
  if (this->aten() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aten());
  }

  // uint32 prefetch_config = 3;
  if (this->prefetch_config() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prefetch_config());
  }

  // uint32 pred_cnt_init = 4;
  if (this->pred_cnt_init() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pred_cnt_init());
  }

  // uint32 pred_cnt = 5;
  if (this->pred_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pred_cnt());
  }

  // uint32 schem = 7;
  if (this->schem() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_schem());
  }

  // uint32 atm = 8;
  if (this->atm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_atm());
  }

  // uint32 prefetch_enable_bitmap = 9;
  if (this->prefetch_enable_bitmap() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prefetch_enable_bitmap());
  }

  // uint32 prefetch_once_bitmap = 10;
  if (this->prefetch_once_bitmap() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prefetch_once_bitmap());
  }

  // uint32 pmg = 11;
  if (this->pmg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pmg());
  }

  // uint32 ns = 12;
  if (this->ns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ns());
  }

  // uint32 part_id = 13;
  if (this->part_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_part_id());
  }

  // uint32 qos = 14;
  if (this->qos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_qos());
  }

  // uint32 non_tail_block_ratio_n = 15;
  if (this->non_tail_block_ratio_n() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_non_tail_block_ratio_n());
  }

  // uint32 tail_block_ratio_n = 16;
  if (this->tail_block_ratio_n() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tail_block_ratio_n());
  }

  // uint32 thread_id = 17;
  if (this->thread_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thread_id());
  }

  // uint32 thread_dim = 18;
  if (this->thread_dim() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thread_dim());
  }

  // uint32 non_tail_block_dim = 19;
  if (this->non_tail_block_dim() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_non_tail_block_dim());
  }

  // uint32 tail_block_dim = 20;
  if (this->tail_block_dim() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tail_block_dim());
  }

  // uint32 aic_task_param_ptr_offset = 21;
  if (this->aic_task_param_ptr_offset() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aic_task_param_ptr_offset());
  }

  // uint32 aiv_task_param_ptr_offset = 22;
  if (this->aiv_task_param_ptr_offset() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aiv_task_param_ptr_offset());
  }

  // uint32 input_output_count = 26;
  if (this->input_output_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_input_output_count());
  }

  // uint32 save_task_addr = 27;
  if (this->save_task_addr() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_save_task_addr());
  }

  // uint32 policy_pri = 29;
  if (this->policy_pri() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_policy_pri());
  }

  // uint32 thread_window_size = 30;
  if (this->thread_window_size() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thread_window_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FftsPlusMixAicAivCtxDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.FftsPlusMixAicAivCtxDef)
  GOOGLE_DCHECK_NE(&from, this);
  const FftsPlusMixAicAivCtxDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FftsPlusMixAicAivCtxDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.FftsPlusMixAicAivCtxDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.FftsPlusMixAicAivCtxDef)
    MergeFrom(*source);
  }
}

void FftsPlusMixAicAivCtxDef::MergeFrom(const FftsPlusMixAicAivCtxDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.FftsPlusMixAicAivCtxDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  successor_list_.MergeFrom(from.successor_list_);
  kernel_name_.MergeFrom(from.kernel_name_);
  task_addr_.MergeFrom(from.task_addr_);
  task_addr_offset_.MergeFrom(from.task_addr_offset_);
  src_slot_.MergeFrom(from.src_slot_);
  if (from.successor_num() != 0) {
    _internal_set_successor_num(from._internal_successor_num());
  }
  if (from.aten() != 0) {
    _internal_set_aten(from._internal_aten());
  }
  if (from.prefetch_config() != 0) {
    _internal_set_prefetch_config(from._internal_prefetch_config());
  }
  if (from.pred_cnt_init() != 0) {
    _internal_set_pred_cnt_init(from._internal_pred_cnt_init());
  }
  if (from.pred_cnt() != 0) {
    _internal_set_pred_cnt(from._internal_pred_cnt());
  }
  if (from.schem() != 0) {
    _internal_set_schem(from._internal_schem());
  }
  if (from.atm() != 0) {
    _internal_set_atm(from._internal_atm());
  }
  if (from.prefetch_enable_bitmap() != 0) {
    _internal_set_prefetch_enable_bitmap(from._internal_prefetch_enable_bitmap());
  }
  if (from.prefetch_once_bitmap() != 0) {
    _internal_set_prefetch_once_bitmap(from._internal_prefetch_once_bitmap());
  }
  if (from.pmg() != 0) {
    _internal_set_pmg(from._internal_pmg());
  }
  if (from.ns() != 0) {
    _internal_set_ns(from._internal_ns());
  }
  if (from.part_id() != 0) {
    _internal_set_part_id(from._internal_part_id());
  }
  if (from.qos() != 0) {
    _internal_set_qos(from._internal_qos());
  }
  if (from.non_tail_block_ratio_n() != 0) {
    _internal_set_non_tail_block_ratio_n(from._internal_non_tail_block_ratio_n());
  }
  if (from.tail_block_ratio_n() != 0) {
    _internal_set_tail_block_ratio_n(from._internal_tail_block_ratio_n());
  }
  if (from.thread_id() != 0) {
    _internal_set_thread_id(from._internal_thread_id());
  }
  if (from.thread_dim() != 0) {
    _internal_set_thread_dim(from._internal_thread_dim());
  }
  if (from.non_tail_block_dim() != 0) {
    _internal_set_non_tail_block_dim(from._internal_non_tail_block_dim());
  }
  if (from.tail_block_dim() != 0) {
    _internal_set_tail_block_dim(from._internal_tail_block_dim());
  }
  if (from.aic_task_param_ptr_offset() != 0) {
    _internal_set_aic_task_param_ptr_offset(from._internal_aic_task_param_ptr_offset());
  }
  if (from.aiv_task_param_ptr_offset() != 0) {
    _internal_set_aiv_task_param_ptr_offset(from._internal_aiv_task_param_ptr_offset());
  }
  if (from.input_output_count() != 0) {
    _internal_set_input_output_count(from._internal_input_output_count());
  }
  if (from.save_task_addr() != 0) {
    _internal_set_save_task_addr(from._internal_save_task_addr());
  }
  if (from.policy_pri() != 0) {
    _internal_set_policy_pri(from._internal_policy_pri());
  }
  if (from.thread_window_size() != 0) {
    _internal_set_thread_window_size(from._internal_thread_window_size());
  }
}

void FftsPlusMixAicAivCtxDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.FftsPlusMixAicAivCtxDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FftsPlusMixAicAivCtxDef::CopyFrom(const FftsPlusMixAicAivCtxDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.FftsPlusMixAicAivCtxDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FftsPlusMixAicAivCtxDef::IsInitialized() const {
  return true;
}

void FftsPlusMixAicAivCtxDef::InternalSwap(FftsPlusMixAicAivCtxDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  successor_list_.InternalSwap(&other->successor_list_);
  kernel_name_.InternalSwap(&other->kernel_name_);
  task_addr_.InternalSwap(&other->task_addr_);
  task_addr_offset_.InternalSwap(&other->task_addr_offset_);
  src_slot_.InternalSwap(&other->src_slot_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FftsPlusMixAicAivCtxDef, thread_window_size_)
      + sizeof(FftsPlusMixAicAivCtxDef::thread_window_size_)
      - PROTOBUF_FIELD_OFFSET(FftsPlusMixAicAivCtxDef, successor_num_)>(
          reinterpret_cast<char*>(&successor_num_),
          reinterpret_cast<char*>(&other->successor_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FftsPlusMixAicAivCtxDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FftsPlusSdmaCtxDef::InitAsDefaultInstance() {
}
class FftsPlusSdmaCtxDef::_Internal {
 public:
};

FftsPlusSdmaCtxDef::FftsPlusSdmaCtxDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  successor_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.FftsPlusSdmaCtxDef)
}
FftsPlusSdmaCtxDef::FftsPlusSdmaCtxDef(const FftsPlusSdmaCtxDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      successor_list_(from.successor_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&successor_num_, &from.successor_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&tail_data_len_) -
    reinterpret_cast<char*>(&successor_num_)) + sizeof(tail_data_len_));
  // @@protoc_insertion_point(copy_constructor:domi.FftsPlusSdmaCtxDef)
}

void FftsPlusSdmaCtxDef::SharedCtor() {
  ::memset(&successor_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tail_data_len_) -
      reinterpret_cast<char*>(&successor_num_)) + sizeof(tail_data_len_));
}

FftsPlusSdmaCtxDef::~FftsPlusSdmaCtxDef() {
  // @@protoc_insertion_point(destructor:domi.FftsPlusSdmaCtxDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FftsPlusSdmaCtxDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FftsPlusSdmaCtxDef::ArenaDtor(void* object) {
  FftsPlusSdmaCtxDef* _this = reinterpret_cast< FftsPlusSdmaCtxDef* >(object);
  (void)_this;
}
void FftsPlusSdmaCtxDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FftsPlusSdmaCtxDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FftsPlusSdmaCtxDef& FftsPlusSdmaCtxDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FftsPlusSdmaCtxDef_task_2eproto.base);
  return *internal_default_instance();
}


void FftsPlusSdmaCtxDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.FftsPlusSdmaCtxDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  successor_list_.Clear();
  ::memset(&successor_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tail_data_len_) -
      reinterpret_cast<char*>(&successor_num_)) + sizeof(tail_data_len_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FftsPlusSdmaCtxDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 successor_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          successor_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 aten = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          aten_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pred_cnt_init = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pred_cnt_init_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pred_cnt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pred_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 successor_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_successor_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_successor_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 atm = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          atm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pmg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          pmg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ns = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 part_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          part_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 qos = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          qos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 thread_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          thread_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 thread_dim = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          thread_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sdma_sqe_header = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          sdma_sqe_header_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 src_stream_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          src_stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 src_sub_stream_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          src_sub_stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dst_stream_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          dst_stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dst_sub_stream_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          dst_sub_stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 src_addr_base = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          src_addr_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 src_addr_offset = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          src_addr_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 dst_addr_base = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          dst_addr_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dst_addr_offset = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          dst_addr_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 non_tail_data_len = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          non_tail_data_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tail_data_len = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          tail_data_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FftsPlusSdmaCtxDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.FftsPlusSdmaCtxDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 successor_num = 1;
  if (this->successor_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_successor_num(), target);
  }

  // uint32 aten = 2;
  if (this->aten() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_aten(), target);
  }

  // uint32 pred_cnt_init = 3;
  if (this->pred_cnt_init() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pred_cnt_init(), target);
  }

  // uint32 pred_cnt = 4;
  if (this->pred_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_pred_cnt(), target);
  }

  // repeated uint32 successor_list = 5;
  {
    int byte_size = _successor_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_successor_list(), byte_size, target);
    }
  }

  // uint32 atm = 6;
  if (this->atm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_atm(), target);
  }

  // uint32 pmg = 7;
  if (this->pmg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_pmg(), target);
  }

  // uint32 ns = 8;
  if (this->ns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_ns(), target);
  }

  // uint32 part_id = 9;
  if (this->part_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_part_id(), target);
  }

  // uint32 qos = 10;
  if (this->qos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_qos(), target);
  }

  // uint32 thread_id = 11;
  if (this->thread_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_thread_id(), target);
  }

  // uint32 thread_dim = 12;
  if (this->thread_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_thread_dim(), target);
  }

  // uint32 sdma_sqe_header = 13;
  if (this->sdma_sqe_header() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_sdma_sqe_header(), target);
  }

  // uint32 src_stream_id = 14;
  if (this->src_stream_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_src_stream_id(), target);
  }

  // uint32 src_sub_stream_id = 15;
  if (this->src_sub_stream_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_src_sub_stream_id(), target);
  }

  // uint32 dst_stream_id = 16;
  if (this->dst_stream_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_dst_stream_id(), target);
  }

  // uint32 dst_sub_stream_id = 17;
  if (this->dst_sub_stream_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_dst_sub_stream_id(), target);
  }

  // uint64 src_addr_base = 18;
  if (this->src_addr_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(18, this->_internal_src_addr_base(), target);
  }

  // uint32 src_addr_offset = 19;
  if (this->src_addr_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_src_addr_offset(), target);
  }

  // uint64 dst_addr_base = 20;
  if (this->dst_addr_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(20, this->_internal_dst_addr_base(), target);
  }

  // uint32 dst_addr_offset = 21;
  if (this->dst_addr_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_dst_addr_offset(), target);
  }

  // uint32 non_tail_data_len = 22;
  if (this->non_tail_data_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_non_tail_data_len(), target);
  }

  // uint32 tail_data_len = 23;
  if (this->tail_data_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_tail_data_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.FftsPlusSdmaCtxDef)
  return target;
}

size_t FftsPlusSdmaCtxDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.FftsPlusSdmaCtxDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 successor_list = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->successor_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _successor_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 successor_num = 1;
  if (this->successor_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_successor_num());
  }

  // uint32 aten = 2;
  if (this->aten() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aten());
  }

  // uint32 pred_cnt_init = 3;
  if (this->pred_cnt_init() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pred_cnt_init());
  }

  // uint32 pred_cnt = 4;
  if (this->pred_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pred_cnt());
  }

  // uint32 atm = 6;
  if (this->atm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_atm());
  }

  // uint32 pmg = 7;
  if (this->pmg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pmg());
  }

  // uint32 ns = 8;
  if (this->ns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ns());
  }

  // uint32 part_id = 9;
  if (this->part_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_part_id());
  }

  // uint32 qos = 10;
  if (this->qos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_qos());
  }

  // uint32 thread_id = 11;
  if (this->thread_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thread_id());
  }

  // uint32 thread_dim = 12;
  if (this->thread_dim() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thread_dim());
  }

  // uint32 sdma_sqe_header = 13;
  if (this->sdma_sqe_header() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sdma_sqe_header());
  }

  // uint32 src_stream_id = 14;
  if (this->src_stream_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_src_stream_id());
  }

  // uint32 src_sub_stream_id = 15;
  if (this->src_sub_stream_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_src_sub_stream_id());
  }

  // uint32 dst_stream_id = 16;
  if (this->dst_stream_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dst_stream_id());
  }

  // uint32 dst_sub_stream_id = 17;
  if (this->dst_sub_stream_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dst_sub_stream_id());
  }

  // uint64 src_addr_base = 18;
  if (this->src_addr_base() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_src_addr_base());
  }

  // uint64 dst_addr_base = 20;
  if (this->dst_addr_base() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_dst_addr_base());
  }

  // uint32 src_addr_offset = 19;
  if (this->src_addr_offset() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_src_addr_offset());
  }

  // uint32 dst_addr_offset = 21;
  if (this->dst_addr_offset() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dst_addr_offset());
  }

  // uint32 non_tail_data_len = 22;
  if (this->non_tail_data_len() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_non_tail_data_len());
  }

  // uint32 tail_data_len = 23;
  if (this->tail_data_len() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tail_data_len());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FftsPlusSdmaCtxDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.FftsPlusSdmaCtxDef)
  GOOGLE_DCHECK_NE(&from, this);
  const FftsPlusSdmaCtxDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FftsPlusSdmaCtxDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.FftsPlusSdmaCtxDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.FftsPlusSdmaCtxDef)
    MergeFrom(*source);
  }
}

void FftsPlusSdmaCtxDef::MergeFrom(const FftsPlusSdmaCtxDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.FftsPlusSdmaCtxDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  successor_list_.MergeFrom(from.successor_list_);
  if (from.successor_num() != 0) {
    _internal_set_successor_num(from._internal_successor_num());
  }
  if (from.aten() != 0) {
    _internal_set_aten(from._internal_aten());
  }
  if (from.pred_cnt_init() != 0) {
    _internal_set_pred_cnt_init(from._internal_pred_cnt_init());
  }
  if (from.pred_cnt() != 0) {
    _internal_set_pred_cnt(from._internal_pred_cnt());
  }
  if (from.atm() != 0) {
    _internal_set_atm(from._internal_atm());
  }
  if (from.pmg() != 0) {
    _internal_set_pmg(from._internal_pmg());
  }
  if (from.ns() != 0) {
    _internal_set_ns(from._internal_ns());
  }
  if (from.part_id() != 0) {
    _internal_set_part_id(from._internal_part_id());
  }
  if (from.qos() != 0) {
    _internal_set_qos(from._internal_qos());
  }
  if (from.thread_id() != 0) {
    _internal_set_thread_id(from._internal_thread_id());
  }
  if (from.thread_dim() != 0) {
    _internal_set_thread_dim(from._internal_thread_dim());
  }
  if (from.sdma_sqe_header() != 0) {
    _internal_set_sdma_sqe_header(from._internal_sdma_sqe_header());
  }
  if (from.src_stream_id() != 0) {
    _internal_set_src_stream_id(from._internal_src_stream_id());
  }
  if (from.src_sub_stream_id() != 0) {
    _internal_set_src_sub_stream_id(from._internal_src_sub_stream_id());
  }
  if (from.dst_stream_id() != 0) {
    _internal_set_dst_stream_id(from._internal_dst_stream_id());
  }
  if (from.dst_sub_stream_id() != 0) {
    _internal_set_dst_sub_stream_id(from._internal_dst_sub_stream_id());
  }
  if (from.src_addr_base() != 0) {
    _internal_set_src_addr_base(from._internal_src_addr_base());
  }
  if (from.dst_addr_base() != 0) {
    _internal_set_dst_addr_base(from._internal_dst_addr_base());
  }
  if (from.src_addr_offset() != 0) {
    _internal_set_src_addr_offset(from._internal_src_addr_offset());
  }
  if (from.dst_addr_offset() != 0) {
    _internal_set_dst_addr_offset(from._internal_dst_addr_offset());
  }
  if (from.non_tail_data_len() != 0) {
    _internal_set_non_tail_data_len(from._internal_non_tail_data_len());
  }
  if (from.tail_data_len() != 0) {
    _internal_set_tail_data_len(from._internal_tail_data_len());
  }
}

void FftsPlusSdmaCtxDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.FftsPlusSdmaCtxDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FftsPlusSdmaCtxDef::CopyFrom(const FftsPlusSdmaCtxDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.FftsPlusSdmaCtxDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FftsPlusSdmaCtxDef::IsInitialized() const {
  return true;
}

void FftsPlusSdmaCtxDef::InternalSwap(FftsPlusSdmaCtxDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  successor_list_.InternalSwap(&other->successor_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FftsPlusSdmaCtxDef, tail_data_len_)
      + sizeof(FftsPlusSdmaCtxDef::tail_data_len_)
      - PROTOBUF_FIELD_OFFSET(FftsPlusSdmaCtxDef, successor_num_)>(
          reinterpret_cast<char*>(&successor_num_),
          reinterpret_cast<char*>(&other->successor_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FftsPlusSdmaCtxDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FftsPlusNotifyCtxDef::InitAsDefaultInstance() {
}
class FftsPlusNotifyCtxDef::_Internal {
 public:
};

FftsPlusNotifyCtxDef::FftsPlusNotifyCtxDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  successor_list_(arena),
  notify_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.FftsPlusNotifyCtxDef)
}
FftsPlusNotifyCtxDef::FftsPlusNotifyCtxDef(const FftsPlusNotifyCtxDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      successor_list_(from.successor_list_),
      notify_id_(from.notify_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&successor_num_, &from.successor_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&auto_window_) -
    reinterpret_cast<char*>(&successor_num_)) + sizeof(auto_window_));
  // @@protoc_insertion_point(copy_constructor:domi.FftsPlusNotifyCtxDef)
}

void FftsPlusNotifyCtxDef::SharedCtor() {
  ::memset(&successor_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auto_window_) -
      reinterpret_cast<char*>(&successor_num_)) + sizeof(auto_window_));
}

FftsPlusNotifyCtxDef::~FftsPlusNotifyCtxDef() {
  // @@protoc_insertion_point(destructor:domi.FftsPlusNotifyCtxDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FftsPlusNotifyCtxDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FftsPlusNotifyCtxDef::ArenaDtor(void* object) {
  FftsPlusNotifyCtxDef* _this = reinterpret_cast< FftsPlusNotifyCtxDef* >(object);
  (void)_this;
}
void FftsPlusNotifyCtxDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FftsPlusNotifyCtxDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FftsPlusNotifyCtxDef& FftsPlusNotifyCtxDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FftsPlusNotifyCtxDef_task_2eproto.base);
  return *internal_default_instance();
}


void FftsPlusNotifyCtxDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.FftsPlusNotifyCtxDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  successor_list_.Clear();
  notify_id_.Clear();
  ::memset(&successor_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auto_window_) -
      reinterpret_cast<char*>(&successor_num_)) + sizeof(auto_window_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FftsPlusNotifyCtxDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 successor_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          successor_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 aten = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          aten_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pred_cnt_init = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pred_cnt_init_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pred_cnt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pred_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 successor_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_successor_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_successor_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 satm = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          satm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 atm = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          atm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 thread_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          thread_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 thread_dim = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          thread_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 notify_id_base = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          notify_id_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 auto_window = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          auto_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 notify_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_notify_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96) {
          _internal_add_notify_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FftsPlusNotifyCtxDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.FftsPlusNotifyCtxDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 successor_num = 1;
  if (this->successor_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_successor_num(), target);
  }

  // uint32 aten = 2;
  if (this->aten() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_aten(), target);
  }

  // uint32 pred_cnt_init = 3;
  if (this->pred_cnt_init() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pred_cnt_init(), target);
  }

  // uint32 pred_cnt = 4;
  if (this->pred_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_pred_cnt(), target);
  }

  // repeated uint32 successor_list = 5;
  {
    int byte_size = _successor_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_successor_list(), byte_size, target);
    }
  }

  // uint32 satm = 6;
  if (this->satm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_satm(), target);
  }

  // uint32 atm = 7;
  if (this->atm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_atm(), target);
  }

  // uint32 thread_id = 8;
  if (this->thread_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_thread_id(), target);
  }

  // uint32 thread_dim = 9;
  if (this->thread_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_thread_dim(), target);
  }

  // uint32 notify_id_base = 10;
  if (this->notify_id_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_notify_id_base(), target);
  }

  // uint32 auto_window = 11;
  if (this->auto_window() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_auto_window(), target);
  }

  // repeated uint32 notify_id = 12;
  {
    int byte_size = _notify_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          12, _internal_notify_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.FftsPlusNotifyCtxDef)
  return target;
}

size_t FftsPlusNotifyCtxDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.FftsPlusNotifyCtxDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 successor_list = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->successor_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _successor_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 notify_id = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->notify_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _notify_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 successor_num = 1;
  if (this->successor_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_successor_num());
  }

  // uint32 aten = 2;
  if (this->aten() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aten());
  }

  // uint32 pred_cnt_init = 3;
  if (this->pred_cnt_init() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pred_cnt_init());
  }

  // uint32 pred_cnt = 4;
  if (this->pred_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pred_cnt());
  }

  // uint32 satm = 6;
  if (this->satm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_satm());
  }

  // uint32 atm = 7;
  if (this->atm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_atm());
  }

  // uint32 thread_id = 8;
  if (this->thread_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thread_id());
  }

  // uint32 thread_dim = 9;
  if (this->thread_dim() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thread_dim());
  }

  // uint32 notify_id_base = 10;
  if (this->notify_id_base() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_notify_id_base());
  }

  // uint32 auto_window = 11;
  if (this->auto_window() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_auto_window());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FftsPlusNotifyCtxDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.FftsPlusNotifyCtxDef)
  GOOGLE_DCHECK_NE(&from, this);
  const FftsPlusNotifyCtxDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FftsPlusNotifyCtxDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.FftsPlusNotifyCtxDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.FftsPlusNotifyCtxDef)
    MergeFrom(*source);
  }
}

void FftsPlusNotifyCtxDef::MergeFrom(const FftsPlusNotifyCtxDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.FftsPlusNotifyCtxDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  successor_list_.MergeFrom(from.successor_list_);
  notify_id_.MergeFrom(from.notify_id_);
  if (from.successor_num() != 0) {
    _internal_set_successor_num(from._internal_successor_num());
  }
  if (from.aten() != 0) {
    _internal_set_aten(from._internal_aten());
  }
  if (from.pred_cnt_init() != 0) {
    _internal_set_pred_cnt_init(from._internal_pred_cnt_init());
  }
  if (from.pred_cnt() != 0) {
    _internal_set_pred_cnt(from._internal_pred_cnt());
  }
  if (from.satm() != 0) {
    _internal_set_satm(from._internal_satm());
  }
  if (from.atm() != 0) {
    _internal_set_atm(from._internal_atm());
  }
  if (from.thread_id() != 0) {
    _internal_set_thread_id(from._internal_thread_id());
  }
  if (from.thread_dim() != 0) {
    _internal_set_thread_dim(from._internal_thread_dim());
  }
  if (from.notify_id_base() != 0) {
    _internal_set_notify_id_base(from._internal_notify_id_base());
  }
  if (from.auto_window() != 0) {
    _internal_set_auto_window(from._internal_auto_window());
  }
}

void FftsPlusNotifyCtxDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.FftsPlusNotifyCtxDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FftsPlusNotifyCtxDef::CopyFrom(const FftsPlusNotifyCtxDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.FftsPlusNotifyCtxDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FftsPlusNotifyCtxDef::IsInitialized() const {
  return true;
}

void FftsPlusNotifyCtxDef::InternalSwap(FftsPlusNotifyCtxDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  successor_list_.InternalSwap(&other->successor_list_);
  notify_id_.InternalSwap(&other->notify_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FftsPlusNotifyCtxDef, auto_window_)
      + sizeof(FftsPlusNotifyCtxDef::auto_window_)
      - PROTOBUF_FIELD_OFFSET(FftsPlusNotifyCtxDef, successor_num_)>(
          reinterpret_cast<char*>(&successor_num_),
          reinterpret_cast<char*>(&other->successor_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FftsPlusNotifyCtxDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FftsPlusWriteValueCtxDef::InitAsDefaultInstance() {
}
class FftsPlusWriteValueCtxDef::_Internal {
 public:
};

FftsPlusWriteValueCtxDef::FftsPlusWriteValueCtxDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  successor_list_(arena),
  write_value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.FftsPlusWriteValueCtxDef)
}
FftsPlusWriteValueCtxDef::FftsPlusWriteValueCtxDef(const FftsPlusWriteValueCtxDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      successor_list_(from.successor_list_),
      write_value_(from.write_value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&successor_num_, &from.successor_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&write_addr_offset_) -
    reinterpret_cast<char*>(&successor_num_)) + sizeof(write_addr_offset_));
  // @@protoc_insertion_point(copy_constructor:domi.FftsPlusWriteValueCtxDef)
}

void FftsPlusWriteValueCtxDef::SharedCtor() {
  ::memset(&successor_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&write_addr_offset_) -
      reinterpret_cast<char*>(&successor_num_)) + sizeof(write_addr_offset_));
}

FftsPlusWriteValueCtxDef::~FftsPlusWriteValueCtxDef() {
  // @@protoc_insertion_point(destructor:domi.FftsPlusWriteValueCtxDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FftsPlusWriteValueCtxDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FftsPlusWriteValueCtxDef::ArenaDtor(void* object) {
  FftsPlusWriteValueCtxDef* _this = reinterpret_cast< FftsPlusWriteValueCtxDef* >(object);
  (void)_this;
}
void FftsPlusWriteValueCtxDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FftsPlusWriteValueCtxDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FftsPlusWriteValueCtxDef& FftsPlusWriteValueCtxDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FftsPlusWriteValueCtxDef_task_2eproto.base);
  return *internal_default_instance();
}


void FftsPlusWriteValueCtxDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.FftsPlusWriteValueCtxDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  successor_list_.Clear();
  write_value_.Clear();
  ::memset(&successor_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&write_addr_offset_) -
      reinterpret_cast<char*>(&successor_num_)) + sizeof(write_addr_offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FftsPlusWriteValueCtxDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 successor_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          successor_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 aten = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          aten_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pred_cnt_init = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pred_cnt_init_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pred_cnt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pred_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 successor_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_successor_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_successor_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 atm = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          atm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 thread_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          thread_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 thread_dim = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          thread_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 aw_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          aw_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 aw_snoop = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          aw_snoop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 aw_cache = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          aw_cache_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 aw_prot = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          aw_prot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 aw_va = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          aw_va_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ar_size = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ar_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ar_snoop = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ar_snoop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ar_cache = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ar_cache_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ar_prot = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ar_prot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ar_va = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ar_va_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 write_addr_base = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          write_addr_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 write_addr_offset = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          write_addr_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 write_value = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_write_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168) {
          _internal_add_write_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FftsPlusWriteValueCtxDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.FftsPlusWriteValueCtxDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 successor_num = 1;
  if (this->successor_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_successor_num(), target);
  }

  // uint32 aten = 2;
  if (this->aten() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_aten(), target);
  }

  // uint32 pred_cnt_init = 3;
  if (this->pred_cnt_init() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pred_cnt_init(), target);
  }

  // uint32 pred_cnt = 4;
  if (this->pred_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_pred_cnt(), target);
  }

  // repeated uint32 successor_list = 5;
  {
    int byte_size = _successor_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_successor_list(), byte_size, target);
    }
  }

  // uint32 atm = 6;
  if (this->atm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_atm(), target);
  }

  // uint32 thread_id = 7;
  if (this->thread_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_thread_id(), target);
  }

  // uint32 thread_dim = 8;
  if (this->thread_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_thread_dim(), target);
  }

  // uint32 aw_size = 9;
  if (this->aw_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_aw_size(), target);
  }

  // uint32 aw_snoop = 10;
  if (this->aw_snoop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_aw_snoop(), target);
  }

  // uint32 aw_cache = 11;
  if (this->aw_cache() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_aw_cache(), target);
  }

  // uint32 aw_prot = 12;
  if (this->aw_prot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_aw_prot(), target);
  }

  // uint32 aw_va = 13;
  if (this->aw_va() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_aw_va(), target);
  }

  // uint32 ar_size = 14;
  if (this->ar_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_ar_size(), target);
  }

  // uint32 ar_snoop = 15;
  if (this->ar_snoop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_ar_snoop(), target);
  }

  // uint32 ar_cache = 16;
  if (this->ar_cache() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_ar_cache(), target);
  }

  // uint32 ar_prot = 17;
  if (this->ar_prot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_ar_prot(), target);
  }

  // uint32 ar_va = 18;
  if (this->ar_va() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_ar_va(), target);
  }

  // uint64 write_addr_base = 19;
  if (this->write_addr_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(19, this->_internal_write_addr_base(), target);
  }

  // uint32 write_addr_offset = 20;
  if (this->write_addr_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_write_addr_offset(), target);
  }

  // repeated uint32 write_value = 21;
  {
    int byte_size = _write_value_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          21, _internal_write_value(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.FftsPlusWriteValueCtxDef)
  return target;
}

size_t FftsPlusWriteValueCtxDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.FftsPlusWriteValueCtxDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 successor_list = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->successor_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _successor_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 write_value = 21;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->write_value_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _write_value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 successor_num = 1;
  if (this->successor_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_successor_num());
  }

  // uint32 aten = 2;
  if (this->aten() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aten());
  }

  // uint32 pred_cnt_init = 3;
  if (this->pred_cnt_init() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pred_cnt_init());
  }

  // uint32 pred_cnt = 4;
  if (this->pred_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pred_cnt());
  }

  // uint32 atm = 6;
  if (this->atm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_atm());
  }

  // uint32 thread_id = 7;
  if (this->thread_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thread_id());
  }

  // uint32 thread_dim = 8;
  if (this->thread_dim() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thread_dim());
  }

  // uint32 aw_size = 9;
  if (this->aw_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aw_size());
  }

  // uint32 aw_snoop = 10;
  if (this->aw_snoop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aw_snoop());
  }

  // uint32 aw_cache = 11;
  if (this->aw_cache() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aw_cache());
  }

  // uint32 aw_prot = 12;
  if (this->aw_prot() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aw_prot());
  }

  // uint32 aw_va = 13;
  if (this->aw_va() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aw_va());
  }

  // uint32 ar_size = 14;
  if (this->ar_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ar_size());
  }

  // uint32 ar_snoop = 15;
  if (this->ar_snoop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ar_snoop());
  }

  // uint32 ar_cache = 16;
  if (this->ar_cache() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ar_cache());
  }

  // uint32 ar_prot = 17;
  if (this->ar_prot() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ar_prot());
  }

  // uint64 write_addr_base = 19;
  if (this->write_addr_base() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_write_addr_base());
  }

  // uint32 ar_va = 18;
  if (this->ar_va() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ar_va());
  }

  // uint32 write_addr_offset = 20;
  if (this->write_addr_offset() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_write_addr_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FftsPlusWriteValueCtxDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.FftsPlusWriteValueCtxDef)
  GOOGLE_DCHECK_NE(&from, this);
  const FftsPlusWriteValueCtxDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FftsPlusWriteValueCtxDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.FftsPlusWriteValueCtxDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.FftsPlusWriteValueCtxDef)
    MergeFrom(*source);
  }
}

void FftsPlusWriteValueCtxDef::MergeFrom(const FftsPlusWriteValueCtxDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.FftsPlusWriteValueCtxDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  successor_list_.MergeFrom(from.successor_list_);
  write_value_.MergeFrom(from.write_value_);
  if (from.successor_num() != 0) {
    _internal_set_successor_num(from._internal_successor_num());
  }
  if (from.aten() != 0) {
    _internal_set_aten(from._internal_aten());
  }
  if (from.pred_cnt_init() != 0) {
    _internal_set_pred_cnt_init(from._internal_pred_cnt_init());
  }
  if (from.pred_cnt() != 0) {
    _internal_set_pred_cnt(from._internal_pred_cnt());
  }
  if (from.atm() != 0) {
    _internal_set_atm(from._internal_atm());
  }
  if (from.thread_id() != 0) {
    _internal_set_thread_id(from._internal_thread_id());
  }
  if (from.thread_dim() != 0) {
    _internal_set_thread_dim(from._internal_thread_dim());
  }
  if (from.aw_size() != 0) {
    _internal_set_aw_size(from._internal_aw_size());
  }
  if (from.aw_snoop() != 0) {
    _internal_set_aw_snoop(from._internal_aw_snoop());
  }
  if (from.aw_cache() != 0) {
    _internal_set_aw_cache(from._internal_aw_cache());
  }
  if (from.aw_prot() != 0) {
    _internal_set_aw_prot(from._internal_aw_prot());
  }
  if (from.aw_va() != 0) {
    _internal_set_aw_va(from._internal_aw_va());
  }
  if (from.ar_size() != 0) {
    _internal_set_ar_size(from._internal_ar_size());
  }
  if (from.ar_snoop() != 0) {
    _internal_set_ar_snoop(from._internal_ar_snoop());
  }
  if (from.ar_cache() != 0) {
    _internal_set_ar_cache(from._internal_ar_cache());
  }
  if (from.ar_prot() != 0) {
    _internal_set_ar_prot(from._internal_ar_prot());
  }
  if (from.write_addr_base() != 0) {
    _internal_set_write_addr_base(from._internal_write_addr_base());
  }
  if (from.ar_va() != 0) {
    _internal_set_ar_va(from._internal_ar_va());
  }
  if (from.write_addr_offset() != 0) {
    _internal_set_write_addr_offset(from._internal_write_addr_offset());
  }
}

void FftsPlusWriteValueCtxDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.FftsPlusWriteValueCtxDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FftsPlusWriteValueCtxDef::CopyFrom(const FftsPlusWriteValueCtxDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.FftsPlusWriteValueCtxDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FftsPlusWriteValueCtxDef::IsInitialized() const {
  return true;
}

void FftsPlusWriteValueCtxDef::InternalSwap(FftsPlusWriteValueCtxDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  successor_list_.InternalSwap(&other->successor_list_);
  write_value_.InternalSwap(&other->write_value_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FftsPlusWriteValueCtxDef, write_addr_offset_)
      + sizeof(FftsPlusWriteValueCtxDef::write_addr_offset_)
      - PROTOBUF_FIELD_OFFSET(FftsPlusWriteValueCtxDef, successor_num_)>(
          reinterpret_cast<char*>(&successor_num_),
          reinterpret_cast<char*>(&other->successor_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FftsPlusWriteValueCtxDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FftsPlusAicpuCtxDef::InitAsDefaultInstance() {
  ::domi::_FftsPlusAicpuCtxDef_default_instance_._instance.get_mutable()->kernel_ = const_cast< ::domi::aicpuKernelDef*>(
      ::domi::aicpuKernelDef::internal_default_instance());
}
class FftsPlusAicpuCtxDef::_Internal {
 public:
  static const ::domi::aicpuKernelDef& kernel(const FftsPlusAicpuCtxDef* msg);
};

const ::domi::aicpuKernelDef&
FftsPlusAicpuCtxDef::_Internal::kernel(const FftsPlusAicpuCtxDef* msg) {
  return *msg->kernel_;
}
FftsPlusAicpuCtxDef::FftsPlusAicpuCtxDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  successor_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.FftsPlusAicpuCtxDef)
}
FftsPlusAicpuCtxDef::FftsPlusAicpuCtxDef(const FftsPlusAicpuCtxDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      successor_list_(from.successor_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_kernel()) {
    kernel_ = new ::domi::aicpuKernelDef(*from.kernel_);
  } else {
    kernel_ = nullptr;
  }
  ::memcpy(&successor_num_, &from.successor_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&task_param_offset_) -
    reinterpret_cast<char*>(&successor_num_)) + sizeof(task_param_offset_));
  // @@protoc_insertion_point(copy_constructor:domi.FftsPlusAicpuCtxDef)
}

void FftsPlusAicpuCtxDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FftsPlusAicpuCtxDef_task_2eproto.base);
  ::memset(&kernel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_param_offset_) -
      reinterpret_cast<char*>(&kernel_)) + sizeof(task_param_offset_));
}

FftsPlusAicpuCtxDef::~FftsPlusAicpuCtxDef() {
  // @@protoc_insertion_point(destructor:domi.FftsPlusAicpuCtxDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FftsPlusAicpuCtxDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete kernel_;
}

void FftsPlusAicpuCtxDef::ArenaDtor(void* object) {
  FftsPlusAicpuCtxDef* _this = reinterpret_cast< FftsPlusAicpuCtxDef* >(object);
  (void)_this;
}
void FftsPlusAicpuCtxDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FftsPlusAicpuCtxDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FftsPlusAicpuCtxDef& FftsPlusAicpuCtxDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FftsPlusAicpuCtxDef_task_2eproto.base);
  return *internal_default_instance();
}


void FftsPlusAicpuCtxDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.FftsPlusAicpuCtxDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  successor_list_.Clear();
  if (GetArena() == nullptr && kernel_ != nullptr) {
    delete kernel_;
  }
  kernel_ = nullptr;
  ::memset(&successor_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_param_offset_) -
      reinterpret_cast<char*>(&successor_num_)) + sizeof(task_param_offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FftsPlusAicpuCtxDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 successor_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          successor_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 aten = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          aten_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pred_cnt_init = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pred_cnt_init_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pred_cnt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pred_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 successor_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_successor_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_successor_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 atm = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          atm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sqe_index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          sqe_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 kernel_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          kernel_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bm = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          bm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 topic_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          topic_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 qos = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          qos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 thread_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          thread_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 thread_dim = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          thread_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 non_tail_block_dim = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          non_tail_block_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tail_block_dim = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          tail_block_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sub_topic_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          sub_topic_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 topic_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          topic_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 group_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 task_param_offset = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          task_param_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.aicpuKernelDef kernel = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_kernel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FftsPlusAicpuCtxDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.FftsPlusAicpuCtxDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 successor_num = 1;
  if (this->successor_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_successor_num(), target);
  }

  // uint32 aten = 2;
  if (this->aten() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_aten(), target);
  }

  // uint32 pred_cnt_init = 3;
  if (this->pred_cnt_init() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pred_cnt_init(), target);
  }

  // uint32 pred_cnt = 4;
  if (this->pred_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_pred_cnt(), target);
  }

  // repeated uint32 successor_list = 5;
  {
    int byte_size = _successor_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_successor_list(), byte_size, target);
    }
  }

  // uint32 atm = 6;
  if (this->atm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_atm(), target);
  }

  // uint32 sqe_index = 7;
  if (this->sqe_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_sqe_index(), target);
  }

  // uint32 kernel_type = 8;
  if (this->kernel_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_kernel_type(), target);
  }

  // uint32 bm = 9;
  if (this->bm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_bm(), target);
  }

  // uint32 topic_type = 10;
  if (this->topic_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_topic_type(), target);
  }

  // uint32 qos = 11;
  if (this->qos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_qos(), target);
  }

  // uint32 thread_id = 12;
  if (this->thread_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_thread_id(), target);
  }

  // uint32 thread_dim = 13;
  if (this->thread_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_thread_dim(), target);
  }

  // uint32 non_tail_block_dim = 14;
  if (this->non_tail_block_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_non_tail_block_dim(), target);
  }

  // uint32 tail_block_dim = 15;
  if (this->tail_block_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_tail_block_dim(), target);
  }

  // uint32 sub_topic_id = 16;
  if (this->sub_topic_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_sub_topic_id(), target);
  }

  // uint32 topic_id = 17;
  if (this->topic_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_topic_id(), target);
  }

  // uint32 group_id = 18;
  if (this->group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_group_id(), target);
  }

  // uint32 task_param_offset = 19;
  if (this->task_param_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_task_param_offset(), target);
  }

  // .domi.aicpuKernelDef kernel = 20;
  if (this->has_kernel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::kernel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.FftsPlusAicpuCtxDef)
  return target;
}

size_t FftsPlusAicpuCtxDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.FftsPlusAicpuCtxDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 successor_list = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->successor_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _successor_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .domi.aicpuKernelDef kernel = 20;
  if (this->has_kernel()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kernel_);
  }

  // uint32 successor_num = 1;
  if (this->successor_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_successor_num());
  }

  // uint32 aten = 2;
  if (this->aten() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aten());
  }

  // uint32 pred_cnt_init = 3;
  if (this->pred_cnt_init() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pred_cnt_init());
  }

  // uint32 pred_cnt = 4;
  if (this->pred_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pred_cnt());
  }

  // uint32 atm = 6;
  if (this->atm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_atm());
  }

  // uint32 sqe_index = 7;
  if (this->sqe_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sqe_index());
  }

  // uint32 kernel_type = 8;
  if (this->kernel_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_kernel_type());
  }

  // uint32 bm = 9;
  if (this->bm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bm());
  }

  // uint32 topic_type = 10;
  if (this->topic_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_topic_type());
  }

  // uint32 qos = 11;
  if (this->qos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_qos());
  }

  // uint32 thread_id = 12;
  if (this->thread_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thread_id());
  }

  // uint32 thread_dim = 13;
  if (this->thread_dim() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thread_dim());
  }

  // uint32 non_tail_block_dim = 14;
  if (this->non_tail_block_dim() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_non_tail_block_dim());
  }

  // uint32 tail_block_dim = 15;
  if (this->tail_block_dim() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tail_block_dim());
  }

  // uint32 sub_topic_id = 16;
  if (this->sub_topic_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sub_topic_id());
  }

  // uint32 topic_id = 17;
  if (this->topic_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_topic_id());
  }

  // uint32 group_id = 18;
  if (this->group_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_group_id());
  }

  // uint32 task_param_offset = 19;
  if (this->task_param_offset() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_task_param_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FftsPlusAicpuCtxDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.FftsPlusAicpuCtxDef)
  GOOGLE_DCHECK_NE(&from, this);
  const FftsPlusAicpuCtxDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FftsPlusAicpuCtxDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.FftsPlusAicpuCtxDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.FftsPlusAicpuCtxDef)
    MergeFrom(*source);
  }
}

void FftsPlusAicpuCtxDef::MergeFrom(const FftsPlusAicpuCtxDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.FftsPlusAicpuCtxDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  successor_list_.MergeFrom(from.successor_list_);
  if (from.has_kernel()) {
    _internal_mutable_kernel()->::domi::aicpuKernelDef::MergeFrom(from._internal_kernel());
  }
  if (from.successor_num() != 0) {
    _internal_set_successor_num(from._internal_successor_num());
  }
  if (from.aten() != 0) {
    _internal_set_aten(from._internal_aten());
  }
  if (from.pred_cnt_init() != 0) {
    _internal_set_pred_cnt_init(from._internal_pred_cnt_init());
  }
  if (from.pred_cnt() != 0) {
    _internal_set_pred_cnt(from._internal_pred_cnt());
  }
  if (from.atm() != 0) {
    _internal_set_atm(from._internal_atm());
  }
  if (from.sqe_index() != 0) {
    _internal_set_sqe_index(from._internal_sqe_index());
  }
  if (from.kernel_type() != 0) {
    _internal_set_kernel_type(from._internal_kernel_type());
  }
  if (from.bm() != 0) {
    _internal_set_bm(from._internal_bm());
  }
  if (from.topic_type() != 0) {
    _internal_set_topic_type(from._internal_topic_type());
  }
  if (from.qos() != 0) {
    _internal_set_qos(from._internal_qos());
  }
  if (from.thread_id() != 0) {
    _internal_set_thread_id(from._internal_thread_id());
  }
  if (from.thread_dim() != 0) {
    _internal_set_thread_dim(from._internal_thread_dim());
  }
  if (from.non_tail_block_dim() != 0) {
    _internal_set_non_tail_block_dim(from._internal_non_tail_block_dim());
  }
  if (from.tail_block_dim() != 0) {
    _internal_set_tail_block_dim(from._internal_tail_block_dim());
  }
  if (from.sub_topic_id() != 0) {
    _internal_set_sub_topic_id(from._internal_sub_topic_id());
  }
  if (from.topic_id() != 0) {
    _internal_set_topic_id(from._internal_topic_id());
  }
  if (from.group_id() != 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  if (from.task_param_offset() != 0) {
    _internal_set_task_param_offset(from._internal_task_param_offset());
  }
}

void FftsPlusAicpuCtxDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.FftsPlusAicpuCtxDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FftsPlusAicpuCtxDef::CopyFrom(const FftsPlusAicpuCtxDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.FftsPlusAicpuCtxDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FftsPlusAicpuCtxDef::IsInitialized() const {
  return true;
}

void FftsPlusAicpuCtxDef::InternalSwap(FftsPlusAicpuCtxDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  successor_list_.InternalSwap(&other->successor_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FftsPlusAicpuCtxDef, task_param_offset_)
      + sizeof(FftsPlusAicpuCtxDef::task_param_offset_)
      - PROTOBUF_FIELD_OFFSET(FftsPlusAicpuCtxDef, kernel_)>(
          reinterpret_cast<char*>(&kernel_),
          reinterpret_cast<char*>(&other->kernel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FftsPlusAicpuCtxDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void aicpuKernelDef::InitAsDefaultInstance() {
}
class aicpuKernelDef::_Internal {
 public:
};

aicpuKernelDef::aicpuKernelDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.aicpuKernelDef)
}
aicpuKernelDef::aicpuKernelDef(const aicpuKernelDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_args().empty()) {
    args_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_args(),
      GetArena());
  }
  so_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_so_name().empty()) {
    so_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_so_name(),
      GetArena());
  }
  kernel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_kernel_name().empty()) {
    kernel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_kernel_name(),
      GetArena());
  }
  kernel_ext_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_kernel_ext_info().empty()) {
    kernel_ext_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_kernel_ext_info(),
      GetArena());
  }
  ::memcpy(&args_size_, &from.args_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&kernel_ext_info_size_) -
    reinterpret_cast<char*>(&args_size_)) + sizeof(kernel_ext_info_size_));
  // @@protoc_insertion_point(copy_constructor:domi.aicpuKernelDef)
}

void aicpuKernelDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_aicpuKernelDef_task_2eproto.base);
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  so_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kernel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kernel_ext_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&args_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kernel_ext_info_size_) -
      reinterpret_cast<char*>(&args_size_)) + sizeof(kernel_ext_info_size_));
}

aicpuKernelDef::~aicpuKernelDef() {
  // @@protoc_insertion_point(destructor:domi.aicpuKernelDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void aicpuKernelDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  args_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  so_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kernel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kernel_ext_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void aicpuKernelDef::ArenaDtor(void* object) {
  aicpuKernelDef* _this = reinterpret_cast< aicpuKernelDef* >(object);
  (void)_this;
}
void aicpuKernelDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void aicpuKernelDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const aicpuKernelDef& aicpuKernelDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_aicpuKernelDef_task_2eproto.base);
  return *internal_default_instance();
}


void aicpuKernelDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.aicpuKernelDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  so_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kernel_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kernel_ext_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&args_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kernel_ext_info_size_) -
      reinterpret_cast<char*>(&args_size_)) + sizeof(kernel_ext_info_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* aicpuKernelDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 args_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          args_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_args();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string so_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_so_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "domi.aicpuKernelDef.so_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string kernel_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_kernel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "domi.aicpuKernelDef.kernel_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes kernel_ext_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_kernel_ext_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 kernel_ext_info_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          kernel_ext_info_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* aicpuKernelDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.aicpuKernelDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 args_size = 1;
  if (this->args_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_args_size(), target);
  }

  // bytes args = 2;
  if (this->args().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_args(), target);
  }

  // string so_name = 3;
  if (this->so_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_so_name().data(), static_cast<int>(this->_internal_so_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "domi.aicpuKernelDef.so_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_so_name(), target);
  }

  // string kernel_name = 4;
  if (this->kernel_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kernel_name().data(), static_cast<int>(this->_internal_kernel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "domi.aicpuKernelDef.kernel_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_kernel_name(), target);
  }

  // bytes kernel_ext_info = 5;
  if (this->kernel_ext_info().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_kernel_ext_info(), target);
  }

  // uint32 kernel_ext_info_size = 6;
  if (this->kernel_ext_info_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_kernel_ext_info_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.aicpuKernelDef)
  return target;
}

size_t aicpuKernelDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.aicpuKernelDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes args = 2;
  if (this->args().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_args());
  }

  // string so_name = 3;
  if (this->so_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_so_name());
  }

  // string kernel_name = 4;
  if (this->kernel_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kernel_name());
  }

  // bytes kernel_ext_info = 5;
  if (this->kernel_ext_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_kernel_ext_info());
  }

  // uint32 args_size = 1;
  if (this->args_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_args_size());
  }

  // uint32 kernel_ext_info_size = 6;
  if (this->kernel_ext_info_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_kernel_ext_info_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void aicpuKernelDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.aicpuKernelDef)
  GOOGLE_DCHECK_NE(&from, this);
  const aicpuKernelDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<aicpuKernelDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.aicpuKernelDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.aicpuKernelDef)
    MergeFrom(*source);
  }
}

void aicpuKernelDef::MergeFrom(const aicpuKernelDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.aicpuKernelDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.args().size() > 0) {
    _internal_set_args(from._internal_args());
  }
  if (from.so_name().size() > 0) {
    _internal_set_so_name(from._internal_so_name());
  }
  if (from.kernel_name().size() > 0) {
    _internal_set_kernel_name(from._internal_kernel_name());
  }
  if (from.kernel_ext_info().size() > 0) {
    _internal_set_kernel_ext_info(from._internal_kernel_ext_info());
  }
  if (from.args_size() != 0) {
    _internal_set_args_size(from._internal_args_size());
  }
  if (from.kernel_ext_info_size() != 0) {
    _internal_set_kernel_ext_info_size(from._internal_kernel_ext_info_size());
  }
}

void aicpuKernelDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.aicpuKernelDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void aicpuKernelDef::CopyFrom(const aicpuKernelDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.aicpuKernelDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool aicpuKernelDef::IsInitialized() const {
  return true;
}

void aicpuKernelDef::InternalSwap(aicpuKernelDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  args_.Swap(&other->args_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  so_name_.Swap(&other->so_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kernel_name_.Swap(&other->kernel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kernel_ext_info_.Swap(&other->kernel_ext_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(aicpuKernelDef, kernel_ext_info_size_)
      + sizeof(aicpuKernelDef::kernel_ext_info_size_)
      - PROTOBUF_FIELD_OFFSET(aicpuKernelDef, args_size_)>(
          reinterpret_cast<char*>(&args_size_),
          reinterpret_cast<char*>(&other->args_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata aicpuKernelDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FftsPlusDataCtxDef::InitAsDefaultInstance() {
}
class FftsPlusDataCtxDef::_Internal {
 public:
};

FftsPlusDataCtxDef::FftsPlusDataCtxDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  successor_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.FftsPlusDataCtxDef)
}
FftsPlusDataCtxDef::FftsPlusDataCtxDef(const FftsPlusDataCtxDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      successor_list_(from.successor_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&successor_num_, &from.successor_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&tail_stride_inner_) -
    reinterpret_cast<char*>(&successor_num_)) + sizeof(tail_stride_inner_));
  // @@protoc_insertion_point(copy_constructor:domi.FftsPlusDataCtxDef)
}

void FftsPlusDataCtxDef::SharedCtor() {
  ::memset(&successor_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tail_stride_inner_) -
      reinterpret_cast<char*>(&successor_num_)) + sizeof(tail_stride_inner_));
}

FftsPlusDataCtxDef::~FftsPlusDataCtxDef() {
  // @@protoc_insertion_point(destructor:domi.FftsPlusDataCtxDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FftsPlusDataCtxDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FftsPlusDataCtxDef::ArenaDtor(void* object) {
  FftsPlusDataCtxDef* _this = reinterpret_cast< FftsPlusDataCtxDef* >(object);
  (void)_this;
}
void FftsPlusDataCtxDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FftsPlusDataCtxDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FftsPlusDataCtxDef& FftsPlusDataCtxDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FftsPlusDataCtxDef_task_2eproto.base);
  return *internal_default_instance();
}


void FftsPlusDataCtxDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.FftsPlusDataCtxDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  successor_list_.Clear();
  ::memset(&successor_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tail_stride_inner_) -
      reinterpret_cast<char*>(&successor_num_)) + sizeof(tail_stride_inner_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FftsPlusDataCtxDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 successor_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          successor_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 aten = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          aten_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cnt_init = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cnt_init_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cnt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 successor_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_successor_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_successor_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 atm = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          atm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pmg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          pmg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ns = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 part_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          part_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 qos = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          qos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 orig_consumer_counter = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          orig_consumer_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 run_consumer_counter = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          run_consumer_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 thread_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          thread_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 thread_dim = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          thread_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 addr_base = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          addr_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 addr_offset = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          addr_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 non_tail_num_outter = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          non_tail_num_outter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 non_tail_num_inner = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          non_tail_num_inner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 non_tail_len_inner = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          non_tail_len_inner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 non_tail_stride_outter = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          non_tail_stride_outter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 non_tail_stride_inner = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          non_tail_stride_inner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tail_num_outter = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          tail_num_outter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tail_num_inner = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          tail_num_inner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tail_len_inner = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          tail_len_inner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tail_stride_outter = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          tail_stride_outter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tail_stride_inner = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          tail_stride_inner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FftsPlusDataCtxDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.FftsPlusDataCtxDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 successor_num = 1;
  if (this->successor_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_successor_num(), target);
  }

  // uint32 aten = 2;
  if (this->aten() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_aten(), target);
  }

  // uint32 cnt_init = 3;
  if (this->cnt_init() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cnt_init(), target);
  }

  // uint32 cnt = 4;
  if (this->cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_cnt(), target);
  }

  // repeated uint32 successor_list = 5;
  {
    int byte_size = _successor_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_successor_list(), byte_size, target);
    }
  }

  // uint32 atm = 6;
  if (this->atm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_atm(), target);
  }

  // uint32 pmg = 7;
  if (this->pmg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_pmg(), target);
  }

  // uint32 ns = 8;
  if (this->ns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_ns(), target);
  }

  // uint32 part_id = 9;
  if (this->part_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_part_id(), target);
  }

  // uint32 qos = 10;
  if (this->qos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_qos(), target);
  }

  // uint32 orig_consumer_counter = 11;
  if (this->orig_consumer_counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_orig_consumer_counter(), target);
  }

  // uint32 run_consumer_counter = 12;
  if (this->run_consumer_counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_run_consumer_counter(), target);
  }

  // uint32 thread_id = 13;
  if (this->thread_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_thread_id(), target);
  }

  // uint32 thread_dim = 14;
  if (this->thread_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_thread_dim(), target);
  }

  // uint64 addr_base = 15;
  if (this->addr_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->_internal_addr_base(), target);
  }

  // uint32 addr_offset = 16;
  if (this->addr_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_addr_offset(), target);
  }

  // uint32 non_tail_num_outter = 17;
  if (this->non_tail_num_outter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_non_tail_num_outter(), target);
  }

  // uint32 non_tail_num_inner = 18;
  if (this->non_tail_num_inner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_non_tail_num_inner(), target);
  }

  // uint32 non_tail_len_inner = 19;
  if (this->non_tail_len_inner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_non_tail_len_inner(), target);
  }

  // uint32 non_tail_stride_outter = 20;
  if (this->non_tail_stride_outter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_non_tail_stride_outter(), target);
  }

  // uint32 non_tail_stride_inner = 21;
  if (this->non_tail_stride_inner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_non_tail_stride_inner(), target);
  }

  // uint32 tail_num_outter = 22;
  if (this->tail_num_outter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_tail_num_outter(), target);
  }

  // uint32 tail_num_inner = 23;
  if (this->tail_num_inner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_tail_num_inner(), target);
  }

  // uint32 tail_len_inner = 24;
  if (this->tail_len_inner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_tail_len_inner(), target);
  }

  // uint32 tail_stride_outter = 25;
  if (this->tail_stride_outter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_tail_stride_outter(), target);
  }

  // uint32 tail_stride_inner = 26;
  if (this->tail_stride_inner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_tail_stride_inner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.FftsPlusDataCtxDef)
  return target;
}

size_t FftsPlusDataCtxDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.FftsPlusDataCtxDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 successor_list = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->successor_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _successor_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 successor_num = 1;
  if (this->successor_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_successor_num());
  }

  // uint32 aten = 2;
  if (this->aten() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aten());
  }

  // uint32 cnt_init = 3;
  if (this->cnt_init() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cnt_init());
  }

  // uint32 cnt = 4;
  if (this->cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cnt());
  }

  // uint32 atm = 6;
  if (this->atm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_atm());
  }

  // uint32 pmg = 7;
  if (this->pmg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pmg());
  }

  // uint32 ns = 8;
  if (this->ns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ns());
  }

  // uint32 part_id = 9;
  if (this->part_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_part_id());
  }

  // uint32 qos = 10;
  if (this->qos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_qos());
  }

  // uint32 orig_consumer_counter = 11;
  if (this->orig_consumer_counter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_orig_consumer_counter());
  }

  // uint32 run_consumer_counter = 12;
  if (this->run_consumer_counter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_run_consumer_counter());
  }

  // uint32 thread_id = 13;
  if (this->thread_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thread_id());
  }

  // uint64 addr_base = 15;
  if (this->addr_base() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_addr_base());
  }

  // uint32 thread_dim = 14;
  if (this->thread_dim() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thread_dim());
  }

  // uint32 addr_offset = 16;
  if (this->addr_offset() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_addr_offset());
  }

  // uint32 non_tail_num_outter = 17;
  if (this->non_tail_num_outter() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_non_tail_num_outter());
  }

  // uint32 non_tail_num_inner = 18;
  if (this->non_tail_num_inner() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_non_tail_num_inner());
  }

  // uint32 non_tail_len_inner = 19;
  if (this->non_tail_len_inner() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_non_tail_len_inner());
  }

  // uint32 non_tail_stride_outter = 20;
  if (this->non_tail_stride_outter() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_non_tail_stride_outter());
  }

  // uint32 non_tail_stride_inner = 21;
  if (this->non_tail_stride_inner() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_non_tail_stride_inner());
  }

  // uint32 tail_num_outter = 22;
  if (this->tail_num_outter() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tail_num_outter());
  }

  // uint32 tail_num_inner = 23;
  if (this->tail_num_inner() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tail_num_inner());
  }

  // uint32 tail_len_inner = 24;
  if (this->tail_len_inner() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tail_len_inner());
  }

  // uint32 tail_stride_outter = 25;
  if (this->tail_stride_outter() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tail_stride_outter());
  }

  // uint32 tail_stride_inner = 26;
  if (this->tail_stride_inner() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tail_stride_inner());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FftsPlusDataCtxDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.FftsPlusDataCtxDef)
  GOOGLE_DCHECK_NE(&from, this);
  const FftsPlusDataCtxDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FftsPlusDataCtxDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.FftsPlusDataCtxDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.FftsPlusDataCtxDef)
    MergeFrom(*source);
  }
}

void FftsPlusDataCtxDef::MergeFrom(const FftsPlusDataCtxDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.FftsPlusDataCtxDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  successor_list_.MergeFrom(from.successor_list_);
  if (from.successor_num() != 0) {
    _internal_set_successor_num(from._internal_successor_num());
  }
  if (from.aten() != 0) {
    _internal_set_aten(from._internal_aten());
  }
  if (from.cnt_init() != 0) {
    _internal_set_cnt_init(from._internal_cnt_init());
  }
  if (from.cnt() != 0) {
    _internal_set_cnt(from._internal_cnt());
  }
  if (from.atm() != 0) {
    _internal_set_atm(from._internal_atm());
  }
  if (from.pmg() != 0) {
    _internal_set_pmg(from._internal_pmg());
  }
  if (from.ns() != 0) {
    _internal_set_ns(from._internal_ns());
  }
  if (from.part_id() != 0) {
    _internal_set_part_id(from._internal_part_id());
  }
  if (from.qos() != 0) {
    _internal_set_qos(from._internal_qos());
  }
  if (from.orig_consumer_counter() != 0) {
    _internal_set_orig_consumer_counter(from._internal_orig_consumer_counter());
  }
  if (from.run_consumer_counter() != 0) {
    _internal_set_run_consumer_counter(from._internal_run_consumer_counter());
  }
  if (from.thread_id() != 0) {
    _internal_set_thread_id(from._internal_thread_id());
  }
  if (from.addr_base() != 0) {
    _internal_set_addr_base(from._internal_addr_base());
  }
  if (from.thread_dim() != 0) {
    _internal_set_thread_dim(from._internal_thread_dim());
  }
  if (from.addr_offset() != 0) {
    _internal_set_addr_offset(from._internal_addr_offset());
  }
  if (from.non_tail_num_outter() != 0) {
    _internal_set_non_tail_num_outter(from._internal_non_tail_num_outter());
  }
  if (from.non_tail_num_inner() != 0) {
    _internal_set_non_tail_num_inner(from._internal_non_tail_num_inner());
  }
  if (from.non_tail_len_inner() != 0) {
    _internal_set_non_tail_len_inner(from._internal_non_tail_len_inner());
  }
  if (from.non_tail_stride_outter() != 0) {
    _internal_set_non_tail_stride_outter(from._internal_non_tail_stride_outter());
  }
  if (from.non_tail_stride_inner() != 0) {
    _internal_set_non_tail_stride_inner(from._internal_non_tail_stride_inner());
  }
  if (from.tail_num_outter() != 0) {
    _internal_set_tail_num_outter(from._internal_tail_num_outter());
  }
  if (from.tail_num_inner() != 0) {
    _internal_set_tail_num_inner(from._internal_tail_num_inner());
  }
  if (from.tail_len_inner() != 0) {
    _internal_set_tail_len_inner(from._internal_tail_len_inner());
  }
  if (from.tail_stride_outter() != 0) {
    _internal_set_tail_stride_outter(from._internal_tail_stride_outter());
  }
  if (from.tail_stride_inner() != 0) {
    _internal_set_tail_stride_inner(from._internal_tail_stride_inner());
  }
}

void FftsPlusDataCtxDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.FftsPlusDataCtxDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FftsPlusDataCtxDef::CopyFrom(const FftsPlusDataCtxDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.FftsPlusDataCtxDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FftsPlusDataCtxDef::IsInitialized() const {
  return true;
}

void FftsPlusDataCtxDef::InternalSwap(FftsPlusDataCtxDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  successor_list_.InternalSwap(&other->successor_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FftsPlusDataCtxDef, tail_stride_inner_)
      + sizeof(FftsPlusDataCtxDef::tail_stride_inner_)
      - PROTOBUF_FIELD_OFFSET(FftsPlusDataCtxDef, successor_num_)>(
          reinterpret_cast<char*>(&successor_num_),
          reinterpret_cast<char*>(&other->successor_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FftsPlusDataCtxDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FftsPlusAtStartCtxDef::InitAsDefaultInstance() {
}
class FftsPlusAtStartCtxDef::_Internal {
 public:
};

FftsPlusAtStartCtxDef::FftsPlusAtStartCtxDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  successor_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.FftsPlusAtStartCtxDef)
}
FftsPlusAtStartCtxDef::FftsPlusAtStartCtxDef(const FftsPlusAtStartCtxDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      successor_list_(from.successor_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&successor_num_, &from.successor_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&thread_window_size_) -
    reinterpret_cast<char*>(&successor_num_)) + sizeof(thread_window_size_));
  // @@protoc_insertion_point(copy_constructor:domi.FftsPlusAtStartCtxDef)
}

void FftsPlusAtStartCtxDef::SharedCtor() {
  ::memset(&successor_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thread_window_size_) -
      reinterpret_cast<char*>(&successor_num_)) + sizeof(thread_window_size_));
}

FftsPlusAtStartCtxDef::~FftsPlusAtStartCtxDef() {
  // @@protoc_insertion_point(destructor:domi.FftsPlusAtStartCtxDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FftsPlusAtStartCtxDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FftsPlusAtStartCtxDef::ArenaDtor(void* object) {
  FftsPlusAtStartCtxDef* _this = reinterpret_cast< FftsPlusAtStartCtxDef* >(object);
  (void)_this;
}
void FftsPlusAtStartCtxDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FftsPlusAtStartCtxDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FftsPlusAtStartCtxDef& FftsPlusAtStartCtxDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FftsPlusAtStartCtxDef_task_2eproto.base);
  return *internal_default_instance();
}


void FftsPlusAtStartCtxDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.FftsPlusAtStartCtxDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  successor_list_.Clear();
  ::memset(&successor_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thread_window_size_) -
      reinterpret_cast<char*>(&successor_num_)) + sizeof(thread_window_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FftsPlusAtStartCtxDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 successor_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          successor_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 aten = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          aten_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pred_cnt_init = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pred_cnt_init_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pred_cnt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pred_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 successor_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_successor_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_successor_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 thread_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          thread_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 thread_dim = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          thread_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 thread_id_init = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          thread_id_init_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 thread_window_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          thread_window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FftsPlusAtStartCtxDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.FftsPlusAtStartCtxDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 successor_num = 1;
  if (this->successor_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_successor_num(), target);
  }

  // uint32 aten = 2;
  if (this->aten() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_aten(), target);
  }

  // uint32 pred_cnt_init = 3;
  if (this->pred_cnt_init() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pred_cnt_init(), target);
  }

  // uint32 pred_cnt = 4;
  if (this->pred_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_pred_cnt(), target);
  }

  // repeated uint32 successor_list = 5;
  {
    int byte_size = _successor_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_successor_list(), byte_size, target);
    }
  }

  // uint32 thread_id = 6;
  if (this->thread_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_thread_id(), target);
  }

  // uint32 thread_dim = 7;
  if (this->thread_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_thread_dim(), target);
  }

  // uint32 thread_id_init = 8;
  if (this->thread_id_init() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_thread_id_init(), target);
  }

  // uint32 thread_window_size = 9;
  if (this->thread_window_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_thread_window_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.FftsPlusAtStartCtxDef)
  return target;
}

size_t FftsPlusAtStartCtxDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.FftsPlusAtStartCtxDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 successor_list = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->successor_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _successor_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 successor_num = 1;
  if (this->successor_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_successor_num());
  }

  // uint32 aten = 2;
  if (this->aten() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aten());
  }

  // uint32 pred_cnt_init = 3;
  if (this->pred_cnt_init() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pred_cnt_init());
  }

  // uint32 pred_cnt = 4;
  if (this->pred_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pred_cnt());
  }

  // uint32 thread_id = 6;
  if (this->thread_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thread_id());
  }

  // uint32 thread_dim = 7;
  if (this->thread_dim() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thread_dim());
  }

  // uint32 thread_id_init = 8;
  if (this->thread_id_init() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thread_id_init());
  }

  // uint32 thread_window_size = 9;
  if (this->thread_window_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thread_window_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FftsPlusAtStartCtxDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.FftsPlusAtStartCtxDef)
  GOOGLE_DCHECK_NE(&from, this);
  const FftsPlusAtStartCtxDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FftsPlusAtStartCtxDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.FftsPlusAtStartCtxDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.FftsPlusAtStartCtxDef)
    MergeFrom(*source);
  }
}

void FftsPlusAtStartCtxDef::MergeFrom(const FftsPlusAtStartCtxDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.FftsPlusAtStartCtxDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  successor_list_.MergeFrom(from.successor_list_);
  if (from.successor_num() != 0) {
    _internal_set_successor_num(from._internal_successor_num());
  }
  if (from.aten() != 0) {
    _internal_set_aten(from._internal_aten());
  }
  if (from.pred_cnt_init() != 0) {
    _internal_set_pred_cnt_init(from._internal_pred_cnt_init());
  }
  if (from.pred_cnt() != 0) {
    _internal_set_pred_cnt(from._internal_pred_cnt());
  }
  if (from.thread_id() != 0) {
    _internal_set_thread_id(from._internal_thread_id());
  }
  if (from.thread_dim() != 0) {
    _internal_set_thread_dim(from._internal_thread_dim());
  }
  if (from.thread_id_init() != 0) {
    _internal_set_thread_id_init(from._internal_thread_id_init());
  }
  if (from.thread_window_size() != 0) {
    _internal_set_thread_window_size(from._internal_thread_window_size());
  }
}

void FftsPlusAtStartCtxDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.FftsPlusAtStartCtxDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FftsPlusAtStartCtxDef::CopyFrom(const FftsPlusAtStartCtxDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.FftsPlusAtStartCtxDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FftsPlusAtStartCtxDef::IsInitialized() const {
  return true;
}

void FftsPlusAtStartCtxDef::InternalSwap(FftsPlusAtStartCtxDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  successor_list_.InternalSwap(&other->successor_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FftsPlusAtStartCtxDef, thread_window_size_)
      + sizeof(FftsPlusAtStartCtxDef::thread_window_size_)
      - PROTOBUF_FIELD_OFFSET(FftsPlusAtStartCtxDef, successor_num_)>(
          reinterpret_cast<char*>(&successor_num_),
          reinterpret_cast<char*>(&other->successor_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FftsPlusAtStartCtxDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FftsPlusAtEndCtxDef::InitAsDefaultInstance() {
}
class FftsPlusAtEndCtxDef::_Internal {
 public:
};

FftsPlusAtEndCtxDef::FftsPlusAtEndCtxDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  succ_at_start_slot_(arena),
  succ_out_label_slot_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.FftsPlusAtEndCtxDef)
}
FftsPlusAtEndCtxDef::FftsPlusAtEndCtxDef(const FftsPlusAtEndCtxDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      succ_at_start_slot_(from.succ_at_start_slot_),
      succ_out_label_slot_(from.succ_out_label_slot_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&at_start_slot_num_, &from.at_start_slot_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&thread_id_) -
    reinterpret_cast<char*>(&at_start_slot_num_)) + sizeof(thread_id_));
  // @@protoc_insertion_point(copy_constructor:domi.FftsPlusAtEndCtxDef)
}

void FftsPlusAtEndCtxDef::SharedCtor() {
  ::memset(&at_start_slot_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thread_id_) -
      reinterpret_cast<char*>(&at_start_slot_num_)) + sizeof(thread_id_));
}

FftsPlusAtEndCtxDef::~FftsPlusAtEndCtxDef() {
  // @@protoc_insertion_point(destructor:domi.FftsPlusAtEndCtxDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FftsPlusAtEndCtxDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FftsPlusAtEndCtxDef::ArenaDtor(void* object) {
  FftsPlusAtEndCtxDef* _this = reinterpret_cast< FftsPlusAtEndCtxDef* >(object);
  (void)_this;
}
void FftsPlusAtEndCtxDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FftsPlusAtEndCtxDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FftsPlusAtEndCtxDef& FftsPlusAtEndCtxDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FftsPlusAtEndCtxDef_task_2eproto.base);
  return *internal_default_instance();
}


void FftsPlusAtEndCtxDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.FftsPlusAtEndCtxDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  succ_at_start_slot_.Clear();
  succ_out_label_slot_.Clear();
  ::memset(&at_start_slot_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thread_id_) -
      reinterpret_cast<char*>(&at_start_slot_num_)) + sizeof(thread_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FftsPlusAtEndCtxDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 at_start_slot_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          at_start_slot_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 out_label_slot_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          out_label_slot_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 aten = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          aten_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pred_cnt_init = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pred_cnt_init_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pred_cnt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pred_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 succ_at_start_slot = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_succ_at_start_slot(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_succ_at_start_slot(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 succ_out_label_slot = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_succ_out_label_slot(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_succ_out_label_slot(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 thread_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          thread_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FftsPlusAtEndCtxDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.FftsPlusAtEndCtxDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 at_start_slot_num = 1;
  if (this->at_start_slot_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_at_start_slot_num(), target);
  }

  // uint32 out_label_slot_num = 2;
  if (this->out_label_slot_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_out_label_slot_num(), target);
  }

  // uint32 aten = 3;
  if (this->aten() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_aten(), target);
  }

  // uint32 pred_cnt_init = 4;
  if (this->pred_cnt_init() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_pred_cnt_init(), target);
  }

  // uint32 pred_cnt = 5;
  if (this->pred_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_pred_cnt(), target);
  }

  // repeated uint32 succ_at_start_slot = 6;
  {
    int byte_size = _succ_at_start_slot_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_succ_at_start_slot(), byte_size, target);
    }
  }

  // repeated uint32 succ_out_label_slot = 7;
  {
    int byte_size = _succ_out_label_slot_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_succ_out_label_slot(), byte_size, target);
    }
  }

  // uint32 thread_id = 8;
  if (this->thread_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_thread_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.FftsPlusAtEndCtxDef)
  return target;
}

size_t FftsPlusAtEndCtxDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.FftsPlusAtEndCtxDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 succ_at_start_slot = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->succ_at_start_slot_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _succ_at_start_slot_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 succ_out_label_slot = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->succ_out_label_slot_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _succ_out_label_slot_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 at_start_slot_num = 1;
  if (this->at_start_slot_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_at_start_slot_num());
  }

  // uint32 out_label_slot_num = 2;
  if (this->out_label_slot_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_out_label_slot_num());
  }

  // uint32 aten = 3;
  if (this->aten() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aten());
  }

  // uint32 pred_cnt_init = 4;
  if (this->pred_cnt_init() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pred_cnt_init());
  }

  // uint32 pred_cnt = 5;
  if (this->pred_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pred_cnt());
  }

  // uint32 thread_id = 8;
  if (this->thread_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thread_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FftsPlusAtEndCtxDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.FftsPlusAtEndCtxDef)
  GOOGLE_DCHECK_NE(&from, this);
  const FftsPlusAtEndCtxDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FftsPlusAtEndCtxDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.FftsPlusAtEndCtxDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.FftsPlusAtEndCtxDef)
    MergeFrom(*source);
  }
}

void FftsPlusAtEndCtxDef::MergeFrom(const FftsPlusAtEndCtxDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.FftsPlusAtEndCtxDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  succ_at_start_slot_.MergeFrom(from.succ_at_start_slot_);
  succ_out_label_slot_.MergeFrom(from.succ_out_label_slot_);
  if (from.at_start_slot_num() != 0) {
    _internal_set_at_start_slot_num(from._internal_at_start_slot_num());
  }
  if (from.out_label_slot_num() != 0) {
    _internal_set_out_label_slot_num(from._internal_out_label_slot_num());
  }
  if (from.aten() != 0) {
    _internal_set_aten(from._internal_aten());
  }
  if (from.pred_cnt_init() != 0) {
    _internal_set_pred_cnt_init(from._internal_pred_cnt_init());
  }
  if (from.pred_cnt() != 0) {
    _internal_set_pred_cnt(from._internal_pred_cnt());
  }
  if (from.thread_id() != 0) {
    _internal_set_thread_id(from._internal_thread_id());
  }
}

void FftsPlusAtEndCtxDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.FftsPlusAtEndCtxDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FftsPlusAtEndCtxDef::CopyFrom(const FftsPlusAtEndCtxDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.FftsPlusAtEndCtxDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FftsPlusAtEndCtxDef::IsInitialized() const {
  return true;
}

void FftsPlusAtEndCtxDef::InternalSwap(FftsPlusAtEndCtxDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  succ_at_start_slot_.InternalSwap(&other->succ_at_start_slot_);
  succ_out_label_slot_.InternalSwap(&other->succ_out_label_slot_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FftsPlusAtEndCtxDef, thread_id_)
      + sizeof(FftsPlusAtEndCtxDef::thread_id_)
      - PROTOBUF_FIELD_OFFSET(FftsPlusAtEndCtxDef, at_start_slot_num_)>(
          reinterpret_cast<char*>(&at_start_slot_num_),
          reinterpret_cast<char*>(&other->at_start_slot_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FftsPlusAtEndCtxDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FftsPlusLabelCtxDef::InitAsDefaultInstance() {
}
class FftsPlusLabelCtxDef::_Internal {
 public:
};

FftsPlusLabelCtxDef::FftsPlusLabelCtxDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  successor_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.FftsPlusLabelCtxDef)
}
FftsPlusLabelCtxDef::FftsPlusLabelCtxDef(const FftsPlusLabelCtxDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      successor_list_(from.successor_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&successor_num_, &from.successor_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&pred_cnt_) -
    reinterpret_cast<char*>(&successor_num_)) + sizeof(pred_cnt_));
  // @@protoc_insertion_point(copy_constructor:domi.FftsPlusLabelCtxDef)
}

void FftsPlusLabelCtxDef::SharedCtor() {
  ::memset(&successor_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pred_cnt_) -
      reinterpret_cast<char*>(&successor_num_)) + sizeof(pred_cnt_));
}

FftsPlusLabelCtxDef::~FftsPlusLabelCtxDef() {
  // @@protoc_insertion_point(destructor:domi.FftsPlusLabelCtxDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FftsPlusLabelCtxDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FftsPlusLabelCtxDef::ArenaDtor(void* object) {
  FftsPlusLabelCtxDef* _this = reinterpret_cast< FftsPlusLabelCtxDef* >(object);
  (void)_this;
}
void FftsPlusLabelCtxDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FftsPlusLabelCtxDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FftsPlusLabelCtxDef& FftsPlusLabelCtxDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FftsPlusLabelCtxDef_task_2eproto.base);
  return *internal_default_instance();
}


void FftsPlusLabelCtxDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.FftsPlusLabelCtxDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  successor_list_.Clear();
  ::memset(&successor_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pred_cnt_) -
      reinterpret_cast<char*>(&successor_num_)) + sizeof(pred_cnt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FftsPlusLabelCtxDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 successor_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          successor_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pred_cnt_init = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pred_cnt_init_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pred_cnt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pred_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 successor_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_successor_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_successor_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FftsPlusLabelCtxDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.FftsPlusLabelCtxDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 successor_num = 1;
  if (this->successor_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_successor_num(), target);
  }

  // uint32 pred_cnt_init = 2;
  if (this->pred_cnt_init() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pred_cnt_init(), target);
  }

  // uint32 pred_cnt = 3;
  if (this->pred_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pred_cnt(), target);
  }

  // repeated uint32 successor_list = 4;
  {
    int byte_size = _successor_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_successor_list(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.FftsPlusLabelCtxDef)
  return target;
}

size_t FftsPlusLabelCtxDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.FftsPlusLabelCtxDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 successor_list = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->successor_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _successor_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 successor_num = 1;
  if (this->successor_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_successor_num());
  }

  // uint32 pred_cnt_init = 2;
  if (this->pred_cnt_init() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pred_cnt_init());
  }

  // uint32 pred_cnt = 3;
  if (this->pred_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pred_cnt());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FftsPlusLabelCtxDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.FftsPlusLabelCtxDef)
  GOOGLE_DCHECK_NE(&from, this);
  const FftsPlusLabelCtxDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FftsPlusLabelCtxDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.FftsPlusLabelCtxDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.FftsPlusLabelCtxDef)
    MergeFrom(*source);
  }
}

void FftsPlusLabelCtxDef::MergeFrom(const FftsPlusLabelCtxDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.FftsPlusLabelCtxDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  successor_list_.MergeFrom(from.successor_list_);
  if (from.successor_num() != 0) {
    _internal_set_successor_num(from._internal_successor_num());
  }
  if (from.pred_cnt_init() != 0) {
    _internal_set_pred_cnt_init(from._internal_pred_cnt_init());
  }
  if (from.pred_cnt() != 0) {
    _internal_set_pred_cnt(from._internal_pred_cnt());
  }
}

void FftsPlusLabelCtxDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.FftsPlusLabelCtxDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FftsPlusLabelCtxDef::CopyFrom(const FftsPlusLabelCtxDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.FftsPlusLabelCtxDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FftsPlusLabelCtxDef::IsInitialized() const {
  return true;
}

void FftsPlusLabelCtxDef::InternalSwap(FftsPlusLabelCtxDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  successor_list_.InternalSwap(&other->successor_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FftsPlusLabelCtxDef, pred_cnt_)
      + sizeof(FftsPlusLabelCtxDef::pred_cnt_)
      - PROTOBUF_FIELD_OFFSET(FftsPlusLabelCtxDef, successor_num_)>(
          reinterpret_cast<char*>(&successor_num_),
          reinterpret_cast<char*>(&other->successor_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FftsPlusLabelCtxDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FftsPlusCaseSwitchCtxDef::InitAsDefaultInstance() {
}
class FftsPlusCaseSwitchCtxDef::_Internal {
 public:
};

FftsPlusCaseSwitchCtxDef::FftsPlusCaseSwitchCtxDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  successor_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.FftsPlusCaseSwitchCtxDef)
}
FftsPlusCaseSwitchCtxDef::FftsPlusCaseSwitchCtxDef(const FftsPlusCaseSwitchCtxDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      successor_list_(from.successor_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&successor_num_, &from.successor_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&load_addr1_offset_) -
    reinterpret_cast<char*>(&successor_num_)) + sizeof(load_addr1_offset_));
  // @@protoc_insertion_point(copy_constructor:domi.FftsPlusCaseSwitchCtxDef)
}

void FftsPlusCaseSwitchCtxDef::SharedCtor() {
  ::memset(&successor_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&load_addr1_offset_) -
      reinterpret_cast<char*>(&successor_num_)) + sizeof(load_addr1_offset_));
}

FftsPlusCaseSwitchCtxDef::~FftsPlusCaseSwitchCtxDef() {
  // @@protoc_insertion_point(destructor:domi.FftsPlusCaseSwitchCtxDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FftsPlusCaseSwitchCtxDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FftsPlusCaseSwitchCtxDef::ArenaDtor(void* object) {
  FftsPlusCaseSwitchCtxDef* _this = reinterpret_cast< FftsPlusCaseSwitchCtxDef* >(object);
  (void)_this;
}
void FftsPlusCaseSwitchCtxDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FftsPlusCaseSwitchCtxDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FftsPlusCaseSwitchCtxDef& FftsPlusCaseSwitchCtxDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FftsPlusCaseSwitchCtxDef_task_2eproto.base);
  return *internal_default_instance();
}


void FftsPlusCaseSwitchCtxDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.FftsPlusCaseSwitchCtxDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  successor_list_.Clear();
  ::memset(&successor_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&load_addr1_offset_) -
      reinterpret_cast<char*>(&successor_num_)) + sizeof(load_addr1_offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FftsPlusCaseSwitchCtxDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 successor_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          successor_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 aten = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          aten_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 start_label_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          start_label_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 label_list_len = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          label_list_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pred_cnt_init = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pred_cnt_init_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pred_cnt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          pred_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 successor_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_successor_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_successor_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 atm = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          atm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 thread_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          thread_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 thread_dim = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          thread_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ar_size = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ar_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 snoop = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          snoop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ar_cache = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ar_cache_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ar_prot = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ar_prot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 va = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          va_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 load_addr0_base = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          load_addr0_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ld0_en = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ld0_en_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 load_addr0_offset = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          load_addr0_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 load_addr1_base = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          load_addr1_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ld1_en = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ld1_en_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 load_addr1_offset = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          load_addr1_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FftsPlusCaseSwitchCtxDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.FftsPlusCaseSwitchCtxDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 successor_num = 1;
  if (this->successor_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_successor_num(), target);
  }

  // uint32 aten = 2;
  if (this->aten() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_aten(), target);
  }

  // uint32 start_label_id = 3;
  if (this->start_label_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_start_label_id(), target);
  }

  // uint32 label_list_len = 4;
  if (this->label_list_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_label_list_len(), target);
  }

  // uint32 pred_cnt_init = 5;
  if (this->pred_cnt_init() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_pred_cnt_init(), target);
  }

  // uint32 pred_cnt = 6;
  if (this->pred_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_pred_cnt(), target);
  }

  // repeated uint32 successor_list = 7;
  {
    int byte_size = _successor_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_successor_list(), byte_size, target);
    }
  }

  // uint32 atm = 8;
  if (this->atm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_atm(), target);
  }

  // uint32 thread_id = 9;
  if (this->thread_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_thread_id(), target);
  }

  // uint32 thread_dim = 10;
  if (this->thread_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_thread_dim(), target);
  }

  // uint32 ar_size = 11;
  if (this->ar_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_ar_size(), target);
  }

  // uint32 snoop = 12;
  if (this->snoop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_snoop(), target);
  }

  // uint32 ar_cache = 13;
  if (this->ar_cache() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_ar_cache(), target);
  }

  // uint32 ar_prot = 14;
  if (this->ar_prot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_ar_prot(), target);
  }

  // uint32 va = 15;
  if (this->va() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_va(), target);
  }

  // uint64 load_addr0_base = 16;
  if (this->load_addr0_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_load_addr0_base(), target);
  }

  // uint32 ld0_en = 17;
  if (this->ld0_en() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_ld0_en(), target);
  }

  // uint32 load_addr0_offset = 18;
  if (this->load_addr0_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_load_addr0_offset(), target);
  }

  // uint64 load_addr1_base = 19;
  if (this->load_addr1_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(19, this->_internal_load_addr1_base(), target);
  }

  // uint32 ld1_en = 20;
  if (this->ld1_en() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_ld1_en(), target);
  }

  // uint32 load_addr1_offset = 21;
  if (this->load_addr1_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_load_addr1_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.FftsPlusCaseSwitchCtxDef)
  return target;
}

size_t FftsPlusCaseSwitchCtxDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.FftsPlusCaseSwitchCtxDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 successor_list = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->successor_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _successor_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 successor_num = 1;
  if (this->successor_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_successor_num());
  }

  // uint32 aten = 2;
  if (this->aten() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aten());
  }

  // uint32 start_label_id = 3;
  if (this->start_label_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_start_label_id());
  }

  // uint32 label_list_len = 4;
  if (this->label_list_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_label_list_len());
  }

  // uint32 pred_cnt_init = 5;
  if (this->pred_cnt_init() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pred_cnt_init());
  }

  // uint32 pred_cnt = 6;
  if (this->pred_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pred_cnt());
  }

  // uint32 atm = 8;
  if (this->atm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_atm());
  }

  // uint32 thread_id = 9;
  if (this->thread_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thread_id());
  }

  // uint32 thread_dim = 10;
  if (this->thread_dim() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thread_dim());
  }

  // uint32 ar_size = 11;
  if (this->ar_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ar_size());
  }

  // uint32 snoop = 12;
  if (this->snoop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_snoop());
  }

  // uint32 ar_cache = 13;
  if (this->ar_cache() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ar_cache());
  }

  // uint32 ar_prot = 14;
  if (this->ar_prot() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ar_prot());
  }

  // uint32 va = 15;
  if (this->va() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_va());
  }

  // uint64 load_addr0_base = 16;
  if (this->load_addr0_base() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_load_addr0_base());
  }

  // uint32 ld0_en = 17;
  if (this->ld0_en() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ld0_en());
  }

  // uint32 load_addr0_offset = 18;
  if (this->load_addr0_offset() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_load_addr0_offset());
  }

  // uint64 load_addr1_base = 19;
  if (this->load_addr1_base() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_load_addr1_base());
  }

  // uint32 ld1_en = 20;
  if (this->ld1_en() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ld1_en());
  }

  // uint32 load_addr1_offset = 21;
  if (this->load_addr1_offset() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_load_addr1_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FftsPlusCaseSwitchCtxDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.FftsPlusCaseSwitchCtxDef)
  GOOGLE_DCHECK_NE(&from, this);
  const FftsPlusCaseSwitchCtxDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FftsPlusCaseSwitchCtxDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.FftsPlusCaseSwitchCtxDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.FftsPlusCaseSwitchCtxDef)
    MergeFrom(*source);
  }
}

void FftsPlusCaseSwitchCtxDef::MergeFrom(const FftsPlusCaseSwitchCtxDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.FftsPlusCaseSwitchCtxDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  successor_list_.MergeFrom(from.successor_list_);
  if (from.successor_num() != 0) {
    _internal_set_successor_num(from._internal_successor_num());
  }
  if (from.aten() != 0) {
    _internal_set_aten(from._internal_aten());
  }
  if (from.start_label_id() != 0) {
    _internal_set_start_label_id(from._internal_start_label_id());
  }
  if (from.label_list_len() != 0) {
    _internal_set_label_list_len(from._internal_label_list_len());
  }
  if (from.pred_cnt_init() != 0) {
    _internal_set_pred_cnt_init(from._internal_pred_cnt_init());
  }
  if (from.pred_cnt() != 0) {
    _internal_set_pred_cnt(from._internal_pred_cnt());
  }
  if (from.atm() != 0) {
    _internal_set_atm(from._internal_atm());
  }
  if (from.thread_id() != 0) {
    _internal_set_thread_id(from._internal_thread_id());
  }
  if (from.thread_dim() != 0) {
    _internal_set_thread_dim(from._internal_thread_dim());
  }
  if (from.ar_size() != 0) {
    _internal_set_ar_size(from._internal_ar_size());
  }
  if (from.snoop() != 0) {
    _internal_set_snoop(from._internal_snoop());
  }
  if (from.ar_cache() != 0) {
    _internal_set_ar_cache(from._internal_ar_cache());
  }
  if (from.ar_prot() != 0) {
    _internal_set_ar_prot(from._internal_ar_prot());
  }
  if (from.va() != 0) {
    _internal_set_va(from._internal_va());
  }
  if (from.load_addr0_base() != 0) {
    _internal_set_load_addr0_base(from._internal_load_addr0_base());
  }
  if (from.ld0_en() != 0) {
    _internal_set_ld0_en(from._internal_ld0_en());
  }
  if (from.load_addr0_offset() != 0) {
    _internal_set_load_addr0_offset(from._internal_load_addr0_offset());
  }
  if (from.load_addr1_base() != 0) {
    _internal_set_load_addr1_base(from._internal_load_addr1_base());
  }
  if (from.ld1_en() != 0) {
    _internal_set_ld1_en(from._internal_ld1_en());
  }
  if (from.load_addr1_offset() != 0) {
    _internal_set_load_addr1_offset(from._internal_load_addr1_offset());
  }
}

void FftsPlusCaseSwitchCtxDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.FftsPlusCaseSwitchCtxDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FftsPlusCaseSwitchCtxDef::CopyFrom(const FftsPlusCaseSwitchCtxDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.FftsPlusCaseSwitchCtxDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FftsPlusCaseSwitchCtxDef::IsInitialized() const {
  return true;
}

void FftsPlusCaseSwitchCtxDef::InternalSwap(FftsPlusCaseSwitchCtxDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  successor_list_.InternalSwap(&other->successor_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FftsPlusCaseSwitchCtxDef, load_addr1_offset_)
      + sizeof(FftsPlusCaseSwitchCtxDef::load_addr1_offset_)
      - PROTOBUF_FIELD_OFFSET(FftsPlusCaseSwitchCtxDef, successor_num_)>(
          reinterpret_cast<char*>(&successor_num_),
          reinterpret_cast<char*>(&other->successor_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FftsPlusCaseSwitchCtxDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FftsPlusCaseDefaultCtxDef::InitAsDefaultInstance() {
}
class FftsPlusCaseDefaultCtxDef::_Internal {
 public:
};

FftsPlusCaseDefaultCtxDef::FftsPlusCaseDefaultCtxDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  successor_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.FftsPlusCaseDefaultCtxDef)
}
FftsPlusCaseDefaultCtxDef::FftsPlusCaseDefaultCtxDef(const FftsPlusCaseDefaultCtxDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      successor_list_(from.successor_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&successor_num_, &from.successor_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&pred_cnt_) -
    reinterpret_cast<char*>(&successor_num_)) + sizeof(pred_cnt_));
  // @@protoc_insertion_point(copy_constructor:domi.FftsPlusCaseDefaultCtxDef)
}

void FftsPlusCaseDefaultCtxDef::SharedCtor() {
  ::memset(&successor_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pred_cnt_) -
      reinterpret_cast<char*>(&successor_num_)) + sizeof(pred_cnt_));
}

FftsPlusCaseDefaultCtxDef::~FftsPlusCaseDefaultCtxDef() {
  // @@protoc_insertion_point(destructor:domi.FftsPlusCaseDefaultCtxDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FftsPlusCaseDefaultCtxDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FftsPlusCaseDefaultCtxDef::ArenaDtor(void* object) {
  FftsPlusCaseDefaultCtxDef* _this = reinterpret_cast< FftsPlusCaseDefaultCtxDef* >(object);
  (void)_this;
}
void FftsPlusCaseDefaultCtxDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FftsPlusCaseDefaultCtxDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FftsPlusCaseDefaultCtxDef& FftsPlusCaseDefaultCtxDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FftsPlusCaseDefaultCtxDef_task_2eproto.base);
  return *internal_default_instance();
}


void FftsPlusCaseDefaultCtxDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.FftsPlusCaseDefaultCtxDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  successor_list_.Clear();
  ::memset(&successor_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pred_cnt_) -
      reinterpret_cast<char*>(&successor_num_)) + sizeof(pred_cnt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FftsPlusCaseDefaultCtxDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 successor_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          successor_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 aten = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          aten_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 start_label_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          start_label_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 label_list_len = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          label_list_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pred_cnt_init = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pred_cnt_init_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pred_cnt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          pred_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 successor_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_successor_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_successor_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FftsPlusCaseDefaultCtxDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.FftsPlusCaseDefaultCtxDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 successor_num = 1;
  if (this->successor_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_successor_num(), target);
  }

  // uint32 aten = 2;
  if (this->aten() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_aten(), target);
  }

  // uint32 start_label_id = 3;
  if (this->start_label_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_start_label_id(), target);
  }

  // uint32 label_list_len = 4;
  if (this->label_list_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_label_list_len(), target);
  }

  // uint32 pred_cnt_init = 5;
  if (this->pred_cnt_init() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_pred_cnt_init(), target);
  }

  // uint32 pred_cnt = 6;
  if (this->pred_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_pred_cnt(), target);
  }

  // repeated uint32 successor_list = 7;
  {
    int byte_size = _successor_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_successor_list(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.FftsPlusCaseDefaultCtxDef)
  return target;
}

size_t FftsPlusCaseDefaultCtxDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.FftsPlusCaseDefaultCtxDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 successor_list = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->successor_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _successor_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 successor_num = 1;
  if (this->successor_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_successor_num());
  }

  // uint32 aten = 2;
  if (this->aten() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aten());
  }

  // uint32 start_label_id = 3;
  if (this->start_label_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_start_label_id());
  }

  // uint32 label_list_len = 4;
  if (this->label_list_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_label_list_len());
  }

  // uint32 pred_cnt_init = 5;
  if (this->pred_cnt_init() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pred_cnt_init());
  }

  // uint32 pred_cnt = 6;
  if (this->pred_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pred_cnt());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FftsPlusCaseDefaultCtxDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.FftsPlusCaseDefaultCtxDef)
  GOOGLE_DCHECK_NE(&from, this);
  const FftsPlusCaseDefaultCtxDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FftsPlusCaseDefaultCtxDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.FftsPlusCaseDefaultCtxDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.FftsPlusCaseDefaultCtxDef)
    MergeFrom(*source);
  }
}

void FftsPlusCaseDefaultCtxDef::MergeFrom(const FftsPlusCaseDefaultCtxDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.FftsPlusCaseDefaultCtxDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  successor_list_.MergeFrom(from.successor_list_);
  if (from.successor_num() != 0) {
    _internal_set_successor_num(from._internal_successor_num());
  }
  if (from.aten() != 0) {
    _internal_set_aten(from._internal_aten());
  }
  if (from.start_label_id() != 0) {
    _internal_set_start_label_id(from._internal_start_label_id());
  }
  if (from.label_list_len() != 0) {
    _internal_set_label_list_len(from._internal_label_list_len());
  }
  if (from.pred_cnt_init() != 0) {
    _internal_set_pred_cnt_init(from._internal_pred_cnt_init());
  }
  if (from.pred_cnt() != 0) {
    _internal_set_pred_cnt(from._internal_pred_cnt());
  }
}

void FftsPlusCaseDefaultCtxDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.FftsPlusCaseDefaultCtxDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FftsPlusCaseDefaultCtxDef::CopyFrom(const FftsPlusCaseDefaultCtxDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.FftsPlusCaseDefaultCtxDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FftsPlusCaseDefaultCtxDef::IsInitialized() const {
  return true;
}

void FftsPlusCaseDefaultCtxDef::InternalSwap(FftsPlusCaseDefaultCtxDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  successor_list_.InternalSwap(&other->successor_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FftsPlusCaseDefaultCtxDef, pred_cnt_)
      + sizeof(FftsPlusCaseDefaultCtxDef::pred_cnt_)
      - PROTOBUF_FIELD_OFFSET(FftsPlusCaseDefaultCtxDef, successor_num_)>(
          reinterpret_cast<char*>(&successor_num_),
          reinterpret_cast<char*>(&other->successor_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FftsPlusCaseDefaultCtxDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FftsPlusCondSwitchCtxDef::InitAsDefaultInstance() {
}
class FftsPlusCondSwitchCtxDef::_Internal {
 public:
};

FftsPlusCondSwitchCtxDef::FftsPlusCondSwitchCtxDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  true_successor_list_(arena),
  false_successor_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.FftsPlusCondSwitchCtxDef)
}
FftsPlusCondSwitchCtxDef::FftsPlusCondSwitchCtxDef(const FftsPlusCondSwitchCtxDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      true_successor_list_(from.true_successor_list_),
      false_successor_list_(from.false_successor_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&true_successor_num_, &from.true_successor_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmp_value_2_) -
    reinterpret_cast<char*>(&true_successor_num_)) + sizeof(cmp_value_2_));
  // @@protoc_insertion_point(copy_constructor:domi.FftsPlusCondSwitchCtxDef)
}

void FftsPlusCondSwitchCtxDef::SharedCtor() {
  ::memset(&true_successor_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmp_value_2_) -
      reinterpret_cast<char*>(&true_successor_num_)) + sizeof(cmp_value_2_));
}

FftsPlusCondSwitchCtxDef::~FftsPlusCondSwitchCtxDef() {
  // @@protoc_insertion_point(destructor:domi.FftsPlusCondSwitchCtxDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FftsPlusCondSwitchCtxDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FftsPlusCondSwitchCtxDef::ArenaDtor(void* object) {
  FftsPlusCondSwitchCtxDef* _this = reinterpret_cast< FftsPlusCondSwitchCtxDef* >(object);
  (void)_this;
}
void FftsPlusCondSwitchCtxDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FftsPlusCondSwitchCtxDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FftsPlusCondSwitchCtxDef& FftsPlusCondSwitchCtxDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FftsPlusCondSwitchCtxDef_task_2eproto.base);
  return *internal_default_instance();
}


void FftsPlusCondSwitchCtxDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.FftsPlusCondSwitchCtxDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  true_successor_list_.Clear();
  false_successor_list_.Clear();
  ::memset(&true_successor_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmp_value_2_) -
      reinterpret_cast<char*>(&true_successor_num_)) + sizeof(cmp_value_2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FftsPlusCondSwitchCtxDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 true_successor_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          true_successor_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 false_successor_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          false_successor_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 aten = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          aten_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 condition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          condition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pred_cnt_init = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pred_cnt_init_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pred_cnt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          pred_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 true_successor_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_true_successor_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_true_successor_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 false_successor_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_false_successor_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_false_successor_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 atm = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          atm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 thread_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          thread_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 thread_dim = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          thread_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ar_size = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ar_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 snoop = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          snoop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ar_cache = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ar_cache_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ar_prot = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ar_prot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 va = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          va_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 load_addr0_base = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          load_addr0_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ld0_en = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ld0_en_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 load_addr0_offset = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          load_addr0_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 load_addr1_base = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          load_addr1_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ld1_en = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ld1_en_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 load_addr1_offset = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          load_addr1_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cmp_value_1 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          cmp_value_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cmp_value_2 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          cmp_value_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FftsPlusCondSwitchCtxDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.FftsPlusCondSwitchCtxDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 true_successor_num = 1;
  if (this->true_successor_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_true_successor_num(), target);
  }

  // uint32 false_successor_num = 2;
  if (this->false_successor_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_false_successor_num(), target);
  }

  // uint32 aten = 3;
  if (this->aten() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_aten(), target);
  }

  // uint32 condition = 4;
  if (this->condition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_condition(), target);
  }

  // uint32 pred_cnt_init = 5;
  if (this->pred_cnt_init() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_pred_cnt_init(), target);
  }

  // uint32 pred_cnt = 6;
  if (this->pred_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_pred_cnt(), target);
  }

  // repeated uint32 true_successor_list = 7;
  {
    int byte_size = _true_successor_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_true_successor_list(), byte_size, target);
    }
  }

  // repeated uint32 false_successor_list = 8;
  {
    int byte_size = _false_successor_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          8, _internal_false_successor_list(), byte_size, target);
    }
  }

  // uint32 atm = 9;
  if (this->atm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_atm(), target);
  }

  // uint32 thread_id = 10;
  if (this->thread_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_thread_id(), target);
  }

  // uint32 thread_dim = 11;
  if (this->thread_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_thread_dim(), target);
  }

  // uint32 ar_size = 12;
  if (this->ar_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_ar_size(), target);
  }

  // uint32 snoop = 13;
  if (this->snoop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_snoop(), target);
  }

  // uint32 ar_cache = 14;
  if (this->ar_cache() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_ar_cache(), target);
  }

  // uint32 ar_prot = 15;
  if (this->ar_prot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_ar_prot(), target);
  }

  // uint32 va = 16;
  if (this->va() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_va(), target);
  }

  // uint64 load_addr0_base = 17;
  if (this->load_addr0_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_load_addr0_base(), target);
  }

  // uint32 ld0_en = 18;
  if (this->ld0_en() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_ld0_en(), target);
  }

  // uint32 load_addr0_offset = 19;
  if (this->load_addr0_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_load_addr0_offset(), target);
  }

  // uint64 load_addr1_base = 20;
  if (this->load_addr1_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(20, this->_internal_load_addr1_base(), target);
  }

  // uint32 ld1_en = 21;
  if (this->ld1_en() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_ld1_en(), target);
  }

  // uint32 load_addr1_offset = 22;
  if (this->load_addr1_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_load_addr1_offset(), target);
  }

  // uint32 cmp_value_1 = 23;
  if (this->cmp_value_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_cmp_value_1(), target);
  }

  // uint32 cmp_value_2 = 24;
  if (this->cmp_value_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_cmp_value_2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.FftsPlusCondSwitchCtxDef)
  return target;
}

size_t FftsPlusCondSwitchCtxDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.FftsPlusCondSwitchCtxDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 true_successor_list = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->true_successor_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _true_successor_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 false_successor_list = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->false_successor_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _false_successor_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 true_successor_num = 1;
  if (this->true_successor_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_true_successor_num());
  }

  // uint32 false_successor_num = 2;
  if (this->false_successor_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_false_successor_num());
  }

  // uint32 aten = 3;
  if (this->aten() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aten());
  }

  // uint32 condition = 4;
  if (this->condition() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_condition());
  }

  // uint32 pred_cnt_init = 5;
  if (this->pred_cnt_init() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pred_cnt_init());
  }

  // uint32 pred_cnt = 6;
  if (this->pred_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pred_cnt());
  }

  // uint32 atm = 9;
  if (this->atm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_atm());
  }

  // uint32 thread_id = 10;
  if (this->thread_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thread_id());
  }

  // uint32 thread_dim = 11;
  if (this->thread_dim() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thread_dim());
  }

  // uint32 ar_size = 12;
  if (this->ar_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ar_size());
  }

  // uint32 snoop = 13;
  if (this->snoop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_snoop());
  }

  // uint32 ar_cache = 14;
  if (this->ar_cache() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ar_cache());
  }

  // uint32 ar_prot = 15;
  if (this->ar_prot() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ar_prot());
  }

  // uint32 va = 16;
  if (this->va() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_va());
  }

  // uint64 load_addr0_base = 17;
  if (this->load_addr0_base() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_load_addr0_base());
  }

  // uint32 ld0_en = 18;
  if (this->ld0_en() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ld0_en());
  }

  // uint32 load_addr0_offset = 19;
  if (this->load_addr0_offset() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_load_addr0_offset());
  }

  // uint64 load_addr1_base = 20;
  if (this->load_addr1_base() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_load_addr1_base());
  }

  // uint32 ld1_en = 21;
  if (this->ld1_en() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ld1_en());
  }

  // uint32 load_addr1_offset = 22;
  if (this->load_addr1_offset() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_load_addr1_offset());
  }

  // uint32 cmp_value_1 = 23;
  if (this->cmp_value_1() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cmp_value_1());
  }

  // uint32 cmp_value_2 = 24;
  if (this->cmp_value_2() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cmp_value_2());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FftsPlusCondSwitchCtxDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.FftsPlusCondSwitchCtxDef)
  GOOGLE_DCHECK_NE(&from, this);
  const FftsPlusCondSwitchCtxDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FftsPlusCondSwitchCtxDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.FftsPlusCondSwitchCtxDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.FftsPlusCondSwitchCtxDef)
    MergeFrom(*source);
  }
}

void FftsPlusCondSwitchCtxDef::MergeFrom(const FftsPlusCondSwitchCtxDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.FftsPlusCondSwitchCtxDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  true_successor_list_.MergeFrom(from.true_successor_list_);
  false_successor_list_.MergeFrom(from.false_successor_list_);
  if (from.true_successor_num() != 0) {
    _internal_set_true_successor_num(from._internal_true_successor_num());
  }
  if (from.false_successor_num() != 0) {
    _internal_set_false_successor_num(from._internal_false_successor_num());
  }
  if (from.aten() != 0) {
    _internal_set_aten(from._internal_aten());
  }
  if (from.condition() != 0) {
    _internal_set_condition(from._internal_condition());
  }
  if (from.pred_cnt_init() != 0) {
    _internal_set_pred_cnt_init(from._internal_pred_cnt_init());
  }
  if (from.pred_cnt() != 0) {
    _internal_set_pred_cnt(from._internal_pred_cnt());
  }
  if (from.atm() != 0) {
    _internal_set_atm(from._internal_atm());
  }
  if (from.thread_id() != 0) {
    _internal_set_thread_id(from._internal_thread_id());
  }
  if (from.thread_dim() != 0) {
    _internal_set_thread_dim(from._internal_thread_dim());
  }
  if (from.ar_size() != 0) {
    _internal_set_ar_size(from._internal_ar_size());
  }
  if (from.snoop() != 0) {
    _internal_set_snoop(from._internal_snoop());
  }
  if (from.ar_cache() != 0) {
    _internal_set_ar_cache(from._internal_ar_cache());
  }
  if (from.ar_prot() != 0) {
    _internal_set_ar_prot(from._internal_ar_prot());
  }
  if (from.va() != 0) {
    _internal_set_va(from._internal_va());
  }
  if (from.load_addr0_base() != 0) {
    _internal_set_load_addr0_base(from._internal_load_addr0_base());
  }
  if (from.ld0_en() != 0) {
    _internal_set_ld0_en(from._internal_ld0_en());
  }
  if (from.load_addr0_offset() != 0) {
    _internal_set_load_addr0_offset(from._internal_load_addr0_offset());
  }
  if (from.load_addr1_base() != 0) {
    _internal_set_load_addr1_base(from._internal_load_addr1_base());
  }
  if (from.ld1_en() != 0) {
    _internal_set_ld1_en(from._internal_ld1_en());
  }
  if (from.load_addr1_offset() != 0) {
    _internal_set_load_addr1_offset(from._internal_load_addr1_offset());
  }
  if (from.cmp_value_1() != 0) {
    _internal_set_cmp_value_1(from._internal_cmp_value_1());
  }
  if (from.cmp_value_2() != 0) {
    _internal_set_cmp_value_2(from._internal_cmp_value_2());
  }
}

void FftsPlusCondSwitchCtxDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.FftsPlusCondSwitchCtxDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FftsPlusCondSwitchCtxDef::CopyFrom(const FftsPlusCondSwitchCtxDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.FftsPlusCondSwitchCtxDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FftsPlusCondSwitchCtxDef::IsInitialized() const {
  return true;
}

void FftsPlusCondSwitchCtxDef::InternalSwap(FftsPlusCondSwitchCtxDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  true_successor_list_.InternalSwap(&other->true_successor_list_);
  false_successor_list_.InternalSwap(&other->false_successor_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FftsPlusCondSwitchCtxDef, cmp_value_2_)
      + sizeof(FftsPlusCondSwitchCtxDef::cmp_value_2_)
      - PROTOBUF_FIELD_OFFSET(FftsPlusCondSwitchCtxDef, true_successor_num_)>(
          reinterpret_cast<char*>(&true_successor_num_),
          reinterpret_cast<char*>(&other->true_successor_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FftsPlusCondSwitchCtxDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FftsPlusCachePersistCtxDef::InitAsDefaultInstance() {
}
class FftsPlusCachePersistCtxDef::_Internal {
 public:
};

FftsPlusCachePersistCtxDef::FftsPlusCachePersistCtxDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  successor_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.FftsPlusCachePersistCtxDef)
}
FftsPlusCachePersistCtxDef::FftsPlusCachePersistCtxDef(const FftsPlusCachePersistCtxDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      successor_list_(from.successor_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&successor_num_, &from.successor_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&persistent_id_) -
    reinterpret_cast<char*>(&successor_num_)) + sizeof(persistent_id_));
  // @@protoc_insertion_point(copy_constructor:domi.FftsPlusCachePersistCtxDef)
}

void FftsPlusCachePersistCtxDef::SharedCtor() {
  ::memset(&successor_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&persistent_id_) -
      reinterpret_cast<char*>(&successor_num_)) + sizeof(persistent_id_));
}

FftsPlusCachePersistCtxDef::~FftsPlusCachePersistCtxDef() {
  // @@protoc_insertion_point(destructor:domi.FftsPlusCachePersistCtxDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FftsPlusCachePersistCtxDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FftsPlusCachePersistCtxDef::ArenaDtor(void* object) {
  FftsPlusCachePersistCtxDef* _this = reinterpret_cast< FftsPlusCachePersistCtxDef* >(object);
  (void)_this;
}
void FftsPlusCachePersistCtxDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FftsPlusCachePersistCtxDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FftsPlusCachePersistCtxDef& FftsPlusCachePersistCtxDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FftsPlusCachePersistCtxDef_task_2eproto.base);
  return *internal_default_instance();
}


void FftsPlusCachePersistCtxDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.FftsPlusCachePersistCtxDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  successor_list_.Clear();
  ::memset(&successor_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&persistent_id_) -
      reinterpret_cast<char*>(&successor_num_)) + sizeof(persistent_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FftsPlusCachePersistCtxDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 successor_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          successor_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 aten = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          aten_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prefetch_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          prefetch_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pred_cnt_init = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pred_cnt_init_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pred_cnt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pred_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 successor_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_successor_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_successor_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 persistent_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          persistent_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 persistent_en = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          persistent_en_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 persistent_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          persistent_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FftsPlusCachePersistCtxDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.FftsPlusCachePersistCtxDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 successor_num = 1;
  if (this->successor_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_successor_num(), target);
  }

  // uint32 aten = 2;
  if (this->aten() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_aten(), target);
  }

  // uint32 prefetch_config = 3;
  if (this->prefetch_config() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_prefetch_config(), target);
  }

  // uint32 pred_cnt_init = 4;
  if (this->pred_cnt_init() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_pred_cnt_init(), target);
  }

  // uint32 pred_cnt = 5;
  if (this->pred_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_pred_cnt(), target);
  }

  // repeated uint32 successor_list = 6;
  {
    int byte_size = _successor_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_successor_list(), byte_size, target);
    }
  }

  // uint32 persistent_size = 7;
  if (this->persistent_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_persistent_size(), target);
  }

  // uint32 persistent_en = 8;
  if (this->persistent_en() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_persistent_en(), target);
  }

  // uint32 persistent_id = 9;
  if (this->persistent_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_persistent_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.FftsPlusCachePersistCtxDef)
  return target;
}

size_t FftsPlusCachePersistCtxDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.FftsPlusCachePersistCtxDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 successor_list = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->successor_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _successor_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 successor_num = 1;
  if (this->successor_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_successor_num());
  }

  // uint32 aten = 2;
  if (this->aten() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aten());
  }

  // uint32 prefetch_config = 3;
  if (this->prefetch_config() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prefetch_config());
  }

  // uint32 pred_cnt_init = 4;
  if (this->pred_cnt_init() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pred_cnt_init());
  }

  // uint32 pred_cnt = 5;
  if (this->pred_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pred_cnt());
  }

  // uint32 persistent_size = 7;
  if (this->persistent_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_persistent_size());
  }

  // uint32 persistent_en = 8;
  if (this->persistent_en() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_persistent_en());
  }

  // uint32 persistent_id = 9;
  if (this->persistent_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_persistent_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FftsPlusCachePersistCtxDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.FftsPlusCachePersistCtxDef)
  GOOGLE_DCHECK_NE(&from, this);
  const FftsPlusCachePersistCtxDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FftsPlusCachePersistCtxDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.FftsPlusCachePersistCtxDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.FftsPlusCachePersistCtxDef)
    MergeFrom(*source);
  }
}

void FftsPlusCachePersistCtxDef::MergeFrom(const FftsPlusCachePersistCtxDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.FftsPlusCachePersistCtxDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  successor_list_.MergeFrom(from.successor_list_);
  if (from.successor_num() != 0) {
    _internal_set_successor_num(from._internal_successor_num());
  }
  if (from.aten() != 0) {
    _internal_set_aten(from._internal_aten());
  }
  if (from.prefetch_config() != 0) {
    _internal_set_prefetch_config(from._internal_prefetch_config());
  }
  if (from.pred_cnt_init() != 0) {
    _internal_set_pred_cnt_init(from._internal_pred_cnt_init());
  }
  if (from.pred_cnt() != 0) {
    _internal_set_pred_cnt(from._internal_pred_cnt());
  }
  if (from.persistent_size() != 0) {
    _internal_set_persistent_size(from._internal_persistent_size());
  }
  if (from.persistent_en() != 0) {
    _internal_set_persistent_en(from._internal_persistent_en());
  }
  if (from.persistent_id() != 0) {
    _internal_set_persistent_id(from._internal_persistent_id());
  }
}

void FftsPlusCachePersistCtxDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.FftsPlusCachePersistCtxDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FftsPlusCachePersistCtxDef::CopyFrom(const FftsPlusCachePersistCtxDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.FftsPlusCachePersistCtxDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FftsPlusCachePersistCtxDef::IsInitialized() const {
  return true;
}

void FftsPlusCachePersistCtxDef::InternalSwap(FftsPlusCachePersistCtxDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  successor_list_.InternalSwap(&other->successor_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FftsPlusCachePersistCtxDef, persistent_id_)
      + sizeof(FftsPlusCachePersistCtxDef::persistent_id_)
      - PROTOBUF_FIELD_OFFSET(FftsPlusCachePersistCtxDef, successor_num_)>(
          reinterpret_cast<char*>(&successor_num_),
          reinterpret_cast<char*>(&other->successor_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FftsPlusCachePersistCtxDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FftsPlusDsaCtxDef::InitAsDefaultInstance() {
  ::domi::_FftsPlusDsaCtxDef_default_instance_._instance.get_mutable()->args_ = const_cast< ::domi::DSATaskArgsDef*>(
      ::domi::DSATaskArgsDef::internal_default_instance());
}
class FftsPlusDsaCtxDef::_Internal {
 public:
  static const ::domi::DSATaskArgsDef& args(const FftsPlusDsaCtxDef* msg);
};

const ::domi::DSATaskArgsDef&
FftsPlusDsaCtxDef::_Internal::args(const FftsPlusDsaCtxDef* msg) {
  return *msg->args_;
}
FftsPlusDsaCtxDef::FftsPlusDsaCtxDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  successor_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.FftsPlusDsaCtxDef)
}
FftsPlusDsaCtxDef::FftsPlusDsaCtxDef(const FftsPlusDsaCtxDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      successor_list_(from.successor_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_args()) {
    args_ = new ::domi::DSATaskArgsDef(*from.args_);
  } else {
    args_ = nullptr;
  }
  ::memcpy(&successor_num_, &from.successor_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&random_count_value_or_ptr_) -
    reinterpret_cast<char*>(&successor_num_)) + sizeof(random_count_value_or_ptr_));
  // @@protoc_insertion_point(copy_constructor:domi.FftsPlusDsaCtxDef)
}

void FftsPlusDsaCtxDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FftsPlusDsaCtxDef_task_2eproto.base);
  ::memset(&args_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&random_count_value_or_ptr_) -
      reinterpret_cast<char*>(&args_)) + sizeof(random_count_value_or_ptr_));
}

FftsPlusDsaCtxDef::~FftsPlusDsaCtxDef() {
  // @@protoc_insertion_point(destructor:domi.FftsPlusDsaCtxDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FftsPlusDsaCtxDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete args_;
}

void FftsPlusDsaCtxDef::ArenaDtor(void* object) {
  FftsPlusDsaCtxDef* _this = reinterpret_cast< FftsPlusDsaCtxDef* >(object);
  (void)_this;
}
void FftsPlusDsaCtxDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FftsPlusDsaCtxDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FftsPlusDsaCtxDef& FftsPlusDsaCtxDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FftsPlusDsaCtxDef_task_2eproto.base);
  return *internal_default_instance();
}


void FftsPlusDsaCtxDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.FftsPlusDsaCtxDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  successor_list_.Clear();
  if (GetArena() == nullptr && args_ != nullptr) {
    delete args_;
  }
  args_ = nullptr;
  ::memset(&successor_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&random_count_value_or_ptr_) -
      reinterpret_cast<char*>(&successor_num_)) + sizeof(random_count_value_or_ptr_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FftsPlusDsaCtxDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 successor_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          successor_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 aten = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          aten_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pred_cnt_init = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pred_cnt_init_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pred_cnt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pred_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 successor_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_successor_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_successor_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 atm = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          atm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 address_offset = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          address_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 thread_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          thread_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 thread_dim = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          thread_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 start = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 distribution_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          distribution_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          data_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 alg_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          alg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 input_vld = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          input_vld_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 input_value_addr_flag = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          input_value_addr_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 input1_value_or_ptr = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          input1_value_or_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 input2_value_or_ptr = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          input2_value_or_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 seed_value_or_ptr = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          seed_value_or_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 random_count_value_or_ptr = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          random_count_value_or_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .domi.DSATaskArgsDef args = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_args(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FftsPlusDsaCtxDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.FftsPlusDsaCtxDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 successor_num = 1;
  if (this->successor_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_successor_num(), target);
  }

  // uint32 aten = 2;
  if (this->aten() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_aten(), target);
  }

  // uint32 pred_cnt_init = 3;
  if (this->pred_cnt_init() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pred_cnt_init(), target);
  }

  // uint32 pred_cnt = 4;
  if (this->pred_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_pred_cnt(), target);
  }

  // repeated uint32 successor_list = 5;
  {
    int byte_size = _successor_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_successor_list(), byte_size, target);
    }
  }

  // uint32 atm = 6;
  if (this->atm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_atm(), target);
  }

  // uint32 address_offset = 7;
  if (this->address_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_address_offset(), target);
  }

  // uint32 thread_id = 8;
  if (this->thread_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_thread_id(), target);
  }

  // uint32 thread_dim = 9;
  if (this->thread_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_thread_dim(), target);
  }

  // uint32 start = 10;
  if (this->start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_start(), target);
  }

  // uint32 distribution_type = 11;
  if (this->distribution_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_distribution_type(), target);
  }

  // uint32 data_type = 12;
  if (this->data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_data_type(), target);
  }

  // uint32 alg_type = 13;
  if (this->alg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_alg_type(), target);
  }

  // uint32 input_vld = 14;
  if (this->input_vld() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_input_vld(), target);
  }

  // uint32 input_value_addr_flag = 15;
  if (this->input_value_addr_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_input_value_addr_flag(), target);
  }

  // uint32 input1_value_or_ptr = 16;
  if (this->input1_value_or_ptr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_input1_value_or_ptr(), target);
  }

  // uint32 input2_value_or_ptr = 17;
  if (this->input2_value_or_ptr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_input2_value_or_ptr(), target);
  }

  // uint32 seed_value_or_ptr = 18;
  if (this->seed_value_or_ptr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_seed_value_or_ptr(), target);
  }

  // uint32 random_count_value_or_ptr = 19;
  if (this->random_count_value_or_ptr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_random_count_value_or_ptr(), target);
  }

  // .domi.DSATaskArgsDef args = 20;
  if (this->has_args()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::args(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.FftsPlusDsaCtxDef)
  return target;
}

size_t FftsPlusDsaCtxDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.FftsPlusDsaCtxDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 successor_list = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->successor_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _successor_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .domi.DSATaskArgsDef args = 20;
  if (this->has_args()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *args_);
  }

  // uint32 successor_num = 1;
  if (this->successor_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_successor_num());
  }

  // uint32 aten = 2;
  if (this->aten() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aten());
  }

  // uint32 pred_cnt_init = 3;
  if (this->pred_cnt_init() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pred_cnt_init());
  }

  // uint32 pred_cnt = 4;
  if (this->pred_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pred_cnt());
  }

  // uint32 atm = 6;
  if (this->atm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_atm());
  }

  // uint32 address_offset = 7;
  if (this->address_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_address_offset());
  }

  // uint32 thread_id = 8;
  if (this->thread_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thread_id());
  }

  // uint32 thread_dim = 9;
  if (this->thread_dim() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thread_dim());
  }

  // uint32 start = 10;
  if (this->start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_start());
  }

  // uint32 distribution_type = 11;
  if (this->distribution_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_distribution_type());
  }

  // uint32 data_type = 12;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_type());
  }

  // uint32 alg_type = 13;
  if (this->alg_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_alg_type());
  }

  // uint32 input_vld = 14;
  if (this->input_vld() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_input_vld());
  }

  // uint32 input_value_addr_flag = 15;
  if (this->input_value_addr_flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_input_value_addr_flag());
  }

  // uint32 input1_value_or_ptr = 16;
  if (this->input1_value_or_ptr() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_input1_value_or_ptr());
  }

  // uint32 input2_value_or_ptr = 17;
  if (this->input2_value_or_ptr() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_input2_value_or_ptr());
  }

  // uint32 seed_value_or_ptr = 18;
  if (this->seed_value_or_ptr() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seed_value_or_ptr());
  }

  // uint32 random_count_value_or_ptr = 19;
  if (this->random_count_value_or_ptr() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_random_count_value_or_ptr());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FftsPlusDsaCtxDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.FftsPlusDsaCtxDef)
  GOOGLE_DCHECK_NE(&from, this);
  const FftsPlusDsaCtxDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FftsPlusDsaCtxDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.FftsPlusDsaCtxDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.FftsPlusDsaCtxDef)
    MergeFrom(*source);
  }
}

void FftsPlusDsaCtxDef::MergeFrom(const FftsPlusDsaCtxDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.FftsPlusDsaCtxDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  successor_list_.MergeFrom(from.successor_list_);
  if (from.has_args()) {
    _internal_mutable_args()->::domi::DSATaskArgsDef::MergeFrom(from._internal_args());
  }
  if (from.successor_num() != 0) {
    _internal_set_successor_num(from._internal_successor_num());
  }
  if (from.aten() != 0) {
    _internal_set_aten(from._internal_aten());
  }
  if (from.pred_cnt_init() != 0) {
    _internal_set_pred_cnt_init(from._internal_pred_cnt_init());
  }
  if (from.pred_cnt() != 0) {
    _internal_set_pred_cnt(from._internal_pred_cnt());
  }
  if (from.atm() != 0) {
    _internal_set_atm(from._internal_atm());
  }
  if (from.address_offset() != 0) {
    _internal_set_address_offset(from._internal_address_offset());
  }
  if (from.thread_id() != 0) {
    _internal_set_thread_id(from._internal_thread_id());
  }
  if (from.thread_dim() != 0) {
    _internal_set_thread_dim(from._internal_thread_dim());
  }
  if (from.start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from.distribution_type() != 0) {
    _internal_set_distribution_type(from._internal_distribution_type());
  }
  if (from.data_type() != 0) {
    _internal_set_data_type(from._internal_data_type());
  }
  if (from.alg_type() != 0) {
    _internal_set_alg_type(from._internal_alg_type());
  }
  if (from.input_vld() != 0) {
    _internal_set_input_vld(from._internal_input_vld());
  }
  if (from.input_value_addr_flag() != 0) {
    _internal_set_input_value_addr_flag(from._internal_input_value_addr_flag());
  }
  if (from.input1_value_or_ptr() != 0) {
    _internal_set_input1_value_or_ptr(from._internal_input1_value_or_ptr());
  }
  if (from.input2_value_or_ptr() != 0) {
    _internal_set_input2_value_or_ptr(from._internal_input2_value_or_ptr());
  }
  if (from.seed_value_or_ptr() != 0) {
    _internal_set_seed_value_or_ptr(from._internal_seed_value_or_ptr());
  }
  if (from.random_count_value_or_ptr() != 0) {
    _internal_set_random_count_value_or_ptr(from._internal_random_count_value_or_ptr());
  }
}

void FftsPlusDsaCtxDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.FftsPlusDsaCtxDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FftsPlusDsaCtxDef::CopyFrom(const FftsPlusDsaCtxDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.FftsPlusDsaCtxDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FftsPlusDsaCtxDef::IsInitialized() const {
  return true;
}

void FftsPlusDsaCtxDef::InternalSwap(FftsPlusDsaCtxDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  successor_list_.InternalSwap(&other->successor_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FftsPlusDsaCtxDef, random_count_value_or_ptr_)
      + sizeof(FftsPlusDsaCtxDef::random_count_value_or_ptr_)
      - PROTOBUF_FIELD_OFFSET(FftsPlusDsaCtxDef, args_)>(
          reinterpret_cast<char*>(&args_),
          reinterpret_cast<char*>(&other->args_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FftsPlusDsaCtxDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CmoTaskDef::InitAsDefaultInstance() {
}
class CmoTaskDef::_Internal {
 public:
};

CmoTaskDef::CmoTaskDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.CmoTaskDef)
}
CmoTaskDef::CmoTaskDef(const CmoTaskDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cmo_type_, &from.cmo_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&strider_inner_) -
    reinterpret_cast<char*>(&cmo_type_)) + sizeof(strider_inner_));
  // @@protoc_insertion_point(copy_constructor:domi.CmoTaskDef)
}

void CmoTaskDef::SharedCtor() {
  ::memset(&cmo_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&strider_inner_) -
      reinterpret_cast<char*>(&cmo_type_)) + sizeof(strider_inner_));
}

CmoTaskDef::~CmoTaskDef() {
  // @@protoc_insertion_point(destructor:domi.CmoTaskDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CmoTaskDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CmoTaskDef::ArenaDtor(void* object) {
  CmoTaskDef* _this = reinterpret_cast< CmoTaskDef* >(object);
  (void)_this;
}
void CmoTaskDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CmoTaskDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CmoTaskDef& CmoTaskDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CmoTaskDef_task_2eproto.base);
  return *internal_default_instance();
}


void CmoTaskDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.CmoTaskDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cmo_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&strider_inner_) -
      reinterpret_cast<char*>(&cmo_type_)) + sizeof(strider_inner_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CmoTaskDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 cmo_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cmo_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 logic_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          logic_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 op_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          op_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 qos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          qos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 part_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          part_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pmg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          pmg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_inner = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          num_inner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_outer = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          num_outer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 length_inner = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          length_inner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 source_addr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          source_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 strider_outer = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          strider_outer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 strider_inner = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          strider_inner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CmoTaskDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.CmoTaskDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cmo_type = 1;
  if (this->cmo_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cmo_type(), target);
  }

  // uint32 logic_id = 2;
  if (this->logic_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_logic_id(), target);
  }

  // uint32 op_code = 3;
  if (this->op_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_op_code(), target);
  }

  // uint32 qos = 4;
  if (this->qos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_qos(), target);
  }

  // uint32 part_id = 5;
  if (this->part_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_part_id(), target);
  }

  // uint32 pmg = 6;
  if (this->pmg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_pmg(), target);
  }

  // uint32 num_inner = 7;
  if (this->num_inner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_num_inner(), target);
  }

  // uint32 num_outer = 8;
  if (this->num_outer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_num_outer(), target);
  }

  // uint32 length_inner = 9;
  if (this->length_inner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_length_inner(), target);
  }

  // uint64 source_addr = 10;
  if (this->source_addr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_source_addr(), target);
  }

  // uint32 strider_outer = 11;
  if (this->strider_outer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_strider_outer(), target);
  }

  // uint32 strider_inner = 12;
  if (this->strider_inner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_strider_inner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.CmoTaskDef)
  return target;
}

size_t CmoTaskDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.CmoTaskDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 cmo_type = 1;
  if (this->cmo_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cmo_type());
  }

  // uint32 logic_id = 2;
  if (this->logic_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_logic_id());
  }

  // uint32 op_code = 3;
  if (this->op_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_op_code());
  }

  // uint32 qos = 4;
  if (this->qos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_qos());
  }

  // uint32 part_id = 5;
  if (this->part_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_part_id());
  }

  // uint32 pmg = 6;
  if (this->pmg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pmg());
  }

  // uint32 num_inner = 7;
  if (this->num_inner() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_inner());
  }

  // uint32 num_outer = 8;
  if (this->num_outer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_outer());
  }

  // uint64 source_addr = 10;
  if (this->source_addr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_source_addr());
  }

  // uint32 length_inner = 9;
  if (this->length_inner() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_length_inner());
  }

  // uint32 strider_outer = 11;
  if (this->strider_outer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_strider_outer());
  }

  // uint32 strider_inner = 12;
  if (this->strider_inner() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_strider_inner());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmoTaskDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.CmoTaskDef)
  GOOGLE_DCHECK_NE(&from, this);
  const CmoTaskDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CmoTaskDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.CmoTaskDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.CmoTaskDef)
    MergeFrom(*source);
  }
}

void CmoTaskDef::MergeFrom(const CmoTaskDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.CmoTaskDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cmo_type() != 0) {
    _internal_set_cmo_type(from._internal_cmo_type());
  }
  if (from.logic_id() != 0) {
    _internal_set_logic_id(from._internal_logic_id());
  }
  if (from.op_code() != 0) {
    _internal_set_op_code(from._internal_op_code());
  }
  if (from.qos() != 0) {
    _internal_set_qos(from._internal_qos());
  }
  if (from.part_id() != 0) {
    _internal_set_part_id(from._internal_part_id());
  }
  if (from.pmg() != 0) {
    _internal_set_pmg(from._internal_pmg());
  }
  if (from.num_inner() != 0) {
    _internal_set_num_inner(from._internal_num_inner());
  }
  if (from.num_outer() != 0) {
    _internal_set_num_outer(from._internal_num_outer());
  }
  if (from.source_addr() != 0) {
    _internal_set_source_addr(from._internal_source_addr());
  }
  if (from.length_inner() != 0) {
    _internal_set_length_inner(from._internal_length_inner());
  }
  if (from.strider_outer() != 0) {
    _internal_set_strider_outer(from._internal_strider_outer());
  }
  if (from.strider_inner() != 0) {
    _internal_set_strider_inner(from._internal_strider_inner());
  }
}

void CmoTaskDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.CmoTaskDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmoTaskDef::CopyFrom(const CmoTaskDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.CmoTaskDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmoTaskDef::IsInitialized() const {
  return true;
}

void CmoTaskDef::InternalSwap(CmoTaskDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CmoTaskDef, strider_inner_)
      + sizeof(CmoTaskDef::strider_inner_)
      - PROTOBUF_FIELD_OFFSET(CmoTaskDef, cmo_type_)>(
          reinterpret_cast<char*>(&cmo_type_),
          reinterpret_cast<char*>(&other->cmo_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CmoTaskDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CmoBarrierTaskDef::InitAsDefaultInstance() {
}
class CmoBarrierTaskDef::_Internal {
 public:
};

CmoBarrierTaskDef::CmoBarrierTaskDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  barrier_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.CmoBarrierTaskDef)
}
CmoBarrierTaskDef::CmoBarrierTaskDef(const CmoBarrierTaskDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      barrier_info_(from.barrier_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  logic_id_num_ = from.logic_id_num_;
  // @@protoc_insertion_point(copy_constructor:domi.CmoBarrierTaskDef)
}

void CmoBarrierTaskDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CmoBarrierTaskDef_task_2eproto.base);
  logic_id_num_ = 0u;
}

CmoBarrierTaskDef::~CmoBarrierTaskDef() {
  // @@protoc_insertion_point(destructor:domi.CmoBarrierTaskDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CmoBarrierTaskDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CmoBarrierTaskDef::ArenaDtor(void* object) {
  CmoBarrierTaskDef* _this = reinterpret_cast< CmoBarrierTaskDef* >(object);
  (void)_this;
}
void CmoBarrierTaskDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CmoBarrierTaskDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CmoBarrierTaskDef& CmoBarrierTaskDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CmoBarrierTaskDef_task_2eproto.base);
  return *internal_default_instance();
}


void CmoBarrierTaskDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.CmoBarrierTaskDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  barrier_info_.Clear();
  logic_id_num_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CmoBarrierTaskDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 logic_id_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          logic_id_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .domi.CmoBarrierInfoDef barrier_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_barrier_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CmoBarrierTaskDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.CmoBarrierTaskDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 logic_id_num = 1;
  if (this->logic_id_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_logic_id_num(), target);
  }

  // repeated .domi.CmoBarrierInfoDef barrier_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_barrier_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_barrier_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.CmoBarrierTaskDef)
  return target;
}

size_t CmoBarrierTaskDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.CmoBarrierTaskDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .domi.CmoBarrierInfoDef barrier_info = 2;
  total_size += 1UL * this->_internal_barrier_info_size();
  for (const auto& msg : this->barrier_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 logic_id_num = 1;
  if (this->logic_id_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_logic_id_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmoBarrierTaskDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.CmoBarrierTaskDef)
  GOOGLE_DCHECK_NE(&from, this);
  const CmoBarrierTaskDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CmoBarrierTaskDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.CmoBarrierTaskDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.CmoBarrierTaskDef)
    MergeFrom(*source);
  }
}

void CmoBarrierTaskDef::MergeFrom(const CmoBarrierTaskDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.CmoBarrierTaskDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  barrier_info_.MergeFrom(from.barrier_info_);
  if (from.logic_id_num() != 0) {
    _internal_set_logic_id_num(from._internal_logic_id_num());
  }
}

void CmoBarrierTaskDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.CmoBarrierTaskDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmoBarrierTaskDef::CopyFrom(const CmoBarrierTaskDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.CmoBarrierTaskDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmoBarrierTaskDef::IsInitialized() const {
  return true;
}

void CmoBarrierTaskDef::InternalSwap(CmoBarrierTaskDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  barrier_info_.InternalSwap(&other->barrier_info_);
  swap(logic_id_num_, other->logic_id_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CmoBarrierTaskDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CmoBarrierInfoDef::InitAsDefaultInstance() {
}
class CmoBarrierInfoDef::_Internal {
 public:
};

CmoBarrierInfoDef::CmoBarrierInfoDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.CmoBarrierInfoDef)
}
CmoBarrierInfoDef::CmoBarrierInfoDef(const CmoBarrierInfoDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cmo_type_, &from.cmo_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&logic_id_) -
    reinterpret_cast<char*>(&cmo_type_)) + sizeof(logic_id_));
  // @@protoc_insertion_point(copy_constructor:domi.CmoBarrierInfoDef)
}

void CmoBarrierInfoDef::SharedCtor() {
  ::memset(&cmo_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logic_id_) -
      reinterpret_cast<char*>(&cmo_type_)) + sizeof(logic_id_));
}

CmoBarrierInfoDef::~CmoBarrierInfoDef() {
  // @@protoc_insertion_point(destructor:domi.CmoBarrierInfoDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CmoBarrierInfoDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CmoBarrierInfoDef::ArenaDtor(void* object) {
  CmoBarrierInfoDef* _this = reinterpret_cast< CmoBarrierInfoDef* >(object);
  (void)_this;
}
void CmoBarrierInfoDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CmoBarrierInfoDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CmoBarrierInfoDef& CmoBarrierInfoDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CmoBarrierInfoDef_task_2eproto.base);
  return *internal_default_instance();
}


void CmoBarrierInfoDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.CmoBarrierInfoDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cmo_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logic_id_) -
      reinterpret_cast<char*>(&cmo_type_)) + sizeof(logic_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CmoBarrierInfoDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 cmo_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cmo_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 logic_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          logic_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CmoBarrierInfoDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.CmoBarrierInfoDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cmo_type = 1;
  if (this->cmo_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cmo_type(), target);
  }

  // uint32 logic_id = 2;
  if (this->logic_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_logic_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.CmoBarrierInfoDef)
  return target;
}

size_t CmoBarrierInfoDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.CmoBarrierInfoDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 cmo_type = 1;
  if (this->cmo_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cmo_type());
  }

  // uint32 logic_id = 2;
  if (this->logic_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_logic_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmoBarrierInfoDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.CmoBarrierInfoDef)
  GOOGLE_DCHECK_NE(&from, this);
  const CmoBarrierInfoDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CmoBarrierInfoDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.CmoBarrierInfoDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.CmoBarrierInfoDef)
    MergeFrom(*source);
  }
}

void CmoBarrierInfoDef::MergeFrom(const CmoBarrierInfoDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.CmoBarrierInfoDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cmo_type() != 0) {
    _internal_set_cmo_type(from._internal_cmo_type());
  }
  if (from.logic_id() != 0) {
    _internal_set_logic_id(from._internal_logic_id());
  }
}

void CmoBarrierInfoDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.CmoBarrierInfoDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmoBarrierInfoDef::CopyFrom(const CmoBarrierInfoDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.CmoBarrierInfoDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmoBarrierInfoDef::IsInitialized() const {
  return true;
}

void CmoBarrierInfoDef::InternalSwap(CmoBarrierInfoDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CmoBarrierInfoDef, logic_id_)
      + sizeof(CmoBarrierInfoDef::logic_id_)
      - PROTOBUF_FIELD_OFFSET(CmoBarrierInfoDef, cmo_type_)>(
          reinterpret_cast<char*>(&cmo_type_),
          reinterpret_cast<char*>(&other->cmo_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CmoBarrierInfoDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NpuGetFloatStatusDef::InitAsDefaultInstance() {
}
class NpuGetFloatStatusDef::_Internal {
 public:
};

NpuGetFloatStatusDef::NpuGetFloatStatusDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.NpuGetFloatStatusDef)
}
NpuGetFloatStatusDef::NpuGetFloatStatusDef(const NpuGetFloatStatusDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&output_addr_, &from.output_addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&op_index_) -
    reinterpret_cast<char*>(&output_addr_)) + sizeof(op_index_));
  // @@protoc_insertion_point(copy_constructor:domi.NpuGetFloatStatusDef)
}

void NpuGetFloatStatusDef::SharedCtor() {
  ::memset(&output_addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_index_) -
      reinterpret_cast<char*>(&output_addr_)) + sizeof(op_index_));
}

NpuGetFloatStatusDef::~NpuGetFloatStatusDef() {
  // @@protoc_insertion_point(destructor:domi.NpuGetFloatStatusDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NpuGetFloatStatusDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NpuGetFloatStatusDef::ArenaDtor(void* object) {
  NpuGetFloatStatusDef* _this = reinterpret_cast< NpuGetFloatStatusDef* >(object);
  (void)_this;
}
void NpuGetFloatStatusDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NpuGetFloatStatusDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NpuGetFloatStatusDef& NpuGetFloatStatusDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NpuGetFloatStatusDef_task_2eproto.base);
  return *internal_default_instance();
}


void NpuGetFloatStatusDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.NpuGetFloatStatusDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&output_addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_index_) -
      reinterpret_cast<char*>(&output_addr_)) + sizeof(op_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NpuGetFloatStatusDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 output_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          output_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 output_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          output_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 op_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          op_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NpuGetFloatStatusDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.NpuGetFloatStatusDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 output_addr = 1;
  if (this->output_addr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_output_addr(), target);
  }

  // uint32 output_size = 2;
  if (this->output_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_output_size(), target);
  }

  // uint32 mode = 3;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mode(), target);
  }

  // uint32 op_index = 4;
  if (this->op_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_op_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.NpuGetFloatStatusDef)
  return target;
}

size_t NpuGetFloatStatusDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.NpuGetFloatStatusDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 output_addr = 1;
  if (this->output_addr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_output_addr());
  }

  // uint32 output_size = 2;
  if (this->output_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_output_size());
  }

  // uint32 mode = 3;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mode());
  }

  // uint32 op_index = 4;
  if (this->op_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_op_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NpuGetFloatStatusDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.NpuGetFloatStatusDef)
  GOOGLE_DCHECK_NE(&from, this);
  const NpuGetFloatStatusDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NpuGetFloatStatusDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.NpuGetFloatStatusDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.NpuGetFloatStatusDef)
    MergeFrom(*source);
  }
}

void NpuGetFloatStatusDef::MergeFrom(const NpuGetFloatStatusDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.NpuGetFloatStatusDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.output_addr() != 0) {
    _internal_set_output_addr(from._internal_output_addr());
  }
  if (from.output_size() != 0) {
    _internal_set_output_size(from._internal_output_size());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.op_index() != 0) {
    _internal_set_op_index(from._internal_op_index());
  }
}

void NpuGetFloatStatusDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.NpuGetFloatStatusDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpuGetFloatStatusDef::CopyFrom(const NpuGetFloatStatusDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.NpuGetFloatStatusDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpuGetFloatStatusDef::IsInitialized() const {
  return true;
}

void NpuGetFloatStatusDef::InternalSwap(NpuGetFloatStatusDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NpuGetFloatStatusDef, op_index_)
      + sizeof(NpuGetFloatStatusDef::op_index_)
      - PROTOBUF_FIELD_OFFSET(NpuGetFloatStatusDef, output_addr_)>(
          reinterpret_cast<char*>(&output_addr_),
          reinterpret_cast<char*>(&other->output_addr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NpuGetFloatStatusDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NpuClearFloatStatusDef::InitAsDefaultInstance() {
}
class NpuClearFloatStatusDef::_Internal {
 public:
};

NpuClearFloatStatusDef::NpuClearFloatStatusDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.NpuClearFloatStatusDef)
}
NpuClearFloatStatusDef::NpuClearFloatStatusDef(const NpuClearFloatStatusDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&op_index_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(op_index_));
  // @@protoc_insertion_point(copy_constructor:domi.NpuClearFloatStatusDef)
}

void NpuClearFloatStatusDef::SharedCtor() {
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_index_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(op_index_));
}

NpuClearFloatStatusDef::~NpuClearFloatStatusDef() {
  // @@protoc_insertion_point(destructor:domi.NpuClearFloatStatusDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NpuClearFloatStatusDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NpuClearFloatStatusDef::ArenaDtor(void* object) {
  NpuClearFloatStatusDef* _this = reinterpret_cast< NpuClearFloatStatusDef* >(object);
  (void)_this;
}
void NpuClearFloatStatusDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NpuClearFloatStatusDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NpuClearFloatStatusDef& NpuClearFloatStatusDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NpuClearFloatStatusDef_task_2eproto.base);
  return *internal_default_instance();
}


void NpuClearFloatStatusDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.NpuClearFloatStatusDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_index_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(op_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NpuClearFloatStatusDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 op_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          op_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NpuClearFloatStatusDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.NpuClearFloatStatusDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mode = 1;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mode(), target);
  }

  // uint32 op_index = 2;
  if (this->op_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_op_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.NpuClearFloatStatusDef)
  return target;
}

size_t NpuClearFloatStatusDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.NpuClearFloatStatusDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mode());
  }

  // uint32 op_index = 2;
  if (this->op_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_op_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NpuClearFloatStatusDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.NpuClearFloatStatusDef)
  GOOGLE_DCHECK_NE(&from, this);
  const NpuClearFloatStatusDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NpuClearFloatStatusDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.NpuClearFloatStatusDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.NpuClearFloatStatusDef)
    MergeFrom(*source);
  }
}

void NpuClearFloatStatusDef::MergeFrom(const NpuClearFloatStatusDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.NpuClearFloatStatusDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.op_index() != 0) {
    _internal_set_op_index(from._internal_op_index());
  }
}

void NpuClearFloatStatusDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.NpuClearFloatStatusDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpuClearFloatStatusDef::CopyFrom(const NpuClearFloatStatusDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.NpuClearFloatStatusDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpuClearFloatStatusDef::IsInitialized() const {
  return true;
}

void NpuClearFloatStatusDef::InternalSwap(NpuClearFloatStatusDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NpuClearFloatStatusDef, op_index_)
      + sizeof(NpuClearFloatStatusDef::op_index_)
      - PROTOBUF_FIELD_OFFSET(NpuClearFloatStatusDef, mode_)>(
          reinterpret_cast<char*>(&mode_),
          reinterpret_cast<char*>(&other->mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NpuClearFloatStatusDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DvppTaskDef::InitAsDefaultInstance() {
}
class DvppTaskDef::_Internal {
 public:
};

DvppTaskDef::DvppTaskDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:domi.DvppTaskDef)
}
DvppTaskDef::DvppTaskDef(const DvppTaskDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  op_index_ = from.op_index_;
  // @@protoc_insertion_point(copy_constructor:domi.DvppTaskDef)
}

void DvppTaskDef::SharedCtor() {
  op_index_ = 0u;
}

DvppTaskDef::~DvppTaskDef() {
  // @@protoc_insertion_point(destructor:domi.DvppTaskDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DvppTaskDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DvppTaskDef::ArenaDtor(void* object) {
  DvppTaskDef* _this = reinterpret_cast< DvppTaskDef* >(object);
  (void)_this;
}
void DvppTaskDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DvppTaskDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DvppTaskDef& DvppTaskDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DvppTaskDef_task_2eproto.base);
  return *internal_default_instance();
}


void DvppTaskDef::Clear() {
// @@protoc_insertion_point(message_clear_start:domi.DvppTaskDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  op_index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DvppTaskDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 op_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          op_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DvppTaskDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:domi.DvppTaskDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 op_index = 1;
  if (this->op_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_op_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:domi.DvppTaskDef)
  return target;
}

size_t DvppTaskDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:domi.DvppTaskDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 op_index = 1;
  if (this->op_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_op_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DvppTaskDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:domi.DvppTaskDef)
  GOOGLE_DCHECK_NE(&from, this);
  const DvppTaskDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DvppTaskDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:domi.DvppTaskDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:domi.DvppTaskDef)
    MergeFrom(*source);
  }
}

void DvppTaskDef::MergeFrom(const DvppTaskDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:domi.DvppTaskDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.op_index() != 0) {
    _internal_set_op_index(from._internal_op_index());
  }
}

void DvppTaskDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:domi.DvppTaskDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DvppTaskDef::CopyFrom(const DvppTaskDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:domi.DvppTaskDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DvppTaskDef::IsInitialized() const {
  return true;
}

void DvppTaskDef::InternalSwap(DvppTaskDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(op_index_, other->op_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DvppTaskDef::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace domi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::domi::ModelTaskDef_AttrEntry_DoNotUse* Arena::CreateMaybeMessage< ::domi::ModelTaskDef_AttrEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::ModelTaskDef_AttrEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::ModelTaskDef* Arena::CreateMaybeMessage< ::domi::ModelTaskDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::ModelTaskDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::TaskDef* Arena::CreateMaybeMessage< ::domi::TaskDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::TaskDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::KernelDef* Arena::CreateMaybeMessage< ::domi::KernelDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::KernelDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::KernelDefWithHandle* Arena::CreateMaybeMessage< ::domi::KernelDefWithHandle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::KernelDefWithHandle >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::KernelContext* Arena::CreateMaybeMessage< ::domi::KernelContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::KernelContext >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::ArgsInfo* Arena::CreateMaybeMessage< ::domi::ArgsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::ArgsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::KernelExDef* Arena::CreateMaybeMessage< ::domi::KernelExDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::KernelExDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::KernelHcclDef* Arena::CreateMaybeMessage< ::domi::KernelHcclDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::KernelHcclDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::EventExDef* Arena::CreateMaybeMessage< ::domi::EventExDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::EventExDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::LogTimeStampDef* Arena::CreateMaybeMessage< ::domi::LogTimeStampDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::LogTimeStampDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::MemcpyAsyncDef* Arena::CreateMaybeMessage< ::domi::MemcpyAsyncDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::MemcpyAsyncDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::StreamSwitchDef* Arena::CreateMaybeMessage< ::domi::StreamSwitchDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::StreamSwitchDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::StreamActiveDef* Arena::CreateMaybeMessage< ::domi::StreamActiveDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::StreamActiveDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::StreamSwitchNDef* Arena::CreateMaybeMessage< ::domi::StreamSwitchNDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::StreamSwitchNDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::LabelSetDef* Arena::CreateMaybeMessage< ::domi::LabelSetDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::LabelSetDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::LabelGotoExDef* Arena::CreateMaybeMessage< ::domi::LabelGotoExDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::LabelGotoExDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::LabelSwitchByIndexDef* Arena::CreateMaybeMessage< ::domi::LabelSwitchByIndexDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::LabelSwitchByIndexDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::FftsTaskDef* Arena::CreateMaybeMessage< ::domi::FftsTaskDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::FftsTaskDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::FftsDescInfoDef* Arena::CreateMaybeMessage< ::domi::FftsDescInfoDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::FftsDescInfoDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::FftsSubTaskDef* Arena::CreateMaybeMessage< ::domi::FftsSubTaskDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::FftsSubTaskDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::TicketCacheDef* Arena::CreateMaybeMessage< ::domi::TicketCacheDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::TicketCacheDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::AutoThreadAicAivDef* Arena::CreateMaybeMessage< ::domi::AutoThreadAicAivDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::AutoThreadAicAivDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::AutoThreadCacheDef* Arena::CreateMaybeMessage< ::domi::AutoThreadCacheDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::AutoThreadCacheDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::AutoThreadPrefetchDef* Arena::CreateMaybeMessage< ::domi::AutoThreadPrefetchDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::AutoThreadPrefetchDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::ManualThreadAicAivDef* Arena::CreateMaybeMessage< ::domi::ManualThreadAicAivDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::ManualThreadAicAivDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::ManualThreadNopDef* Arena::CreateMaybeMessage< ::domi::ManualThreadNopDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::ManualThreadNopDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::ManualThreadCacheDef* Arena::CreateMaybeMessage< ::domi::ManualThreadCacheDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::ManualThreadCacheDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::ManualThreadDmuDef* Arena::CreateMaybeMessage< ::domi::ManualThreadDmuDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::ManualThreadDmuDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::ManualThreadDependencyDef* Arena::CreateMaybeMessage< ::domi::ManualThreadDependencyDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::ManualThreadDependencyDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::DSATaskDef* Arena::CreateMaybeMessage< ::domi::DSATaskDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::DSATaskDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::DSATaskArgsDef* Arena::CreateMaybeMessage< ::domi::DSATaskArgsDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::DSATaskArgsDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::FftsPlusTaskDef* Arena::CreateMaybeMessage< ::domi::FftsPlusTaskDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::FftsPlusTaskDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::AdditionalDataDef* Arena::CreateMaybeMessage< ::domi::AdditionalDataDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::AdditionalDataDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::FftsPlusSqeDef* Arena::CreateMaybeMessage< ::domi::FftsPlusSqeDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::FftsPlusSqeDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::StarsSqeHeaderDef* Arena::CreateMaybeMessage< ::domi::StarsSqeHeaderDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::StarsSqeHeaderDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::FftsPlusCtxDef* Arena::CreateMaybeMessage< ::domi::FftsPlusCtxDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::FftsPlusCtxDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::FftsPlusAicAivCtxDef* Arena::CreateMaybeMessage< ::domi::FftsPlusAicAivCtxDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::FftsPlusAicAivCtxDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::FftsPlusMixAicAivCtxDef* Arena::CreateMaybeMessage< ::domi::FftsPlusMixAicAivCtxDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::FftsPlusMixAicAivCtxDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::FftsPlusSdmaCtxDef* Arena::CreateMaybeMessage< ::domi::FftsPlusSdmaCtxDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::FftsPlusSdmaCtxDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::FftsPlusNotifyCtxDef* Arena::CreateMaybeMessage< ::domi::FftsPlusNotifyCtxDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::FftsPlusNotifyCtxDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::FftsPlusWriteValueCtxDef* Arena::CreateMaybeMessage< ::domi::FftsPlusWriteValueCtxDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::FftsPlusWriteValueCtxDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::FftsPlusAicpuCtxDef* Arena::CreateMaybeMessage< ::domi::FftsPlusAicpuCtxDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::FftsPlusAicpuCtxDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::aicpuKernelDef* Arena::CreateMaybeMessage< ::domi::aicpuKernelDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::aicpuKernelDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::FftsPlusDataCtxDef* Arena::CreateMaybeMessage< ::domi::FftsPlusDataCtxDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::FftsPlusDataCtxDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::FftsPlusAtStartCtxDef* Arena::CreateMaybeMessage< ::domi::FftsPlusAtStartCtxDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::FftsPlusAtStartCtxDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::FftsPlusAtEndCtxDef* Arena::CreateMaybeMessage< ::domi::FftsPlusAtEndCtxDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::FftsPlusAtEndCtxDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::FftsPlusLabelCtxDef* Arena::CreateMaybeMessage< ::domi::FftsPlusLabelCtxDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::FftsPlusLabelCtxDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::FftsPlusCaseSwitchCtxDef* Arena::CreateMaybeMessage< ::domi::FftsPlusCaseSwitchCtxDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::FftsPlusCaseSwitchCtxDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::FftsPlusCaseDefaultCtxDef* Arena::CreateMaybeMessage< ::domi::FftsPlusCaseDefaultCtxDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::FftsPlusCaseDefaultCtxDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::FftsPlusCondSwitchCtxDef* Arena::CreateMaybeMessage< ::domi::FftsPlusCondSwitchCtxDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::FftsPlusCondSwitchCtxDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::FftsPlusCachePersistCtxDef* Arena::CreateMaybeMessage< ::domi::FftsPlusCachePersistCtxDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::FftsPlusCachePersistCtxDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::FftsPlusDsaCtxDef* Arena::CreateMaybeMessage< ::domi::FftsPlusDsaCtxDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::FftsPlusDsaCtxDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::CmoTaskDef* Arena::CreateMaybeMessage< ::domi::CmoTaskDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::CmoTaskDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::CmoBarrierTaskDef* Arena::CreateMaybeMessage< ::domi::CmoBarrierTaskDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::CmoBarrierTaskDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::CmoBarrierInfoDef* Arena::CreateMaybeMessage< ::domi::CmoBarrierInfoDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::CmoBarrierInfoDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::NpuGetFloatStatusDef* Arena::CreateMaybeMessage< ::domi::NpuGetFloatStatusDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::NpuGetFloatStatusDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::NpuClearFloatStatusDef* Arena::CreateMaybeMessage< ::domi::NpuClearFloatStatusDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::NpuClearFloatStatusDef >(arena);
}
template<> PROTOBUF_NOINLINE ::domi::DvppTaskDef* Arena::CreateMaybeMessage< ::domi::DvppTaskDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::domi::DvppTaskDef >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
