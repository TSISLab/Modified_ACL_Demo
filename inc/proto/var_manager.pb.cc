// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: var_manager.proto

#include "var_manager.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_var_5fmanager_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BroadcastInfo_var_5fmanager_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_var_5fmanager_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BroadcastMultiInfo_var_5fmanager_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_var_5fmanager_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse_var_5fmanager_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_var_5fmanager_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemResourceInfo_var_5fmanager_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_var_5fmanager_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SingleTransNodeInfo_var_5fmanager_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_var_5fmanager_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransNodeMultiInfo_var_5fmanager_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_var_5fmanager_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VarAddrMgrInfo_var_5fmanager_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_var_5fmanager_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_VarDescInfo_var_5fmanager_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_var_5fmanager_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VarDescInfo_CurVarTensorDescMapEntry_DoNotUse_var_5fmanager_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_var_5fmanager_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse_var_5fmanager_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_var_5fmanager_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VarDescInfo_VarToTransRoadEntry_DoNotUse_var_5fmanager_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_var_5fmanager_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VarDevAddrMgr_var_5fmanager_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_var_5fmanager_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VarManagerInfo_var_5fmanager_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_var_5fmanager_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VarManagerInfo_MemResourceMapEntry_DoNotUse_var_5fmanager_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_var_5fmanager_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_VarResourceInfo_var_5fmanager_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_var_5fmanager_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse_var_5fmanager_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_var_5fmanager_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VarResourceInfo_VarAddrMgrMapEntry_DoNotUse_var_5fmanager_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_var_5fmanager_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VarResourceInfo_VarBroadCastInfoEntry_DoNotUse_var_5fmanager_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_var_5fmanager_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse_var_5fmanager_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_var_5fmanager_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse_var_5fmanager_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_var_5fmanager_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse_var_5fmanager_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_var_5fmanager_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VarResourceInfo_VarOffsetMapEntry_DoNotUse_var_5fmanager_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_var_5fmanager_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VarResourceInfo_VarToTransRoadEntry_DoNotUse_var_5fmanager_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ge_5fir_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AttrDef_ge_5fir_2eproto;
namespace deployer {
class VarAddrMgrInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VarAddrMgrInfo> _instance;
} _VarAddrMgrInfo_default_instance_;
class VarDevAddrMgrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VarDevAddrMgr> _instance;
} _VarDevAddrMgr_default_instance_;
class SingleTransNodeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleTransNodeInfo> _instance;
} _SingleTransNodeInfo_default_instance_;
class TransNodeMultiInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransNodeMultiInfo> _instance;
} _TransNodeMultiInfo_default_instance_;
class BroadcastInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BroadcastInfo> _instance;
} _BroadcastInfo_default_instance_;
class BroadcastMultiInfo_BroadcastInfoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse> _instance;
} _BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse_default_instance_;
class BroadcastMultiInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BroadcastMultiInfo> _instance;
} _BroadcastMultiInfo_default_instance_;
class VarDescInfo_CurVarTensorDescMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VarDescInfo_CurVarTensorDescMapEntry_DoNotUse> _instance;
} _VarDescInfo_CurVarTensorDescMapEntry_DoNotUse_default_instance_;
class VarDescInfo_VarToTransRoadEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VarDescInfo_VarToTransRoadEntry_DoNotUse> _instance;
} _VarDescInfo_VarToTransRoadEntry_DoNotUse_default_instance_;
class VarDescInfo_StagedVarTensorDescMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse> _instance;
} _VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse_default_instance_;
class VarDescInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VarDescInfo> _instance;
} _VarDescInfo_default_instance_;
class VarMatchInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VarMatchInfo> _instance;
} _VarMatchInfo_default_instance_;
class VarResourceInfo_VarOffsetMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VarResourceInfo_VarOffsetMapEntry_DoNotUse> _instance;
} _VarResourceInfo_VarOffsetMapEntry_DoNotUse_default_instance_;
class VarResourceInfo_VarAddrMgrMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VarResourceInfo_VarAddrMgrMapEntry_DoNotUse> _instance;
} _VarResourceInfo_VarAddrMgrMapEntry_DoNotUse_default_instance_;
class VarResourceInfo_CurVarTensorDescMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse> _instance;
} _VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse_default_instance_;
class VarResourceInfo_VarToTransRoadEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VarResourceInfo_VarToTransRoadEntry_DoNotUse> _instance;
} _VarResourceInfo_VarToTransRoadEntry_DoNotUse_default_instance_;
class VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse> _instance;
} _VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse_default_instance_;
class VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse> _instance;
} _VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse_default_instance_;
class VarResourceInfo_VarBroadCastInfoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VarResourceInfo_VarBroadCastInfoEntry_DoNotUse> _instance;
} _VarResourceInfo_VarBroadCastInfoEntry_DoNotUse_default_instance_;
class VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse> _instance;
} _VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse_default_instance_;
class VarResourceInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VarResourceInfo> _instance;
} _VarResourceInfo_default_instance_;
class MemResourceInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemResourceInfo> _instance;
} _MemResourceInfo_default_instance_;
class VarManagerInfo_MemResourceMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VarManagerInfo_MemResourceMapEntry_DoNotUse> _instance;
} _VarManagerInfo_MemResourceMapEntry_DoNotUse_default_instance_;
class VarManagerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VarManagerInfo> _instance;
} _VarManagerInfo_default_instance_;
class MultiVarManagerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiVarManagerInfo> _instance;
} _MultiVarManagerInfo_default_instance_;
class SharedContentDescriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SharedContentDescription> _instance;
} _SharedContentDescription_default_instance_;
}  // namespace deployer
static void InitDefaultsscc_info_BroadcastInfo_var_5fmanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::deployer::_BroadcastInfo_default_instance_;
    new (ptr) ::deployer::BroadcastInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::deployer::BroadcastInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BroadcastInfo_var_5fmanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BroadcastInfo_var_5fmanager_2eproto}, {}};

static void InitDefaultsscc_info_BroadcastMultiInfo_var_5fmanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::deployer::_BroadcastMultiInfo_default_instance_;
    new (ptr) ::deployer::BroadcastMultiInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::deployer::BroadcastMultiInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BroadcastMultiInfo_var_5fmanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BroadcastMultiInfo_var_5fmanager_2eproto}, {
      &scc_info_BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse_var_5fmanager_2eproto.base,}};

static void InitDefaultsscc_info_BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse_var_5fmanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::deployer::_BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse_default_instance_;
    new (ptr) ::deployer::BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse();
  }
  ::deployer::BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse_var_5fmanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse_var_5fmanager_2eproto}, {
      &scc_info_BroadcastInfo_var_5fmanager_2eproto.base,}};

static void InitDefaultsscc_info_MemResourceInfo_var_5fmanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::deployer::_MemResourceInfo_default_instance_;
    new (ptr) ::deployer::MemResourceInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::deployer::MemResourceInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemResourceInfo_var_5fmanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MemResourceInfo_var_5fmanager_2eproto}, {}};

static void InitDefaultsscc_info_MultiVarManagerInfo_var_5fmanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::deployer::_MultiVarManagerInfo_default_instance_;
    new (ptr) ::deployer::MultiVarManagerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::deployer::MultiVarManagerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiVarManagerInfo_var_5fmanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MultiVarManagerInfo_var_5fmanager_2eproto}, {
      &scc_info_VarManagerInfo_var_5fmanager_2eproto.base,}};

static void InitDefaultsscc_info_SharedContentDescription_var_5fmanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::deployer::_SharedContentDescription_default_instance_;
    new (ptr) ::deployer::SharedContentDescription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::deployer::SharedContentDescription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SharedContentDescription_var_5fmanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SharedContentDescription_var_5fmanager_2eproto}, {
      &scc_info_AttrDef_ge_5fir_2eproto.base,}};

static void InitDefaultsscc_info_SingleTransNodeInfo_var_5fmanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::deployer::_SingleTransNodeInfo_default_instance_;
    new (ptr) ::deployer::SingleTransNodeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::deployer::SingleTransNodeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SingleTransNodeInfo_var_5fmanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SingleTransNodeInfo_var_5fmanager_2eproto}, {
      &scc_info_AttrDef_ge_5fir_2eproto.base,}};

static void InitDefaultsscc_info_TransNodeMultiInfo_var_5fmanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::deployer::_TransNodeMultiInfo_default_instance_;
    new (ptr) ::deployer::TransNodeMultiInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::deployer::TransNodeMultiInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransNodeMultiInfo_var_5fmanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransNodeMultiInfo_var_5fmanager_2eproto}, {
      &scc_info_SingleTransNodeInfo_var_5fmanager_2eproto.base,}};

static void InitDefaultsscc_info_VarAddrMgrInfo_var_5fmanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::deployer::_VarAddrMgrInfo_default_instance_;
    new (ptr) ::deployer::VarAddrMgrInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::deployer::VarAddrMgrInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VarAddrMgrInfo_var_5fmanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VarAddrMgrInfo_var_5fmanager_2eproto}, {
      &scc_info_AttrDef_ge_5fir_2eproto.base,}};

static void InitDefaultsscc_info_VarDescInfo_var_5fmanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::deployer::_VarDescInfo_default_instance_;
    new (ptr) ::deployer::VarDescInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::deployer::VarDescInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_VarDescInfo_var_5fmanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_VarDescInfo_var_5fmanager_2eproto}, {
      &scc_info_VarDescInfo_CurVarTensorDescMapEntry_DoNotUse_var_5fmanager_2eproto.base,
      &scc_info_VarDescInfo_VarToTransRoadEntry_DoNotUse_var_5fmanager_2eproto.base,
      &scc_info_VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse_var_5fmanager_2eproto.base,}};

static void InitDefaultsscc_info_VarDescInfo_CurVarTensorDescMapEntry_DoNotUse_var_5fmanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::deployer::_VarDescInfo_CurVarTensorDescMapEntry_DoNotUse_default_instance_;
    new (ptr) ::deployer::VarDescInfo_CurVarTensorDescMapEntry_DoNotUse();
  }
  ::deployer::VarDescInfo_CurVarTensorDescMapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VarDescInfo_CurVarTensorDescMapEntry_DoNotUse_var_5fmanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VarDescInfo_CurVarTensorDescMapEntry_DoNotUse_var_5fmanager_2eproto}, {
      &scc_info_AttrDef_ge_5fir_2eproto.base,}};

static void InitDefaultsscc_info_VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse_var_5fmanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::deployer::_VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse_default_instance_;
    new (ptr) ::deployer::VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse();
  }
  ::deployer::VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse_var_5fmanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse_var_5fmanager_2eproto}, {
      &scc_info_AttrDef_ge_5fir_2eproto.base,}};

static void InitDefaultsscc_info_VarDescInfo_VarToTransRoadEntry_DoNotUse_var_5fmanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::deployer::_VarDescInfo_VarToTransRoadEntry_DoNotUse_default_instance_;
    new (ptr) ::deployer::VarDescInfo_VarToTransRoadEntry_DoNotUse();
  }
  ::deployer::VarDescInfo_VarToTransRoadEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VarDescInfo_VarToTransRoadEntry_DoNotUse_var_5fmanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VarDescInfo_VarToTransRoadEntry_DoNotUse_var_5fmanager_2eproto}, {
      &scc_info_TransNodeMultiInfo_var_5fmanager_2eproto.base,}};

static void InitDefaultsscc_info_VarDevAddrMgr_var_5fmanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::deployer::_VarDevAddrMgr_default_instance_;
    new (ptr) ::deployer::VarDevAddrMgr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::deployer::VarDevAddrMgr::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VarDevAddrMgr_var_5fmanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VarDevAddrMgr_var_5fmanager_2eproto}, {
      &scc_info_AttrDef_ge_5fir_2eproto.base,}};

static void InitDefaultsscc_info_VarManagerInfo_var_5fmanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::deployer::_VarManagerInfo_default_instance_;
    new (ptr) ::deployer::VarManagerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::deployer::VarManagerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VarManagerInfo_var_5fmanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_VarManagerInfo_var_5fmanager_2eproto}, {
      &scc_info_VarResourceInfo_var_5fmanager_2eproto.base,
      &scc_info_VarManagerInfo_MemResourceMapEntry_DoNotUse_var_5fmanager_2eproto.base,}};

static void InitDefaultsscc_info_VarManagerInfo_MemResourceMapEntry_DoNotUse_var_5fmanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::deployer::_VarManagerInfo_MemResourceMapEntry_DoNotUse_default_instance_;
    new (ptr) ::deployer::VarManagerInfo_MemResourceMapEntry_DoNotUse();
  }
  ::deployer::VarManagerInfo_MemResourceMapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VarManagerInfo_MemResourceMapEntry_DoNotUse_var_5fmanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VarManagerInfo_MemResourceMapEntry_DoNotUse_var_5fmanager_2eproto}, {
      &scc_info_MemResourceInfo_var_5fmanager_2eproto.base,}};

static void InitDefaultsscc_info_VarMatchInfo_var_5fmanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::deployer::_VarMatchInfo_default_instance_;
    new (ptr) ::deployer::VarMatchInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::deployer::VarMatchInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VarMatchInfo_var_5fmanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VarMatchInfo_var_5fmanager_2eproto}, {
      &scc_info_VarDescInfo_var_5fmanager_2eproto.base,}};

static void InitDefaultsscc_info_VarResourceInfo_var_5fmanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::deployer::_VarResourceInfo_default_instance_;
    new (ptr) ::deployer::VarResourceInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::deployer::VarResourceInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_VarResourceInfo_var_5fmanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_VarResourceInfo_var_5fmanager_2eproto}, {
      &scc_info_VarResourceInfo_VarOffsetMapEntry_DoNotUse_var_5fmanager_2eproto.base,
      &scc_info_VarResourceInfo_VarAddrMgrMapEntry_DoNotUse_var_5fmanager_2eproto.base,
      &scc_info_VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse_var_5fmanager_2eproto.base,
      &scc_info_VarResourceInfo_VarToTransRoadEntry_DoNotUse_var_5fmanager_2eproto.base,
      &scc_info_VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse_var_5fmanager_2eproto.base,
      &scc_info_VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse_var_5fmanager_2eproto.base,
      &scc_info_VarResourceInfo_VarBroadCastInfoEntry_DoNotUse_var_5fmanager_2eproto.base,
      &scc_info_VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse_var_5fmanager_2eproto.base,}};

static void InitDefaultsscc_info_VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse_var_5fmanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::deployer::_VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse_default_instance_;
    new (ptr) ::deployer::VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse();
  }
  ::deployer::VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse_var_5fmanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse_var_5fmanager_2eproto}, {
      &scc_info_AttrDef_ge_5fir_2eproto.base,}};

static void InitDefaultsscc_info_VarResourceInfo_VarAddrMgrMapEntry_DoNotUse_var_5fmanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::deployer::_VarResourceInfo_VarAddrMgrMapEntry_DoNotUse_default_instance_;
    new (ptr) ::deployer::VarResourceInfo_VarAddrMgrMapEntry_DoNotUse();
  }
  ::deployer::VarResourceInfo_VarAddrMgrMapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VarResourceInfo_VarAddrMgrMapEntry_DoNotUse_var_5fmanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VarResourceInfo_VarAddrMgrMapEntry_DoNotUse_var_5fmanager_2eproto}, {
      &scc_info_VarAddrMgrInfo_var_5fmanager_2eproto.base,}};

static void InitDefaultsscc_info_VarResourceInfo_VarBroadCastInfoEntry_DoNotUse_var_5fmanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::deployer::_VarResourceInfo_VarBroadCastInfoEntry_DoNotUse_default_instance_;
    new (ptr) ::deployer::VarResourceInfo_VarBroadCastInfoEntry_DoNotUse();
  }
  ::deployer::VarResourceInfo_VarBroadCastInfoEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VarResourceInfo_VarBroadCastInfoEntry_DoNotUse_var_5fmanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VarResourceInfo_VarBroadCastInfoEntry_DoNotUse_var_5fmanager_2eproto}, {
      &scc_info_BroadcastMultiInfo_var_5fmanager_2eproto.base,}};

static void InitDefaultsscc_info_VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse_var_5fmanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::deployer::_VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse_default_instance_;
    new (ptr) ::deployer::VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse();
  }
  ::deployer::VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse_var_5fmanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse_var_5fmanager_2eproto}, {
      &scc_info_VarDevAddrMgr_var_5fmanager_2eproto.base,}};

static void InitDefaultsscc_info_VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse_var_5fmanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::deployer::_VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse_default_instance_;
    new (ptr) ::deployer::VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse();
  }
  ::deployer::VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse_var_5fmanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse_var_5fmanager_2eproto}, {}};

static void InitDefaultsscc_info_VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse_var_5fmanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::deployer::_VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse_default_instance_;
    new (ptr) ::deployer::VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse();
  }
  ::deployer::VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse_var_5fmanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse_var_5fmanager_2eproto}, {}};

static void InitDefaultsscc_info_VarResourceInfo_VarOffsetMapEntry_DoNotUse_var_5fmanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::deployer::_VarResourceInfo_VarOffsetMapEntry_DoNotUse_default_instance_;
    new (ptr) ::deployer::VarResourceInfo_VarOffsetMapEntry_DoNotUse();
  }
  ::deployer::VarResourceInfo_VarOffsetMapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VarResourceInfo_VarOffsetMapEntry_DoNotUse_var_5fmanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VarResourceInfo_VarOffsetMapEntry_DoNotUse_var_5fmanager_2eproto}, {}};

static void InitDefaultsscc_info_VarResourceInfo_VarToTransRoadEntry_DoNotUse_var_5fmanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::deployer::_VarResourceInfo_VarToTransRoadEntry_DoNotUse_default_instance_;
    new (ptr) ::deployer::VarResourceInfo_VarToTransRoadEntry_DoNotUse();
  }
  ::deployer::VarResourceInfo_VarToTransRoadEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VarResourceInfo_VarToTransRoadEntry_DoNotUse_var_5fmanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VarResourceInfo_VarToTransRoadEntry_DoNotUse_var_5fmanager_2eproto}, {
      &scc_info_TransNodeMultiInfo_var_5fmanager_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_var_5fmanager_2eproto[26];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_var_5fmanager_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_var_5fmanager_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_var_5fmanager_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::deployer::VarAddrMgrInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::deployer::VarAddrMgrInfo, desc_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarAddrMgrInfo, address_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarAddrMgrInfo, offset_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarAddrMgrInfo, memory_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::deployer::VarDevAddrMgr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::deployer::VarDevAddrMgr, desc_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarDevAddrMgr, address_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarDevAddrMgr, dev_addr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::deployer::SingleTransNodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::deployer::SingleTransNodeInfo, node_type_),
  PROTOBUF_FIELD_OFFSET(::deployer::SingleTransNodeInfo, input_),
  PROTOBUF_FIELD_OFFSET(::deployer::SingleTransNodeInfo, output_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::deployer::TransNodeMultiInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::deployer::TransNodeMultiInfo, node_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::deployer::BroadcastInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::deployer::BroadcastInfo, var_name_),
  PROTOBUF_FIELD_OFFSET(::deployer::BroadcastInfo, broadcast_name_),
  PROTOBUF_FIELD_OFFSET(::deployer::BroadcastInfo, idx_),
  PROTOBUF_FIELD_OFFSET(::deployer::BroadcastInfo, input_offset_),
  PROTOBUF_FIELD_OFFSET(::deployer::BroadcastInfo, input_size_),
  PROTOBUF_FIELD_OFFSET(::deployer::BroadcastInfo, output_offset_),
  PROTOBUF_FIELD_OFFSET(::deployer::BroadcastInfo, output_size_),
  PROTOBUF_FIELD_OFFSET(::deployer::BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::deployer::BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::deployer::BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::deployer::BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::deployer::BroadcastMultiInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::deployer::BroadcastMultiInfo, broadcast_info_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarDescInfo_CurVarTensorDescMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarDescInfo_CurVarTensorDescMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::deployer::VarDescInfo_CurVarTensorDescMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarDescInfo_CurVarTensorDescMapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::deployer::VarDescInfo_VarToTransRoadEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarDescInfo_VarToTransRoadEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::deployer::VarDescInfo_VarToTransRoadEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarDescInfo_VarToTransRoadEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::deployer::VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::deployer::VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::deployer::VarDescInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::deployer::VarDescInfo, cur_var_tensor_desc_map_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarDescInfo, var_to_trans_road_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarDescInfo, changed_var_names_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarDescInfo, staged_var_tensor_desc_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::deployer::VarMatchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::deployer::VarMatchInfo, desc_info_before_compile_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarMatchInfo, desc_info_after_compile_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo_VarOffsetMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo_VarOffsetMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo_VarOffsetMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo_VarOffsetMapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo_VarAddrMgrMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo_VarAddrMgrMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo_VarAddrMgrMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo_VarAddrMgrMapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo_VarToTransRoadEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo_VarToTransRoadEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo_VarToTransRoadEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo_VarToTransRoadEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo_VarBroadCastInfoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo_VarBroadCastInfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo_VarBroadCastInfoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo_VarBroadCastInfoEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo, var_offset_map_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo, var_addr_mgr_map_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo, cur_var_tensor_desc_map_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo, var_to_trans_road_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo, var_names_to_changed_graph_id_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo, var_names_to_allocated_graph_id_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo, var_broad_cast_info_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarResourceInfo, var_dev_addr_mgr_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::deployer::MemResourceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::deployer::MemResourceInfo, total_size_),
  PROTOBUF_FIELD_OFFSET(::deployer::MemResourceInfo, var_mem_size_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarManagerInfo_MemResourceMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarManagerInfo_MemResourceMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::deployer::VarManagerInfo_MemResourceMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarManagerInfo_MemResourceMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::deployer::VarManagerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::deployer::VarManagerInfo, version_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarManagerInfo, session_id_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarManagerInfo, device_id_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarManagerInfo, job_id_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarManagerInfo, graph_mem_max_size_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarManagerInfo, var_mem_max_size_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarManagerInfo, var_mem_logic_base_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarManagerInfo, use_max_mem_size_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarManagerInfo, var_resource_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarManagerInfo, mem_resource_map_),
  PROTOBUF_FIELD_OFFSET(::deployer::VarManagerInfo, var_mem_auto_malloc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::deployer::MultiVarManagerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::deployer::MultiVarManagerInfo, var_manager_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::deployer::SharedContentDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::deployer::SharedContentDescription, session_id_),
  PROTOBUF_FIELD_OFFSET(::deployer::SharedContentDescription, node_name_),
  PROTOBUF_FIELD_OFFSET(::deployer::SharedContentDescription, head_offset_),
  PROTOBUF_FIELD_OFFSET(::deployer::SharedContentDescription, total_length_),
  PROTOBUF_FIELD_OFFSET(::deployer::SharedContentDescription, current_offset_),
  PROTOBUF_FIELD_OFFSET(::deployer::SharedContentDescription, mem_type_),
  PROTOBUF_FIELD_OFFSET(::deployer::SharedContentDescription, tensor_desc_),
  PROTOBUF_FIELD_OFFSET(::deployer::SharedContentDescription, om_content_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::deployer::VarAddrMgrInfo)},
  { 9, -1, sizeof(::deployer::VarDevAddrMgr)},
  { 17, -1, sizeof(::deployer::SingleTransNodeInfo)},
  { 25, -1, sizeof(::deployer::TransNodeMultiInfo)},
  { 31, -1, sizeof(::deployer::BroadcastInfo)},
  { 43, 50, sizeof(::deployer::BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse)},
  { 52, -1, sizeof(::deployer::BroadcastMultiInfo)},
  { 58, 65, sizeof(::deployer::VarDescInfo_CurVarTensorDescMapEntry_DoNotUse)},
  { 67, 74, sizeof(::deployer::VarDescInfo_VarToTransRoadEntry_DoNotUse)},
  { 76, 83, sizeof(::deployer::VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse)},
  { 85, -1, sizeof(::deployer::VarDescInfo)},
  { 94, -1, sizeof(::deployer::VarMatchInfo)},
  { 101, 108, sizeof(::deployer::VarResourceInfo_VarOffsetMapEntry_DoNotUse)},
  { 110, 117, sizeof(::deployer::VarResourceInfo_VarAddrMgrMapEntry_DoNotUse)},
  { 119, 126, sizeof(::deployer::VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse)},
  { 128, 135, sizeof(::deployer::VarResourceInfo_VarToTransRoadEntry_DoNotUse)},
  { 137, 144, sizeof(::deployer::VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse)},
  { 146, 153, sizeof(::deployer::VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse)},
  { 155, 162, sizeof(::deployer::VarResourceInfo_VarBroadCastInfoEntry_DoNotUse)},
  { 164, 171, sizeof(::deployer::VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse)},
  { 173, -1, sizeof(::deployer::VarResourceInfo)},
  { 186, -1, sizeof(::deployer::MemResourceInfo)},
  { 193, 200, sizeof(::deployer::VarManagerInfo_MemResourceMapEntry_DoNotUse)},
  { 202, -1, sizeof(::deployer::VarManagerInfo)},
  { 218, -1, sizeof(::deployer::MultiVarManagerInfo)},
  { 224, -1, sizeof(::deployer::SharedContentDescription)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::deployer::_VarAddrMgrInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::deployer::_VarDevAddrMgr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::deployer::_SingleTransNodeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::deployer::_TransNodeMultiInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::deployer::_BroadcastInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::deployer::_BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::deployer::_BroadcastMultiInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::deployer::_VarDescInfo_CurVarTensorDescMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::deployer::_VarDescInfo_VarToTransRoadEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::deployer::_VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::deployer::_VarDescInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::deployer::_VarMatchInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::deployer::_VarResourceInfo_VarOffsetMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::deployer::_VarResourceInfo_VarAddrMgrMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::deployer::_VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::deployer::_VarResourceInfo_VarToTransRoadEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::deployer::_VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::deployer::_VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::deployer::_VarResourceInfo_VarBroadCastInfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::deployer::_VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::deployer::_VarResourceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::deployer::_MemResourceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::deployer::_VarManagerInfo_MemResourceMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::deployer::_VarManagerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::deployer::_MultiVarManagerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::deployer::_SharedContentDescription_default_instance_),
};

const char descriptor_table_protodef_var_5fmanager_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021var_manager.proto\022\010deployer\032\013ge_ir.pro"
  "to\"p\n\016VarAddrMgrInfo\022(\n\004desc\030\001 \001(\0132\032.ge."
  "proto.TensorDescriptor\022\017\n\007address\030\002 \001(\004\022"
  "\016\n\006offset\030\003 \001(\004\022\023\n\013memory_type\030\004 \001(\004\"\\\n\r"
  "VarDevAddrMgr\022(\n\004desc\030\001 \001(\0132\032.ge.proto.T"
  "ensorDescriptor\022\017\n\007address\030\002 \001(\004\022\020\n\010dev_"
  "addr\030\003 \001(\004\"\177\n\023SingleTransNodeInfo\022\021\n\tnod"
  "e_type\030\001 \001(\t\022)\n\005input\030\002 \001(\0132\032.ge.proto.T"
  "ensorDescriptor\022*\n\006output\030\003 \001(\0132\032.ge.pro"
  "to.TensorDescriptor\"F\n\022TransNodeMultiInf"
  "o\0220\n\tnode_info\030\001 \003(\0132\035.deployer.SingleTr"
  "ansNodeInfo\"\234\001\n\rBroadcastInfo\022\020\n\010var_nam"
  "e\030\001 \001(\t\022\026\n\016broadcast_name\030\002 \001(\t\022\013\n\003idx\030\003"
  " \001(\005\022\024\n\014input_offset\030\004 \001(\003\022\022\n\ninput_size"
  "\030\005 \001(\004\022\025\n\routput_offset\030\006 \001(\003\022\023\n\013output_"
  "size\030\007 \001(\004\"\254\001\n\022BroadcastMultiInfo\022G\n\016bro"
  "adcast_info\030\001 \003(\0132/.deployer.BroadcastMu"
  "ltiInfo.BroadcastInfoEntry\032M\n\022BroadcastI"
  "nfoEntry\022\013\n\003key\030\001 \001(\t\022&\n\005value\030\002 \001(\0132\027.d"
  "eployer.BroadcastInfo:\0028\001\"\236\004\n\013VarDescInf"
  "o\022O\n\027cur_var_tensor_desc_map\030\001 \003(\0132..dep"
  "loyer.VarDescInfo.CurVarTensorDescMapEnt"
  "ry\022D\n\021var_to_trans_road\030\002 \003(\0132).deployer"
  ".VarDescInfo.VarToTransRoadEntry\022\031\n\021chan"
  "ged_var_names\030\003 \003(\t\022U\n\032staged_var_tensor"
  "_desc_map\030\004 \003(\01321.deployer.VarDescInfo.S"
  "tagedVarTensorDescMapEntry\032V\n\030CurVarTens"
  "orDescMapEntry\022\013\n\003key\030\001 \001(\t\022)\n\005value\030\002 \001"
  "(\0132\032.ge.proto.TensorDescriptor:\0028\001\032S\n\023Va"
  "rToTransRoadEntry\022\013\n\003key\030\001 \001(\t\022+\n\005value\030"
  "\002 \001(\0132\034.deployer.TransNodeMultiInfo:\0028\001\032"
  "Y\n\033StagedVarTensorDescMapEntry\022\013\n\003key\030\001 "
  "\001(\t\022)\n\005value\030\002 \001(\0132\032.ge.proto.TensorDesc"
  "riptor:\0028\001\"\177\n\014VarMatchInfo\0227\n\030desc_info_"
  "before_compile\030\001 \001(\0132\025.deployer.VarDescI"
  "nfo\0226\n\027desc_info_after_compile\030\002 \001(\0132\025.d"
  "eployer.VarDescInfo\"\375\t\n\017VarResourceInfo\022"
  "C\n\016var_offset_map\030\001 \003(\0132+.deployer.VarRe"
  "sourceInfo.VarOffsetMapEntry\022F\n\020var_addr"
  "_mgr_map\030\002 \003(\0132,.deployer.VarResourceInf"
  "o.VarAddrMgrMapEntry\022S\n\027cur_var_tensor_d"
  "esc_map\030\003 \003(\01322.deployer.VarResourceInfo"
  ".CurVarTensorDescMapEntry\022H\n\021var_to_tran"
  "s_road\030\004 \003(\0132-.deployer.VarResourceInfo."
  "VarToTransRoadEntry\022^\n\035var_names_to_chan"
  "ged_graph_id\030\005 \003(\01327.deployer.VarResourc"
  "eInfo.VarNamesToChangedGraphIdEntry\022b\n\037v"
  "ar_names_to_allocated_graph_id\030\006 \003(\01329.d"
  "eployer.VarResourceInfo.VarNamesToAlloca"
  "tedGraphIdEntry\022L\n\023var_broad_cast_info\030\007"
  " \003(\0132/.deployer.VarResourceInfo.VarBroad"
  "CastInfoEntry\022M\n\024var_dev_addr_mgr_map\030\010 "
  "\003(\0132/.deployer.VarResourceInfo.VarDevAdd"
  "rMgrMapEntry\0323\n\021VarOffsetMapEntry\022\013\n\003key"
  "\030\001 \001(\004\022\r\n\005value\030\002 \001(\r:\0028\001\032N\n\022VarAddrMgrM"
  "apEntry\022\013\n\003key\030\001 \001(\t\022\'\n\005value\030\002 \001(\0132\030.de"
  "ployer.VarAddrMgrInfo:\0028\001\032V\n\030CurVarTenso"
  "rDescMapEntry\022\013\n\003key\030\001 \001(\t\022)\n\005value\030\002 \001("
  "\0132\032.ge.proto.TensorDescriptor:\0028\001\032S\n\023Var"
  "ToTransRoadEntry\022\013\n\003key\030\001 \001(\t\022+\n\005value\030\002"
  " \001(\0132\034.deployer.TransNodeMultiInfo:\0028\001\032\?"
  "\n\035VarNamesToChangedGraphIdEntry\022\013\n\003key\030\001"
  " \001(\t\022\r\n\005value\030\002 \001(\r:\0028\001\032A\n\037VarNamesToAll"
  "ocatedGraphIdEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\r:\0028\001\032U\n\025VarBroadCastInfoEntry\022\013\n\003k"
  "ey\030\001 \001(\r\022+\n\005value\030\002 \001(\0132\034.deployer.Broad"
  "castMultiInfo:\0028\001\032P\n\025VarDevAddrMgrMapEnt"
  "ry\022\013\n\003key\030\001 \001(\004\022&\n\005value\030\002 \001(\0132\027.deploye"
  "r.VarDevAddrMgr:\0028\001\";\n\017MemResourceInfo\022\022"
  "\n\ntotal_size\030\001 \001(\004\022\024\n\014var_mem_size\030\002 \001(\004"
  "\"\254\003\n\016VarManagerInfo\022\017\n\007version\030\001 \001(\r\022\022\n\n"
  "session_id\030\002 \001(\004\022\021\n\tdevice_id\030\003 \001(\r\022\016\n\006j"
  "ob_id\030\004 \001(\004\022\032\n\022graph_mem_max_size\030\005 \001(\004\022"
  "\030\n\020var_mem_max_size\030\006 \001(\004\022\032\n\022var_mem_log"
  "ic_base\030\007 \001(\004\022\030\n\020use_max_mem_size\030\010 \001(\004\022"
  "/\n\014var_resource\030\t \001(\0132\031.deployer.VarReso"
  "urceInfo\022F\n\020mem_resource_map\030\n \003(\0132,.dep"
  "loyer.VarManagerInfo.MemResourceMapEntry"
  "\022\033\n\023var_mem_auto_malloc\030\013 \001(\010\032P\n\023MemReso"
  "urceMapEntry\022\013\n\003key\030\001 \001(\r\022(\n\005value\030\002 \001(\013"
  "2\031.deployer.MemResourceInfo:\0028\001\"I\n\023Multi"
  "VarManagerInfo\0222\n\020var_manager_info\030\001 \003(\013"
  "2\030.deployer.VarManagerInfo\"\333\001\n\030SharedCon"
  "tentDescription\022\022\n\nsession_id\030\001 \001(\004\022\021\n\tn"
  "ode_name\030\002 \001(\t\022\023\n\013head_offset\030\003 \001(\004\022\024\n\014t"
  "otal_length\030\004 \001(\004\022\026\n\016current_offset\030\005 \001("
  "\004\022\020\n\010mem_type\030\006 \001(\r\022/\n\013tensor_desc\030\007 \001(\013"
  "2\032.ge.proto.TensorDescriptor\022\022\n\nom_conte"
  "nt\030\010 \001(\014b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_var_5fmanager_2eproto_deps[1] = {
  &::descriptor_table_ge_5fir_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_var_5fmanager_2eproto_sccs[26] = {
  &scc_info_BroadcastInfo_var_5fmanager_2eproto.base,
  &scc_info_BroadcastMultiInfo_var_5fmanager_2eproto.base,
  &scc_info_BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse_var_5fmanager_2eproto.base,
  &scc_info_MemResourceInfo_var_5fmanager_2eproto.base,
  &scc_info_MultiVarManagerInfo_var_5fmanager_2eproto.base,
  &scc_info_SharedContentDescription_var_5fmanager_2eproto.base,
  &scc_info_SingleTransNodeInfo_var_5fmanager_2eproto.base,
  &scc_info_TransNodeMultiInfo_var_5fmanager_2eproto.base,
  &scc_info_VarAddrMgrInfo_var_5fmanager_2eproto.base,
  &scc_info_VarDescInfo_var_5fmanager_2eproto.base,
  &scc_info_VarDescInfo_CurVarTensorDescMapEntry_DoNotUse_var_5fmanager_2eproto.base,
  &scc_info_VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse_var_5fmanager_2eproto.base,
  &scc_info_VarDescInfo_VarToTransRoadEntry_DoNotUse_var_5fmanager_2eproto.base,
  &scc_info_VarDevAddrMgr_var_5fmanager_2eproto.base,
  &scc_info_VarManagerInfo_var_5fmanager_2eproto.base,
  &scc_info_VarManagerInfo_MemResourceMapEntry_DoNotUse_var_5fmanager_2eproto.base,
  &scc_info_VarMatchInfo_var_5fmanager_2eproto.base,
  &scc_info_VarResourceInfo_var_5fmanager_2eproto.base,
  &scc_info_VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse_var_5fmanager_2eproto.base,
  &scc_info_VarResourceInfo_VarAddrMgrMapEntry_DoNotUse_var_5fmanager_2eproto.base,
  &scc_info_VarResourceInfo_VarBroadCastInfoEntry_DoNotUse_var_5fmanager_2eproto.base,
  &scc_info_VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse_var_5fmanager_2eproto.base,
  &scc_info_VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse_var_5fmanager_2eproto.base,
  &scc_info_VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse_var_5fmanager_2eproto.base,
  &scc_info_VarResourceInfo_VarOffsetMapEntry_DoNotUse_var_5fmanager_2eproto.base,
  &scc_info_VarResourceInfo_VarToTransRoadEntry_DoNotUse_var_5fmanager_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_var_5fmanager_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_var_5fmanager_2eproto = {
  false, false, descriptor_table_protodef_var_5fmanager_2eproto, "var_manager.proto", 3536,
  &descriptor_table_var_5fmanager_2eproto_once, descriptor_table_var_5fmanager_2eproto_sccs, descriptor_table_var_5fmanager_2eproto_deps, 26, 1,
  schemas, file_default_instances, TableStruct_var_5fmanager_2eproto::offsets,
  file_level_metadata_var_5fmanager_2eproto, 26, file_level_enum_descriptors_var_5fmanager_2eproto, file_level_service_descriptors_var_5fmanager_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_var_5fmanager_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_var_5fmanager_2eproto)), true);
namespace deployer {

// ===================================================================

void VarAddrMgrInfo::InitAsDefaultInstance() {
  ::deployer::_VarAddrMgrInfo_default_instance_._instance.get_mutable()->desc_ = const_cast< ::ge::proto::TensorDescriptor*>(
      ::ge::proto::TensorDescriptor::internal_default_instance());
}
class VarAddrMgrInfo::_Internal {
 public:
  static const ::ge::proto::TensorDescriptor& desc(const VarAddrMgrInfo* msg);
};

const ::ge::proto::TensorDescriptor&
VarAddrMgrInfo::_Internal::desc(const VarAddrMgrInfo* msg) {
  return *msg->desc_;
}
void VarAddrMgrInfo::clear_desc() {
  if (GetArena() == nullptr && desc_ != nullptr) {
    delete desc_;
  }
  desc_ = nullptr;
}
VarAddrMgrInfo::VarAddrMgrInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:deployer.VarAddrMgrInfo)
}
VarAddrMgrInfo::VarAddrMgrInfo(const VarAddrMgrInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_desc()) {
    desc_ = new ::ge::proto::TensorDescriptor(*from.desc_);
  } else {
    desc_ = nullptr;
  }
  ::memcpy(&address_, &from.address_,
    static_cast<size_t>(reinterpret_cast<char*>(&memory_type_) -
    reinterpret_cast<char*>(&address_)) + sizeof(memory_type_));
  // @@protoc_insertion_point(copy_constructor:deployer.VarAddrMgrInfo)
}

void VarAddrMgrInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VarAddrMgrInfo_var_5fmanager_2eproto.base);
  ::memset(&desc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&memory_type_) -
      reinterpret_cast<char*>(&desc_)) + sizeof(memory_type_));
}

VarAddrMgrInfo::~VarAddrMgrInfo() {
  // @@protoc_insertion_point(destructor:deployer.VarAddrMgrInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VarAddrMgrInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete desc_;
}

void VarAddrMgrInfo::ArenaDtor(void* object) {
  VarAddrMgrInfo* _this = reinterpret_cast< VarAddrMgrInfo* >(object);
  (void)_this;
}
void VarAddrMgrInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VarAddrMgrInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VarAddrMgrInfo& VarAddrMgrInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VarAddrMgrInfo_var_5fmanager_2eproto.base);
  return *internal_default_instance();
}


void VarAddrMgrInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:deployer.VarAddrMgrInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && desc_ != nullptr) {
    delete desc_;
  }
  desc_ = nullptr;
  ::memset(&address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&memory_type_) -
      reinterpret_cast<char*>(&address_)) + sizeof(memory_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VarAddrMgrInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ge.proto.TensorDescriptor desc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_desc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 memory_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          memory_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VarAddrMgrInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:deployer.VarAddrMgrInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ge.proto.TensorDescriptor desc = 1;
  if (this->has_desc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::desc(this), target, stream);
  }

  // uint64 address = 2;
  if (this->address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_address(), target);
  }

  // uint64 offset = 3;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_offset(), target);
  }

  // uint64 memory_type = 4;
  if (this->memory_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_memory_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:deployer.VarAddrMgrInfo)
  return target;
}

size_t VarAddrMgrInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deployer.VarAddrMgrInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ge.proto.TensorDescriptor desc = 1;
  if (this->has_desc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *desc_);
  }

  // uint64 address = 2;
  if (this->address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_address());
  }

  // uint64 offset = 3;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_offset());
  }

  // uint64 memory_type = 4;
  if (this->memory_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_memory_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VarAddrMgrInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deployer.VarAddrMgrInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VarAddrMgrInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VarAddrMgrInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deployer.VarAddrMgrInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deployer.VarAddrMgrInfo)
    MergeFrom(*source);
  }
}

void VarAddrMgrInfo::MergeFrom(const VarAddrMgrInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deployer.VarAddrMgrInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_desc()) {
    _internal_mutable_desc()->::ge::proto::TensorDescriptor::MergeFrom(from._internal_desc());
  }
  if (from.address() != 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.memory_type() != 0) {
    _internal_set_memory_type(from._internal_memory_type());
  }
}

void VarAddrMgrInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deployer.VarAddrMgrInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VarAddrMgrInfo::CopyFrom(const VarAddrMgrInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deployer.VarAddrMgrInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VarAddrMgrInfo::IsInitialized() const {
  return true;
}

void VarAddrMgrInfo::InternalSwap(VarAddrMgrInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VarAddrMgrInfo, memory_type_)
      + sizeof(VarAddrMgrInfo::memory_type_)
      - PROTOBUF_FIELD_OFFSET(VarAddrMgrInfo, desc_)>(
          reinterpret_cast<char*>(&desc_),
          reinterpret_cast<char*>(&other->desc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VarAddrMgrInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VarDevAddrMgr::InitAsDefaultInstance() {
  ::deployer::_VarDevAddrMgr_default_instance_._instance.get_mutable()->desc_ = const_cast< ::ge::proto::TensorDescriptor*>(
      ::ge::proto::TensorDescriptor::internal_default_instance());
}
class VarDevAddrMgr::_Internal {
 public:
  static const ::ge::proto::TensorDescriptor& desc(const VarDevAddrMgr* msg);
};

const ::ge::proto::TensorDescriptor&
VarDevAddrMgr::_Internal::desc(const VarDevAddrMgr* msg) {
  return *msg->desc_;
}
void VarDevAddrMgr::clear_desc() {
  if (GetArena() == nullptr && desc_ != nullptr) {
    delete desc_;
  }
  desc_ = nullptr;
}
VarDevAddrMgr::VarDevAddrMgr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:deployer.VarDevAddrMgr)
}
VarDevAddrMgr::VarDevAddrMgr(const VarDevAddrMgr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_desc()) {
    desc_ = new ::ge::proto::TensorDescriptor(*from.desc_);
  } else {
    desc_ = nullptr;
  }
  ::memcpy(&address_, &from.address_,
    static_cast<size_t>(reinterpret_cast<char*>(&dev_addr_) -
    reinterpret_cast<char*>(&address_)) + sizeof(dev_addr_));
  // @@protoc_insertion_point(copy_constructor:deployer.VarDevAddrMgr)
}

void VarDevAddrMgr::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VarDevAddrMgr_var_5fmanager_2eproto.base);
  ::memset(&desc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dev_addr_) -
      reinterpret_cast<char*>(&desc_)) + sizeof(dev_addr_));
}

VarDevAddrMgr::~VarDevAddrMgr() {
  // @@protoc_insertion_point(destructor:deployer.VarDevAddrMgr)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VarDevAddrMgr::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete desc_;
}

void VarDevAddrMgr::ArenaDtor(void* object) {
  VarDevAddrMgr* _this = reinterpret_cast< VarDevAddrMgr* >(object);
  (void)_this;
}
void VarDevAddrMgr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VarDevAddrMgr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VarDevAddrMgr& VarDevAddrMgr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VarDevAddrMgr_var_5fmanager_2eproto.base);
  return *internal_default_instance();
}


void VarDevAddrMgr::Clear() {
// @@protoc_insertion_point(message_clear_start:deployer.VarDevAddrMgr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && desc_ != nullptr) {
    delete desc_;
  }
  desc_ = nullptr;
  ::memset(&address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dev_addr_) -
      reinterpret_cast<char*>(&address_)) + sizeof(dev_addr_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VarDevAddrMgr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ge.proto.TensorDescriptor desc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_desc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 dev_addr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dev_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VarDevAddrMgr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:deployer.VarDevAddrMgr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ge.proto.TensorDescriptor desc = 1;
  if (this->has_desc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::desc(this), target, stream);
  }

  // uint64 address = 2;
  if (this->address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_address(), target);
  }

  // uint64 dev_addr = 3;
  if (this->dev_addr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_dev_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:deployer.VarDevAddrMgr)
  return target;
}

size_t VarDevAddrMgr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deployer.VarDevAddrMgr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ge.proto.TensorDescriptor desc = 1;
  if (this->has_desc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *desc_);
  }

  // uint64 address = 2;
  if (this->address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_address());
  }

  // uint64 dev_addr = 3;
  if (this->dev_addr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_dev_addr());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VarDevAddrMgr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deployer.VarDevAddrMgr)
  GOOGLE_DCHECK_NE(&from, this);
  const VarDevAddrMgr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VarDevAddrMgr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deployer.VarDevAddrMgr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deployer.VarDevAddrMgr)
    MergeFrom(*source);
  }
}

void VarDevAddrMgr::MergeFrom(const VarDevAddrMgr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deployer.VarDevAddrMgr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_desc()) {
    _internal_mutable_desc()->::ge::proto::TensorDescriptor::MergeFrom(from._internal_desc());
  }
  if (from.address() != 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.dev_addr() != 0) {
    _internal_set_dev_addr(from._internal_dev_addr());
  }
}

void VarDevAddrMgr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deployer.VarDevAddrMgr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VarDevAddrMgr::CopyFrom(const VarDevAddrMgr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deployer.VarDevAddrMgr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VarDevAddrMgr::IsInitialized() const {
  return true;
}

void VarDevAddrMgr::InternalSwap(VarDevAddrMgr* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VarDevAddrMgr, dev_addr_)
      + sizeof(VarDevAddrMgr::dev_addr_)
      - PROTOBUF_FIELD_OFFSET(VarDevAddrMgr, desc_)>(
          reinterpret_cast<char*>(&desc_),
          reinterpret_cast<char*>(&other->desc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VarDevAddrMgr::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleTransNodeInfo::InitAsDefaultInstance() {
  ::deployer::_SingleTransNodeInfo_default_instance_._instance.get_mutable()->input_ = const_cast< ::ge::proto::TensorDescriptor*>(
      ::ge::proto::TensorDescriptor::internal_default_instance());
  ::deployer::_SingleTransNodeInfo_default_instance_._instance.get_mutable()->output_ = const_cast< ::ge::proto::TensorDescriptor*>(
      ::ge::proto::TensorDescriptor::internal_default_instance());
}
class SingleTransNodeInfo::_Internal {
 public:
  static const ::ge::proto::TensorDescriptor& input(const SingleTransNodeInfo* msg);
  static const ::ge::proto::TensorDescriptor& output(const SingleTransNodeInfo* msg);
};

const ::ge::proto::TensorDescriptor&
SingleTransNodeInfo::_Internal::input(const SingleTransNodeInfo* msg) {
  return *msg->input_;
}
const ::ge::proto::TensorDescriptor&
SingleTransNodeInfo::_Internal::output(const SingleTransNodeInfo* msg) {
  return *msg->output_;
}
void SingleTransNodeInfo::clear_input() {
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
void SingleTransNodeInfo::clear_output() {
  if (GetArena() == nullptr && output_ != nullptr) {
    delete output_;
  }
  output_ = nullptr;
}
SingleTransNodeInfo::SingleTransNodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:deployer.SingleTransNodeInfo)
}
SingleTransNodeInfo::SingleTransNodeInfo(const SingleTransNodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_type().empty()) {
    node_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_node_type(),
      GetArena());
  }
  if (from._internal_has_input()) {
    input_ = new ::ge::proto::TensorDescriptor(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_output()) {
    output_ = new ::ge::proto::TensorDescriptor(*from.output_);
  } else {
    output_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:deployer.SingleTransNodeInfo)
}

void SingleTransNodeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleTransNodeInfo_var_5fmanager_2eproto.base);
  node_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_) -
      reinterpret_cast<char*>(&input_)) + sizeof(output_));
}

SingleTransNodeInfo::~SingleTransNodeInfo() {
  // @@protoc_insertion_point(destructor:deployer.SingleTransNodeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SingleTransNodeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  node_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete output_;
}

void SingleTransNodeInfo::ArenaDtor(void* object) {
  SingleTransNodeInfo* _this = reinterpret_cast< SingleTransNodeInfo* >(object);
  (void)_this;
}
void SingleTransNodeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleTransNodeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleTransNodeInfo& SingleTransNodeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleTransNodeInfo_var_5fmanager_2eproto.base);
  return *internal_default_instance();
}


void SingleTransNodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:deployer.SingleTransNodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  if (GetArena() == nullptr && output_ != nullptr) {
    delete output_;
  }
  output_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleTransNodeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string node_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_node_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "deployer.SingleTransNodeInfo.node_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ge.proto.TensorDescriptor input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ge.proto.TensorDescriptor output = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_output(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleTransNodeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:deployer.SingleTransNodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_type = 1;
  if (this->node_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_type().data(), static_cast<int>(this->_internal_node_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "deployer.SingleTransNodeInfo.node_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_node_type(), target);
  }

  // .ge.proto.TensorDescriptor input = 2;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::input(this), target, stream);
  }

  // .ge.proto.TensorDescriptor output = 3;
  if (this->has_output()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::output(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:deployer.SingleTransNodeInfo)
  return target;
}

size_t SingleTransNodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deployer.SingleTransNodeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_type = 1;
  if (this->node_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_type());
  }

  // .ge.proto.TensorDescriptor input = 2;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .ge.proto.TensorDescriptor output = 3;
  if (this->has_output()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleTransNodeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deployer.SingleTransNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleTransNodeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleTransNodeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deployer.SingleTransNodeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deployer.SingleTransNodeInfo)
    MergeFrom(*source);
  }
}

void SingleTransNodeInfo::MergeFrom(const SingleTransNodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deployer.SingleTransNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_type().size() > 0) {
    _internal_set_node_type(from._internal_node_type());
  }
  if (from.has_input()) {
    _internal_mutable_input()->::ge::proto::TensorDescriptor::MergeFrom(from._internal_input());
  }
  if (from.has_output()) {
    _internal_mutable_output()->::ge::proto::TensorDescriptor::MergeFrom(from._internal_output());
  }
}

void SingleTransNodeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deployer.SingleTransNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleTransNodeInfo::CopyFrom(const SingleTransNodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deployer.SingleTransNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleTransNodeInfo::IsInitialized() const {
  return true;
}

void SingleTransNodeInfo::InternalSwap(SingleTransNodeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  node_type_.Swap(&other->node_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleTransNodeInfo, output_)
      + sizeof(SingleTransNodeInfo::output_)
      - PROTOBUF_FIELD_OFFSET(SingleTransNodeInfo, input_)>(
          reinterpret_cast<char*>(&input_),
          reinterpret_cast<char*>(&other->input_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleTransNodeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransNodeMultiInfo::InitAsDefaultInstance() {
}
class TransNodeMultiInfo::_Internal {
 public:
};

TransNodeMultiInfo::TransNodeMultiInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  node_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:deployer.TransNodeMultiInfo)
}
TransNodeMultiInfo::TransNodeMultiInfo(const TransNodeMultiInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      node_info_(from.node_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:deployer.TransNodeMultiInfo)
}

void TransNodeMultiInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransNodeMultiInfo_var_5fmanager_2eproto.base);
}

TransNodeMultiInfo::~TransNodeMultiInfo() {
  // @@protoc_insertion_point(destructor:deployer.TransNodeMultiInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransNodeMultiInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TransNodeMultiInfo::ArenaDtor(void* object) {
  TransNodeMultiInfo* _this = reinterpret_cast< TransNodeMultiInfo* >(object);
  (void)_this;
}
void TransNodeMultiInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransNodeMultiInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransNodeMultiInfo& TransNodeMultiInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransNodeMultiInfo_var_5fmanager_2eproto.base);
  return *internal_default_instance();
}


void TransNodeMultiInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:deployer.TransNodeMultiInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransNodeMultiInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .deployer.SingleTransNodeInfo node_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransNodeMultiInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:deployer.TransNodeMultiInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .deployer.SingleTransNodeInfo node_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_node_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_node_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:deployer.TransNodeMultiInfo)
  return target;
}

size_t TransNodeMultiInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deployer.TransNodeMultiInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .deployer.SingleTransNodeInfo node_info = 1;
  total_size += 1UL * this->_internal_node_info_size();
  for (const auto& msg : this->node_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransNodeMultiInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deployer.TransNodeMultiInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TransNodeMultiInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransNodeMultiInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deployer.TransNodeMultiInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deployer.TransNodeMultiInfo)
    MergeFrom(*source);
  }
}

void TransNodeMultiInfo::MergeFrom(const TransNodeMultiInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deployer.TransNodeMultiInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_info_.MergeFrom(from.node_info_);
}

void TransNodeMultiInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deployer.TransNodeMultiInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransNodeMultiInfo::CopyFrom(const TransNodeMultiInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deployer.TransNodeMultiInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransNodeMultiInfo::IsInitialized() const {
  return true;
}

void TransNodeMultiInfo::InternalSwap(TransNodeMultiInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  node_info_.InternalSwap(&other->node_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransNodeMultiInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BroadcastInfo::InitAsDefaultInstance() {
}
class BroadcastInfo::_Internal {
 public:
};

BroadcastInfo::BroadcastInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:deployer.BroadcastInfo)
}
BroadcastInfo::BroadcastInfo(const BroadcastInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_var_name().empty()) {
    var_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_var_name(),
      GetArena());
  }
  broadcast_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_broadcast_name().empty()) {
    broadcast_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_broadcast_name(),
      GetArena());
  }
  ::memcpy(&input_offset_, &from.input_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&idx_) -
    reinterpret_cast<char*>(&input_offset_)) + sizeof(idx_));
  // @@protoc_insertion_point(copy_constructor:deployer.BroadcastInfo)
}

void BroadcastInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BroadcastInfo_var_5fmanager_2eproto.base);
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  broadcast_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&input_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idx_) -
      reinterpret_cast<char*>(&input_offset_)) + sizeof(idx_));
}

BroadcastInfo::~BroadcastInfo() {
  // @@protoc_insertion_point(destructor:deployer.BroadcastInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BroadcastInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  var_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  broadcast_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BroadcastInfo::ArenaDtor(void* object) {
  BroadcastInfo* _this = reinterpret_cast< BroadcastInfo* >(object);
  (void)_this;
}
void BroadcastInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BroadcastInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BroadcastInfo& BroadcastInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BroadcastInfo_var_5fmanager_2eproto.base);
  return *internal_default_instance();
}


void BroadcastInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:deployer.BroadcastInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  broadcast_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&input_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idx_) -
      reinterpret_cast<char*>(&input_offset_)) + sizeof(idx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BroadcastInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string var_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_var_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "deployer.BroadcastInfo.var_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string broadcast_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_broadcast_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "deployer.BroadcastInfo.broadcast_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 input_offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          input_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 input_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          input_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 output_offset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          output_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 output_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          output_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BroadcastInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:deployer.BroadcastInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string var_name = 1;
  if (this->var_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_name().data(), static_cast<int>(this->_internal_var_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "deployer.BroadcastInfo.var_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_var_name(), target);
  }

  // string broadcast_name = 2;
  if (this->broadcast_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_broadcast_name().data(), static_cast<int>(this->_internal_broadcast_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "deployer.BroadcastInfo.broadcast_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_broadcast_name(), target);
  }

  // int32 idx = 3;
  if (this->idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_idx(), target);
  }

  // int64 input_offset = 4;
  if (this->input_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_input_offset(), target);
  }

  // uint64 input_size = 5;
  if (this->input_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_input_size(), target);
  }

  // int64 output_offset = 6;
  if (this->output_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_output_offset(), target);
  }

  // uint64 output_size = 7;
  if (this->output_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_output_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:deployer.BroadcastInfo)
  return target;
}

size_t BroadcastInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deployer.BroadcastInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string var_name = 1;
  if (this->var_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_name());
  }

  // string broadcast_name = 2;
  if (this->broadcast_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_broadcast_name());
  }

  // int64 input_offset = 4;
  if (this->input_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_input_offset());
  }

  // uint64 input_size = 5;
  if (this->input_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_input_size());
  }

  // int64 output_offset = 6;
  if (this->output_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_output_offset());
  }

  // uint64 output_size = 7;
  if (this->output_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_output_size());
  }

  // int32 idx = 3;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BroadcastInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deployer.BroadcastInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BroadcastInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BroadcastInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deployer.BroadcastInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deployer.BroadcastInfo)
    MergeFrom(*source);
  }
}

void BroadcastInfo::MergeFrom(const BroadcastInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deployer.BroadcastInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.var_name().size() > 0) {
    _internal_set_var_name(from._internal_var_name());
  }
  if (from.broadcast_name().size() > 0) {
    _internal_set_broadcast_name(from._internal_broadcast_name());
  }
  if (from.input_offset() != 0) {
    _internal_set_input_offset(from._internal_input_offset());
  }
  if (from.input_size() != 0) {
    _internal_set_input_size(from._internal_input_size());
  }
  if (from.output_offset() != 0) {
    _internal_set_output_offset(from._internal_output_offset());
  }
  if (from.output_size() != 0) {
    _internal_set_output_size(from._internal_output_size());
  }
  if (from.idx() != 0) {
    _internal_set_idx(from._internal_idx());
  }
}

void BroadcastInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deployer.BroadcastInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastInfo::CopyFrom(const BroadcastInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deployer.BroadcastInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastInfo::IsInitialized() const {
  return true;
}

void BroadcastInfo::InternalSwap(BroadcastInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  var_name_.Swap(&other->var_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  broadcast_name_.Swap(&other->broadcast_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BroadcastInfo, idx_)
      + sizeof(BroadcastInfo::idx_)
      - PROTOBUF_FIELD_OFFSET(BroadcastInfo, input_offset_)>(
          reinterpret_cast<char*>(&input_offset_),
          reinterpret_cast<char*>(&other->input_offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse::BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse() {}
BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse::BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse::MergeFrom(const BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void BroadcastMultiInfo::InitAsDefaultInstance() {
}
class BroadcastMultiInfo::_Internal {
 public:
};

BroadcastMultiInfo::BroadcastMultiInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  broadcast_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:deployer.BroadcastMultiInfo)
}
BroadcastMultiInfo::BroadcastMultiInfo(const BroadcastMultiInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  broadcast_info_.MergeFrom(from.broadcast_info_);
  // @@protoc_insertion_point(copy_constructor:deployer.BroadcastMultiInfo)
}

void BroadcastMultiInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BroadcastMultiInfo_var_5fmanager_2eproto.base);
}

BroadcastMultiInfo::~BroadcastMultiInfo() {
  // @@protoc_insertion_point(destructor:deployer.BroadcastMultiInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BroadcastMultiInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BroadcastMultiInfo::ArenaDtor(void* object) {
  BroadcastMultiInfo* _this = reinterpret_cast< BroadcastMultiInfo* >(object);
  (void)_this;
}
void BroadcastMultiInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BroadcastMultiInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BroadcastMultiInfo& BroadcastMultiInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BroadcastMultiInfo_var_5fmanager_2eproto.base);
  return *internal_default_instance();
}


void BroadcastMultiInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:deployer.BroadcastMultiInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BroadcastMultiInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .deployer.BroadcastInfo> broadcast_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&broadcast_info_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BroadcastMultiInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:deployer.BroadcastMultiInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .deployer.BroadcastInfo> broadcast_info = 1;
  if (!this->_internal_broadcast_info().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::BroadcastInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "deployer.BroadcastMultiInfo.BroadcastInfoEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_broadcast_info().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_broadcast_info().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::BroadcastInfo >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::BroadcastInfo >::const_iterator
          it = this->_internal_broadcast_info().begin();
          it != this->_internal_broadcast_info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::BroadcastInfo >::const_iterator
          it = this->_internal_broadcast_info().begin();
          it != this->_internal_broadcast_info().end(); ++it) {
        target = BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:deployer.BroadcastMultiInfo)
  return target;
}

size_t BroadcastMultiInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deployer.BroadcastMultiInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .deployer.BroadcastInfo> broadcast_info = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_broadcast_info_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::BroadcastInfo >::const_iterator
      it = this->_internal_broadcast_info().begin();
      it != this->_internal_broadcast_info().end(); ++it) {
    total_size += BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BroadcastMultiInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deployer.BroadcastMultiInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BroadcastMultiInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BroadcastMultiInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deployer.BroadcastMultiInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deployer.BroadcastMultiInfo)
    MergeFrom(*source);
  }
}

void BroadcastMultiInfo::MergeFrom(const BroadcastMultiInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deployer.BroadcastMultiInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  broadcast_info_.MergeFrom(from.broadcast_info_);
}

void BroadcastMultiInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deployer.BroadcastMultiInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastMultiInfo::CopyFrom(const BroadcastMultiInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deployer.BroadcastMultiInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastMultiInfo::IsInitialized() const {
  return true;
}

void BroadcastMultiInfo::InternalSwap(BroadcastMultiInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  broadcast_info_.Swap(&other->broadcast_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastMultiInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

VarDescInfo_CurVarTensorDescMapEntry_DoNotUse::VarDescInfo_CurVarTensorDescMapEntry_DoNotUse() {}
VarDescInfo_CurVarTensorDescMapEntry_DoNotUse::VarDescInfo_CurVarTensorDescMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void VarDescInfo_CurVarTensorDescMapEntry_DoNotUse::MergeFrom(const VarDescInfo_CurVarTensorDescMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata VarDescInfo_CurVarTensorDescMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void VarDescInfo_CurVarTensorDescMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

VarDescInfo_VarToTransRoadEntry_DoNotUse::VarDescInfo_VarToTransRoadEntry_DoNotUse() {}
VarDescInfo_VarToTransRoadEntry_DoNotUse::VarDescInfo_VarToTransRoadEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void VarDescInfo_VarToTransRoadEntry_DoNotUse::MergeFrom(const VarDescInfo_VarToTransRoadEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata VarDescInfo_VarToTransRoadEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void VarDescInfo_VarToTransRoadEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse::VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse() {}
VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse::VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse::MergeFrom(const VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void VarDescInfo::InitAsDefaultInstance() {
}
class VarDescInfo::_Internal {
 public:
};

void VarDescInfo::clear_cur_var_tensor_desc_map() {
  cur_var_tensor_desc_map_.Clear();
}
void VarDescInfo::clear_staged_var_tensor_desc_map() {
  staged_var_tensor_desc_map_.Clear();
}
VarDescInfo::VarDescInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cur_var_tensor_desc_map_(arena),
  var_to_trans_road_(arena),
  changed_var_names_(arena),
  staged_var_tensor_desc_map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:deployer.VarDescInfo)
}
VarDescInfo::VarDescInfo(const VarDescInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      changed_var_names_(from.changed_var_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cur_var_tensor_desc_map_.MergeFrom(from.cur_var_tensor_desc_map_);
  var_to_trans_road_.MergeFrom(from.var_to_trans_road_);
  staged_var_tensor_desc_map_.MergeFrom(from.staged_var_tensor_desc_map_);
  // @@protoc_insertion_point(copy_constructor:deployer.VarDescInfo)
}

void VarDescInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VarDescInfo_var_5fmanager_2eproto.base);
}

VarDescInfo::~VarDescInfo() {
  // @@protoc_insertion_point(destructor:deployer.VarDescInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VarDescInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VarDescInfo::ArenaDtor(void* object) {
  VarDescInfo* _this = reinterpret_cast< VarDescInfo* >(object);
  (void)_this;
}
void VarDescInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VarDescInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VarDescInfo& VarDescInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VarDescInfo_var_5fmanager_2eproto.base);
  return *internal_default_instance();
}


void VarDescInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:deployer.VarDescInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cur_var_tensor_desc_map_.Clear();
  var_to_trans_road_.Clear();
  changed_var_names_.Clear();
  staged_var_tensor_desc_map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VarDescInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .ge.proto.TensorDescriptor> cur_var_tensor_desc_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&cur_var_tensor_desc_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .deployer.TransNodeMultiInfo> var_to_trans_road = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&var_to_trans_road_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string changed_var_names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_changed_var_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "deployer.VarDescInfo.changed_var_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .ge.proto.TensorDescriptor> staged_var_tensor_desc_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&staged_var_tensor_desc_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VarDescInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:deployer.VarDescInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .ge.proto.TensorDescriptor> cur_var_tensor_desc_map = 1;
  if (!this->_internal_cur_var_tensor_desc_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "deployer.VarDescInfo.CurVarTensorDescMapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_cur_var_tensor_desc_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_cur_var_tensor_desc_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >::const_iterator
          it = this->_internal_cur_var_tensor_desc_map().begin();
          it != this->_internal_cur_var_tensor_desc_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = VarDescInfo_CurVarTensorDescMapEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >::const_iterator
          it = this->_internal_cur_var_tensor_desc_map().begin();
          it != this->_internal_cur_var_tensor_desc_map().end(); ++it) {
        target = VarDescInfo_CurVarTensorDescMapEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .deployer.TransNodeMultiInfo> var_to_trans_road = 2;
  if (!this->_internal_var_to_trans_road().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::TransNodeMultiInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "deployer.VarDescInfo.VarToTransRoadEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_var_to_trans_road().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_var_to_trans_road().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::TransNodeMultiInfo >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::TransNodeMultiInfo >::const_iterator
          it = this->_internal_var_to_trans_road().begin();
          it != this->_internal_var_to_trans_road().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = VarDescInfo_VarToTransRoadEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::TransNodeMultiInfo >::const_iterator
          it = this->_internal_var_to_trans_road().begin();
          it != this->_internal_var_to_trans_road().end(); ++it) {
        target = VarDescInfo_VarToTransRoadEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated string changed_var_names = 3;
  for (int i = 0, n = this->_internal_changed_var_names_size(); i < n; i++) {
    const auto& s = this->_internal_changed_var_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "deployer.VarDescInfo.changed_var_names");
    target = stream->WriteString(3, s, target);
  }

  // map<string, .ge.proto.TensorDescriptor> staged_var_tensor_desc_map = 4;
  if (!this->_internal_staged_var_tensor_desc_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "deployer.VarDescInfo.StagedVarTensorDescMapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_staged_var_tensor_desc_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_staged_var_tensor_desc_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >::const_iterator
          it = this->_internal_staged_var_tensor_desc_map().begin();
          it != this->_internal_staged_var_tensor_desc_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >::const_iterator
          it = this->_internal_staged_var_tensor_desc_map().begin();
          it != this->_internal_staged_var_tensor_desc_map().end(); ++it) {
        target = VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:deployer.VarDescInfo)
  return target;
}

size_t VarDescInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deployer.VarDescInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .ge.proto.TensorDescriptor> cur_var_tensor_desc_map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cur_var_tensor_desc_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >::const_iterator
      it = this->_internal_cur_var_tensor_desc_map().begin();
      it != this->_internal_cur_var_tensor_desc_map().end(); ++it) {
    total_size += VarDescInfo_CurVarTensorDescMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .deployer.TransNodeMultiInfo> var_to_trans_road = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_var_to_trans_road_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::TransNodeMultiInfo >::const_iterator
      it = this->_internal_var_to_trans_road().begin();
      it != this->_internal_var_to_trans_road().end(); ++it) {
    total_size += VarDescInfo_VarToTransRoadEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string changed_var_names = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(changed_var_names_.size());
  for (int i = 0, n = changed_var_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      changed_var_names_.Get(i));
  }

  // map<string, .ge.proto.TensorDescriptor> staged_var_tensor_desc_map = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_staged_var_tensor_desc_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >::const_iterator
      it = this->_internal_staged_var_tensor_desc_map().begin();
      it != this->_internal_staged_var_tensor_desc_map().end(); ++it) {
    total_size += VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VarDescInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deployer.VarDescInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VarDescInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VarDescInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deployer.VarDescInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deployer.VarDescInfo)
    MergeFrom(*source);
  }
}

void VarDescInfo::MergeFrom(const VarDescInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deployer.VarDescInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cur_var_tensor_desc_map_.MergeFrom(from.cur_var_tensor_desc_map_);
  var_to_trans_road_.MergeFrom(from.var_to_trans_road_);
  changed_var_names_.MergeFrom(from.changed_var_names_);
  staged_var_tensor_desc_map_.MergeFrom(from.staged_var_tensor_desc_map_);
}

void VarDescInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deployer.VarDescInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VarDescInfo::CopyFrom(const VarDescInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deployer.VarDescInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VarDescInfo::IsInitialized() const {
  return true;
}

void VarDescInfo::InternalSwap(VarDescInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cur_var_tensor_desc_map_.Swap(&other->cur_var_tensor_desc_map_);
  var_to_trans_road_.Swap(&other->var_to_trans_road_);
  changed_var_names_.InternalSwap(&other->changed_var_names_);
  staged_var_tensor_desc_map_.Swap(&other->staged_var_tensor_desc_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VarDescInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VarMatchInfo::InitAsDefaultInstance() {
  ::deployer::_VarMatchInfo_default_instance_._instance.get_mutable()->desc_info_before_compile_ = const_cast< ::deployer::VarDescInfo*>(
      ::deployer::VarDescInfo::internal_default_instance());
  ::deployer::_VarMatchInfo_default_instance_._instance.get_mutable()->desc_info_after_compile_ = const_cast< ::deployer::VarDescInfo*>(
      ::deployer::VarDescInfo::internal_default_instance());
}
class VarMatchInfo::_Internal {
 public:
  static const ::deployer::VarDescInfo& desc_info_before_compile(const VarMatchInfo* msg);
  static const ::deployer::VarDescInfo& desc_info_after_compile(const VarMatchInfo* msg);
};

const ::deployer::VarDescInfo&
VarMatchInfo::_Internal::desc_info_before_compile(const VarMatchInfo* msg) {
  return *msg->desc_info_before_compile_;
}
const ::deployer::VarDescInfo&
VarMatchInfo::_Internal::desc_info_after_compile(const VarMatchInfo* msg) {
  return *msg->desc_info_after_compile_;
}
VarMatchInfo::VarMatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:deployer.VarMatchInfo)
}
VarMatchInfo::VarMatchInfo(const VarMatchInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_desc_info_before_compile()) {
    desc_info_before_compile_ = new ::deployer::VarDescInfo(*from.desc_info_before_compile_);
  } else {
    desc_info_before_compile_ = nullptr;
  }
  if (from._internal_has_desc_info_after_compile()) {
    desc_info_after_compile_ = new ::deployer::VarDescInfo(*from.desc_info_after_compile_);
  } else {
    desc_info_after_compile_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:deployer.VarMatchInfo)
}

void VarMatchInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VarMatchInfo_var_5fmanager_2eproto.base);
  ::memset(&desc_info_before_compile_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&desc_info_after_compile_) -
      reinterpret_cast<char*>(&desc_info_before_compile_)) + sizeof(desc_info_after_compile_));
}

VarMatchInfo::~VarMatchInfo() {
  // @@protoc_insertion_point(destructor:deployer.VarMatchInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VarMatchInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete desc_info_before_compile_;
  if (this != internal_default_instance()) delete desc_info_after_compile_;
}

void VarMatchInfo::ArenaDtor(void* object) {
  VarMatchInfo* _this = reinterpret_cast< VarMatchInfo* >(object);
  (void)_this;
}
void VarMatchInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VarMatchInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VarMatchInfo& VarMatchInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VarMatchInfo_var_5fmanager_2eproto.base);
  return *internal_default_instance();
}


void VarMatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:deployer.VarMatchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && desc_info_before_compile_ != nullptr) {
    delete desc_info_before_compile_;
  }
  desc_info_before_compile_ = nullptr;
  if (GetArena() == nullptr && desc_info_after_compile_ != nullptr) {
    delete desc_info_after_compile_;
  }
  desc_info_after_compile_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VarMatchInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .deployer.VarDescInfo desc_info_before_compile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_desc_info_before_compile(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .deployer.VarDescInfo desc_info_after_compile = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_desc_info_after_compile(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VarMatchInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:deployer.VarMatchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .deployer.VarDescInfo desc_info_before_compile = 1;
  if (this->has_desc_info_before_compile()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::desc_info_before_compile(this), target, stream);
  }

  // .deployer.VarDescInfo desc_info_after_compile = 2;
  if (this->has_desc_info_after_compile()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::desc_info_after_compile(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:deployer.VarMatchInfo)
  return target;
}

size_t VarMatchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deployer.VarMatchInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .deployer.VarDescInfo desc_info_before_compile = 1;
  if (this->has_desc_info_before_compile()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *desc_info_before_compile_);
  }

  // .deployer.VarDescInfo desc_info_after_compile = 2;
  if (this->has_desc_info_after_compile()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *desc_info_after_compile_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VarMatchInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deployer.VarMatchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VarMatchInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VarMatchInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deployer.VarMatchInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deployer.VarMatchInfo)
    MergeFrom(*source);
  }
}

void VarMatchInfo::MergeFrom(const VarMatchInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deployer.VarMatchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_desc_info_before_compile()) {
    _internal_mutable_desc_info_before_compile()->::deployer::VarDescInfo::MergeFrom(from._internal_desc_info_before_compile());
  }
  if (from.has_desc_info_after_compile()) {
    _internal_mutable_desc_info_after_compile()->::deployer::VarDescInfo::MergeFrom(from._internal_desc_info_after_compile());
  }
}

void VarMatchInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deployer.VarMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VarMatchInfo::CopyFrom(const VarMatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deployer.VarMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VarMatchInfo::IsInitialized() const {
  return true;
}

void VarMatchInfo::InternalSwap(VarMatchInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VarMatchInfo, desc_info_after_compile_)
      + sizeof(VarMatchInfo::desc_info_after_compile_)
      - PROTOBUF_FIELD_OFFSET(VarMatchInfo, desc_info_before_compile_)>(
          reinterpret_cast<char*>(&desc_info_before_compile_),
          reinterpret_cast<char*>(&other->desc_info_before_compile_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VarMatchInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

VarResourceInfo_VarOffsetMapEntry_DoNotUse::VarResourceInfo_VarOffsetMapEntry_DoNotUse() {}
VarResourceInfo_VarOffsetMapEntry_DoNotUse::VarResourceInfo_VarOffsetMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void VarResourceInfo_VarOffsetMapEntry_DoNotUse::MergeFrom(const VarResourceInfo_VarOffsetMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata VarResourceInfo_VarOffsetMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void VarResourceInfo_VarOffsetMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

VarResourceInfo_VarAddrMgrMapEntry_DoNotUse::VarResourceInfo_VarAddrMgrMapEntry_DoNotUse() {}
VarResourceInfo_VarAddrMgrMapEntry_DoNotUse::VarResourceInfo_VarAddrMgrMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void VarResourceInfo_VarAddrMgrMapEntry_DoNotUse::MergeFrom(const VarResourceInfo_VarAddrMgrMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata VarResourceInfo_VarAddrMgrMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void VarResourceInfo_VarAddrMgrMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse::VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse() {}
VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse::VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse::MergeFrom(const VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

VarResourceInfo_VarToTransRoadEntry_DoNotUse::VarResourceInfo_VarToTransRoadEntry_DoNotUse() {}
VarResourceInfo_VarToTransRoadEntry_DoNotUse::VarResourceInfo_VarToTransRoadEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void VarResourceInfo_VarToTransRoadEntry_DoNotUse::MergeFrom(const VarResourceInfo_VarToTransRoadEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata VarResourceInfo_VarToTransRoadEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void VarResourceInfo_VarToTransRoadEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse::VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse() {}
VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse::VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse::MergeFrom(const VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse::VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse() {}
VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse::VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse::MergeFrom(const VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

VarResourceInfo_VarBroadCastInfoEntry_DoNotUse::VarResourceInfo_VarBroadCastInfoEntry_DoNotUse() {}
VarResourceInfo_VarBroadCastInfoEntry_DoNotUse::VarResourceInfo_VarBroadCastInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void VarResourceInfo_VarBroadCastInfoEntry_DoNotUse::MergeFrom(const VarResourceInfo_VarBroadCastInfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata VarResourceInfo_VarBroadCastInfoEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void VarResourceInfo_VarBroadCastInfoEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse::VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse() {}
VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse::VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse::MergeFrom(const VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void VarResourceInfo::InitAsDefaultInstance() {
}
class VarResourceInfo::_Internal {
 public:
};

void VarResourceInfo::clear_cur_var_tensor_desc_map() {
  cur_var_tensor_desc_map_.Clear();
}
VarResourceInfo::VarResourceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  var_offset_map_(arena),
  var_addr_mgr_map_(arena),
  cur_var_tensor_desc_map_(arena),
  var_to_trans_road_(arena),
  var_names_to_changed_graph_id_(arena),
  var_names_to_allocated_graph_id_(arena),
  var_broad_cast_info_(arena),
  var_dev_addr_mgr_map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:deployer.VarResourceInfo)
}
VarResourceInfo::VarResourceInfo(const VarResourceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  var_offset_map_.MergeFrom(from.var_offset_map_);
  var_addr_mgr_map_.MergeFrom(from.var_addr_mgr_map_);
  cur_var_tensor_desc_map_.MergeFrom(from.cur_var_tensor_desc_map_);
  var_to_trans_road_.MergeFrom(from.var_to_trans_road_);
  var_names_to_changed_graph_id_.MergeFrom(from.var_names_to_changed_graph_id_);
  var_names_to_allocated_graph_id_.MergeFrom(from.var_names_to_allocated_graph_id_);
  var_broad_cast_info_.MergeFrom(from.var_broad_cast_info_);
  var_dev_addr_mgr_map_.MergeFrom(from.var_dev_addr_mgr_map_);
  // @@protoc_insertion_point(copy_constructor:deployer.VarResourceInfo)
}

void VarResourceInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VarResourceInfo_var_5fmanager_2eproto.base);
}

VarResourceInfo::~VarResourceInfo() {
  // @@protoc_insertion_point(destructor:deployer.VarResourceInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VarResourceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VarResourceInfo::ArenaDtor(void* object) {
  VarResourceInfo* _this = reinterpret_cast< VarResourceInfo* >(object);
  (void)_this;
}
void VarResourceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VarResourceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VarResourceInfo& VarResourceInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VarResourceInfo_var_5fmanager_2eproto.base);
  return *internal_default_instance();
}


void VarResourceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:deployer.VarResourceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var_offset_map_.Clear();
  var_addr_mgr_map_.Clear();
  cur_var_tensor_desc_map_.Clear();
  var_to_trans_road_.Clear();
  var_names_to_changed_graph_id_.Clear();
  var_names_to_allocated_graph_id_.Clear();
  var_broad_cast_info_.Clear();
  var_dev_addr_mgr_map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VarResourceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<uint64, uint32> var_offset_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&var_offset_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .deployer.VarAddrMgrInfo> var_addr_mgr_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&var_addr_mgr_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .ge.proto.TensorDescriptor> cur_var_tensor_desc_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&cur_var_tensor_desc_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .deployer.TransNodeMultiInfo> var_to_trans_road = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&var_to_trans_road_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, uint32> var_names_to_changed_graph_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&var_names_to_changed_graph_id_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, uint32> var_names_to_allocated_graph_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&var_names_to_allocated_graph_id_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // map<uint32, .deployer.BroadcastMultiInfo> var_broad_cast_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&var_broad_cast_info_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // map<uint64, .deployer.VarDevAddrMgr> var_dev_addr_mgr_map = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&var_dev_addr_mgr_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VarResourceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:deployer.VarResourceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint64, uint32> var_offset_map = 1;
  if (!this->_internal_var_offset_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_var_offset_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_var_offset_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_var_offset_map().begin();
          it != this->_internal_var_offset_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = VarResourceInfo_VarOffsetMapEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_var_offset_map().begin();
          it != this->_internal_var_offset_map().end(); ++it) {
        target = VarResourceInfo_VarOffsetMapEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  // map<string, .deployer.VarAddrMgrInfo> var_addr_mgr_map = 2;
  if (!this->_internal_var_addr_mgr_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::VarAddrMgrInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "deployer.VarResourceInfo.VarAddrMgrMapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_var_addr_mgr_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_var_addr_mgr_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::VarAddrMgrInfo >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::VarAddrMgrInfo >::const_iterator
          it = this->_internal_var_addr_mgr_map().begin();
          it != this->_internal_var_addr_mgr_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = VarResourceInfo_VarAddrMgrMapEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::VarAddrMgrInfo >::const_iterator
          it = this->_internal_var_addr_mgr_map().begin();
          it != this->_internal_var_addr_mgr_map().end(); ++it) {
        target = VarResourceInfo_VarAddrMgrMapEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .ge.proto.TensorDescriptor> cur_var_tensor_desc_map = 3;
  if (!this->_internal_cur_var_tensor_desc_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "deployer.VarResourceInfo.CurVarTensorDescMapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_cur_var_tensor_desc_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_cur_var_tensor_desc_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >::const_iterator
          it = this->_internal_cur_var_tensor_desc_map().begin();
          it != this->_internal_cur_var_tensor_desc_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >::const_iterator
          it = this->_internal_cur_var_tensor_desc_map().begin();
          it != this->_internal_cur_var_tensor_desc_map().end(); ++it) {
        target = VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .deployer.TransNodeMultiInfo> var_to_trans_road = 4;
  if (!this->_internal_var_to_trans_road().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::TransNodeMultiInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "deployer.VarResourceInfo.VarToTransRoadEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_var_to_trans_road().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_var_to_trans_road().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::TransNodeMultiInfo >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::TransNodeMultiInfo >::const_iterator
          it = this->_internal_var_to_trans_road().begin();
          it != this->_internal_var_to_trans_road().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = VarResourceInfo_VarToTransRoadEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::TransNodeMultiInfo >::const_iterator
          it = this->_internal_var_to_trans_road().begin();
          it != this->_internal_var_to_trans_road().end(); ++it) {
        target = VarResourceInfo_VarToTransRoadEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, uint32> var_names_to_changed_graph_id = 5;
  if (!this->_internal_var_names_to_changed_graph_id().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "deployer.VarResourceInfo.VarNamesToChangedGraphIdEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_var_names_to_changed_graph_id().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_var_names_to_changed_graph_id().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_var_names_to_changed_graph_id().begin();
          it != this->_internal_var_names_to_changed_graph_id().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_var_names_to_changed_graph_id().begin();
          it != this->_internal_var_names_to_changed_graph_id().end(); ++it) {
        target = VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, uint32> var_names_to_allocated_graph_id = 6;
  if (!this->_internal_var_names_to_allocated_graph_id().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "deployer.VarResourceInfo.VarNamesToAllocatedGraphIdEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_var_names_to_allocated_graph_id().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_var_names_to_allocated_graph_id().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_var_names_to_allocated_graph_id().begin();
          it != this->_internal_var_names_to_allocated_graph_id().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_var_names_to_allocated_graph_id().begin();
          it != this->_internal_var_names_to_allocated_graph_id().end(); ++it) {
        target = VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<uint32, .deployer.BroadcastMultiInfo> var_broad_cast_info = 7;
  if (!this->_internal_var_broad_cast_info().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::deployer::BroadcastMultiInfo >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_var_broad_cast_info().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_var_broad_cast_info().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::deployer::BroadcastMultiInfo >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::deployer::BroadcastMultiInfo >::const_iterator
          it = this->_internal_var_broad_cast_info().begin();
          it != this->_internal_var_broad_cast_info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = VarResourceInfo_VarBroadCastInfoEntry_DoNotUse::Funcs::InternalSerialize(7, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::deployer::BroadcastMultiInfo >::const_iterator
          it = this->_internal_var_broad_cast_info().begin();
          it != this->_internal_var_broad_cast_info().end(); ++it) {
        target = VarResourceInfo_VarBroadCastInfoEntry_DoNotUse::Funcs::InternalSerialize(7, it->first, it->second, target, stream);
      }
    }
  }

  // map<uint64, .deployer.VarDevAddrMgr> var_dev_addr_mgr_map = 8;
  if (!this->_internal_var_dev_addr_mgr_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::deployer::VarDevAddrMgr >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_var_dev_addr_mgr_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_var_dev_addr_mgr_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::deployer::VarDevAddrMgr >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::deployer::VarDevAddrMgr >::const_iterator
          it = this->_internal_var_dev_addr_mgr_map().begin();
          it != this->_internal_var_dev_addr_mgr_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse::Funcs::InternalSerialize(8, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::deployer::VarDevAddrMgr >::const_iterator
          it = this->_internal_var_dev_addr_mgr_map().begin();
          it != this->_internal_var_dev_addr_mgr_map().end(); ++it) {
        target = VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse::Funcs::InternalSerialize(8, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:deployer.VarResourceInfo)
  return target;
}

size_t VarResourceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deployer.VarResourceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, uint32> var_offset_map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_var_offset_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_var_offset_map().begin();
      it != this->_internal_var_offset_map().end(); ++it) {
    total_size += VarResourceInfo_VarOffsetMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .deployer.VarAddrMgrInfo> var_addr_mgr_map = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_var_addr_mgr_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::VarAddrMgrInfo >::const_iterator
      it = this->_internal_var_addr_mgr_map().begin();
      it != this->_internal_var_addr_mgr_map().end(); ++it) {
    total_size += VarResourceInfo_VarAddrMgrMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .ge.proto.TensorDescriptor> cur_var_tensor_desc_map = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cur_var_tensor_desc_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >::const_iterator
      it = this->_internal_cur_var_tensor_desc_map().begin();
      it != this->_internal_cur_var_tensor_desc_map().end(); ++it) {
    total_size += VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .deployer.TransNodeMultiInfo> var_to_trans_road = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_var_to_trans_road_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::TransNodeMultiInfo >::const_iterator
      it = this->_internal_var_to_trans_road().begin();
      it != this->_internal_var_to_trans_road().end(); ++it) {
    total_size += VarResourceInfo_VarToTransRoadEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, uint32> var_names_to_changed_graph_id = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_var_names_to_changed_graph_id_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_var_names_to_changed_graph_id().begin();
      it != this->_internal_var_names_to_changed_graph_id().end(); ++it) {
    total_size += VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, uint32> var_names_to_allocated_graph_id = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_var_names_to_allocated_graph_id_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_var_names_to_allocated_graph_id().begin();
      it != this->_internal_var_names_to_allocated_graph_id().end(); ++it) {
    total_size += VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .deployer.BroadcastMultiInfo> var_broad_cast_info = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_var_broad_cast_info_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::deployer::BroadcastMultiInfo >::const_iterator
      it = this->_internal_var_broad_cast_info().begin();
      it != this->_internal_var_broad_cast_info().end(); ++it) {
    total_size += VarResourceInfo_VarBroadCastInfoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint64, .deployer.VarDevAddrMgr> var_dev_addr_mgr_map = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_var_dev_addr_mgr_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::deployer::VarDevAddrMgr >::const_iterator
      it = this->_internal_var_dev_addr_mgr_map().begin();
      it != this->_internal_var_dev_addr_mgr_map().end(); ++it) {
    total_size += VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VarResourceInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deployer.VarResourceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VarResourceInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VarResourceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deployer.VarResourceInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deployer.VarResourceInfo)
    MergeFrom(*source);
  }
}

void VarResourceInfo::MergeFrom(const VarResourceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deployer.VarResourceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  var_offset_map_.MergeFrom(from.var_offset_map_);
  var_addr_mgr_map_.MergeFrom(from.var_addr_mgr_map_);
  cur_var_tensor_desc_map_.MergeFrom(from.cur_var_tensor_desc_map_);
  var_to_trans_road_.MergeFrom(from.var_to_trans_road_);
  var_names_to_changed_graph_id_.MergeFrom(from.var_names_to_changed_graph_id_);
  var_names_to_allocated_graph_id_.MergeFrom(from.var_names_to_allocated_graph_id_);
  var_broad_cast_info_.MergeFrom(from.var_broad_cast_info_);
  var_dev_addr_mgr_map_.MergeFrom(from.var_dev_addr_mgr_map_);
}

void VarResourceInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deployer.VarResourceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VarResourceInfo::CopyFrom(const VarResourceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deployer.VarResourceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VarResourceInfo::IsInitialized() const {
  return true;
}

void VarResourceInfo::InternalSwap(VarResourceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  var_offset_map_.Swap(&other->var_offset_map_);
  var_addr_mgr_map_.Swap(&other->var_addr_mgr_map_);
  cur_var_tensor_desc_map_.Swap(&other->cur_var_tensor_desc_map_);
  var_to_trans_road_.Swap(&other->var_to_trans_road_);
  var_names_to_changed_graph_id_.Swap(&other->var_names_to_changed_graph_id_);
  var_names_to_allocated_graph_id_.Swap(&other->var_names_to_allocated_graph_id_);
  var_broad_cast_info_.Swap(&other->var_broad_cast_info_);
  var_dev_addr_mgr_map_.Swap(&other->var_dev_addr_mgr_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VarResourceInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemResourceInfo::InitAsDefaultInstance() {
}
class MemResourceInfo::_Internal {
 public:
};

MemResourceInfo::MemResourceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:deployer.MemResourceInfo)
}
MemResourceInfo::MemResourceInfo(const MemResourceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_size_, &from.total_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&var_mem_size_) -
    reinterpret_cast<char*>(&total_size_)) + sizeof(var_mem_size_));
  // @@protoc_insertion_point(copy_constructor:deployer.MemResourceInfo)
}

void MemResourceInfo::SharedCtor() {
  ::memset(&total_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_mem_size_) -
      reinterpret_cast<char*>(&total_size_)) + sizeof(var_mem_size_));
}

MemResourceInfo::~MemResourceInfo() {
  // @@protoc_insertion_point(destructor:deployer.MemResourceInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MemResourceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MemResourceInfo::ArenaDtor(void* object) {
  MemResourceInfo* _this = reinterpret_cast< MemResourceInfo* >(object);
  (void)_this;
}
void MemResourceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemResourceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemResourceInfo& MemResourceInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemResourceInfo_var_5fmanager_2eproto.base);
  return *internal_default_instance();
}


void MemResourceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:deployer.MemResourceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_mem_size_) -
      reinterpret_cast<char*>(&total_size_)) + sizeof(var_mem_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemResourceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 total_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          total_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 var_mem_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          var_mem_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemResourceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:deployer.MemResourceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 total_size = 1;
  if (this->total_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_total_size(), target);
  }

  // uint64 var_mem_size = 2;
  if (this->var_mem_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_var_mem_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:deployer.MemResourceInfo)
  return target;
}

size_t MemResourceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deployer.MemResourceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 total_size = 1;
  if (this->total_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_total_size());
  }

  // uint64 var_mem_size = 2;
  if (this->var_mem_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_var_mem_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemResourceInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deployer.MemResourceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MemResourceInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemResourceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deployer.MemResourceInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deployer.MemResourceInfo)
    MergeFrom(*source);
  }
}

void MemResourceInfo::MergeFrom(const MemResourceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deployer.MemResourceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.total_size() != 0) {
    _internal_set_total_size(from._internal_total_size());
  }
  if (from.var_mem_size() != 0) {
    _internal_set_var_mem_size(from._internal_var_mem_size());
  }
}

void MemResourceInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deployer.MemResourceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemResourceInfo::CopyFrom(const MemResourceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deployer.MemResourceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemResourceInfo::IsInitialized() const {
  return true;
}

void MemResourceInfo::InternalSwap(MemResourceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemResourceInfo, var_mem_size_)
      + sizeof(MemResourceInfo::var_mem_size_)
      - PROTOBUF_FIELD_OFFSET(MemResourceInfo, total_size_)>(
          reinterpret_cast<char*>(&total_size_),
          reinterpret_cast<char*>(&other->total_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MemResourceInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

VarManagerInfo_MemResourceMapEntry_DoNotUse::VarManagerInfo_MemResourceMapEntry_DoNotUse() {}
VarManagerInfo_MemResourceMapEntry_DoNotUse::VarManagerInfo_MemResourceMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void VarManagerInfo_MemResourceMapEntry_DoNotUse::MergeFrom(const VarManagerInfo_MemResourceMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata VarManagerInfo_MemResourceMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void VarManagerInfo_MemResourceMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void VarManagerInfo::InitAsDefaultInstance() {
  ::deployer::_VarManagerInfo_default_instance_._instance.get_mutable()->var_resource_ = const_cast< ::deployer::VarResourceInfo*>(
      ::deployer::VarResourceInfo::internal_default_instance());
}
class VarManagerInfo::_Internal {
 public:
  static const ::deployer::VarResourceInfo& var_resource(const VarManagerInfo* msg);
};

const ::deployer::VarResourceInfo&
VarManagerInfo::_Internal::var_resource(const VarManagerInfo* msg) {
  return *msg->var_resource_;
}
VarManagerInfo::VarManagerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mem_resource_map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:deployer.VarManagerInfo)
}
VarManagerInfo::VarManagerInfo(const VarManagerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mem_resource_map_.MergeFrom(from.mem_resource_map_);
  if (from._internal_has_var_resource()) {
    var_resource_ = new ::deployer::VarResourceInfo(*from.var_resource_);
  } else {
    var_resource_ = nullptr;
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&var_mem_auto_malloc_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(var_mem_auto_malloc_));
  // @@protoc_insertion_point(copy_constructor:deployer.VarManagerInfo)
}

void VarManagerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VarManagerInfo_var_5fmanager_2eproto.base);
  ::memset(&var_resource_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_mem_auto_malloc_) -
      reinterpret_cast<char*>(&var_resource_)) + sizeof(var_mem_auto_malloc_));
}

VarManagerInfo::~VarManagerInfo() {
  // @@protoc_insertion_point(destructor:deployer.VarManagerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VarManagerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete var_resource_;
}

void VarManagerInfo::ArenaDtor(void* object) {
  VarManagerInfo* _this = reinterpret_cast< VarManagerInfo* >(object);
  (void)_this;
}
void VarManagerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VarManagerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VarManagerInfo& VarManagerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VarManagerInfo_var_5fmanager_2eproto.base);
  return *internal_default_instance();
}


void VarManagerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:deployer.VarManagerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mem_resource_map_.Clear();
  if (GetArena() == nullptr && var_resource_ != nullptr) {
    delete var_resource_;
  }
  var_resource_ = nullptr;
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_mem_auto_malloc_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(var_mem_auto_malloc_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VarManagerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 device_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 job_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          job_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 graph_mem_max_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          graph_mem_max_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 var_mem_max_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          var_mem_max_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 var_mem_logic_base = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          var_mem_logic_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 use_max_mem_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          use_max_mem_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .deployer.VarResourceInfo var_resource = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_var_resource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint32, .deployer.MemResourceInfo> mem_resource_map = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&mem_resource_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // bool var_mem_auto_malloc = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          var_mem_auto_malloc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VarManagerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:deployer.VarManagerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // uint64 session_id = 2;
  if (this->session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_session_id(), target);
  }

  // uint32 device_id = 3;
  if (this->device_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_device_id(), target);
  }

  // uint64 job_id = 4;
  if (this->job_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_job_id(), target);
  }

  // uint64 graph_mem_max_size = 5;
  if (this->graph_mem_max_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_graph_mem_max_size(), target);
  }

  // uint64 var_mem_max_size = 6;
  if (this->var_mem_max_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_var_mem_max_size(), target);
  }

  // uint64 var_mem_logic_base = 7;
  if (this->var_mem_logic_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_var_mem_logic_base(), target);
  }

  // uint64 use_max_mem_size = 8;
  if (this->use_max_mem_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_use_max_mem_size(), target);
  }

  // .deployer.VarResourceInfo var_resource = 9;
  if (this->has_var_resource()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::var_resource(this), target, stream);
  }

  // map<uint32, .deployer.MemResourceInfo> mem_resource_map = 10;
  if (!this->_internal_mem_resource_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::deployer::MemResourceInfo >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_mem_resource_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_mem_resource_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::deployer::MemResourceInfo >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::deployer::MemResourceInfo >::const_iterator
          it = this->_internal_mem_resource_map().begin();
          it != this->_internal_mem_resource_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = VarManagerInfo_MemResourceMapEntry_DoNotUse::Funcs::InternalSerialize(10, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::deployer::MemResourceInfo >::const_iterator
          it = this->_internal_mem_resource_map().begin();
          it != this->_internal_mem_resource_map().end(); ++it) {
        target = VarManagerInfo_MemResourceMapEntry_DoNotUse::Funcs::InternalSerialize(10, it->first, it->second, target, stream);
      }
    }
  }

  // bool var_mem_auto_malloc = 11;
  if (this->var_mem_auto_malloc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_var_mem_auto_malloc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:deployer.VarManagerInfo)
  return target;
}

size_t VarManagerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deployer.VarManagerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .deployer.MemResourceInfo> mem_resource_map = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mem_resource_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::deployer::MemResourceInfo >::const_iterator
      it = this->_internal_mem_resource_map().begin();
      it != this->_internal_mem_resource_map().end(); ++it) {
    total_size += VarManagerInfo_MemResourceMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .deployer.VarResourceInfo var_resource = 9;
  if (this->has_var_resource()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *var_resource_);
  }

  // uint64 session_id = 2;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_session_id());
  }

  // uint32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  // uint32 device_id = 3;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_device_id());
  }

  // uint64 job_id = 4;
  if (this->job_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_job_id());
  }

  // uint64 graph_mem_max_size = 5;
  if (this->graph_mem_max_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_graph_mem_max_size());
  }

  // uint64 var_mem_max_size = 6;
  if (this->var_mem_max_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_var_mem_max_size());
  }

  // uint64 var_mem_logic_base = 7;
  if (this->var_mem_logic_base() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_var_mem_logic_base());
  }

  // uint64 use_max_mem_size = 8;
  if (this->use_max_mem_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_use_max_mem_size());
  }

  // bool var_mem_auto_malloc = 11;
  if (this->var_mem_auto_malloc() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VarManagerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deployer.VarManagerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VarManagerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VarManagerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deployer.VarManagerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deployer.VarManagerInfo)
    MergeFrom(*source);
  }
}

void VarManagerInfo::MergeFrom(const VarManagerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deployer.VarManagerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mem_resource_map_.MergeFrom(from.mem_resource_map_);
  if (from.has_var_resource()) {
    _internal_mutable_var_resource()->::deployer::VarResourceInfo::MergeFrom(from._internal_var_resource());
  }
  if (from.session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.device_id() != 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.job_id() != 0) {
    _internal_set_job_id(from._internal_job_id());
  }
  if (from.graph_mem_max_size() != 0) {
    _internal_set_graph_mem_max_size(from._internal_graph_mem_max_size());
  }
  if (from.var_mem_max_size() != 0) {
    _internal_set_var_mem_max_size(from._internal_var_mem_max_size());
  }
  if (from.var_mem_logic_base() != 0) {
    _internal_set_var_mem_logic_base(from._internal_var_mem_logic_base());
  }
  if (from.use_max_mem_size() != 0) {
    _internal_set_use_max_mem_size(from._internal_use_max_mem_size());
  }
  if (from.var_mem_auto_malloc() != 0) {
    _internal_set_var_mem_auto_malloc(from._internal_var_mem_auto_malloc());
  }
}

void VarManagerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deployer.VarManagerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VarManagerInfo::CopyFrom(const VarManagerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deployer.VarManagerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VarManagerInfo::IsInitialized() const {
  return true;
}

void VarManagerInfo::InternalSwap(VarManagerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mem_resource_map_.Swap(&other->mem_resource_map_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VarManagerInfo, var_mem_auto_malloc_)
      + sizeof(VarManagerInfo::var_mem_auto_malloc_)
      - PROTOBUF_FIELD_OFFSET(VarManagerInfo, var_resource_)>(
          reinterpret_cast<char*>(&var_resource_),
          reinterpret_cast<char*>(&other->var_resource_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VarManagerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiVarManagerInfo::InitAsDefaultInstance() {
}
class MultiVarManagerInfo::_Internal {
 public:
};

MultiVarManagerInfo::MultiVarManagerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  var_manager_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:deployer.MultiVarManagerInfo)
}
MultiVarManagerInfo::MultiVarManagerInfo(const MultiVarManagerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      var_manager_info_(from.var_manager_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:deployer.MultiVarManagerInfo)
}

void MultiVarManagerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiVarManagerInfo_var_5fmanager_2eproto.base);
}

MultiVarManagerInfo::~MultiVarManagerInfo() {
  // @@protoc_insertion_point(destructor:deployer.MultiVarManagerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiVarManagerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MultiVarManagerInfo::ArenaDtor(void* object) {
  MultiVarManagerInfo* _this = reinterpret_cast< MultiVarManagerInfo* >(object);
  (void)_this;
}
void MultiVarManagerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiVarManagerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiVarManagerInfo& MultiVarManagerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiVarManagerInfo_var_5fmanager_2eproto.base);
  return *internal_default_instance();
}


void MultiVarManagerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:deployer.MultiVarManagerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var_manager_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiVarManagerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .deployer.VarManagerInfo var_manager_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_var_manager_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiVarManagerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:deployer.MultiVarManagerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .deployer.VarManagerInfo var_manager_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_var_manager_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_var_manager_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:deployer.MultiVarManagerInfo)
  return target;
}

size_t MultiVarManagerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deployer.MultiVarManagerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .deployer.VarManagerInfo var_manager_info = 1;
  total_size += 1UL * this->_internal_var_manager_info_size();
  for (const auto& msg : this->var_manager_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiVarManagerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deployer.MultiVarManagerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiVarManagerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiVarManagerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deployer.MultiVarManagerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deployer.MultiVarManagerInfo)
    MergeFrom(*source);
  }
}

void MultiVarManagerInfo::MergeFrom(const MultiVarManagerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deployer.MultiVarManagerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  var_manager_info_.MergeFrom(from.var_manager_info_);
}

void MultiVarManagerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deployer.MultiVarManagerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiVarManagerInfo::CopyFrom(const MultiVarManagerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deployer.MultiVarManagerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiVarManagerInfo::IsInitialized() const {
  return true;
}

void MultiVarManagerInfo::InternalSwap(MultiVarManagerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  var_manager_info_.InternalSwap(&other->var_manager_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiVarManagerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SharedContentDescription::InitAsDefaultInstance() {
  ::deployer::_SharedContentDescription_default_instance_._instance.get_mutable()->tensor_desc_ = const_cast< ::ge::proto::TensorDescriptor*>(
      ::ge::proto::TensorDescriptor::internal_default_instance());
}
class SharedContentDescription::_Internal {
 public:
  static const ::ge::proto::TensorDescriptor& tensor_desc(const SharedContentDescription* msg);
};

const ::ge::proto::TensorDescriptor&
SharedContentDescription::_Internal::tensor_desc(const SharedContentDescription* msg) {
  return *msg->tensor_desc_;
}
void SharedContentDescription::clear_tensor_desc() {
  if (GetArena() == nullptr && tensor_desc_ != nullptr) {
    delete tensor_desc_;
  }
  tensor_desc_ = nullptr;
}
SharedContentDescription::SharedContentDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:deployer.SharedContentDescription)
}
SharedContentDescription::SharedContentDescription(const SharedContentDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_name().empty()) {
    node_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_node_name(),
      GetArena());
  }
  om_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_om_content().empty()) {
    om_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_om_content(),
      GetArena());
  }
  if (from._internal_has_tensor_desc()) {
    tensor_desc_ = new ::ge::proto::TensorDescriptor(*from.tensor_desc_);
  } else {
    tensor_desc_ = nullptr;
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&mem_type_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(mem_type_));
  // @@protoc_insertion_point(copy_constructor:deployer.SharedContentDescription)
}

void SharedContentDescription::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SharedContentDescription_var_5fmanager_2eproto.base);
  node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  om_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tensor_desc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mem_type_) -
      reinterpret_cast<char*>(&tensor_desc_)) + sizeof(mem_type_));
}

SharedContentDescription::~SharedContentDescription() {
  // @@protoc_insertion_point(destructor:deployer.SharedContentDescription)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SharedContentDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  node_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  om_content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tensor_desc_;
}

void SharedContentDescription::ArenaDtor(void* object) {
  SharedContentDescription* _this = reinterpret_cast< SharedContentDescription* >(object);
  (void)_this;
}
void SharedContentDescription::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharedContentDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SharedContentDescription& SharedContentDescription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SharedContentDescription_var_5fmanager_2eproto.base);
  return *internal_default_instance();
}


void SharedContentDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:deployer.SharedContentDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  om_content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && tensor_desc_ != nullptr) {
    delete tensor_desc_;
  }
  tensor_desc_ = nullptr;
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mem_type_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(mem_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SharedContentDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_node_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "deployer.SharedContentDescription.node_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 head_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          head_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 total_length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 current_offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          current_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 mem_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          mem_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ge.proto.TensorDescriptor tensor_desc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tensor_desc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes om_content = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_om_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SharedContentDescription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:deployer.SharedContentDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 session_id = 1;
  if (this->session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_session_id(), target);
  }

  // string node_name = 2;
  if (this->node_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_name().data(), static_cast<int>(this->_internal_node_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "deployer.SharedContentDescription.node_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node_name(), target);
  }

  // uint64 head_offset = 3;
  if (this->head_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_head_offset(), target);
  }

  // uint64 total_length = 4;
  if (this->total_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_total_length(), target);
  }

  // uint64 current_offset = 5;
  if (this->current_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_current_offset(), target);
  }

  // uint32 mem_type = 6;
  if (this->mem_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_mem_type(), target);
  }

  // .ge.proto.TensorDescriptor tensor_desc = 7;
  if (this->has_tensor_desc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::tensor_desc(this), target, stream);
  }

  // bytes om_content = 8;
  if (this->om_content().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_om_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:deployer.SharedContentDescription)
  return target;
}

size_t SharedContentDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deployer.SharedContentDescription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_name = 2;
  if (this->node_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_name());
  }

  // bytes om_content = 8;
  if (this->om_content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_om_content());
  }

  // .ge.proto.TensorDescriptor tensor_desc = 7;
  if (this->has_tensor_desc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tensor_desc_);
  }

  // uint64 session_id = 1;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_session_id());
  }

  // uint64 head_offset = 3;
  if (this->head_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_head_offset());
  }

  // uint64 total_length = 4;
  if (this->total_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_total_length());
  }

  // uint64 current_offset = 5;
  if (this->current_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_current_offset());
  }

  // uint32 mem_type = 6;
  if (this->mem_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mem_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharedContentDescription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deployer.SharedContentDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const SharedContentDescription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SharedContentDescription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deployer.SharedContentDescription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deployer.SharedContentDescription)
    MergeFrom(*source);
  }
}

void SharedContentDescription::MergeFrom(const SharedContentDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deployer.SharedContentDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_name().size() > 0) {
    _internal_set_node_name(from._internal_node_name());
  }
  if (from.om_content().size() > 0) {
    _internal_set_om_content(from._internal_om_content());
  }
  if (from.has_tensor_desc()) {
    _internal_mutable_tensor_desc()->::ge::proto::TensorDescriptor::MergeFrom(from._internal_tensor_desc());
  }
  if (from.session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.head_offset() != 0) {
    _internal_set_head_offset(from._internal_head_offset());
  }
  if (from.total_length() != 0) {
    _internal_set_total_length(from._internal_total_length());
  }
  if (from.current_offset() != 0) {
    _internal_set_current_offset(from._internal_current_offset());
  }
  if (from.mem_type() != 0) {
    _internal_set_mem_type(from._internal_mem_type());
  }
}

void SharedContentDescription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deployer.SharedContentDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SharedContentDescription::CopyFrom(const SharedContentDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deployer.SharedContentDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharedContentDescription::IsInitialized() const {
  return true;
}

void SharedContentDescription::InternalSwap(SharedContentDescription* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  node_name_.Swap(&other->node_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  om_content_.Swap(&other->om_content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharedContentDescription, mem_type_)
      + sizeof(SharedContentDescription::mem_type_)
      - PROTOBUF_FIELD_OFFSET(SharedContentDescription, tensor_desc_)>(
          reinterpret_cast<char*>(&tensor_desc_),
          reinterpret_cast<char*>(&other->tensor_desc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SharedContentDescription::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace deployer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::deployer::VarAddrMgrInfo* Arena::CreateMaybeMessage< ::deployer::VarAddrMgrInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::deployer::VarAddrMgrInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::deployer::VarDevAddrMgr* Arena::CreateMaybeMessage< ::deployer::VarDevAddrMgr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::deployer::VarDevAddrMgr >(arena);
}
template<> PROTOBUF_NOINLINE ::deployer::SingleTransNodeInfo* Arena::CreateMaybeMessage< ::deployer::SingleTransNodeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::deployer::SingleTransNodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::deployer::TransNodeMultiInfo* Arena::CreateMaybeMessage< ::deployer::TransNodeMultiInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::deployer::TransNodeMultiInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::deployer::BroadcastInfo* Arena::CreateMaybeMessage< ::deployer::BroadcastInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::deployer::BroadcastInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::deployer::BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse* Arena::CreateMaybeMessage< ::deployer::BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::deployer::BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::deployer::BroadcastMultiInfo* Arena::CreateMaybeMessage< ::deployer::BroadcastMultiInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::deployer::BroadcastMultiInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::deployer::VarDescInfo_CurVarTensorDescMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::deployer::VarDescInfo_CurVarTensorDescMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::deployer::VarDescInfo_CurVarTensorDescMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::deployer::VarDescInfo_VarToTransRoadEntry_DoNotUse* Arena::CreateMaybeMessage< ::deployer::VarDescInfo_VarToTransRoadEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::deployer::VarDescInfo_VarToTransRoadEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::deployer::VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::deployer::VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::deployer::VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::deployer::VarDescInfo* Arena::CreateMaybeMessage< ::deployer::VarDescInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::deployer::VarDescInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::deployer::VarMatchInfo* Arena::CreateMaybeMessage< ::deployer::VarMatchInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::deployer::VarMatchInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::deployer::VarResourceInfo_VarOffsetMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::deployer::VarResourceInfo_VarOffsetMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::deployer::VarResourceInfo_VarOffsetMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::deployer::VarResourceInfo_VarAddrMgrMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::deployer::VarResourceInfo_VarAddrMgrMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::deployer::VarResourceInfo_VarAddrMgrMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::deployer::VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::deployer::VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::deployer::VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::deployer::VarResourceInfo_VarToTransRoadEntry_DoNotUse* Arena::CreateMaybeMessage< ::deployer::VarResourceInfo_VarToTransRoadEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::deployer::VarResourceInfo_VarToTransRoadEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::deployer::VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse* Arena::CreateMaybeMessage< ::deployer::VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::deployer::VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::deployer::VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse* Arena::CreateMaybeMessage< ::deployer::VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::deployer::VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::deployer::VarResourceInfo_VarBroadCastInfoEntry_DoNotUse* Arena::CreateMaybeMessage< ::deployer::VarResourceInfo_VarBroadCastInfoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::deployer::VarResourceInfo_VarBroadCastInfoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::deployer::VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::deployer::VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::deployer::VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::deployer::VarResourceInfo* Arena::CreateMaybeMessage< ::deployer::VarResourceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::deployer::VarResourceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::deployer::MemResourceInfo* Arena::CreateMaybeMessage< ::deployer::MemResourceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::deployer::MemResourceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::deployer::VarManagerInfo_MemResourceMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::deployer::VarManagerInfo_MemResourceMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::deployer::VarManagerInfo_MemResourceMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::deployer::VarManagerInfo* Arena::CreateMaybeMessage< ::deployer::VarManagerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::deployer::VarManagerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::deployer::MultiVarManagerInfo* Arena::CreateMaybeMessage< ::deployer::MultiVarManagerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::deployer::MultiVarManagerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::deployer::SharedContentDescription* Arena::CreateMaybeMessage< ::deployer::SharedContentDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::deployer::SharedContentDescription >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
