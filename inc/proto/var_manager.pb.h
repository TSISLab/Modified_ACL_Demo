// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: var_manager.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_var_5fmanager_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_var_5fmanager_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "ge_ir.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_var_5fmanager_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_var_5fmanager_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[26]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_var_5fmanager_2eproto;
namespace deployer {
class BroadcastInfo;
class BroadcastInfoDefaultTypeInternal;
extern BroadcastInfoDefaultTypeInternal _BroadcastInfo_default_instance_;
class BroadcastMultiInfo;
class BroadcastMultiInfoDefaultTypeInternal;
extern BroadcastMultiInfoDefaultTypeInternal _BroadcastMultiInfo_default_instance_;
class BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse;
class BroadcastMultiInfo_BroadcastInfoEntry_DoNotUseDefaultTypeInternal;
extern BroadcastMultiInfo_BroadcastInfoEntry_DoNotUseDefaultTypeInternal _BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse_default_instance_;
class MemResourceInfo;
class MemResourceInfoDefaultTypeInternal;
extern MemResourceInfoDefaultTypeInternal _MemResourceInfo_default_instance_;
class MultiVarManagerInfo;
class MultiVarManagerInfoDefaultTypeInternal;
extern MultiVarManagerInfoDefaultTypeInternal _MultiVarManagerInfo_default_instance_;
class SharedContentDescription;
class SharedContentDescriptionDefaultTypeInternal;
extern SharedContentDescriptionDefaultTypeInternal _SharedContentDescription_default_instance_;
class SingleTransNodeInfo;
class SingleTransNodeInfoDefaultTypeInternal;
extern SingleTransNodeInfoDefaultTypeInternal _SingleTransNodeInfo_default_instance_;
class TransNodeMultiInfo;
class TransNodeMultiInfoDefaultTypeInternal;
extern TransNodeMultiInfoDefaultTypeInternal _TransNodeMultiInfo_default_instance_;
class VarAddrMgrInfo;
class VarAddrMgrInfoDefaultTypeInternal;
extern VarAddrMgrInfoDefaultTypeInternal _VarAddrMgrInfo_default_instance_;
class VarDescInfo;
class VarDescInfoDefaultTypeInternal;
extern VarDescInfoDefaultTypeInternal _VarDescInfo_default_instance_;
class VarDescInfo_CurVarTensorDescMapEntry_DoNotUse;
class VarDescInfo_CurVarTensorDescMapEntry_DoNotUseDefaultTypeInternal;
extern VarDescInfo_CurVarTensorDescMapEntry_DoNotUseDefaultTypeInternal _VarDescInfo_CurVarTensorDescMapEntry_DoNotUse_default_instance_;
class VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse;
class VarDescInfo_StagedVarTensorDescMapEntry_DoNotUseDefaultTypeInternal;
extern VarDescInfo_StagedVarTensorDescMapEntry_DoNotUseDefaultTypeInternal _VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse_default_instance_;
class VarDescInfo_VarToTransRoadEntry_DoNotUse;
class VarDescInfo_VarToTransRoadEntry_DoNotUseDefaultTypeInternal;
extern VarDescInfo_VarToTransRoadEntry_DoNotUseDefaultTypeInternal _VarDescInfo_VarToTransRoadEntry_DoNotUse_default_instance_;
class VarDevAddrMgr;
class VarDevAddrMgrDefaultTypeInternal;
extern VarDevAddrMgrDefaultTypeInternal _VarDevAddrMgr_default_instance_;
class VarManagerInfo;
class VarManagerInfoDefaultTypeInternal;
extern VarManagerInfoDefaultTypeInternal _VarManagerInfo_default_instance_;
class VarManagerInfo_MemResourceMapEntry_DoNotUse;
class VarManagerInfo_MemResourceMapEntry_DoNotUseDefaultTypeInternal;
extern VarManagerInfo_MemResourceMapEntry_DoNotUseDefaultTypeInternal _VarManagerInfo_MemResourceMapEntry_DoNotUse_default_instance_;
class VarMatchInfo;
class VarMatchInfoDefaultTypeInternal;
extern VarMatchInfoDefaultTypeInternal _VarMatchInfo_default_instance_;
class VarResourceInfo;
class VarResourceInfoDefaultTypeInternal;
extern VarResourceInfoDefaultTypeInternal _VarResourceInfo_default_instance_;
class VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse;
class VarResourceInfo_CurVarTensorDescMapEntry_DoNotUseDefaultTypeInternal;
extern VarResourceInfo_CurVarTensorDescMapEntry_DoNotUseDefaultTypeInternal _VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse_default_instance_;
class VarResourceInfo_VarAddrMgrMapEntry_DoNotUse;
class VarResourceInfo_VarAddrMgrMapEntry_DoNotUseDefaultTypeInternal;
extern VarResourceInfo_VarAddrMgrMapEntry_DoNotUseDefaultTypeInternal _VarResourceInfo_VarAddrMgrMapEntry_DoNotUse_default_instance_;
class VarResourceInfo_VarBroadCastInfoEntry_DoNotUse;
class VarResourceInfo_VarBroadCastInfoEntry_DoNotUseDefaultTypeInternal;
extern VarResourceInfo_VarBroadCastInfoEntry_DoNotUseDefaultTypeInternal _VarResourceInfo_VarBroadCastInfoEntry_DoNotUse_default_instance_;
class VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse;
class VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUseDefaultTypeInternal;
extern VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUseDefaultTypeInternal _VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse_default_instance_;
class VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse;
class VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUseDefaultTypeInternal;
extern VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUseDefaultTypeInternal _VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse_default_instance_;
class VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse;
class VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUseDefaultTypeInternal;
extern VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUseDefaultTypeInternal _VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse_default_instance_;
class VarResourceInfo_VarOffsetMapEntry_DoNotUse;
class VarResourceInfo_VarOffsetMapEntry_DoNotUseDefaultTypeInternal;
extern VarResourceInfo_VarOffsetMapEntry_DoNotUseDefaultTypeInternal _VarResourceInfo_VarOffsetMapEntry_DoNotUse_default_instance_;
class VarResourceInfo_VarToTransRoadEntry_DoNotUse;
class VarResourceInfo_VarToTransRoadEntry_DoNotUseDefaultTypeInternal;
extern VarResourceInfo_VarToTransRoadEntry_DoNotUseDefaultTypeInternal _VarResourceInfo_VarToTransRoadEntry_DoNotUse_default_instance_;
}  // namespace deployer
PROTOBUF_NAMESPACE_OPEN
template<> ::deployer::BroadcastInfo* Arena::CreateMaybeMessage<::deployer::BroadcastInfo>(Arena*);
template<> ::deployer::BroadcastMultiInfo* Arena::CreateMaybeMessage<::deployer::BroadcastMultiInfo>(Arena*);
template<> ::deployer::BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse* Arena::CreateMaybeMessage<::deployer::BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse>(Arena*);
template<> ::deployer::MemResourceInfo* Arena::CreateMaybeMessage<::deployer::MemResourceInfo>(Arena*);
template<> ::deployer::MultiVarManagerInfo* Arena::CreateMaybeMessage<::deployer::MultiVarManagerInfo>(Arena*);
template<> ::deployer::SharedContentDescription* Arena::CreateMaybeMessage<::deployer::SharedContentDescription>(Arena*);
template<> ::deployer::SingleTransNodeInfo* Arena::CreateMaybeMessage<::deployer::SingleTransNodeInfo>(Arena*);
template<> ::deployer::TransNodeMultiInfo* Arena::CreateMaybeMessage<::deployer::TransNodeMultiInfo>(Arena*);
template<> ::deployer::VarAddrMgrInfo* Arena::CreateMaybeMessage<::deployer::VarAddrMgrInfo>(Arena*);
template<> ::deployer::VarDescInfo* Arena::CreateMaybeMessage<::deployer::VarDescInfo>(Arena*);
template<> ::deployer::VarDescInfo_CurVarTensorDescMapEntry_DoNotUse* Arena::CreateMaybeMessage<::deployer::VarDescInfo_CurVarTensorDescMapEntry_DoNotUse>(Arena*);
template<> ::deployer::VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse* Arena::CreateMaybeMessage<::deployer::VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse>(Arena*);
template<> ::deployer::VarDescInfo_VarToTransRoadEntry_DoNotUse* Arena::CreateMaybeMessage<::deployer::VarDescInfo_VarToTransRoadEntry_DoNotUse>(Arena*);
template<> ::deployer::VarDevAddrMgr* Arena::CreateMaybeMessage<::deployer::VarDevAddrMgr>(Arena*);
template<> ::deployer::VarManagerInfo* Arena::CreateMaybeMessage<::deployer::VarManagerInfo>(Arena*);
template<> ::deployer::VarManagerInfo_MemResourceMapEntry_DoNotUse* Arena::CreateMaybeMessage<::deployer::VarManagerInfo_MemResourceMapEntry_DoNotUse>(Arena*);
template<> ::deployer::VarMatchInfo* Arena::CreateMaybeMessage<::deployer::VarMatchInfo>(Arena*);
template<> ::deployer::VarResourceInfo* Arena::CreateMaybeMessage<::deployer::VarResourceInfo>(Arena*);
template<> ::deployer::VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse* Arena::CreateMaybeMessage<::deployer::VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse>(Arena*);
template<> ::deployer::VarResourceInfo_VarAddrMgrMapEntry_DoNotUse* Arena::CreateMaybeMessage<::deployer::VarResourceInfo_VarAddrMgrMapEntry_DoNotUse>(Arena*);
template<> ::deployer::VarResourceInfo_VarBroadCastInfoEntry_DoNotUse* Arena::CreateMaybeMessage<::deployer::VarResourceInfo_VarBroadCastInfoEntry_DoNotUse>(Arena*);
template<> ::deployer::VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse* Arena::CreateMaybeMessage<::deployer::VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse>(Arena*);
template<> ::deployer::VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse* Arena::CreateMaybeMessage<::deployer::VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse>(Arena*);
template<> ::deployer::VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse* Arena::CreateMaybeMessage<::deployer::VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse>(Arena*);
template<> ::deployer::VarResourceInfo_VarOffsetMapEntry_DoNotUse* Arena::CreateMaybeMessage<::deployer::VarResourceInfo_VarOffsetMapEntry_DoNotUse>(Arena*);
template<> ::deployer::VarResourceInfo_VarToTransRoadEntry_DoNotUse* Arena::CreateMaybeMessage<::deployer::VarResourceInfo_VarToTransRoadEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace deployer {

// ===================================================================

class VarAddrMgrInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:deployer.VarAddrMgrInfo) */ {
 public:
  inline VarAddrMgrInfo() : VarAddrMgrInfo(nullptr) {}
  virtual ~VarAddrMgrInfo();

  VarAddrMgrInfo(const VarAddrMgrInfo& from);
  VarAddrMgrInfo(VarAddrMgrInfo&& from) noexcept
    : VarAddrMgrInfo() {
    *this = ::std::move(from);
  }

  inline VarAddrMgrInfo& operator=(const VarAddrMgrInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VarAddrMgrInfo& operator=(VarAddrMgrInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VarAddrMgrInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VarAddrMgrInfo* internal_default_instance() {
    return reinterpret_cast<const VarAddrMgrInfo*>(
               &_VarAddrMgrInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VarAddrMgrInfo& a, VarAddrMgrInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VarAddrMgrInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VarAddrMgrInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VarAddrMgrInfo* New() const final {
    return CreateMaybeMessage<VarAddrMgrInfo>(nullptr);
  }

  VarAddrMgrInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VarAddrMgrInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VarAddrMgrInfo& from);
  void MergeFrom(const VarAddrMgrInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VarAddrMgrInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "deployer.VarAddrMgrInfo";
  }
  protected:
  explicit VarAddrMgrInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_var_5fmanager_2eproto);
    return ::descriptor_table_var_5fmanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescFieldNumber = 1,
    kAddressFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kMemoryTypeFieldNumber = 4,
  };
  // .ge.proto.TensorDescriptor desc = 1;
  bool has_desc() const;
  private:
  bool _internal_has_desc() const;
  public:
  void clear_desc();
  const ::ge::proto::TensorDescriptor& desc() const;
  ::ge::proto::TensorDescriptor* release_desc();
  ::ge::proto::TensorDescriptor* mutable_desc();
  void set_allocated_desc(::ge::proto::TensorDescriptor* desc);
  private:
  const ::ge::proto::TensorDescriptor& _internal_desc() const;
  ::ge::proto::TensorDescriptor* _internal_mutable_desc();
  public:
  void unsafe_arena_set_allocated_desc(
      ::ge::proto::TensorDescriptor* desc);
  ::ge::proto::TensorDescriptor* unsafe_arena_release_desc();

  // uint64 address = 2;
  void clear_address();
  ::PROTOBUF_NAMESPACE_ID::uint64 address() const;
  void set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_address() const;
  void _internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 offset = 3;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 memory_type = 4;
  void clear_memory_type();
  ::PROTOBUF_NAMESPACE_ID::uint64 memory_type() const;
  void set_memory_type(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_memory_type() const;
  void _internal_set_memory_type(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:deployer.VarAddrMgrInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ge::proto::TensorDescriptor* desc_;
  ::PROTOBUF_NAMESPACE_ID::uint64 address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offset_;
  ::PROTOBUF_NAMESPACE_ID::uint64 memory_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_var_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class VarDevAddrMgr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:deployer.VarDevAddrMgr) */ {
 public:
  inline VarDevAddrMgr() : VarDevAddrMgr(nullptr) {}
  virtual ~VarDevAddrMgr();

  VarDevAddrMgr(const VarDevAddrMgr& from);
  VarDevAddrMgr(VarDevAddrMgr&& from) noexcept
    : VarDevAddrMgr() {
    *this = ::std::move(from);
  }

  inline VarDevAddrMgr& operator=(const VarDevAddrMgr& from) {
    CopyFrom(from);
    return *this;
  }
  inline VarDevAddrMgr& operator=(VarDevAddrMgr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VarDevAddrMgr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VarDevAddrMgr* internal_default_instance() {
    return reinterpret_cast<const VarDevAddrMgr*>(
               &_VarDevAddrMgr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VarDevAddrMgr& a, VarDevAddrMgr& b) {
    a.Swap(&b);
  }
  inline void Swap(VarDevAddrMgr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VarDevAddrMgr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VarDevAddrMgr* New() const final {
    return CreateMaybeMessage<VarDevAddrMgr>(nullptr);
  }

  VarDevAddrMgr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VarDevAddrMgr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VarDevAddrMgr& from);
  void MergeFrom(const VarDevAddrMgr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VarDevAddrMgr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "deployer.VarDevAddrMgr";
  }
  protected:
  explicit VarDevAddrMgr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_var_5fmanager_2eproto);
    return ::descriptor_table_var_5fmanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescFieldNumber = 1,
    kAddressFieldNumber = 2,
    kDevAddrFieldNumber = 3,
  };
  // .ge.proto.TensorDescriptor desc = 1;
  bool has_desc() const;
  private:
  bool _internal_has_desc() const;
  public:
  void clear_desc();
  const ::ge::proto::TensorDescriptor& desc() const;
  ::ge::proto::TensorDescriptor* release_desc();
  ::ge::proto::TensorDescriptor* mutable_desc();
  void set_allocated_desc(::ge::proto::TensorDescriptor* desc);
  private:
  const ::ge::proto::TensorDescriptor& _internal_desc() const;
  ::ge::proto::TensorDescriptor* _internal_mutable_desc();
  public:
  void unsafe_arena_set_allocated_desc(
      ::ge::proto::TensorDescriptor* desc);
  ::ge::proto::TensorDescriptor* unsafe_arena_release_desc();

  // uint64 address = 2;
  void clear_address();
  ::PROTOBUF_NAMESPACE_ID::uint64 address() const;
  void set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_address() const;
  void _internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 dev_addr = 3;
  void clear_dev_addr();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_addr() const;
  void set_dev_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dev_addr() const;
  void _internal_set_dev_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:deployer.VarDevAddrMgr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ge::proto::TensorDescriptor* desc_;
  ::PROTOBUF_NAMESPACE_ID::uint64 address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_addr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_var_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class SingleTransNodeInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:deployer.SingleTransNodeInfo) */ {
 public:
  inline SingleTransNodeInfo() : SingleTransNodeInfo(nullptr) {}
  virtual ~SingleTransNodeInfo();

  SingleTransNodeInfo(const SingleTransNodeInfo& from);
  SingleTransNodeInfo(SingleTransNodeInfo&& from) noexcept
    : SingleTransNodeInfo() {
    *this = ::std::move(from);
  }

  inline SingleTransNodeInfo& operator=(const SingleTransNodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleTransNodeInfo& operator=(SingleTransNodeInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleTransNodeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleTransNodeInfo* internal_default_instance() {
    return reinterpret_cast<const SingleTransNodeInfo*>(
               &_SingleTransNodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SingleTransNodeInfo& a, SingleTransNodeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleTransNodeInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleTransNodeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleTransNodeInfo* New() const final {
    return CreateMaybeMessage<SingleTransNodeInfo>(nullptr);
  }

  SingleTransNodeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleTransNodeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleTransNodeInfo& from);
  void MergeFrom(const SingleTransNodeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleTransNodeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "deployer.SingleTransNodeInfo";
  }
  protected:
  explicit SingleTransNodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_var_5fmanager_2eproto);
    return ::descriptor_table_var_5fmanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeTypeFieldNumber = 1,
    kInputFieldNumber = 2,
    kOutputFieldNumber = 3,
  };
  // string node_type = 1;
  void clear_node_type();
  const std::string& node_type() const;
  void set_node_type(const std::string& value);
  void set_node_type(std::string&& value);
  void set_node_type(const char* value);
  void set_node_type(const char* value, size_t size);
  std::string* mutable_node_type();
  std::string* release_node_type();
  void set_allocated_node_type(std::string* node_type);
  private:
  const std::string& _internal_node_type() const;
  void _internal_set_node_type(const std::string& value);
  std::string* _internal_mutable_node_type();
  public:

  // .ge.proto.TensorDescriptor input = 2;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::ge::proto::TensorDescriptor& input() const;
  ::ge::proto::TensorDescriptor* release_input();
  ::ge::proto::TensorDescriptor* mutable_input();
  void set_allocated_input(::ge::proto::TensorDescriptor* input);
  private:
  const ::ge::proto::TensorDescriptor& _internal_input() const;
  ::ge::proto::TensorDescriptor* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::ge::proto::TensorDescriptor* input);
  ::ge::proto::TensorDescriptor* unsafe_arena_release_input();

  // .ge.proto.TensorDescriptor output = 3;
  bool has_output() const;
  private:
  bool _internal_has_output() const;
  public:
  void clear_output();
  const ::ge::proto::TensorDescriptor& output() const;
  ::ge::proto::TensorDescriptor* release_output();
  ::ge::proto::TensorDescriptor* mutable_output();
  void set_allocated_output(::ge::proto::TensorDescriptor* output);
  private:
  const ::ge::proto::TensorDescriptor& _internal_output() const;
  ::ge::proto::TensorDescriptor* _internal_mutable_output();
  public:
  void unsafe_arena_set_allocated_output(
      ::ge::proto::TensorDescriptor* output);
  ::ge::proto::TensorDescriptor* unsafe_arena_release_output();

  // @@protoc_insertion_point(class_scope:deployer.SingleTransNodeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_type_;
  ::ge::proto::TensorDescriptor* input_;
  ::ge::proto::TensorDescriptor* output_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_var_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class TransNodeMultiInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:deployer.TransNodeMultiInfo) */ {
 public:
  inline TransNodeMultiInfo() : TransNodeMultiInfo(nullptr) {}
  virtual ~TransNodeMultiInfo();

  TransNodeMultiInfo(const TransNodeMultiInfo& from);
  TransNodeMultiInfo(TransNodeMultiInfo&& from) noexcept
    : TransNodeMultiInfo() {
    *this = ::std::move(from);
  }

  inline TransNodeMultiInfo& operator=(const TransNodeMultiInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransNodeMultiInfo& operator=(TransNodeMultiInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransNodeMultiInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransNodeMultiInfo* internal_default_instance() {
    return reinterpret_cast<const TransNodeMultiInfo*>(
               &_TransNodeMultiInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TransNodeMultiInfo& a, TransNodeMultiInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TransNodeMultiInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransNodeMultiInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransNodeMultiInfo* New() const final {
    return CreateMaybeMessage<TransNodeMultiInfo>(nullptr);
  }

  TransNodeMultiInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransNodeMultiInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransNodeMultiInfo& from);
  void MergeFrom(const TransNodeMultiInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransNodeMultiInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "deployer.TransNodeMultiInfo";
  }
  protected:
  explicit TransNodeMultiInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_var_5fmanager_2eproto);
    return ::descriptor_table_var_5fmanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeInfoFieldNumber = 1,
  };
  // repeated .deployer.SingleTransNodeInfo node_info = 1;
  int node_info_size() const;
  private:
  int _internal_node_info_size() const;
  public:
  void clear_node_info();
  ::deployer::SingleTransNodeInfo* mutable_node_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::deployer::SingleTransNodeInfo >*
      mutable_node_info();
  private:
  const ::deployer::SingleTransNodeInfo& _internal_node_info(int index) const;
  ::deployer::SingleTransNodeInfo* _internal_add_node_info();
  public:
  const ::deployer::SingleTransNodeInfo& node_info(int index) const;
  ::deployer::SingleTransNodeInfo* add_node_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::deployer::SingleTransNodeInfo >&
      node_info() const;

  // @@protoc_insertion_point(class_scope:deployer.TransNodeMultiInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::deployer::SingleTransNodeInfo > node_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_var_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class BroadcastInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:deployer.BroadcastInfo) */ {
 public:
  inline BroadcastInfo() : BroadcastInfo(nullptr) {}
  virtual ~BroadcastInfo();

  BroadcastInfo(const BroadcastInfo& from);
  BroadcastInfo(BroadcastInfo&& from) noexcept
    : BroadcastInfo() {
    *this = ::std::move(from);
  }

  inline BroadcastInfo& operator=(const BroadcastInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastInfo& operator=(BroadcastInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BroadcastInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BroadcastInfo* internal_default_instance() {
    return reinterpret_cast<const BroadcastInfo*>(
               &_BroadcastInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BroadcastInfo& a, BroadcastInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BroadcastInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BroadcastInfo* New() const final {
    return CreateMaybeMessage<BroadcastInfo>(nullptr);
  }

  BroadcastInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BroadcastInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BroadcastInfo& from);
  void MergeFrom(const BroadcastInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "deployer.BroadcastInfo";
  }
  protected:
  explicit BroadcastInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_var_5fmanager_2eproto);
    return ::descriptor_table_var_5fmanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarNameFieldNumber = 1,
    kBroadcastNameFieldNumber = 2,
    kInputOffsetFieldNumber = 4,
    kInputSizeFieldNumber = 5,
    kOutputOffsetFieldNumber = 6,
    kOutputSizeFieldNumber = 7,
    kIdxFieldNumber = 3,
  };
  // string var_name = 1;
  void clear_var_name();
  const std::string& var_name() const;
  void set_var_name(const std::string& value);
  void set_var_name(std::string&& value);
  void set_var_name(const char* value);
  void set_var_name(const char* value, size_t size);
  std::string* mutable_var_name();
  std::string* release_var_name();
  void set_allocated_var_name(std::string* var_name);
  private:
  const std::string& _internal_var_name() const;
  void _internal_set_var_name(const std::string& value);
  std::string* _internal_mutable_var_name();
  public:

  // string broadcast_name = 2;
  void clear_broadcast_name();
  const std::string& broadcast_name() const;
  void set_broadcast_name(const std::string& value);
  void set_broadcast_name(std::string&& value);
  void set_broadcast_name(const char* value);
  void set_broadcast_name(const char* value, size_t size);
  std::string* mutable_broadcast_name();
  std::string* release_broadcast_name();
  void set_allocated_broadcast_name(std::string* broadcast_name);
  private:
  const std::string& _internal_broadcast_name() const;
  void _internal_set_broadcast_name(const std::string& value);
  std::string* _internal_mutable_broadcast_name();
  public:

  // int64 input_offset = 4;
  void clear_input_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 input_offset() const;
  void set_input_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_input_offset() const;
  void _internal_set_input_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 input_size = 5;
  void clear_input_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 input_size() const;
  void set_input_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_input_size() const;
  void _internal_set_input_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 output_offset = 6;
  void clear_output_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 output_offset() const;
  void set_output_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_output_offset() const;
  void _internal_set_output_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 output_size = 7;
  void clear_output_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 output_size() const;
  void set_output_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_output_size() const;
  void _internal_set_output_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 idx = 3;
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_idx() const;
  void _internal_set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:deployer.BroadcastInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broadcast_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 input_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint64 input_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 output_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint64 output_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_var_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse, 
    std::string, ::deployer::BroadcastInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse, 
    std::string, ::deployer::BroadcastInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse();
  explicit BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse& other);
  static const BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse*>(&_BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "deployer.BroadcastMultiInfo.BroadcastInfoEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_var_5fmanager_2eproto);
    return ::descriptor_table_var_5fmanager_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class BroadcastMultiInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:deployer.BroadcastMultiInfo) */ {
 public:
  inline BroadcastMultiInfo() : BroadcastMultiInfo(nullptr) {}
  virtual ~BroadcastMultiInfo();

  BroadcastMultiInfo(const BroadcastMultiInfo& from);
  BroadcastMultiInfo(BroadcastMultiInfo&& from) noexcept
    : BroadcastMultiInfo() {
    *this = ::std::move(from);
  }

  inline BroadcastMultiInfo& operator=(const BroadcastMultiInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastMultiInfo& operator=(BroadcastMultiInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BroadcastMultiInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BroadcastMultiInfo* internal_default_instance() {
    return reinterpret_cast<const BroadcastMultiInfo*>(
               &_BroadcastMultiInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BroadcastMultiInfo& a, BroadcastMultiInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastMultiInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BroadcastMultiInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BroadcastMultiInfo* New() const final {
    return CreateMaybeMessage<BroadcastMultiInfo>(nullptr);
  }

  BroadcastMultiInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BroadcastMultiInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BroadcastMultiInfo& from);
  void MergeFrom(const BroadcastMultiInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastMultiInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "deployer.BroadcastMultiInfo";
  }
  protected:
  explicit BroadcastMultiInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_var_5fmanager_2eproto);
    return ::descriptor_table_var_5fmanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kBroadcastInfoFieldNumber = 1,
  };
  // map<string, .deployer.BroadcastInfo> broadcast_info = 1;
  int broadcast_info_size() const;
  private:
  int _internal_broadcast_info_size() const;
  public:
  void clear_broadcast_info();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::BroadcastInfo >&
      _internal_broadcast_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::BroadcastInfo >*
      _internal_mutable_broadcast_info();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::BroadcastInfo >&
      broadcast_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::BroadcastInfo >*
      mutable_broadcast_info();

  // @@protoc_insertion_point(class_scope:deployer.BroadcastMultiInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      BroadcastMultiInfo_BroadcastInfoEntry_DoNotUse,
      std::string, ::deployer::BroadcastInfo,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > broadcast_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_var_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class VarDescInfo_CurVarTensorDescMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VarDescInfo_CurVarTensorDescMapEntry_DoNotUse, 
    std::string, ::ge::proto::TensorDescriptor,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VarDescInfo_CurVarTensorDescMapEntry_DoNotUse, 
    std::string, ::ge::proto::TensorDescriptor,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  VarDescInfo_CurVarTensorDescMapEntry_DoNotUse();
  explicit VarDescInfo_CurVarTensorDescMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const VarDescInfo_CurVarTensorDescMapEntry_DoNotUse& other);
  static const VarDescInfo_CurVarTensorDescMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const VarDescInfo_CurVarTensorDescMapEntry_DoNotUse*>(&_VarDescInfo_CurVarTensorDescMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "deployer.VarDescInfo.CurVarTensorDescMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_var_5fmanager_2eproto);
    return ::descriptor_table_var_5fmanager_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class VarDescInfo_VarToTransRoadEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VarDescInfo_VarToTransRoadEntry_DoNotUse, 
    std::string, ::deployer::TransNodeMultiInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VarDescInfo_VarToTransRoadEntry_DoNotUse, 
    std::string, ::deployer::TransNodeMultiInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  VarDescInfo_VarToTransRoadEntry_DoNotUse();
  explicit VarDescInfo_VarToTransRoadEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const VarDescInfo_VarToTransRoadEntry_DoNotUse& other);
  static const VarDescInfo_VarToTransRoadEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const VarDescInfo_VarToTransRoadEntry_DoNotUse*>(&_VarDescInfo_VarToTransRoadEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "deployer.VarDescInfo.VarToTransRoadEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_var_5fmanager_2eproto);
    return ::descriptor_table_var_5fmanager_2eproto.file_level_metadata[8];
  }

  public:
};

// -------------------------------------------------------------------

class VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse, 
    std::string, ::ge::proto::TensorDescriptor,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse, 
    std::string, ::ge::proto::TensorDescriptor,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse();
  explicit VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse& other);
  static const VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse*>(&_VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "deployer.VarDescInfo.StagedVarTensorDescMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_var_5fmanager_2eproto);
    return ::descriptor_table_var_5fmanager_2eproto.file_level_metadata[9];
  }

  public:
};

// -------------------------------------------------------------------

class VarDescInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:deployer.VarDescInfo) */ {
 public:
  inline VarDescInfo() : VarDescInfo(nullptr) {}
  virtual ~VarDescInfo();

  VarDescInfo(const VarDescInfo& from);
  VarDescInfo(VarDescInfo&& from) noexcept
    : VarDescInfo() {
    *this = ::std::move(from);
  }

  inline VarDescInfo& operator=(const VarDescInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VarDescInfo& operator=(VarDescInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VarDescInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VarDescInfo* internal_default_instance() {
    return reinterpret_cast<const VarDescInfo*>(
               &_VarDescInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(VarDescInfo& a, VarDescInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VarDescInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VarDescInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VarDescInfo* New() const final {
    return CreateMaybeMessage<VarDescInfo>(nullptr);
  }

  VarDescInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VarDescInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VarDescInfo& from);
  void MergeFrom(const VarDescInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VarDescInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "deployer.VarDescInfo";
  }
  protected:
  explicit VarDescInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_var_5fmanager_2eproto);
    return ::descriptor_table_var_5fmanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kCurVarTensorDescMapFieldNumber = 1,
    kVarToTransRoadFieldNumber = 2,
    kChangedVarNamesFieldNumber = 3,
    kStagedVarTensorDescMapFieldNumber = 4,
  };
  // map<string, .ge.proto.TensorDescriptor> cur_var_tensor_desc_map = 1;
  int cur_var_tensor_desc_map_size() const;
  private:
  int _internal_cur_var_tensor_desc_map_size() const;
  public:
  void clear_cur_var_tensor_desc_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >&
      _internal_cur_var_tensor_desc_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >*
      _internal_mutable_cur_var_tensor_desc_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >&
      cur_var_tensor_desc_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >*
      mutable_cur_var_tensor_desc_map();

  // map<string, .deployer.TransNodeMultiInfo> var_to_trans_road = 2;
  int var_to_trans_road_size() const;
  private:
  int _internal_var_to_trans_road_size() const;
  public:
  void clear_var_to_trans_road();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::TransNodeMultiInfo >&
      _internal_var_to_trans_road() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::TransNodeMultiInfo >*
      _internal_mutable_var_to_trans_road();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::TransNodeMultiInfo >&
      var_to_trans_road() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::TransNodeMultiInfo >*
      mutable_var_to_trans_road();

  // repeated string changed_var_names = 3;
  int changed_var_names_size() const;
  private:
  int _internal_changed_var_names_size() const;
  public:
  void clear_changed_var_names();
  const std::string& changed_var_names(int index) const;
  std::string* mutable_changed_var_names(int index);
  void set_changed_var_names(int index, const std::string& value);
  void set_changed_var_names(int index, std::string&& value);
  void set_changed_var_names(int index, const char* value);
  void set_changed_var_names(int index, const char* value, size_t size);
  std::string* add_changed_var_names();
  void add_changed_var_names(const std::string& value);
  void add_changed_var_names(std::string&& value);
  void add_changed_var_names(const char* value);
  void add_changed_var_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& changed_var_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_changed_var_names();
  private:
  const std::string& _internal_changed_var_names(int index) const;
  std::string* _internal_add_changed_var_names();
  public:

  // map<string, .ge.proto.TensorDescriptor> staged_var_tensor_desc_map = 4;
  int staged_var_tensor_desc_map_size() const;
  private:
  int _internal_staged_var_tensor_desc_map_size() const;
  public:
  void clear_staged_var_tensor_desc_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >&
      _internal_staged_var_tensor_desc_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >*
      _internal_mutable_staged_var_tensor_desc_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >&
      staged_var_tensor_desc_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >*
      mutable_staged_var_tensor_desc_map();

  // @@protoc_insertion_point(class_scope:deployer.VarDescInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      VarDescInfo_CurVarTensorDescMapEntry_DoNotUse,
      std::string, ::ge::proto::TensorDescriptor,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > cur_var_tensor_desc_map_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      VarDescInfo_VarToTransRoadEntry_DoNotUse,
      std::string, ::deployer::TransNodeMultiInfo,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > var_to_trans_road_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> changed_var_names_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      VarDescInfo_StagedVarTensorDescMapEntry_DoNotUse,
      std::string, ::ge::proto::TensorDescriptor,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > staged_var_tensor_desc_map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_var_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class VarMatchInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:deployer.VarMatchInfo) */ {
 public:
  inline VarMatchInfo() : VarMatchInfo(nullptr) {}
  virtual ~VarMatchInfo();

  VarMatchInfo(const VarMatchInfo& from);
  VarMatchInfo(VarMatchInfo&& from) noexcept
    : VarMatchInfo() {
    *this = ::std::move(from);
  }

  inline VarMatchInfo& operator=(const VarMatchInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VarMatchInfo& operator=(VarMatchInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VarMatchInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VarMatchInfo* internal_default_instance() {
    return reinterpret_cast<const VarMatchInfo*>(
               &_VarMatchInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(VarMatchInfo& a, VarMatchInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VarMatchInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VarMatchInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VarMatchInfo* New() const final {
    return CreateMaybeMessage<VarMatchInfo>(nullptr);
  }

  VarMatchInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VarMatchInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VarMatchInfo& from);
  void MergeFrom(const VarMatchInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VarMatchInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "deployer.VarMatchInfo";
  }
  protected:
  explicit VarMatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_var_5fmanager_2eproto);
    return ::descriptor_table_var_5fmanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescInfoBeforeCompileFieldNumber = 1,
    kDescInfoAfterCompileFieldNumber = 2,
  };
  // .deployer.VarDescInfo desc_info_before_compile = 1;
  bool has_desc_info_before_compile() const;
  private:
  bool _internal_has_desc_info_before_compile() const;
  public:
  void clear_desc_info_before_compile();
  const ::deployer::VarDescInfo& desc_info_before_compile() const;
  ::deployer::VarDescInfo* release_desc_info_before_compile();
  ::deployer::VarDescInfo* mutable_desc_info_before_compile();
  void set_allocated_desc_info_before_compile(::deployer::VarDescInfo* desc_info_before_compile);
  private:
  const ::deployer::VarDescInfo& _internal_desc_info_before_compile() const;
  ::deployer::VarDescInfo* _internal_mutable_desc_info_before_compile();
  public:
  void unsafe_arena_set_allocated_desc_info_before_compile(
      ::deployer::VarDescInfo* desc_info_before_compile);
  ::deployer::VarDescInfo* unsafe_arena_release_desc_info_before_compile();

  // .deployer.VarDescInfo desc_info_after_compile = 2;
  bool has_desc_info_after_compile() const;
  private:
  bool _internal_has_desc_info_after_compile() const;
  public:
  void clear_desc_info_after_compile();
  const ::deployer::VarDescInfo& desc_info_after_compile() const;
  ::deployer::VarDescInfo* release_desc_info_after_compile();
  ::deployer::VarDescInfo* mutable_desc_info_after_compile();
  void set_allocated_desc_info_after_compile(::deployer::VarDescInfo* desc_info_after_compile);
  private:
  const ::deployer::VarDescInfo& _internal_desc_info_after_compile() const;
  ::deployer::VarDescInfo* _internal_mutable_desc_info_after_compile();
  public:
  void unsafe_arena_set_allocated_desc_info_after_compile(
      ::deployer::VarDescInfo* desc_info_after_compile);
  ::deployer::VarDescInfo* unsafe_arena_release_desc_info_after_compile();

  // @@protoc_insertion_point(class_scope:deployer.VarMatchInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::deployer::VarDescInfo* desc_info_before_compile_;
  ::deployer::VarDescInfo* desc_info_after_compile_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_var_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class VarResourceInfo_VarOffsetMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VarResourceInfo_VarOffsetMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VarResourceInfo_VarOffsetMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    0 > SuperType;
  VarResourceInfo_VarOffsetMapEntry_DoNotUse();
  explicit VarResourceInfo_VarOffsetMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const VarResourceInfo_VarOffsetMapEntry_DoNotUse& other);
  static const VarResourceInfo_VarOffsetMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const VarResourceInfo_VarOffsetMapEntry_DoNotUse*>(&_VarResourceInfo_VarOffsetMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_var_5fmanager_2eproto);
    return ::descriptor_table_var_5fmanager_2eproto.file_level_metadata[12];
  }

  public:
};

// -------------------------------------------------------------------

class VarResourceInfo_VarAddrMgrMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VarResourceInfo_VarAddrMgrMapEntry_DoNotUse, 
    std::string, ::deployer::VarAddrMgrInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VarResourceInfo_VarAddrMgrMapEntry_DoNotUse, 
    std::string, ::deployer::VarAddrMgrInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  VarResourceInfo_VarAddrMgrMapEntry_DoNotUse();
  explicit VarResourceInfo_VarAddrMgrMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const VarResourceInfo_VarAddrMgrMapEntry_DoNotUse& other);
  static const VarResourceInfo_VarAddrMgrMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const VarResourceInfo_VarAddrMgrMapEntry_DoNotUse*>(&_VarResourceInfo_VarAddrMgrMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "deployer.VarResourceInfo.VarAddrMgrMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_var_5fmanager_2eproto);
    return ::descriptor_table_var_5fmanager_2eproto.file_level_metadata[13];
  }

  public:
};

// -------------------------------------------------------------------

class VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse, 
    std::string, ::ge::proto::TensorDescriptor,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse, 
    std::string, ::ge::proto::TensorDescriptor,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse();
  explicit VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse& other);
  static const VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse*>(&_VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "deployer.VarResourceInfo.CurVarTensorDescMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_var_5fmanager_2eproto);
    return ::descriptor_table_var_5fmanager_2eproto.file_level_metadata[14];
  }

  public:
};

// -------------------------------------------------------------------

class VarResourceInfo_VarToTransRoadEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VarResourceInfo_VarToTransRoadEntry_DoNotUse, 
    std::string, ::deployer::TransNodeMultiInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VarResourceInfo_VarToTransRoadEntry_DoNotUse, 
    std::string, ::deployer::TransNodeMultiInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  VarResourceInfo_VarToTransRoadEntry_DoNotUse();
  explicit VarResourceInfo_VarToTransRoadEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const VarResourceInfo_VarToTransRoadEntry_DoNotUse& other);
  static const VarResourceInfo_VarToTransRoadEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const VarResourceInfo_VarToTransRoadEntry_DoNotUse*>(&_VarResourceInfo_VarToTransRoadEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "deployer.VarResourceInfo.VarToTransRoadEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_var_5fmanager_2eproto);
    return ::descriptor_table_var_5fmanager_2eproto.file_level_metadata[15];
  }

  public:
};

// -------------------------------------------------------------------

class VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    0 > SuperType;
  VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse();
  explicit VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse& other);
  static const VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse*>(&_VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "deployer.VarResourceInfo.VarNamesToChangedGraphIdEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_var_5fmanager_2eproto);
    return ::descriptor_table_var_5fmanager_2eproto.file_level_metadata[16];
  }

  public:
};

// -------------------------------------------------------------------

class VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    0 > SuperType;
  VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse();
  explicit VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse& other);
  static const VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse*>(&_VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "deployer.VarResourceInfo.VarNamesToAllocatedGraphIdEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_var_5fmanager_2eproto);
    return ::descriptor_table_var_5fmanager_2eproto.file_level_metadata[17];
  }

  public:
};

// -------------------------------------------------------------------

class VarResourceInfo_VarBroadCastInfoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VarResourceInfo_VarBroadCastInfoEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::deployer::BroadcastMultiInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VarResourceInfo_VarBroadCastInfoEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::deployer::BroadcastMultiInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  VarResourceInfo_VarBroadCastInfoEntry_DoNotUse();
  explicit VarResourceInfo_VarBroadCastInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const VarResourceInfo_VarBroadCastInfoEntry_DoNotUse& other);
  static const VarResourceInfo_VarBroadCastInfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const VarResourceInfo_VarBroadCastInfoEntry_DoNotUse*>(&_VarResourceInfo_VarBroadCastInfoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_var_5fmanager_2eproto);
    return ::descriptor_table_var_5fmanager_2eproto.file_level_metadata[18];
  }

  public:
};

// -------------------------------------------------------------------

class VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, ::deployer::VarDevAddrMgr,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, ::deployer::VarDevAddrMgr,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse();
  explicit VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse& other);
  static const VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse*>(&_VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_var_5fmanager_2eproto);
    return ::descriptor_table_var_5fmanager_2eproto.file_level_metadata[19];
  }

  public:
};

// -------------------------------------------------------------------

class VarResourceInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:deployer.VarResourceInfo) */ {
 public:
  inline VarResourceInfo() : VarResourceInfo(nullptr) {}
  virtual ~VarResourceInfo();

  VarResourceInfo(const VarResourceInfo& from);
  VarResourceInfo(VarResourceInfo&& from) noexcept
    : VarResourceInfo() {
    *this = ::std::move(from);
  }

  inline VarResourceInfo& operator=(const VarResourceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VarResourceInfo& operator=(VarResourceInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VarResourceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VarResourceInfo* internal_default_instance() {
    return reinterpret_cast<const VarResourceInfo*>(
               &_VarResourceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(VarResourceInfo& a, VarResourceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VarResourceInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VarResourceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VarResourceInfo* New() const final {
    return CreateMaybeMessage<VarResourceInfo>(nullptr);
  }

  VarResourceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VarResourceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VarResourceInfo& from);
  void MergeFrom(const VarResourceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VarResourceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "deployer.VarResourceInfo";
  }
  protected:
  explicit VarResourceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_var_5fmanager_2eproto);
    return ::descriptor_table_var_5fmanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kVarOffsetMapFieldNumber = 1,
    kVarAddrMgrMapFieldNumber = 2,
    kCurVarTensorDescMapFieldNumber = 3,
    kVarToTransRoadFieldNumber = 4,
    kVarNamesToChangedGraphIdFieldNumber = 5,
    kVarNamesToAllocatedGraphIdFieldNumber = 6,
    kVarBroadCastInfoFieldNumber = 7,
    kVarDevAddrMgrMapFieldNumber = 8,
  };
  // map<uint64, uint32> var_offset_map = 1;
  int var_offset_map_size() const;
  private:
  int _internal_var_offset_map_size() const;
  public:
  void clear_var_offset_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_var_offset_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_var_offset_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      var_offset_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_var_offset_map();

  // map<string, .deployer.VarAddrMgrInfo> var_addr_mgr_map = 2;
  int var_addr_mgr_map_size() const;
  private:
  int _internal_var_addr_mgr_map_size() const;
  public:
  void clear_var_addr_mgr_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::VarAddrMgrInfo >&
      _internal_var_addr_mgr_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::VarAddrMgrInfo >*
      _internal_mutable_var_addr_mgr_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::VarAddrMgrInfo >&
      var_addr_mgr_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::VarAddrMgrInfo >*
      mutable_var_addr_mgr_map();

  // map<string, .ge.proto.TensorDescriptor> cur_var_tensor_desc_map = 3;
  int cur_var_tensor_desc_map_size() const;
  private:
  int _internal_cur_var_tensor_desc_map_size() const;
  public:
  void clear_cur_var_tensor_desc_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >&
      _internal_cur_var_tensor_desc_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >*
      _internal_mutable_cur_var_tensor_desc_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >&
      cur_var_tensor_desc_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >*
      mutable_cur_var_tensor_desc_map();

  // map<string, .deployer.TransNodeMultiInfo> var_to_trans_road = 4;
  int var_to_trans_road_size() const;
  private:
  int _internal_var_to_trans_road_size() const;
  public:
  void clear_var_to_trans_road();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::TransNodeMultiInfo >&
      _internal_var_to_trans_road() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::TransNodeMultiInfo >*
      _internal_mutable_var_to_trans_road();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::TransNodeMultiInfo >&
      var_to_trans_road() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::TransNodeMultiInfo >*
      mutable_var_to_trans_road();

  // map<string, uint32> var_names_to_changed_graph_id = 5;
  int var_names_to_changed_graph_id_size() const;
  private:
  int _internal_var_names_to_changed_graph_id_size() const;
  public:
  void clear_var_names_to_changed_graph_id();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_var_names_to_changed_graph_id() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_var_names_to_changed_graph_id();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      var_names_to_changed_graph_id() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_var_names_to_changed_graph_id();

  // map<string, uint32> var_names_to_allocated_graph_id = 6;
  int var_names_to_allocated_graph_id_size() const;
  private:
  int _internal_var_names_to_allocated_graph_id_size() const;
  public:
  void clear_var_names_to_allocated_graph_id();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_var_names_to_allocated_graph_id() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_var_names_to_allocated_graph_id();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      var_names_to_allocated_graph_id() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_var_names_to_allocated_graph_id();

  // map<uint32, .deployer.BroadcastMultiInfo> var_broad_cast_info = 7;
  int var_broad_cast_info_size() const;
  private:
  int _internal_var_broad_cast_info_size() const;
  public:
  void clear_var_broad_cast_info();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::deployer::BroadcastMultiInfo >&
      _internal_var_broad_cast_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::deployer::BroadcastMultiInfo >*
      _internal_mutable_var_broad_cast_info();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::deployer::BroadcastMultiInfo >&
      var_broad_cast_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::deployer::BroadcastMultiInfo >*
      mutable_var_broad_cast_info();

  // map<uint64, .deployer.VarDevAddrMgr> var_dev_addr_mgr_map = 8;
  int var_dev_addr_mgr_map_size() const;
  private:
  int _internal_var_dev_addr_mgr_map_size() const;
  public:
  void clear_var_dev_addr_mgr_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::deployer::VarDevAddrMgr >&
      _internal_var_dev_addr_mgr_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::deployer::VarDevAddrMgr >*
      _internal_mutable_var_dev_addr_mgr_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::deployer::VarDevAddrMgr >&
      var_dev_addr_mgr_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::deployer::VarDevAddrMgr >*
      mutable_var_dev_addr_mgr_map();

  // @@protoc_insertion_point(class_scope:deployer.VarResourceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      VarResourceInfo_VarOffsetMapEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      0 > var_offset_map_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      VarResourceInfo_VarAddrMgrMapEntry_DoNotUse,
      std::string, ::deployer::VarAddrMgrInfo,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > var_addr_mgr_map_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      VarResourceInfo_CurVarTensorDescMapEntry_DoNotUse,
      std::string, ::ge::proto::TensorDescriptor,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > cur_var_tensor_desc_map_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      VarResourceInfo_VarToTransRoadEntry_DoNotUse,
      std::string, ::deployer::TransNodeMultiInfo,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > var_to_trans_road_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      VarResourceInfo_VarNamesToChangedGraphIdEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      0 > var_names_to_changed_graph_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      VarResourceInfo_VarNamesToAllocatedGraphIdEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      0 > var_names_to_allocated_graph_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      VarResourceInfo_VarBroadCastInfoEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::deployer::BroadcastMultiInfo,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > var_broad_cast_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      VarResourceInfo_VarDevAddrMgrMapEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint64, ::deployer::VarDevAddrMgr,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > var_dev_addr_mgr_map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_var_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class MemResourceInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:deployer.MemResourceInfo) */ {
 public:
  inline MemResourceInfo() : MemResourceInfo(nullptr) {}
  virtual ~MemResourceInfo();

  MemResourceInfo(const MemResourceInfo& from);
  MemResourceInfo(MemResourceInfo&& from) noexcept
    : MemResourceInfo() {
    *this = ::std::move(from);
  }

  inline MemResourceInfo& operator=(const MemResourceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemResourceInfo& operator=(MemResourceInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemResourceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemResourceInfo* internal_default_instance() {
    return reinterpret_cast<const MemResourceInfo*>(
               &_MemResourceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(MemResourceInfo& a, MemResourceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MemResourceInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemResourceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemResourceInfo* New() const final {
    return CreateMaybeMessage<MemResourceInfo>(nullptr);
  }

  MemResourceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemResourceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemResourceInfo& from);
  void MergeFrom(const MemResourceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemResourceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "deployer.MemResourceInfo";
  }
  protected:
  explicit MemResourceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_var_5fmanager_2eproto);
    return ::descriptor_table_var_5fmanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalSizeFieldNumber = 1,
    kVarMemSizeFieldNumber = 2,
  };
  // uint64 total_size = 1;
  void clear_total_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 total_size() const;
  void set_total_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total_size() const;
  void _internal_set_total_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 var_mem_size = 2;
  void clear_var_mem_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 var_mem_size() const;
  void set_var_mem_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_var_mem_size() const;
  void _internal_set_var_mem_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:deployer.MemResourceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 var_mem_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_var_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class VarManagerInfo_MemResourceMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VarManagerInfo_MemResourceMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::deployer::MemResourceInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VarManagerInfo_MemResourceMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::deployer::MemResourceInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  VarManagerInfo_MemResourceMapEntry_DoNotUse();
  explicit VarManagerInfo_MemResourceMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const VarManagerInfo_MemResourceMapEntry_DoNotUse& other);
  static const VarManagerInfo_MemResourceMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const VarManagerInfo_MemResourceMapEntry_DoNotUse*>(&_VarManagerInfo_MemResourceMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_var_5fmanager_2eproto);
    return ::descriptor_table_var_5fmanager_2eproto.file_level_metadata[22];
  }

  public:
};

// -------------------------------------------------------------------

class VarManagerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:deployer.VarManagerInfo) */ {
 public:
  inline VarManagerInfo() : VarManagerInfo(nullptr) {}
  virtual ~VarManagerInfo();

  VarManagerInfo(const VarManagerInfo& from);
  VarManagerInfo(VarManagerInfo&& from) noexcept
    : VarManagerInfo() {
    *this = ::std::move(from);
  }

  inline VarManagerInfo& operator=(const VarManagerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VarManagerInfo& operator=(VarManagerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VarManagerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VarManagerInfo* internal_default_instance() {
    return reinterpret_cast<const VarManagerInfo*>(
               &_VarManagerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(VarManagerInfo& a, VarManagerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VarManagerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VarManagerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VarManagerInfo* New() const final {
    return CreateMaybeMessage<VarManagerInfo>(nullptr);
  }

  VarManagerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VarManagerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VarManagerInfo& from);
  void MergeFrom(const VarManagerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VarManagerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "deployer.VarManagerInfo";
  }
  protected:
  explicit VarManagerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_var_5fmanager_2eproto);
    return ::descriptor_table_var_5fmanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMemResourceMapFieldNumber = 10,
    kVarResourceFieldNumber = 9,
    kSessionIdFieldNumber = 2,
    kVersionFieldNumber = 1,
    kDeviceIdFieldNumber = 3,
    kJobIdFieldNumber = 4,
    kGraphMemMaxSizeFieldNumber = 5,
    kVarMemMaxSizeFieldNumber = 6,
    kVarMemLogicBaseFieldNumber = 7,
    kUseMaxMemSizeFieldNumber = 8,
    kVarMemAutoMallocFieldNumber = 11,
  };
  // map<uint32, .deployer.MemResourceInfo> mem_resource_map = 10;
  int mem_resource_map_size() const;
  private:
  int _internal_mem_resource_map_size() const;
  public:
  void clear_mem_resource_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::deployer::MemResourceInfo >&
      _internal_mem_resource_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::deployer::MemResourceInfo >*
      _internal_mutable_mem_resource_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::deployer::MemResourceInfo >&
      mem_resource_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::deployer::MemResourceInfo >*
      mutable_mem_resource_map();

  // .deployer.VarResourceInfo var_resource = 9;
  bool has_var_resource() const;
  private:
  bool _internal_has_var_resource() const;
  public:
  void clear_var_resource();
  const ::deployer::VarResourceInfo& var_resource() const;
  ::deployer::VarResourceInfo* release_var_resource();
  ::deployer::VarResourceInfo* mutable_var_resource();
  void set_allocated_var_resource(::deployer::VarResourceInfo* var_resource);
  private:
  const ::deployer::VarResourceInfo& _internal_var_resource() const;
  ::deployer::VarResourceInfo* _internal_mutable_var_resource();
  public:
  void unsafe_arena_set_allocated_var_resource(
      ::deployer::VarResourceInfo* var_resource);
  ::deployer::VarResourceInfo* unsafe_arena_release_var_resource();

  // uint64 session_id = 2;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 device_id = 3;
  void clear_device_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 device_id() const;
  void set_device_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_device_id() const;
  void _internal_set_device_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 job_id = 4;
  void clear_job_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 job_id() const;
  void set_job_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_job_id() const;
  void _internal_set_job_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 graph_mem_max_size = 5;
  void clear_graph_mem_max_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 graph_mem_max_size() const;
  void set_graph_mem_max_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_graph_mem_max_size() const;
  void _internal_set_graph_mem_max_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 var_mem_max_size = 6;
  void clear_var_mem_max_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 var_mem_max_size() const;
  void set_var_mem_max_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_var_mem_max_size() const;
  void _internal_set_var_mem_max_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 var_mem_logic_base = 7;
  void clear_var_mem_logic_base();
  ::PROTOBUF_NAMESPACE_ID::uint64 var_mem_logic_base() const;
  void set_var_mem_logic_base(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_var_mem_logic_base() const;
  void _internal_set_var_mem_logic_base(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 use_max_mem_size = 8;
  void clear_use_max_mem_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 use_max_mem_size() const;
  void set_use_max_mem_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_use_max_mem_size() const;
  void _internal_set_use_max_mem_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool var_mem_auto_malloc = 11;
  void clear_var_mem_auto_malloc();
  bool var_mem_auto_malloc() const;
  void set_var_mem_auto_malloc(bool value);
  private:
  bool _internal_var_mem_auto_malloc() const;
  void _internal_set_var_mem_auto_malloc(bool value);
  public:

  // @@protoc_insertion_point(class_scope:deployer.VarManagerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      VarManagerInfo_MemResourceMapEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::deployer::MemResourceInfo,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > mem_resource_map_;
  ::deployer::VarResourceInfo* var_resource_;
  ::PROTOBUF_NAMESPACE_ID::uint64 session_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 device_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 job_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 graph_mem_max_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 var_mem_max_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 var_mem_logic_base_;
  ::PROTOBUF_NAMESPACE_ID::uint64 use_max_mem_size_;
  bool var_mem_auto_malloc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_var_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class MultiVarManagerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:deployer.MultiVarManagerInfo) */ {
 public:
  inline MultiVarManagerInfo() : MultiVarManagerInfo(nullptr) {}
  virtual ~MultiVarManagerInfo();

  MultiVarManagerInfo(const MultiVarManagerInfo& from);
  MultiVarManagerInfo(MultiVarManagerInfo&& from) noexcept
    : MultiVarManagerInfo() {
    *this = ::std::move(from);
  }

  inline MultiVarManagerInfo& operator=(const MultiVarManagerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiVarManagerInfo& operator=(MultiVarManagerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiVarManagerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiVarManagerInfo* internal_default_instance() {
    return reinterpret_cast<const MultiVarManagerInfo*>(
               &_MultiVarManagerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(MultiVarManagerInfo& a, MultiVarManagerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiVarManagerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiVarManagerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiVarManagerInfo* New() const final {
    return CreateMaybeMessage<MultiVarManagerInfo>(nullptr);
  }

  MultiVarManagerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiVarManagerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiVarManagerInfo& from);
  void MergeFrom(const MultiVarManagerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiVarManagerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "deployer.MultiVarManagerInfo";
  }
  protected:
  explicit MultiVarManagerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_var_5fmanager_2eproto);
    return ::descriptor_table_var_5fmanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarManagerInfoFieldNumber = 1,
  };
  // repeated .deployer.VarManagerInfo var_manager_info = 1;
  int var_manager_info_size() const;
  private:
  int _internal_var_manager_info_size() const;
  public:
  void clear_var_manager_info();
  ::deployer::VarManagerInfo* mutable_var_manager_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::deployer::VarManagerInfo >*
      mutable_var_manager_info();
  private:
  const ::deployer::VarManagerInfo& _internal_var_manager_info(int index) const;
  ::deployer::VarManagerInfo* _internal_add_var_manager_info();
  public:
  const ::deployer::VarManagerInfo& var_manager_info(int index) const;
  ::deployer::VarManagerInfo* add_var_manager_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::deployer::VarManagerInfo >&
      var_manager_info() const;

  // @@protoc_insertion_point(class_scope:deployer.MultiVarManagerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::deployer::VarManagerInfo > var_manager_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_var_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class SharedContentDescription PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:deployer.SharedContentDescription) */ {
 public:
  inline SharedContentDescription() : SharedContentDescription(nullptr) {}
  virtual ~SharedContentDescription();

  SharedContentDescription(const SharedContentDescription& from);
  SharedContentDescription(SharedContentDescription&& from) noexcept
    : SharedContentDescription() {
    *this = ::std::move(from);
  }

  inline SharedContentDescription& operator=(const SharedContentDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharedContentDescription& operator=(SharedContentDescription&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SharedContentDescription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SharedContentDescription* internal_default_instance() {
    return reinterpret_cast<const SharedContentDescription*>(
               &_SharedContentDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SharedContentDescription& a, SharedContentDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(SharedContentDescription* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharedContentDescription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SharedContentDescription* New() const final {
    return CreateMaybeMessage<SharedContentDescription>(nullptr);
  }

  SharedContentDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SharedContentDescription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SharedContentDescription& from);
  void MergeFrom(const SharedContentDescription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SharedContentDescription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "deployer.SharedContentDescription";
  }
  protected:
  explicit SharedContentDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_var_5fmanager_2eproto);
    return ::descriptor_table_var_5fmanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeNameFieldNumber = 2,
    kOmContentFieldNumber = 8,
    kTensorDescFieldNumber = 7,
    kSessionIdFieldNumber = 1,
    kHeadOffsetFieldNumber = 3,
    kTotalLengthFieldNumber = 4,
    kCurrentOffsetFieldNumber = 5,
    kMemTypeFieldNumber = 6,
  };
  // string node_name = 2;
  void clear_node_name();
  const std::string& node_name() const;
  void set_node_name(const std::string& value);
  void set_node_name(std::string&& value);
  void set_node_name(const char* value);
  void set_node_name(const char* value, size_t size);
  std::string* mutable_node_name();
  std::string* release_node_name();
  void set_allocated_node_name(std::string* node_name);
  private:
  const std::string& _internal_node_name() const;
  void _internal_set_node_name(const std::string& value);
  std::string* _internal_mutable_node_name();
  public:

  // bytes om_content = 8;
  void clear_om_content();
  const std::string& om_content() const;
  void set_om_content(const std::string& value);
  void set_om_content(std::string&& value);
  void set_om_content(const char* value);
  void set_om_content(const void* value, size_t size);
  std::string* mutable_om_content();
  std::string* release_om_content();
  void set_allocated_om_content(std::string* om_content);
  private:
  const std::string& _internal_om_content() const;
  void _internal_set_om_content(const std::string& value);
  std::string* _internal_mutable_om_content();
  public:

  // .ge.proto.TensorDescriptor tensor_desc = 7;
  bool has_tensor_desc() const;
  private:
  bool _internal_has_tensor_desc() const;
  public:
  void clear_tensor_desc();
  const ::ge::proto::TensorDescriptor& tensor_desc() const;
  ::ge::proto::TensorDescriptor* release_tensor_desc();
  ::ge::proto::TensorDescriptor* mutable_tensor_desc();
  void set_allocated_tensor_desc(::ge::proto::TensorDescriptor* tensor_desc);
  private:
  const ::ge::proto::TensorDescriptor& _internal_tensor_desc() const;
  ::ge::proto::TensorDescriptor* _internal_mutable_tensor_desc();
  public:
  void unsafe_arena_set_allocated_tensor_desc(
      ::ge::proto::TensorDescriptor* tensor_desc);
  ::ge::proto::TensorDescriptor* unsafe_arena_release_tensor_desc();

  // uint64 session_id = 1;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 head_offset = 3;
  void clear_head_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 head_offset() const;
  void set_head_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_head_offset() const;
  void _internal_set_head_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 total_length = 4;
  void clear_total_length();
  ::PROTOBUF_NAMESPACE_ID::uint64 total_length() const;
  void set_total_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total_length() const;
  void _internal_set_total_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 current_offset = 5;
  void clear_current_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 current_offset() const;
  void set_current_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_current_offset() const;
  void _internal_set_current_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 mem_type = 6;
  void clear_mem_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 mem_type() const;
  void set_mem_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mem_type() const;
  void _internal_set_mem_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:deployer.SharedContentDescription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr om_content_;
  ::ge::proto::TensorDescriptor* tensor_desc_;
  ::PROTOBUF_NAMESPACE_ID::uint64 session_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 head_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_length_;
  ::PROTOBUF_NAMESPACE_ID::uint64 current_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mem_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_var_5fmanager_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VarAddrMgrInfo

// .ge.proto.TensorDescriptor desc = 1;
inline bool VarAddrMgrInfo::_internal_has_desc() const {
  return this != internal_default_instance() && desc_ != nullptr;
}
inline bool VarAddrMgrInfo::has_desc() const {
  return _internal_has_desc();
}
inline const ::ge::proto::TensorDescriptor& VarAddrMgrInfo::_internal_desc() const {
  const ::ge::proto::TensorDescriptor* p = desc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ge::proto::TensorDescriptor*>(
      &::ge::proto::_TensorDescriptor_default_instance_);
}
inline const ::ge::proto::TensorDescriptor& VarAddrMgrInfo::desc() const {
  // @@protoc_insertion_point(field_get:deployer.VarAddrMgrInfo.desc)
  return _internal_desc();
}
inline void VarAddrMgrInfo::unsafe_arena_set_allocated_desc(
    ::ge::proto::TensorDescriptor* desc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(desc_);
  }
  desc_ = desc;
  if (desc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:deployer.VarAddrMgrInfo.desc)
}
inline ::ge::proto::TensorDescriptor* VarAddrMgrInfo::release_desc() {
  
  ::ge::proto::TensorDescriptor* temp = desc_;
  desc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ge::proto::TensorDescriptor* VarAddrMgrInfo::unsafe_arena_release_desc() {
  // @@protoc_insertion_point(field_release:deployer.VarAddrMgrInfo.desc)
  
  ::ge::proto::TensorDescriptor* temp = desc_;
  desc_ = nullptr;
  return temp;
}
inline ::ge::proto::TensorDescriptor* VarAddrMgrInfo::_internal_mutable_desc() {
  
  if (desc_ == nullptr) {
    auto* p = CreateMaybeMessage<::ge::proto::TensorDescriptor>(GetArena());
    desc_ = p;
  }
  return desc_;
}
inline ::ge::proto::TensorDescriptor* VarAddrMgrInfo::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:deployer.VarAddrMgrInfo.desc)
  return _internal_mutable_desc();
}
inline void VarAddrMgrInfo::set_allocated_desc(::ge::proto::TensorDescriptor* desc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(desc_);
  }
  if (desc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(desc)->GetArena();
    if (message_arena != submessage_arena) {
      desc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, desc, submessage_arena);
    }
    
  } else {
    
  }
  desc_ = desc;
  // @@protoc_insertion_point(field_set_allocated:deployer.VarAddrMgrInfo.desc)
}

// uint64 address = 2;
inline void VarAddrMgrInfo::clear_address() {
  address_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VarAddrMgrInfo::_internal_address() const {
  return address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VarAddrMgrInfo::address() const {
  // @@protoc_insertion_point(field_get:deployer.VarAddrMgrInfo.address)
  return _internal_address();
}
inline void VarAddrMgrInfo::_internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  address_ = value;
}
inline void VarAddrMgrInfo::set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:deployer.VarAddrMgrInfo.address)
}

// uint64 offset = 3;
inline void VarAddrMgrInfo::clear_offset() {
  offset_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VarAddrMgrInfo::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VarAddrMgrInfo::offset() const {
  // @@protoc_insertion_point(field_get:deployer.VarAddrMgrInfo.offset)
  return _internal_offset();
}
inline void VarAddrMgrInfo::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  offset_ = value;
}
inline void VarAddrMgrInfo::set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:deployer.VarAddrMgrInfo.offset)
}

// uint64 memory_type = 4;
inline void VarAddrMgrInfo::clear_memory_type() {
  memory_type_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VarAddrMgrInfo::_internal_memory_type() const {
  return memory_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VarAddrMgrInfo::memory_type() const {
  // @@protoc_insertion_point(field_get:deployer.VarAddrMgrInfo.memory_type)
  return _internal_memory_type();
}
inline void VarAddrMgrInfo::_internal_set_memory_type(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  memory_type_ = value;
}
inline void VarAddrMgrInfo::set_memory_type(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_memory_type(value);
  // @@protoc_insertion_point(field_set:deployer.VarAddrMgrInfo.memory_type)
}

// -------------------------------------------------------------------

// VarDevAddrMgr

// .ge.proto.TensorDescriptor desc = 1;
inline bool VarDevAddrMgr::_internal_has_desc() const {
  return this != internal_default_instance() && desc_ != nullptr;
}
inline bool VarDevAddrMgr::has_desc() const {
  return _internal_has_desc();
}
inline const ::ge::proto::TensorDescriptor& VarDevAddrMgr::_internal_desc() const {
  const ::ge::proto::TensorDescriptor* p = desc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ge::proto::TensorDescriptor*>(
      &::ge::proto::_TensorDescriptor_default_instance_);
}
inline const ::ge::proto::TensorDescriptor& VarDevAddrMgr::desc() const {
  // @@protoc_insertion_point(field_get:deployer.VarDevAddrMgr.desc)
  return _internal_desc();
}
inline void VarDevAddrMgr::unsafe_arena_set_allocated_desc(
    ::ge::proto::TensorDescriptor* desc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(desc_);
  }
  desc_ = desc;
  if (desc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:deployer.VarDevAddrMgr.desc)
}
inline ::ge::proto::TensorDescriptor* VarDevAddrMgr::release_desc() {
  
  ::ge::proto::TensorDescriptor* temp = desc_;
  desc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ge::proto::TensorDescriptor* VarDevAddrMgr::unsafe_arena_release_desc() {
  // @@protoc_insertion_point(field_release:deployer.VarDevAddrMgr.desc)
  
  ::ge::proto::TensorDescriptor* temp = desc_;
  desc_ = nullptr;
  return temp;
}
inline ::ge::proto::TensorDescriptor* VarDevAddrMgr::_internal_mutable_desc() {
  
  if (desc_ == nullptr) {
    auto* p = CreateMaybeMessage<::ge::proto::TensorDescriptor>(GetArena());
    desc_ = p;
  }
  return desc_;
}
inline ::ge::proto::TensorDescriptor* VarDevAddrMgr::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:deployer.VarDevAddrMgr.desc)
  return _internal_mutable_desc();
}
inline void VarDevAddrMgr::set_allocated_desc(::ge::proto::TensorDescriptor* desc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(desc_);
  }
  if (desc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(desc)->GetArena();
    if (message_arena != submessage_arena) {
      desc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, desc, submessage_arena);
    }
    
  } else {
    
  }
  desc_ = desc;
  // @@protoc_insertion_point(field_set_allocated:deployer.VarDevAddrMgr.desc)
}

// uint64 address = 2;
inline void VarDevAddrMgr::clear_address() {
  address_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VarDevAddrMgr::_internal_address() const {
  return address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VarDevAddrMgr::address() const {
  // @@protoc_insertion_point(field_get:deployer.VarDevAddrMgr.address)
  return _internal_address();
}
inline void VarDevAddrMgr::_internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  address_ = value;
}
inline void VarDevAddrMgr::set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:deployer.VarDevAddrMgr.address)
}

// uint64 dev_addr = 3;
inline void VarDevAddrMgr::clear_dev_addr() {
  dev_addr_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VarDevAddrMgr::_internal_dev_addr() const {
  return dev_addr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VarDevAddrMgr::dev_addr() const {
  // @@protoc_insertion_point(field_get:deployer.VarDevAddrMgr.dev_addr)
  return _internal_dev_addr();
}
inline void VarDevAddrMgr::_internal_set_dev_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  dev_addr_ = value;
}
inline void VarDevAddrMgr::set_dev_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_dev_addr(value);
  // @@protoc_insertion_point(field_set:deployer.VarDevAddrMgr.dev_addr)
}

// -------------------------------------------------------------------

// SingleTransNodeInfo

// string node_type = 1;
inline void SingleTransNodeInfo::clear_node_type() {
  node_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SingleTransNodeInfo::node_type() const {
  // @@protoc_insertion_point(field_get:deployer.SingleTransNodeInfo.node_type)
  return _internal_node_type();
}
inline void SingleTransNodeInfo::set_node_type(const std::string& value) {
  _internal_set_node_type(value);
  // @@protoc_insertion_point(field_set:deployer.SingleTransNodeInfo.node_type)
}
inline std::string* SingleTransNodeInfo::mutable_node_type() {
  // @@protoc_insertion_point(field_mutable:deployer.SingleTransNodeInfo.node_type)
  return _internal_mutable_node_type();
}
inline const std::string& SingleTransNodeInfo::_internal_node_type() const {
  return node_type_.Get();
}
inline void SingleTransNodeInfo::_internal_set_node_type(const std::string& value) {
  
  node_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SingleTransNodeInfo::set_node_type(std::string&& value) {
  
  node_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:deployer.SingleTransNodeInfo.node_type)
}
inline void SingleTransNodeInfo::set_node_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:deployer.SingleTransNodeInfo.node_type)
}
inline void SingleTransNodeInfo::set_node_type(const char* value,
    size_t size) {
  
  node_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:deployer.SingleTransNodeInfo.node_type)
}
inline std::string* SingleTransNodeInfo::_internal_mutable_node_type() {
  
  return node_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SingleTransNodeInfo::release_node_type() {
  // @@protoc_insertion_point(field_release:deployer.SingleTransNodeInfo.node_type)
  return node_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SingleTransNodeInfo::set_allocated_node_type(std::string* node_type) {
  if (node_type != nullptr) {
    
  } else {
    
  }
  node_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:deployer.SingleTransNodeInfo.node_type)
}

// .ge.proto.TensorDescriptor input = 2;
inline bool SingleTransNodeInfo::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool SingleTransNodeInfo::has_input() const {
  return _internal_has_input();
}
inline const ::ge::proto::TensorDescriptor& SingleTransNodeInfo::_internal_input() const {
  const ::ge::proto::TensorDescriptor* p = input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ge::proto::TensorDescriptor*>(
      &::ge::proto::_TensorDescriptor_default_instance_);
}
inline const ::ge::proto::TensorDescriptor& SingleTransNodeInfo::input() const {
  // @@protoc_insertion_point(field_get:deployer.SingleTransNodeInfo.input)
  return _internal_input();
}
inline void SingleTransNodeInfo::unsafe_arena_set_allocated_input(
    ::ge::proto::TensorDescriptor* input) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:deployer.SingleTransNodeInfo.input)
}
inline ::ge::proto::TensorDescriptor* SingleTransNodeInfo::release_input() {
  
  ::ge::proto::TensorDescriptor* temp = input_;
  input_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ge::proto::TensorDescriptor* SingleTransNodeInfo::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:deployer.SingleTransNodeInfo.input)
  
  ::ge::proto::TensorDescriptor* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::ge::proto::TensorDescriptor* SingleTransNodeInfo::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::ge::proto::TensorDescriptor>(GetArena());
    input_ = p;
  }
  return input_;
}
inline ::ge::proto::TensorDescriptor* SingleTransNodeInfo::mutable_input() {
  // @@protoc_insertion_point(field_mutable:deployer.SingleTransNodeInfo.input)
  return _internal_mutable_input();
}
inline void SingleTransNodeInfo::set_allocated_input(::ge::proto::TensorDescriptor* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input)->GetArena();
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:deployer.SingleTransNodeInfo.input)
}

// .ge.proto.TensorDescriptor output = 3;
inline bool SingleTransNodeInfo::_internal_has_output() const {
  return this != internal_default_instance() && output_ != nullptr;
}
inline bool SingleTransNodeInfo::has_output() const {
  return _internal_has_output();
}
inline const ::ge::proto::TensorDescriptor& SingleTransNodeInfo::_internal_output() const {
  const ::ge::proto::TensorDescriptor* p = output_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ge::proto::TensorDescriptor*>(
      &::ge::proto::_TensorDescriptor_default_instance_);
}
inline const ::ge::proto::TensorDescriptor& SingleTransNodeInfo::output() const {
  // @@protoc_insertion_point(field_get:deployer.SingleTransNodeInfo.output)
  return _internal_output();
}
inline void SingleTransNodeInfo::unsafe_arena_set_allocated_output(
    ::ge::proto::TensorDescriptor* output) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_);
  }
  output_ = output;
  if (output) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:deployer.SingleTransNodeInfo.output)
}
inline ::ge::proto::TensorDescriptor* SingleTransNodeInfo::release_output() {
  
  ::ge::proto::TensorDescriptor* temp = output_;
  output_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ge::proto::TensorDescriptor* SingleTransNodeInfo::unsafe_arena_release_output() {
  // @@protoc_insertion_point(field_release:deployer.SingleTransNodeInfo.output)
  
  ::ge::proto::TensorDescriptor* temp = output_;
  output_ = nullptr;
  return temp;
}
inline ::ge::proto::TensorDescriptor* SingleTransNodeInfo::_internal_mutable_output() {
  
  if (output_ == nullptr) {
    auto* p = CreateMaybeMessage<::ge::proto::TensorDescriptor>(GetArena());
    output_ = p;
  }
  return output_;
}
inline ::ge::proto::TensorDescriptor* SingleTransNodeInfo::mutable_output() {
  // @@protoc_insertion_point(field_mutable:deployer.SingleTransNodeInfo.output)
  return _internal_mutable_output();
}
inline void SingleTransNodeInfo::set_allocated_output(::ge::proto::TensorDescriptor* output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_);
  }
  if (output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output)->GetArena();
    if (message_arena != submessage_arena) {
      output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output, submessage_arena);
    }
    
  } else {
    
  }
  output_ = output;
  // @@protoc_insertion_point(field_set_allocated:deployer.SingleTransNodeInfo.output)
}

// -------------------------------------------------------------------

// TransNodeMultiInfo

// repeated .deployer.SingleTransNodeInfo node_info = 1;
inline int TransNodeMultiInfo::_internal_node_info_size() const {
  return node_info_.size();
}
inline int TransNodeMultiInfo::node_info_size() const {
  return _internal_node_info_size();
}
inline void TransNodeMultiInfo::clear_node_info() {
  node_info_.Clear();
}
inline ::deployer::SingleTransNodeInfo* TransNodeMultiInfo::mutable_node_info(int index) {
  // @@protoc_insertion_point(field_mutable:deployer.TransNodeMultiInfo.node_info)
  return node_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::deployer::SingleTransNodeInfo >*
TransNodeMultiInfo::mutable_node_info() {
  // @@protoc_insertion_point(field_mutable_list:deployer.TransNodeMultiInfo.node_info)
  return &node_info_;
}
inline const ::deployer::SingleTransNodeInfo& TransNodeMultiInfo::_internal_node_info(int index) const {
  return node_info_.Get(index);
}
inline const ::deployer::SingleTransNodeInfo& TransNodeMultiInfo::node_info(int index) const {
  // @@protoc_insertion_point(field_get:deployer.TransNodeMultiInfo.node_info)
  return _internal_node_info(index);
}
inline ::deployer::SingleTransNodeInfo* TransNodeMultiInfo::_internal_add_node_info() {
  return node_info_.Add();
}
inline ::deployer::SingleTransNodeInfo* TransNodeMultiInfo::add_node_info() {
  // @@protoc_insertion_point(field_add:deployer.TransNodeMultiInfo.node_info)
  return _internal_add_node_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::deployer::SingleTransNodeInfo >&
TransNodeMultiInfo::node_info() const {
  // @@protoc_insertion_point(field_list:deployer.TransNodeMultiInfo.node_info)
  return node_info_;
}

// -------------------------------------------------------------------

// BroadcastInfo

// string var_name = 1;
inline void BroadcastInfo::clear_var_name() {
  var_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BroadcastInfo::var_name() const {
  // @@protoc_insertion_point(field_get:deployer.BroadcastInfo.var_name)
  return _internal_var_name();
}
inline void BroadcastInfo::set_var_name(const std::string& value) {
  _internal_set_var_name(value);
  // @@protoc_insertion_point(field_set:deployer.BroadcastInfo.var_name)
}
inline std::string* BroadcastInfo::mutable_var_name() {
  // @@protoc_insertion_point(field_mutable:deployer.BroadcastInfo.var_name)
  return _internal_mutable_var_name();
}
inline const std::string& BroadcastInfo::_internal_var_name() const {
  return var_name_.Get();
}
inline void BroadcastInfo::_internal_set_var_name(const std::string& value) {
  
  var_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BroadcastInfo::set_var_name(std::string&& value) {
  
  var_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:deployer.BroadcastInfo.var_name)
}
inline void BroadcastInfo::set_var_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  var_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:deployer.BroadcastInfo.var_name)
}
inline void BroadcastInfo::set_var_name(const char* value,
    size_t size) {
  
  var_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:deployer.BroadcastInfo.var_name)
}
inline std::string* BroadcastInfo::_internal_mutable_var_name() {
  
  return var_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BroadcastInfo::release_var_name() {
  // @@protoc_insertion_point(field_release:deployer.BroadcastInfo.var_name)
  return var_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BroadcastInfo::set_allocated_var_name(std::string* var_name) {
  if (var_name != nullptr) {
    
  } else {
    
  }
  var_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:deployer.BroadcastInfo.var_name)
}

// string broadcast_name = 2;
inline void BroadcastInfo::clear_broadcast_name() {
  broadcast_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BroadcastInfo::broadcast_name() const {
  // @@protoc_insertion_point(field_get:deployer.BroadcastInfo.broadcast_name)
  return _internal_broadcast_name();
}
inline void BroadcastInfo::set_broadcast_name(const std::string& value) {
  _internal_set_broadcast_name(value);
  // @@protoc_insertion_point(field_set:deployer.BroadcastInfo.broadcast_name)
}
inline std::string* BroadcastInfo::mutable_broadcast_name() {
  // @@protoc_insertion_point(field_mutable:deployer.BroadcastInfo.broadcast_name)
  return _internal_mutable_broadcast_name();
}
inline const std::string& BroadcastInfo::_internal_broadcast_name() const {
  return broadcast_name_.Get();
}
inline void BroadcastInfo::_internal_set_broadcast_name(const std::string& value) {
  
  broadcast_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BroadcastInfo::set_broadcast_name(std::string&& value) {
  
  broadcast_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:deployer.BroadcastInfo.broadcast_name)
}
inline void BroadcastInfo::set_broadcast_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  broadcast_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:deployer.BroadcastInfo.broadcast_name)
}
inline void BroadcastInfo::set_broadcast_name(const char* value,
    size_t size) {
  
  broadcast_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:deployer.BroadcastInfo.broadcast_name)
}
inline std::string* BroadcastInfo::_internal_mutable_broadcast_name() {
  
  return broadcast_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BroadcastInfo::release_broadcast_name() {
  // @@protoc_insertion_point(field_release:deployer.BroadcastInfo.broadcast_name)
  return broadcast_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BroadcastInfo::set_allocated_broadcast_name(std::string* broadcast_name) {
  if (broadcast_name != nullptr) {
    
  } else {
    
  }
  broadcast_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), broadcast_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:deployer.BroadcastInfo.broadcast_name)
}

// int32 idx = 3;
inline void BroadcastInfo::clear_idx() {
  idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BroadcastInfo::_internal_idx() const {
  return idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BroadcastInfo::idx() const {
  // @@protoc_insertion_point(field_get:deployer.BroadcastInfo.idx)
  return _internal_idx();
}
inline void BroadcastInfo::_internal_set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  idx_ = value;
}
inline void BroadcastInfo::set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:deployer.BroadcastInfo.idx)
}

// int64 input_offset = 4;
inline void BroadcastInfo::clear_input_offset() {
  input_offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BroadcastInfo::_internal_input_offset() const {
  return input_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BroadcastInfo::input_offset() const {
  // @@protoc_insertion_point(field_get:deployer.BroadcastInfo.input_offset)
  return _internal_input_offset();
}
inline void BroadcastInfo::_internal_set_input_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  input_offset_ = value;
}
inline void BroadcastInfo::set_input_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_input_offset(value);
  // @@protoc_insertion_point(field_set:deployer.BroadcastInfo.input_offset)
}

// uint64 input_size = 5;
inline void BroadcastInfo::clear_input_size() {
  input_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BroadcastInfo::_internal_input_size() const {
  return input_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BroadcastInfo::input_size() const {
  // @@protoc_insertion_point(field_get:deployer.BroadcastInfo.input_size)
  return _internal_input_size();
}
inline void BroadcastInfo::_internal_set_input_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  input_size_ = value;
}
inline void BroadcastInfo::set_input_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_input_size(value);
  // @@protoc_insertion_point(field_set:deployer.BroadcastInfo.input_size)
}

// int64 output_offset = 6;
inline void BroadcastInfo::clear_output_offset() {
  output_offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BroadcastInfo::_internal_output_offset() const {
  return output_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BroadcastInfo::output_offset() const {
  // @@protoc_insertion_point(field_get:deployer.BroadcastInfo.output_offset)
  return _internal_output_offset();
}
inline void BroadcastInfo::_internal_set_output_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  output_offset_ = value;
}
inline void BroadcastInfo::set_output_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_output_offset(value);
  // @@protoc_insertion_point(field_set:deployer.BroadcastInfo.output_offset)
}

// uint64 output_size = 7;
inline void BroadcastInfo::clear_output_size() {
  output_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BroadcastInfo::_internal_output_size() const {
  return output_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BroadcastInfo::output_size() const {
  // @@protoc_insertion_point(field_get:deployer.BroadcastInfo.output_size)
  return _internal_output_size();
}
inline void BroadcastInfo::_internal_set_output_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  output_size_ = value;
}
inline void BroadcastInfo::set_output_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_output_size(value);
  // @@protoc_insertion_point(field_set:deployer.BroadcastInfo.output_size)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BroadcastMultiInfo

// map<string, .deployer.BroadcastInfo> broadcast_info = 1;
inline int BroadcastMultiInfo::_internal_broadcast_info_size() const {
  return broadcast_info_.size();
}
inline int BroadcastMultiInfo::broadcast_info_size() const {
  return _internal_broadcast_info_size();
}
inline void BroadcastMultiInfo::clear_broadcast_info() {
  broadcast_info_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::BroadcastInfo >&
BroadcastMultiInfo::_internal_broadcast_info() const {
  return broadcast_info_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::BroadcastInfo >&
BroadcastMultiInfo::broadcast_info() const {
  // @@protoc_insertion_point(field_map:deployer.BroadcastMultiInfo.broadcast_info)
  return _internal_broadcast_info();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::BroadcastInfo >*
BroadcastMultiInfo::_internal_mutable_broadcast_info() {
  return broadcast_info_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::BroadcastInfo >*
BroadcastMultiInfo::mutable_broadcast_info() {
  // @@protoc_insertion_point(field_mutable_map:deployer.BroadcastMultiInfo.broadcast_info)
  return _internal_mutable_broadcast_info();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// VarDescInfo

// map<string, .ge.proto.TensorDescriptor> cur_var_tensor_desc_map = 1;
inline int VarDescInfo::_internal_cur_var_tensor_desc_map_size() const {
  return cur_var_tensor_desc_map_.size();
}
inline int VarDescInfo::cur_var_tensor_desc_map_size() const {
  return _internal_cur_var_tensor_desc_map_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >&
VarDescInfo::_internal_cur_var_tensor_desc_map() const {
  return cur_var_tensor_desc_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >&
VarDescInfo::cur_var_tensor_desc_map() const {
  // @@protoc_insertion_point(field_map:deployer.VarDescInfo.cur_var_tensor_desc_map)
  return _internal_cur_var_tensor_desc_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >*
VarDescInfo::_internal_mutable_cur_var_tensor_desc_map() {
  return cur_var_tensor_desc_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >*
VarDescInfo::mutable_cur_var_tensor_desc_map() {
  // @@protoc_insertion_point(field_mutable_map:deployer.VarDescInfo.cur_var_tensor_desc_map)
  return _internal_mutable_cur_var_tensor_desc_map();
}

// map<string, .deployer.TransNodeMultiInfo> var_to_trans_road = 2;
inline int VarDescInfo::_internal_var_to_trans_road_size() const {
  return var_to_trans_road_.size();
}
inline int VarDescInfo::var_to_trans_road_size() const {
  return _internal_var_to_trans_road_size();
}
inline void VarDescInfo::clear_var_to_trans_road() {
  var_to_trans_road_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::TransNodeMultiInfo >&
VarDescInfo::_internal_var_to_trans_road() const {
  return var_to_trans_road_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::TransNodeMultiInfo >&
VarDescInfo::var_to_trans_road() const {
  // @@protoc_insertion_point(field_map:deployer.VarDescInfo.var_to_trans_road)
  return _internal_var_to_trans_road();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::TransNodeMultiInfo >*
VarDescInfo::_internal_mutable_var_to_trans_road() {
  return var_to_trans_road_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::TransNodeMultiInfo >*
VarDescInfo::mutable_var_to_trans_road() {
  // @@protoc_insertion_point(field_mutable_map:deployer.VarDescInfo.var_to_trans_road)
  return _internal_mutable_var_to_trans_road();
}

// repeated string changed_var_names = 3;
inline int VarDescInfo::_internal_changed_var_names_size() const {
  return changed_var_names_.size();
}
inline int VarDescInfo::changed_var_names_size() const {
  return _internal_changed_var_names_size();
}
inline void VarDescInfo::clear_changed_var_names() {
  changed_var_names_.Clear();
}
inline std::string* VarDescInfo::add_changed_var_names() {
  // @@protoc_insertion_point(field_add_mutable:deployer.VarDescInfo.changed_var_names)
  return _internal_add_changed_var_names();
}
inline const std::string& VarDescInfo::_internal_changed_var_names(int index) const {
  return changed_var_names_.Get(index);
}
inline const std::string& VarDescInfo::changed_var_names(int index) const {
  // @@protoc_insertion_point(field_get:deployer.VarDescInfo.changed_var_names)
  return _internal_changed_var_names(index);
}
inline std::string* VarDescInfo::mutable_changed_var_names(int index) {
  // @@protoc_insertion_point(field_mutable:deployer.VarDescInfo.changed_var_names)
  return changed_var_names_.Mutable(index);
}
inline void VarDescInfo::set_changed_var_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:deployer.VarDescInfo.changed_var_names)
  changed_var_names_.Mutable(index)->assign(value);
}
inline void VarDescInfo::set_changed_var_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:deployer.VarDescInfo.changed_var_names)
  changed_var_names_.Mutable(index)->assign(std::move(value));
}
inline void VarDescInfo::set_changed_var_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  changed_var_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:deployer.VarDescInfo.changed_var_names)
}
inline void VarDescInfo::set_changed_var_names(int index, const char* value, size_t size) {
  changed_var_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:deployer.VarDescInfo.changed_var_names)
}
inline std::string* VarDescInfo::_internal_add_changed_var_names() {
  return changed_var_names_.Add();
}
inline void VarDescInfo::add_changed_var_names(const std::string& value) {
  changed_var_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:deployer.VarDescInfo.changed_var_names)
}
inline void VarDescInfo::add_changed_var_names(std::string&& value) {
  changed_var_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:deployer.VarDescInfo.changed_var_names)
}
inline void VarDescInfo::add_changed_var_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  changed_var_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:deployer.VarDescInfo.changed_var_names)
}
inline void VarDescInfo::add_changed_var_names(const char* value, size_t size) {
  changed_var_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:deployer.VarDescInfo.changed_var_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VarDescInfo::changed_var_names() const {
  // @@protoc_insertion_point(field_list:deployer.VarDescInfo.changed_var_names)
  return changed_var_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VarDescInfo::mutable_changed_var_names() {
  // @@protoc_insertion_point(field_mutable_list:deployer.VarDescInfo.changed_var_names)
  return &changed_var_names_;
}

// map<string, .ge.proto.TensorDescriptor> staged_var_tensor_desc_map = 4;
inline int VarDescInfo::_internal_staged_var_tensor_desc_map_size() const {
  return staged_var_tensor_desc_map_.size();
}
inline int VarDescInfo::staged_var_tensor_desc_map_size() const {
  return _internal_staged_var_tensor_desc_map_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >&
VarDescInfo::_internal_staged_var_tensor_desc_map() const {
  return staged_var_tensor_desc_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >&
VarDescInfo::staged_var_tensor_desc_map() const {
  // @@protoc_insertion_point(field_map:deployer.VarDescInfo.staged_var_tensor_desc_map)
  return _internal_staged_var_tensor_desc_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >*
VarDescInfo::_internal_mutable_staged_var_tensor_desc_map() {
  return staged_var_tensor_desc_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >*
VarDescInfo::mutable_staged_var_tensor_desc_map() {
  // @@protoc_insertion_point(field_mutable_map:deployer.VarDescInfo.staged_var_tensor_desc_map)
  return _internal_mutable_staged_var_tensor_desc_map();
}

// -------------------------------------------------------------------

// VarMatchInfo

// .deployer.VarDescInfo desc_info_before_compile = 1;
inline bool VarMatchInfo::_internal_has_desc_info_before_compile() const {
  return this != internal_default_instance() && desc_info_before_compile_ != nullptr;
}
inline bool VarMatchInfo::has_desc_info_before_compile() const {
  return _internal_has_desc_info_before_compile();
}
inline void VarMatchInfo::clear_desc_info_before_compile() {
  if (GetArena() == nullptr && desc_info_before_compile_ != nullptr) {
    delete desc_info_before_compile_;
  }
  desc_info_before_compile_ = nullptr;
}
inline const ::deployer::VarDescInfo& VarMatchInfo::_internal_desc_info_before_compile() const {
  const ::deployer::VarDescInfo* p = desc_info_before_compile_;
  return p != nullptr ? *p : *reinterpret_cast<const ::deployer::VarDescInfo*>(
      &::deployer::_VarDescInfo_default_instance_);
}
inline const ::deployer::VarDescInfo& VarMatchInfo::desc_info_before_compile() const {
  // @@protoc_insertion_point(field_get:deployer.VarMatchInfo.desc_info_before_compile)
  return _internal_desc_info_before_compile();
}
inline void VarMatchInfo::unsafe_arena_set_allocated_desc_info_before_compile(
    ::deployer::VarDescInfo* desc_info_before_compile) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(desc_info_before_compile_);
  }
  desc_info_before_compile_ = desc_info_before_compile;
  if (desc_info_before_compile) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:deployer.VarMatchInfo.desc_info_before_compile)
}
inline ::deployer::VarDescInfo* VarMatchInfo::release_desc_info_before_compile() {
  
  ::deployer::VarDescInfo* temp = desc_info_before_compile_;
  desc_info_before_compile_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::deployer::VarDescInfo* VarMatchInfo::unsafe_arena_release_desc_info_before_compile() {
  // @@protoc_insertion_point(field_release:deployer.VarMatchInfo.desc_info_before_compile)
  
  ::deployer::VarDescInfo* temp = desc_info_before_compile_;
  desc_info_before_compile_ = nullptr;
  return temp;
}
inline ::deployer::VarDescInfo* VarMatchInfo::_internal_mutable_desc_info_before_compile() {
  
  if (desc_info_before_compile_ == nullptr) {
    auto* p = CreateMaybeMessage<::deployer::VarDescInfo>(GetArena());
    desc_info_before_compile_ = p;
  }
  return desc_info_before_compile_;
}
inline ::deployer::VarDescInfo* VarMatchInfo::mutable_desc_info_before_compile() {
  // @@protoc_insertion_point(field_mutable:deployer.VarMatchInfo.desc_info_before_compile)
  return _internal_mutable_desc_info_before_compile();
}
inline void VarMatchInfo::set_allocated_desc_info_before_compile(::deployer::VarDescInfo* desc_info_before_compile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete desc_info_before_compile_;
  }
  if (desc_info_before_compile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(desc_info_before_compile);
    if (message_arena != submessage_arena) {
      desc_info_before_compile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, desc_info_before_compile, submessage_arena);
    }
    
  } else {
    
  }
  desc_info_before_compile_ = desc_info_before_compile;
  // @@protoc_insertion_point(field_set_allocated:deployer.VarMatchInfo.desc_info_before_compile)
}

// .deployer.VarDescInfo desc_info_after_compile = 2;
inline bool VarMatchInfo::_internal_has_desc_info_after_compile() const {
  return this != internal_default_instance() && desc_info_after_compile_ != nullptr;
}
inline bool VarMatchInfo::has_desc_info_after_compile() const {
  return _internal_has_desc_info_after_compile();
}
inline void VarMatchInfo::clear_desc_info_after_compile() {
  if (GetArena() == nullptr && desc_info_after_compile_ != nullptr) {
    delete desc_info_after_compile_;
  }
  desc_info_after_compile_ = nullptr;
}
inline const ::deployer::VarDescInfo& VarMatchInfo::_internal_desc_info_after_compile() const {
  const ::deployer::VarDescInfo* p = desc_info_after_compile_;
  return p != nullptr ? *p : *reinterpret_cast<const ::deployer::VarDescInfo*>(
      &::deployer::_VarDescInfo_default_instance_);
}
inline const ::deployer::VarDescInfo& VarMatchInfo::desc_info_after_compile() const {
  // @@protoc_insertion_point(field_get:deployer.VarMatchInfo.desc_info_after_compile)
  return _internal_desc_info_after_compile();
}
inline void VarMatchInfo::unsafe_arena_set_allocated_desc_info_after_compile(
    ::deployer::VarDescInfo* desc_info_after_compile) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(desc_info_after_compile_);
  }
  desc_info_after_compile_ = desc_info_after_compile;
  if (desc_info_after_compile) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:deployer.VarMatchInfo.desc_info_after_compile)
}
inline ::deployer::VarDescInfo* VarMatchInfo::release_desc_info_after_compile() {
  
  ::deployer::VarDescInfo* temp = desc_info_after_compile_;
  desc_info_after_compile_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::deployer::VarDescInfo* VarMatchInfo::unsafe_arena_release_desc_info_after_compile() {
  // @@protoc_insertion_point(field_release:deployer.VarMatchInfo.desc_info_after_compile)
  
  ::deployer::VarDescInfo* temp = desc_info_after_compile_;
  desc_info_after_compile_ = nullptr;
  return temp;
}
inline ::deployer::VarDescInfo* VarMatchInfo::_internal_mutable_desc_info_after_compile() {
  
  if (desc_info_after_compile_ == nullptr) {
    auto* p = CreateMaybeMessage<::deployer::VarDescInfo>(GetArena());
    desc_info_after_compile_ = p;
  }
  return desc_info_after_compile_;
}
inline ::deployer::VarDescInfo* VarMatchInfo::mutable_desc_info_after_compile() {
  // @@protoc_insertion_point(field_mutable:deployer.VarMatchInfo.desc_info_after_compile)
  return _internal_mutable_desc_info_after_compile();
}
inline void VarMatchInfo::set_allocated_desc_info_after_compile(::deployer::VarDescInfo* desc_info_after_compile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete desc_info_after_compile_;
  }
  if (desc_info_after_compile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(desc_info_after_compile);
    if (message_arena != submessage_arena) {
      desc_info_after_compile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, desc_info_after_compile, submessage_arena);
    }
    
  } else {
    
  }
  desc_info_after_compile_ = desc_info_after_compile;
  // @@protoc_insertion_point(field_set_allocated:deployer.VarMatchInfo.desc_info_after_compile)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// VarResourceInfo

// map<uint64, uint32> var_offset_map = 1;
inline int VarResourceInfo::_internal_var_offset_map_size() const {
  return var_offset_map_.size();
}
inline int VarResourceInfo::var_offset_map_size() const {
  return _internal_var_offset_map_size();
}
inline void VarResourceInfo::clear_var_offset_map() {
  var_offset_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >&
VarResourceInfo::_internal_var_offset_map() const {
  return var_offset_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >&
VarResourceInfo::var_offset_map() const {
  // @@protoc_insertion_point(field_map:deployer.VarResourceInfo.var_offset_map)
  return _internal_var_offset_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >*
VarResourceInfo::_internal_mutable_var_offset_map() {
  return var_offset_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >*
VarResourceInfo::mutable_var_offset_map() {
  // @@protoc_insertion_point(field_mutable_map:deployer.VarResourceInfo.var_offset_map)
  return _internal_mutable_var_offset_map();
}

// map<string, .deployer.VarAddrMgrInfo> var_addr_mgr_map = 2;
inline int VarResourceInfo::_internal_var_addr_mgr_map_size() const {
  return var_addr_mgr_map_.size();
}
inline int VarResourceInfo::var_addr_mgr_map_size() const {
  return _internal_var_addr_mgr_map_size();
}
inline void VarResourceInfo::clear_var_addr_mgr_map() {
  var_addr_mgr_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::VarAddrMgrInfo >&
VarResourceInfo::_internal_var_addr_mgr_map() const {
  return var_addr_mgr_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::VarAddrMgrInfo >&
VarResourceInfo::var_addr_mgr_map() const {
  // @@protoc_insertion_point(field_map:deployer.VarResourceInfo.var_addr_mgr_map)
  return _internal_var_addr_mgr_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::VarAddrMgrInfo >*
VarResourceInfo::_internal_mutable_var_addr_mgr_map() {
  return var_addr_mgr_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::VarAddrMgrInfo >*
VarResourceInfo::mutable_var_addr_mgr_map() {
  // @@protoc_insertion_point(field_mutable_map:deployer.VarResourceInfo.var_addr_mgr_map)
  return _internal_mutable_var_addr_mgr_map();
}

// map<string, .ge.proto.TensorDescriptor> cur_var_tensor_desc_map = 3;
inline int VarResourceInfo::_internal_cur_var_tensor_desc_map_size() const {
  return cur_var_tensor_desc_map_.size();
}
inline int VarResourceInfo::cur_var_tensor_desc_map_size() const {
  return _internal_cur_var_tensor_desc_map_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >&
VarResourceInfo::_internal_cur_var_tensor_desc_map() const {
  return cur_var_tensor_desc_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >&
VarResourceInfo::cur_var_tensor_desc_map() const {
  // @@protoc_insertion_point(field_map:deployer.VarResourceInfo.cur_var_tensor_desc_map)
  return _internal_cur_var_tensor_desc_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >*
VarResourceInfo::_internal_mutable_cur_var_tensor_desc_map() {
  return cur_var_tensor_desc_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::TensorDescriptor >*
VarResourceInfo::mutable_cur_var_tensor_desc_map() {
  // @@protoc_insertion_point(field_mutable_map:deployer.VarResourceInfo.cur_var_tensor_desc_map)
  return _internal_mutable_cur_var_tensor_desc_map();
}

// map<string, .deployer.TransNodeMultiInfo> var_to_trans_road = 4;
inline int VarResourceInfo::_internal_var_to_trans_road_size() const {
  return var_to_trans_road_.size();
}
inline int VarResourceInfo::var_to_trans_road_size() const {
  return _internal_var_to_trans_road_size();
}
inline void VarResourceInfo::clear_var_to_trans_road() {
  var_to_trans_road_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::TransNodeMultiInfo >&
VarResourceInfo::_internal_var_to_trans_road() const {
  return var_to_trans_road_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::TransNodeMultiInfo >&
VarResourceInfo::var_to_trans_road() const {
  // @@protoc_insertion_point(field_map:deployer.VarResourceInfo.var_to_trans_road)
  return _internal_var_to_trans_road();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::TransNodeMultiInfo >*
VarResourceInfo::_internal_mutable_var_to_trans_road() {
  return var_to_trans_road_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::deployer::TransNodeMultiInfo >*
VarResourceInfo::mutable_var_to_trans_road() {
  // @@protoc_insertion_point(field_mutable_map:deployer.VarResourceInfo.var_to_trans_road)
  return _internal_mutable_var_to_trans_road();
}

// map<string, uint32> var_names_to_changed_graph_id = 5;
inline int VarResourceInfo::_internal_var_names_to_changed_graph_id_size() const {
  return var_names_to_changed_graph_id_.size();
}
inline int VarResourceInfo::var_names_to_changed_graph_id_size() const {
  return _internal_var_names_to_changed_graph_id_size();
}
inline void VarResourceInfo::clear_var_names_to_changed_graph_id() {
  var_names_to_changed_graph_id_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
VarResourceInfo::_internal_var_names_to_changed_graph_id() const {
  return var_names_to_changed_graph_id_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
VarResourceInfo::var_names_to_changed_graph_id() const {
  // @@protoc_insertion_point(field_map:deployer.VarResourceInfo.var_names_to_changed_graph_id)
  return _internal_var_names_to_changed_graph_id();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
VarResourceInfo::_internal_mutable_var_names_to_changed_graph_id() {
  return var_names_to_changed_graph_id_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
VarResourceInfo::mutable_var_names_to_changed_graph_id() {
  // @@protoc_insertion_point(field_mutable_map:deployer.VarResourceInfo.var_names_to_changed_graph_id)
  return _internal_mutable_var_names_to_changed_graph_id();
}

// map<string, uint32> var_names_to_allocated_graph_id = 6;
inline int VarResourceInfo::_internal_var_names_to_allocated_graph_id_size() const {
  return var_names_to_allocated_graph_id_.size();
}
inline int VarResourceInfo::var_names_to_allocated_graph_id_size() const {
  return _internal_var_names_to_allocated_graph_id_size();
}
inline void VarResourceInfo::clear_var_names_to_allocated_graph_id() {
  var_names_to_allocated_graph_id_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
VarResourceInfo::_internal_var_names_to_allocated_graph_id() const {
  return var_names_to_allocated_graph_id_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
VarResourceInfo::var_names_to_allocated_graph_id() const {
  // @@protoc_insertion_point(field_map:deployer.VarResourceInfo.var_names_to_allocated_graph_id)
  return _internal_var_names_to_allocated_graph_id();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
VarResourceInfo::_internal_mutable_var_names_to_allocated_graph_id() {
  return var_names_to_allocated_graph_id_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
VarResourceInfo::mutable_var_names_to_allocated_graph_id() {
  // @@protoc_insertion_point(field_mutable_map:deployer.VarResourceInfo.var_names_to_allocated_graph_id)
  return _internal_mutable_var_names_to_allocated_graph_id();
}

// map<uint32, .deployer.BroadcastMultiInfo> var_broad_cast_info = 7;
inline int VarResourceInfo::_internal_var_broad_cast_info_size() const {
  return var_broad_cast_info_.size();
}
inline int VarResourceInfo::var_broad_cast_info_size() const {
  return _internal_var_broad_cast_info_size();
}
inline void VarResourceInfo::clear_var_broad_cast_info() {
  var_broad_cast_info_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::deployer::BroadcastMultiInfo >&
VarResourceInfo::_internal_var_broad_cast_info() const {
  return var_broad_cast_info_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::deployer::BroadcastMultiInfo >&
VarResourceInfo::var_broad_cast_info() const {
  // @@protoc_insertion_point(field_map:deployer.VarResourceInfo.var_broad_cast_info)
  return _internal_var_broad_cast_info();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::deployer::BroadcastMultiInfo >*
VarResourceInfo::_internal_mutable_var_broad_cast_info() {
  return var_broad_cast_info_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::deployer::BroadcastMultiInfo >*
VarResourceInfo::mutable_var_broad_cast_info() {
  // @@protoc_insertion_point(field_mutable_map:deployer.VarResourceInfo.var_broad_cast_info)
  return _internal_mutable_var_broad_cast_info();
}

// map<uint64, .deployer.VarDevAddrMgr> var_dev_addr_mgr_map = 8;
inline int VarResourceInfo::_internal_var_dev_addr_mgr_map_size() const {
  return var_dev_addr_mgr_map_.size();
}
inline int VarResourceInfo::var_dev_addr_mgr_map_size() const {
  return _internal_var_dev_addr_mgr_map_size();
}
inline void VarResourceInfo::clear_var_dev_addr_mgr_map() {
  var_dev_addr_mgr_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::deployer::VarDevAddrMgr >&
VarResourceInfo::_internal_var_dev_addr_mgr_map() const {
  return var_dev_addr_mgr_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::deployer::VarDevAddrMgr >&
VarResourceInfo::var_dev_addr_mgr_map() const {
  // @@protoc_insertion_point(field_map:deployer.VarResourceInfo.var_dev_addr_mgr_map)
  return _internal_var_dev_addr_mgr_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::deployer::VarDevAddrMgr >*
VarResourceInfo::_internal_mutable_var_dev_addr_mgr_map() {
  return var_dev_addr_mgr_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::deployer::VarDevAddrMgr >*
VarResourceInfo::mutable_var_dev_addr_mgr_map() {
  // @@protoc_insertion_point(field_mutable_map:deployer.VarResourceInfo.var_dev_addr_mgr_map)
  return _internal_mutable_var_dev_addr_mgr_map();
}

// -------------------------------------------------------------------

// MemResourceInfo

// uint64 total_size = 1;
inline void MemResourceInfo::clear_total_size() {
  total_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemResourceInfo::_internal_total_size() const {
  return total_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemResourceInfo::total_size() const {
  // @@protoc_insertion_point(field_get:deployer.MemResourceInfo.total_size)
  return _internal_total_size();
}
inline void MemResourceInfo::_internal_set_total_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  total_size_ = value;
}
inline void MemResourceInfo::set_total_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total_size(value);
  // @@protoc_insertion_point(field_set:deployer.MemResourceInfo.total_size)
}

// uint64 var_mem_size = 2;
inline void MemResourceInfo::clear_var_mem_size() {
  var_mem_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemResourceInfo::_internal_var_mem_size() const {
  return var_mem_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemResourceInfo::var_mem_size() const {
  // @@protoc_insertion_point(field_get:deployer.MemResourceInfo.var_mem_size)
  return _internal_var_mem_size();
}
inline void MemResourceInfo::_internal_set_var_mem_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  var_mem_size_ = value;
}
inline void MemResourceInfo::set_var_mem_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_var_mem_size(value);
  // @@protoc_insertion_point(field_set:deployer.MemResourceInfo.var_mem_size)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// VarManagerInfo

// uint32 version = 1;
inline void VarManagerInfo::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VarManagerInfo::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VarManagerInfo::version() const {
  // @@protoc_insertion_point(field_get:deployer.VarManagerInfo.version)
  return _internal_version();
}
inline void VarManagerInfo::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void VarManagerInfo::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:deployer.VarManagerInfo.version)
}

// uint64 session_id = 2;
inline void VarManagerInfo::clear_session_id() {
  session_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VarManagerInfo::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VarManagerInfo::session_id() const {
  // @@protoc_insertion_point(field_get:deployer.VarManagerInfo.session_id)
  return _internal_session_id();
}
inline void VarManagerInfo::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  session_id_ = value;
}
inline void VarManagerInfo::set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:deployer.VarManagerInfo.session_id)
}

// uint32 device_id = 3;
inline void VarManagerInfo::clear_device_id() {
  device_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VarManagerInfo::_internal_device_id() const {
  return device_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VarManagerInfo::device_id() const {
  // @@protoc_insertion_point(field_get:deployer.VarManagerInfo.device_id)
  return _internal_device_id();
}
inline void VarManagerInfo::_internal_set_device_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  device_id_ = value;
}
inline void VarManagerInfo::set_device_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:deployer.VarManagerInfo.device_id)
}

// uint64 job_id = 4;
inline void VarManagerInfo::clear_job_id() {
  job_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VarManagerInfo::_internal_job_id() const {
  return job_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VarManagerInfo::job_id() const {
  // @@protoc_insertion_point(field_get:deployer.VarManagerInfo.job_id)
  return _internal_job_id();
}
inline void VarManagerInfo::_internal_set_job_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  job_id_ = value;
}
inline void VarManagerInfo::set_job_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_job_id(value);
  // @@protoc_insertion_point(field_set:deployer.VarManagerInfo.job_id)
}

// uint64 graph_mem_max_size = 5;
inline void VarManagerInfo::clear_graph_mem_max_size() {
  graph_mem_max_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VarManagerInfo::_internal_graph_mem_max_size() const {
  return graph_mem_max_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VarManagerInfo::graph_mem_max_size() const {
  // @@protoc_insertion_point(field_get:deployer.VarManagerInfo.graph_mem_max_size)
  return _internal_graph_mem_max_size();
}
inline void VarManagerInfo::_internal_set_graph_mem_max_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  graph_mem_max_size_ = value;
}
inline void VarManagerInfo::set_graph_mem_max_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_graph_mem_max_size(value);
  // @@protoc_insertion_point(field_set:deployer.VarManagerInfo.graph_mem_max_size)
}

// uint64 var_mem_max_size = 6;
inline void VarManagerInfo::clear_var_mem_max_size() {
  var_mem_max_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VarManagerInfo::_internal_var_mem_max_size() const {
  return var_mem_max_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VarManagerInfo::var_mem_max_size() const {
  // @@protoc_insertion_point(field_get:deployer.VarManagerInfo.var_mem_max_size)
  return _internal_var_mem_max_size();
}
inline void VarManagerInfo::_internal_set_var_mem_max_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  var_mem_max_size_ = value;
}
inline void VarManagerInfo::set_var_mem_max_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_var_mem_max_size(value);
  // @@protoc_insertion_point(field_set:deployer.VarManagerInfo.var_mem_max_size)
}

// uint64 var_mem_logic_base = 7;
inline void VarManagerInfo::clear_var_mem_logic_base() {
  var_mem_logic_base_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VarManagerInfo::_internal_var_mem_logic_base() const {
  return var_mem_logic_base_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VarManagerInfo::var_mem_logic_base() const {
  // @@protoc_insertion_point(field_get:deployer.VarManagerInfo.var_mem_logic_base)
  return _internal_var_mem_logic_base();
}
inline void VarManagerInfo::_internal_set_var_mem_logic_base(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  var_mem_logic_base_ = value;
}
inline void VarManagerInfo::set_var_mem_logic_base(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_var_mem_logic_base(value);
  // @@protoc_insertion_point(field_set:deployer.VarManagerInfo.var_mem_logic_base)
}

// uint64 use_max_mem_size = 8;
inline void VarManagerInfo::clear_use_max_mem_size() {
  use_max_mem_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VarManagerInfo::_internal_use_max_mem_size() const {
  return use_max_mem_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VarManagerInfo::use_max_mem_size() const {
  // @@protoc_insertion_point(field_get:deployer.VarManagerInfo.use_max_mem_size)
  return _internal_use_max_mem_size();
}
inline void VarManagerInfo::_internal_set_use_max_mem_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  use_max_mem_size_ = value;
}
inline void VarManagerInfo::set_use_max_mem_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_use_max_mem_size(value);
  // @@protoc_insertion_point(field_set:deployer.VarManagerInfo.use_max_mem_size)
}

// .deployer.VarResourceInfo var_resource = 9;
inline bool VarManagerInfo::_internal_has_var_resource() const {
  return this != internal_default_instance() && var_resource_ != nullptr;
}
inline bool VarManagerInfo::has_var_resource() const {
  return _internal_has_var_resource();
}
inline void VarManagerInfo::clear_var_resource() {
  if (GetArena() == nullptr && var_resource_ != nullptr) {
    delete var_resource_;
  }
  var_resource_ = nullptr;
}
inline const ::deployer::VarResourceInfo& VarManagerInfo::_internal_var_resource() const {
  const ::deployer::VarResourceInfo* p = var_resource_;
  return p != nullptr ? *p : *reinterpret_cast<const ::deployer::VarResourceInfo*>(
      &::deployer::_VarResourceInfo_default_instance_);
}
inline const ::deployer::VarResourceInfo& VarManagerInfo::var_resource() const {
  // @@protoc_insertion_point(field_get:deployer.VarManagerInfo.var_resource)
  return _internal_var_resource();
}
inline void VarManagerInfo::unsafe_arena_set_allocated_var_resource(
    ::deployer::VarResourceInfo* var_resource) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(var_resource_);
  }
  var_resource_ = var_resource;
  if (var_resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:deployer.VarManagerInfo.var_resource)
}
inline ::deployer::VarResourceInfo* VarManagerInfo::release_var_resource() {
  
  ::deployer::VarResourceInfo* temp = var_resource_;
  var_resource_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::deployer::VarResourceInfo* VarManagerInfo::unsafe_arena_release_var_resource() {
  // @@protoc_insertion_point(field_release:deployer.VarManagerInfo.var_resource)
  
  ::deployer::VarResourceInfo* temp = var_resource_;
  var_resource_ = nullptr;
  return temp;
}
inline ::deployer::VarResourceInfo* VarManagerInfo::_internal_mutable_var_resource() {
  
  if (var_resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::deployer::VarResourceInfo>(GetArena());
    var_resource_ = p;
  }
  return var_resource_;
}
inline ::deployer::VarResourceInfo* VarManagerInfo::mutable_var_resource() {
  // @@protoc_insertion_point(field_mutable:deployer.VarManagerInfo.var_resource)
  return _internal_mutable_var_resource();
}
inline void VarManagerInfo::set_allocated_var_resource(::deployer::VarResourceInfo* var_resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete var_resource_;
  }
  if (var_resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(var_resource);
    if (message_arena != submessage_arena) {
      var_resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, var_resource, submessage_arena);
    }
    
  } else {
    
  }
  var_resource_ = var_resource;
  // @@protoc_insertion_point(field_set_allocated:deployer.VarManagerInfo.var_resource)
}

// map<uint32, .deployer.MemResourceInfo> mem_resource_map = 10;
inline int VarManagerInfo::_internal_mem_resource_map_size() const {
  return mem_resource_map_.size();
}
inline int VarManagerInfo::mem_resource_map_size() const {
  return _internal_mem_resource_map_size();
}
inline void VarManagerInfo::clear_mem_resource_map() {
  mem_resource_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::deployer::MemResourceInfo >&
VarManagerInfo::_internal_mem_resource_map() const {
  return mem_resource_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::deployer::MemResourceInfo >&
VarManagerInfo::mem_resource_map() const {
  // @@protoc_insertion_point(field_map:deployer.VarManagerInfo.mem_resource_map)
  return _internal_mem_resource_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::deployer::MemResourceInfo >*
VarManagerInfo::_internal_mutable_mem_resource_map() {
  return mem_resource_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::deployer::MemResourceInfo >*
VarManagerInfo::mutable_mem_resource_map() {
  // @@protoc_insertion_point(field_mutable_map:deployer.VarManagerInfo.mem_resource_map)
  return _internal_mutable_mem_resource_map();
}

// bool var_mem_auto_malloc = 11;
inline void VarManagerInfo::clear_var_mem_auto_malloc() {
  var_mem_auto_malloc_ = false;
}
inline bool VarManagerInfo::_internal_var_mem_auto_malloc() const {
  return var_mem_auto_malloc_;
}
inline bool VarManagerInfo::var_mem_auto_malloc() const {
  // @@protoc_insertion_point(field_get:deployer.VarManagerInfo.var_mem_auto_malloc)
  return _internal_var_mem_auto_malloc();
}
inline void VarManagerInfo::_internal_set_var_mem_auto_malloc(bool value) {
  
  var_mem_auto_malloc_ = value;
}
inline void VarManagerInfo::set_var_mem_auto_malloc(bool value) {
  _internal_set_var_mem_auto_malloc(value);
  // @@protoc_insertion_point(field_set:deployer.VarManagerInfo.var_mem_auto_malloc)
}

// -------------------------------------------------------------------

// MultiVarManagerInfo

// repeated .deployer.VarManagerInfo var_manager_info = 1;
inline int MultiVarManagerInfo::_internal_var_manager_info_size() const {
  return var_manager_info_.size();
}
inline int MultiVarManagerInfo::var_manager_info_size() const {
  return _internal_var_manager_info_size();
}
inline void MultiVarManagerInfo::clear_var_manager_info() {
  var_manager_info_.Clear();
}
inline ::deployer::VarManagerInfo* MultiVarManagerInfo::mutable_var_manager_info(int index) {
  // @@protoc_insertion_point(field_mutable:deployer.MultiVarManagerInfo.var_manager_info)
  return var_manager_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::deployer::VarManagerInfo >*
MultiVarManagerInfo::mutable_var_manager_info() {
  // @@protoc_insertion_point(field_mutable_list:deployer.MultiVarManagerInfo.var_manager_info)
  return &var_manager_info_;
}
inline const ::deployer::VarManagerInfo& MultiVarManagerInfo::_internal_var_manager_info(int index) const {
  return var_manager_info_.Get(index);
}
inline const ::deployer::VarManagerInfo& MultiVarManagerInfo::var_manager_info(int index) const {
  // @@protoc_insertion_point(field_get:deployer.MultiVarManagerInfo.var_manager_info)
  return _internal_var_manager_info(index);
}
inline ::deployer::VarManagerInfo* MultiVarManagerInfo::_internal_add_var_manager_info() {
  return var_manager_info_.Add();
}
inline ::deployer::VarManagerInfo* MultiVarManagerInfo::add_var_manager_info() {
  // @@protoc_insertion_point(field_add:deployer.MultiVarManagerInfo.var_manager_info)
  return _internal_add_var_manager_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::deployer::VarManagerInfo >&
MultiVarManagerInfo::var_manager_info() const {
  // @@protoc_insertion_point(field_list:deployer.MultiVarManagerInfo.var_manager_info)
  return var_manager_info_;
}

// -------------------------------------------------------------------

// SharedContentDescription

// uint64 session_id = 1;
inline void SharedContentDescription::clear_session_id() {
  session_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SharedContentDescription::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SharedContentDescription::session_id() const {
  // @@protoc_insertion_point(field_get:deployer.SharedContentDescription.session_id)
  return _internal_session_id();
}
inline void SharedContentDescription::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  session_id_ = value;
}
inline void SharedContentDescription::set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:deployer.SharedContentDescription.session_id)
}

// string node_name = 2;
inline void SharedContentDescription::clear_node_name() {
  node_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SharedContentDescription::node_name() const {
  // @@protoc_insertion_point(field_get:deployer.SharedContentDescription.node_name)
  return _internal_node_name();
}
inline void SharedContentDescription::set_node_name(const std::string& value) {
  _internal_set_node_name(value);
  // @@protoc_insertion_point(field_set:deployer.SharedContentDescription.node_name)
}
inline std::string* SharedContentDescription::mutable_node_name() {
  // @@protoc_insertion_point(field_mutable:deployer.SharedContentDescription.node_name)
  return _internal_mutable_node_name();
}
inline const std::string& SharedContentDescription::_internal_node_name() const {
  return node_name_.Get();
}
inline void SharedContentDescription::_internal_set_node_name(const std::string& value) {
  
  node_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SharedContentDescription::set_node_name(std::string&& value) {
  
  node_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:deployer.SharedContentDescription.node_name)
}
inline void SharedContentDescription::set_node_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:deployer.SharedContentDescription.node_name)
}
inline void SharedContentDescription::set_node_name(const char* value,
    size_t size) {
  
  node_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:deployer.SharedContentDescription.node_name)
}
inline std::string* SharedContentDescription::_internal_mutable_node_name() {
  
  return node_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SharedContentDescription::release_node_name() {
  // @@protoc_insertion_point(field_release:deployer.SharedContentDescription.node_name)
  return node_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SharedContentDescription::set_allocated_node_name(std::string* node_name) {
  if (node_name != nullptr) {
    
  } else {
    
  }
  node_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:deployer.SharedContentDescription.node_name)
}

// uint64 head_offset = 3;
inline void SharedContentDescription::clear_head_offset() {
  head_offset_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SharedContentDescription::_internal_head_offset() const {
  return head_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SharedContentDescription::head_offset() const {
  // @@protoc_insertion_point(field_get:deployer.SharedContentDescription.head_offset)
  return _internal_head_offset();
}
inline void SharedContentDescription::_internal_set_head_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  head_offset_ = value;
}
inline void SharedContentDescription::set_head_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_head_offset(value);
  // @@protoc_insertion_point(field_set:deployer.SharedContentDescription.head_offset)
}

// uint64 total_length = 4;
inline void SharedContentDescription::clear_total_length() {
  total_length_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SharedContentDescription::_internal_total_length() const {
  return total_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SharedContentDescription::total_length() const {
  // @@protoc_insertion_point(field_get:deployer.SharedContentDescription.total_length)
  return _internal_total_length();
}
inline void SharedContentDescription::_internal_set_total_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  total_length_ = value;
}
inline void SharedContentDescription::set_total_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total_length(value);
  // @@protoc_insertion_point(field_set:deployer.SharedContentDescription.total_length)
}

// uint64 current_offset = 5;
inline void SharedContentDescription::clear_current_offset() {
  current_offset_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SharedContentDescription::_internal_current_offset() const {
  return current_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SharedContentDescription::current_offset() const {
  // @@protoc_insertion_point(field_get:deployer.SharedContentDescription.current_offset)
  return _internal_current_offset();
}
inline void SharedContentDescription::_internal_set_current_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  current_offset_ = value;
}
inline void SharedContentDescription::set_current_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_current_offset(value);
  // @@protoc_insertion_point(field_set:deployer.SharedContentDescription.current_offset)
}

// uint32 mem_type = 6;
inline void SharedContentDescription::clear_mem_type() {
  mem_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SharedContentDescription::_internal_mem_type() const {
  return mem_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SharedContentDescription::mem_type() const {
  // @@protoc_insertion_point(field_get:deployer.SharedContentDescription.mem_type)
  return _internal_mem_type();
}
inline void SharedContentDescription::_internal_set_mem_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mem_type_ = value;
}
inline void SharedContentDescription::set_mem_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mem_type(value);
  // @@protoc_insertion_point(field_set:deployer.SharedContentDescription.mem_type)
}

// .ge.proto.TensorDescriptor tensor_desc = 7;
inline bool SharedContentDescription::_internal_has_tensor_desc() const {
  return this != internal_default_instance() && tensor_desc_ != nullptr;
}
inline bool SharedContentDescription::has_tensor_desc() const {
  return _internal_has_tensor_desc();
}
inline const ::ge::proto::TensorDescriptor& SharedContentDescription::_internal_tensor_desc() const {
  const ::ge::proto::TensorDescriptor* p = tensor_desc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ge::proto::TensorDescriptor*>(
      &::ge::proto::_TensorDescriptor_default_instance_);
}
inline const ::ge::proto::TensorDescriptor& SharedContentDescription::tensor_desc() const {
  // @@protoc_insertion_point(field_get:deployer.SharedContentDescription.tensor_desc)
  return _internal_tensor_desc();
}
inline void SharedContentDescription::unsafe_arena_set_allocated_tensor_desc(
    ::ge::proto::TensorDescriptor* tensor_desc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tensor_desc_);
  }
  tensor_desc_ = tensor_desc;
  if (tensor_desc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:deployer.SharedContentDescription.tensor_desc)
}
inline ::ge::proto::TensorDescriptor* SharedContentDescription::release_tensor_desc() {
  
  ::ge::proto::TensorDescriptor* temp = tensor_desc_;
  tensor_desc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ge::proto::TensorDescriptor* SharedContentDescription::unsafe_arena_release_tensor_desc() {
  // @@protoc_insertion_point(field_release:deployer.SharedContentDescription.tensor_desc)
  
  ::ge::proto::TensorDescriptor* temp = tensor_desc_;
  tensor_desc_ = nullptr;
  return temp;
}
inline ::ge::proto::TensorDescriptor* SharedContentDescription::_internal_mutable_tensor_desc() {
  
  if (tensor_desc_ == nullptr) {
    auto* p = CreateMaybeMessage<::ge::proto::TensorDescriptor>(GetArena());
    tensor_desc_ = p;
  }
  return tensor_desc_;
}
inline ::ge::proto::TensorDescriptor* SharedContentDescription::mutable_tensor_desc() {
  // @@protoc_insertion_point(field_mutable:deployer.SharedContentDescription.tensor_desc)
  return _internal_mutable_tensor_desc();
}
inline void SharedContentDescription::set_allocated_tensor_desc(::ge::proto::TensorDescriptor* tensor_desc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tensor_desc_);
  }
  if (tensor_desc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tensor_desc)->GetArena();
    if (message_arena != submessage_arena) {
      tensor_desc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tensor_desc, submessage_arena);
    }
    
  } else {
    
  }
  tensor_desc_ = tensor_desc;
  // @@protoc_insertion_point(field_set_allocated:deployer.SharedContentDescription.tensor_desc)
}

// bytes om_content = 8;
inline void SharedContentDescription::clear_om_content() {
  om_content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SharedContentDescription::om_content() const {
  // @@protoc_insertion_point(field_get:deployer.SharedContentDescription.om_content)
  return _internal_om_content();
}
inline void SharedContentDescription::set_om_content(const std::string& value) {
  _internal_set_om_content(value);
  // @@protoc_insertion_point(field_set:deployer.SharedContentDescription.om_content)
}
inline std::string* SharedContentDescription::mutable_om_content() {
  // @@protoc_insertion_point(field_mutable:deployer.SharedContentDescription.om_content)
  return _internal_mutable_om_content();
}
inline const std::string& SharedContentDescription::_internal_om_content() const {
  return om_content_.Get();
}
inline void SharedContentDescription::_internal_set_om_content(const std::string& value) {
  
  om_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SharedContentDescription::set_om_content(std::string&& value) {
  
  om_content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:deployer.SharedContentDescription.om_content)
}
inline void SharedContentDescription::set_om_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  om_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:deployer.SharedContentDescription.om_content)
}
inline void SharedContentDescription::set_om_content(const void* value,
    size_t size) {
  
  om_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:deployer.SharedContentDescription.om_content)
}
inline std::string* SharedContentDescription::_internal_mutable_om_content() {
  
  return om_content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SharedContentDescription::release_om_content() {
  // @@protoc_insertion_point(field_release:deployer.SharedContentDescription.om_content)
  return om_content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SharedContentDescription::set_allocated_om_content(std::string* om_content) {
  if (om_content != nullptr) {
    
  } else {
    
  }
  om_content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), om_content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:deployer.SharedContentDescription.om_content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace deployer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_var_5fmanager_2eproto
